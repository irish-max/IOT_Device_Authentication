
Device_enrollment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000177c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ee4  08017958  08017958  00018958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b83c  0801b83c  0001d0c4  2**0
                  CONTENTS
  4 .ARM          00000008  0801b83c  0801b83c  0001c83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b844  0801b844  0001d0c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b844  0801b844  0001c844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b848  0801b848  0001c848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  0801b84c  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001d0c4  2**0
                  CONTENTS
 10 .bss          00001254  200000c4  200000c4  0001d0c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001318  20001318  0001d0c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001d0c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000197e3  00000000  00000000  0001d0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004fd5  00000000  00000000  000368d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001758  00000000  00000000  0003b8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011ae  00000000  00000000  0003d008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026ba1  00000000  00000000  0003e1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ffae  00000000  00000000  00064d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3e08  00000000  00000000  00084d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00158b0d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006834  00000000  00000000  00158b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0015f384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c4 	.word	0x200000c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017940 	.word	0x08017940

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c8 	.word	0x200000c8
 80001cc:	08017940 	.word	0x08017940

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <mbedtls_pk_ec>:
 *
 * \warning You must make sure the PK context actually holds an EC context
 * before using this function!
 */
static inline mbedtls_ecp_keypair *mbedtls_pk_ec( const mbedtls_pk_context pk )
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	463b      	mov	r3, r7
 8000578:	e883 0003 	stmia.w	r3, {r0, r1}
    return( (mbedtls_ecp_keypair *) (pk).pk_ctx );
 800057c:	687b      	ldr	r3, [r7, #4]
}
 800057e:	4618      	mov	r0, r3
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
	...

0800058c <get_stm32_uid>:
void esp8266_connect_to_wifi(char*,char*,char*,char*);

void esp8266_get_device_info(void);

// Function to get STM32 UID as a string
void get_stm32_uid(char *uid_str, size_t uid_str_len) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af02      	add	r7, sp, #8
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
    uint32_t uid[3];
    uid[0] = STM32_UID_BASE[0];
 8000596:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <get_stm32_uid+0x44>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	60fb      	str	r3, [r7, #12]
    uid[1] = STM32_UID_BASE[1];
 800059c:	4b0d      	ldr	r3, [pc, #52]	@ (80005d4 <get_stm32_uid+0x48>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	613b      	str	r3, [r7, #16]
    uid[2] = STM32_UID_BASE[2];
 80005a2:	4b0d      	ldr	r3, [pc, #52]	@ (80005d8 <get_stm32_uid+0x4c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	617b      	str	r3, [r7, #20]

    // Format UID as a hex string
    //snprintf(uid_str, uid_str_len, "%08X%08X%08X", uid[0], uid[1], uid[2]);
    //snprintf(uid_str, uid_str_len, "  (unsigned long)uid[0], (unsigned long)uid[1], (unsigned long)uid[2]);"
    snprintf(uid_str, uid_str_len, "%lu%lu%lu", (unsigned long)uid[0], (unsigned long)uid[1], (unsigned long)uid[2]);
 80005a8:	68f9      	ldr	r1, [r7, #12]
 80005aa:	693b      	ldr	r3, [r7, #16]
 80005ac:	697a      	ldr	r2, [r7, #20]
 80005ae:	9201      	str	r2, [sp, #4]
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	460b      	mov	r3, r1
 80005b4:	4a09      	ldr	r2, [pc, #36]	@ (80005dc <get_stm32_uid+0x50>)
 80005b6:	6839      	ldr	r1, [r7, #0]
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f016 f9c7 	bl	801694c <sniprintf>
    printf("UID: %s\n",uid_str);
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	4807      	ldr	r0, [pc, #28]	@ (80005e0 <get_stm32_uid+0x54>)
 80005c2:	f016 f953 	bl	801686c <iprintf>


}
 80005c6:	bf00      	nop
 80005c8:	3718      	adds	r7, #24
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	1fff7a10 	.word	0x1fff7a10
 80005d4:	1fff7a14 	.word	0x1fff7a14
 80005d8:	1fff7a18 	.word	0x1fff7a18
 80005dc:	08017958 	.word	0x08017958
 80005e0:	08017964 	.word	0x08017964

080005e4 <flash_certificate>:


//To flash the Device Certificate in flash memory(sector 11 128Kbytes)
int flash_certificate(uint8_t* data, uint32_t size)  //ret = 0,1 or -1.-2 ;
{
 80005e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80005e8:	b09a      	sub	sp, #104	@ 0x68
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
 80005ee:	6039      	str	r1, [r7, #0]
	int ret = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	667b      	str	r3, [r7, #100]	@ 0x64
	char msg_UI[] = "\nCSDS:Certificate Stored in Device Successfully\n" ;
 80005f4:	4b47      	ldr	r3, [pc, #284]	@ (8000714 <flash_certificate+0x130>)
 80005f6:	f107 0420 	add.w	r4, r7, #32
 80005fa:	461d      	mov	r5, r3
 80005fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000608:	682b      	ldr	r3, [r5, #0]
 800060a:	7023      	strb	r3, [r4, #0]
    HAL_FLASH_Unlock();
 800060c:	f001 fbb4 	bl	8001d78 <HAL_FLASH_Unlock>

   // Step 2: Erase the sector where the certificate will be written
     FLASH_EraseInitTypeDef EraseInitStruct;   // To setup the particular sector in flash memory for to write the device certificate!
     uint32_t SectorError = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]

       EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
       EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3; // Voltage range for STM32F4
 8000618:	2302      	movs	r3, #2
 800061a:	61fb      	str	r3, [r7, #28]
       EraseInitStruct.Sector = FLASH_SECTOR_5; // Adjust the sector based on your address
 800061c:	2305      	movs	r3, #5
 800061e:	617b      	str	r3, [r7, #20]
       EraseInitStruct.NbSectors = 1;
 8000620:	2301      	movs	r3, #1
 8000622:	61bb      	str	r3, [r7, #24]

    if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 8000624:	f107 0208 	add.w	r2, r7, #8
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	4611      	mov	r1, r2
 800062e:	4618      	mov	r0, r3
 8000630:	f001 fd04 	bl	800203c <HAL_FLASHEx_Erase>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d006      	beq.n	8000648 <flash_certificate+0x64>
    {
        printf("Error erasing flash memory?  \n");  // comment this line once it is online
 800063a:	4837      	ldr	r0, [pc, #220]	@ (8000718 <flash_certificate+0x134>)
 800063c:	f016 f97e 	bl	801693c <puts>
        ret = -1;
 8000640:	f04f 33ff 	mov.w	r3, #4294967295
 8000644:	667b      	str	r3, [r7, #100]	@ 0x64
 8000646:	e047      	b.n	80006d8 <flash_certificate+0xf4>

    }
    else if(HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) == HAL_OK)
 8000648:	f107 0208 	add.w	r2, r7, #8
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	4611      	mov	r1, r2
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fcf2 	bl	800203c <HAL_FLASHEx_Erase>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d13c      	bne.n	80006d8 <flash_certificate+0xf4>
    {
        int count = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	663b      	str	r3, [r7, #96]	@ 0x60
    	for (uint32_t i = 0; i < size; i += 4)
 8000662:	2300      	movs	r3, #0
 8000664:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000666:	e022      	b.n	80006ae <flash_certificate+0xca>
    	    {
    	        uint32_t data_to_write = *(uint32_t*)(data + i); // why uint32_t ? cuz word size of board is 32byte
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800066c:	4413      	add	r3, r2
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	657b      	str	r3, [r7, #84]	@ 0x54
    	        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, DCERT_FLASH_MEMORY + i, data_to_write) == HAL_OK)
 8000672:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000674:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 8000678:	f501 3100 	add.w	r1, r1, #131072	@ 0x20000
 800067c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800067e:	2200      	movs	r2, #0
 8000680:	4698      	mov	r8, r3
 8000682:	4691      	mov	r9, r2
 8000684:	4642      	mov	r2, r8
 8000686:	464b      	mov	r3, r9
 8000688:	2002      	movs	r0, #2
 800068a:	f001 fb21 	bl	8001cd0 <HAL_FLASH_Program>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d103      	bne.n	800069c <flash_certificate+0xb8>
    	        {
                  count+=1;
 8000694:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000696:	3301      	adds	r3, #1
 8000698:	663b      	str	r3, [r7, #96]	@ 0x60
 800069a:	e005      	b.n	80006a8 <flash_certificate+0xc4>
    	        }
    	        else
    	        {
    	        	printf("Error programming flash memory____\n"); //// comment this line once it is online
 800069c:	481f      	ldr	r0, [pc, #124]	@ (800071c <flash_certificate+0x138>)
 800069e:	f016 f94d 	bl	801693c <puts>
    	        	ret = -2;
 80006a2:	f06f 0301 	mvn.w	r3, #1
 80006a6:	667b      	str	r3, [r7, #100]	@ 0x64
    	for (uint32_t i = 0; i < size; i += 4)
 80006a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80006aa:	3304      	adds	r3, #4
 80006ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80006ae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d3d8      	bcc.n	8000668 <flash_certificate+0x84>
    	        }
    	    }
    	if(HAL_UART_Transmit(&huart4, (uint8_t*)msg_UI, sizeof(msg_UI), HAL_MAX_DELAY) == HAL_OK)
 80006b6:	f107 0120 	add.w	r1, r7, #32
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	2231      	movs	r2, #49	@ 0x31
 80006c0:	4817      	ldr	r0, [pc, #92]	@ (8000720 <flash_certificate+0x13c>)
 80006c2:	f002 fd24 	bl	800310e <HAL_UART_Transmit>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d105      	bne.n	80006d8 <flash_certificate+0xf4>
    	 {
    	   printf("certificate stored status send to UI 4X:%d",count); //// comment this line once it is online
 80006cc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80006ce:	4815      	ldr	r0, [pc, #84]	@ (8000724 <flash_certificate+0x140>)
 80006d0:	f016 f8cc 	bl	801686c <iprintf>
    	   ret = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	667b      	str	r3, [r7, #100]	@ 0x64
    	 }
    }

    HAL_FLASH_Lock();
 80006d8:	f001 fb70 	bl	8001dbc <HAL_FLASH_Lock>
	//Retriveving the Device_certificate from flash memory and sending it to UI through UART
	for (uint32_t i = 0; i < size; i++)
 80006dc:	2300      	movs	r3, #0
 80006de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80006e0:	e00d      	b.n	80006fe <flash_certificate+0x11a>
	    {
		Device_cert_buffer[i] = *(char*)(DCERT_FLASH_MEMORY + i);  // Read byte by byte (character)
 80006e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80006e4:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80006e8:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 80006ec:	7819      	ldrb	r1, [r3, #0]
 80006ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000728 <flash_certificate+0x144>)
 80006f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80006f2:	4413      	add	r3, r2
 80006f4:	460a      	mov	r2, r1
 80006f6:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++)
 80006f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80006fa:	3301      	adds	r3, #1
 80006fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80006fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	429a      	cmp	r2, r3
 8000704:	d3ed      	bcc.n	80006e2 <flash_certificate+0xfe>
	    }
    return ret;
 8000706:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
}
 8000708:	4618      	mov	r0, r3
 800070a:	3768      	adds	r7, #104	@ 0x68
 800070c:	46bd      	mov	sp, r7
 800070e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000712:	bf00      	nop
 8000714:	080179e0 	.word	0x080179e0
 8000718:	08017970 	.word	0x08017970
 800071c:	08017990 	.word	0x08017990
 8000720:	200000f0 	.word	0x200000f0
 8000724:	080179b4 	.word	0x080179b4
 8000728:	20000580 	.word	0x20000580

0800072c <Flash_Write_PrivateKey>:


//Task to write(store) Private key in Flash memory

void Flash_Write_PrivateKey(uint8_t *privateKeyData, uint32_t keySize) {
 800072c:	b5b0      	push	{r4, r5, r7, lr}
 800072e:	b08c      	sub	sp, #48	@ 0x30
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status;

    // Step 1: Unlock the flash memory for writing
    HAL_FLASH_Unlock();
 8000736:	f001 fb1f 	bl	8001d78 <HAL_FLASH_Unlock>

    // Step 2: Erase the sector where the private key will be written
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SectorError = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]

    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;  // Voltage range for STM32F4
 8000742:	2302      	movs	r3, #2
 8000744:	623b      	str	r3, [r7, #32]
    EraseInitStruct.Sector = FLASH_SECTOR_11;              // Sector 11 of flash memory
 8000746:	230b      	movs	r3, #11
 8000748:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800074a:	2301      	movs	r3, #1
 800074c:	61fb      	str	r3, [r7, #28]

    status = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 800074e:	f107 020c 	add.w	r2, r7, #12
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	4611      	mov	r1, r2
 8000758:	4618      	mov	r0, r3
 800075a:	f001 fc6f 	bl	800203c <HAL_FLASHEx_Erase>
 800075e:	4603      	mov	r3, r0
 8000760:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != HAL_OK) {
 8000764:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <Flash_Write_PrivateKey+0x44>
        // Handle error
        while(1);
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <Flash_Write_PrivateKey+0x40>
    }

    // Step 3: Write the private key data to the specific flash memory address
    uint32_t address = PRIVATE_KEY_LOCATION;
 8000770:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <Flash_Write_PrivateKey+0xa4>)
 8000772:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (uint32_t i = 0; i < keySize; i++) {
 8000774:	2300      	movs	r3, #0
 8000776:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000778:	e01c      	b.n	80007b4 <Flash_Write_PrivateKey+0x88>
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address, privateKeyData[i]);
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800077e:	4413      	add	r3, r2
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	2200      	movs	r2, #0
 8000786:	461c      	mov	r4, r3
 8000788:	4615      	mov	r5, r2
 800078a:	4622      	mov	r2, r4
 800078c:	462b      	mov	r3, r5
 800078e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000790:	2000      	movs	r0, #0
 8000792:	f001 fa9d 	bl	8001cd0 <HAL_FLASH_Program>
 8000796:	4603      	mov	r3, r0
 8000798:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK) {
 800079c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <Flash_Write_PrivateKey+0x7c>
            // Handle error
            while(1);
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <Flash_Write_PrivateKey+0x78>
        }
        address++;
 80007a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007aa:	3301      	adds	r3, #1
 80007ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (uint32_t i = 0; i < keySize; i++) {
 80007ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007b0:	3301      	adds	r3, #1
 80007b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80007b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d3de      	bcc.n	800077a <Flash_Write_PrivateKey+0x4e>
    }

    printf("Private key written into flash memory sector 11 at address: 0x08045268\n");
 80007bc:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <Flash_Write_PrivateKey+0xa8>)
 80007be:	f016 f8bd 	bl	801693c <puts>

    // Step 4: Lock the flash memory again
    HAL_FLASH_Lock();
 80007c2:	f001 fafb 	bl	8001dbc <HAL_FLASH_Lock>
}
 80007c6:	bf00      	nop
 80007c8:	3730      	adds	r7, #48	@ 0x30
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bdb0      	pop	{r4, r5, r7, pc}
 80007ce:	bf00      	nop
 80007d0:	08041740 	.word	0x08041740
 80007d4:	08017a14 	.word	0x08017a14

080007d8 <esp8266_get_device_info>:


//get device information

void esp8266_get_device_info(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b0f4      	sub	sp, #464	@ 0x1d0
 80007dc:	af04      	add	r7, sp, #16
	char ip_mac_reqbuffer[4] = "GI\n"; //"GI:MAC_ADDRESS: IP_ADDRESS:";
 80007de:	4b33      	ldr	r3, [pc, #204]	@ (80008ac <esp8266_get_device_info+0xd4>)
 80007e0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
	char ip_buffer[50];
	char mac_buffer[50];
	char chipmodel_uid_mac_ip[135]; // buffer that gonna send to UI

	//Function to get the UID from my MCU
	get_stm32_uid(uid_str, sizeof(uid_str));
 80007e4:	2119      	movs	r1, #25
 80007e6:	4832      	ldr	r0, [pc, #200]	@ (80008b0 <esp8266_get_device_info+0xd8>)
 80007e8:	f7ff fed0 	bl	800058c <get_stm32_uid>
	HAL_UART_Transmit(&huart5, (uint8_t*)ip_mac_reqbuffer, sizeof(ip_mac_reqbuffer), HAL_MAX_DELAY); // requesting ip anad mac address from esp8266 wifi module
 80007ec:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 80007f0:	f04f 33ff 	mov.w	r3, #4294967295
 80007f4:	2204      	movs	r2, #4
 80007f6:	482f      	ldr	r0, [pc, #188]	@ (80008b4 <esp8266_get_device_info+0xdc>)
 80007f8:	f002 fc89 	bl	800310e <HAL_UART_Transmit>

	while(1)
	{
	  //ff:ff:ff:ff:ff:ff 172.24.18.40  ip =
	  if( (HAL_UART_Receive(&huart5, (uint8_t*)ip_mac_recbuffer,sizeof(ip_mac_recbuffer),3000) == HAL_OK) ||   (HAL_UART_Receive(&huart5, (uint8_t*)ip_mac_recbuffer,sizeof(ip_mac_recbuffer),3000) == HAL_TIMEOUT) )
 80007fc:	f107 01f4 	add.w	r1, r7, #244	@ 0xf4
 8000800:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000804:	22c8      	movs	r2, #200	@ 0xc8
 8000806:	482b      	ldr	r0, [pc, #172]	@ (80008b4 <esp8266_get_device_info+0xdc>)
 8000808:	f002 fd0c 	bl	8003224 <HAL_UART_Receive>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d00a      	beq.n	8000828 <esp8266_get_device_info+0x50>
 8000812:	f107 01f4 	add.w	r1, r7, #244	@ 0xf4
 8000816:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800081a:	22c8      	movs	r2, #200	@ 0xc8
 800081c:	4825      	ldr	r0, [pc, #148]	@ (80008b4 <esp8266_get_device_info+0xdc>)
 800081e:	f002 fd01 	bl	8003224 <HAL_UART_Receive>
 8000822:	4603      	mov	r3, r0
 8000824:	2b03      	cmp	r3, #3
 8000826:	d137      	bne.n	8000898 <esp8266_get_device_info+0xc0>
	  {

		strncpy(mac_buffer,ip_mac_recbuffer,18);
 8000828:	f107 01f4 	add.w	r1, r7, #244	@ 0xf4
 800082c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000830:	2212      	movs	r2, #18
 8000832:	4618      	mov	r0, r3
 8000834:	f016 f9e9 	bl	8016c0a <strncpy>
		mac_buffer[19] = '\0';
 8000838:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800083c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000840:	2200      	movs	r2, #0
 8000842:	74da      	strb	r2, [r3, #19]

		strncpy(ip_buffer, ip_mac_recbuffer+18,12);
 8000844:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8000848:	3312      	adds	r3, #18
 800084a:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 800084e:	220c      	movs	r2, #12
 8000850:	4619      	mov	r1, r3
 8000852:	f016 f9da 	bl	8016c0a <strncpy>
		ip_buffer[13] = '\0' ;
 8000856:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800085a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800085e:	2200      	movs	r2, #0
 8000860:	735a      	strb	r2, [r3, #13]

	    snprintf(chipmodel_uid_mac_ip,sizeof(chipmodel_uid_mac_ip),"Chip Model:%s,MAC Address:%s,IP Address:%s,UID:%s", chip_model,mac_buffer,ip_buffer,uid_str); //mac_buffer
 8000862:	1d38      	adds	r0, r7, #4
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <esp8266_get_device_info+0xd8>)
 8000866:	9302      	str	r3, [sp, #8]
 8000868:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <esp8266_get_device_info+0xe0>)
 8000876:	4a11      	ldr	r2, [pc, #68]	@ (80008bc <esp8266_get_device_info+0xe4>)
 8000878:	2187      	movs	r1, #135	@ 0x87
 800087a:	f016 f867 	bl	801694c <sniprintf>

		if(HAL_UART_Transmit(&huart4,(uint8_t*)chipmodel_uid_mac_ip,sizeof(chipmodel_uid_mac_ip),100) == HAL_OK) //stm32 to UI
 800087e:	1d39      	adds	r1, r7, #4
 8000880:	2364      	movs	r3, #100	@ 0x64
 8000882:	2287      	movs	r2, #135	@ 0x87
 8000884:	480e      	ldr	r0, [pc, #56]	@ (80008c0 <esp8266_get_device_info+0xe8>)
 8000886:	f002 fc42 	bl	800310e <HAL_UART_Transmit>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d007      	beq.n	80008a0 <esp8266_get_device_info+0xc8>
		{
			break;
		}
		else
		{
			printf("i am in else block of esp8266_get_device_info uart transmit\n");
 8000890:	480c      	ldr	r0, [pc, #48]	@ (80008c4 <esp8266_get_device_info+0xec>)
 8000892:	f016 f853 	bl	801693c <puts>
		if(HAL_UART_Transmit(&huart4,(uint8_t*)chipmodel_uid_mac_ip,sizeof(chipmodel_uid_mac_ip),100) == HAL_OK) //stm32 to UI
 8000896:	e002      	b.n	800089e <esp8266_get_device_info+0xc6>

		//(HAL_UART_Receive(&huart5,ip_mac_buffer,sizeof(ip_mac_buffer),0)
	  }
	  else
	  {
		  printf("i am in else block of esp8266_get_device_info uart receive itself\n");
 8000898:	480b      	ldr	r0, [pc, #44]	@ (80008c8 <esp8266_get_device_info+0xf0>)
 800089a:	f016 f84f 	bl	801693c <puts>
	  if( (HAL_UART_Receive(&huart5, (uint8_t*)ip_mac_recbuffer,sizeof(ip_mac_recbuffer),3000) == HAL_OK) ||   (HAL_UART_Receive(&huart5, (uint8_t*)ip_mac_recbuffer,sizeof(ip_mac_recbuffer),3000) == HAL_TIMEOUT) )
 800089e:	e7ad      	b.n	80007fc <esp8266_get_device_info+0x24>
			break;
 80008a0:	bf00      	nop
	  }
  }
}
 80008a2:	bf00      	nop
 80008a4:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	000a4947 	.word	0x000a4947
 80008b0:	20000980 	.word	0x20000980
 80008b4:	20000138 	.word	0x20000138
 80008b8:	20000000 	.word	0x20000000
 80008bc:	08017a5c 	.word	0x08017a5c
 80008c0:	200000f0 	.word	0x200000f0
 80008c4:	08017a90 	.word	0x08017a90
 80008c8:	08017acc 	.word	0x08017acc

080008cc <esp8266_connect_to_wifi>:

	//to connect wifi and server
void esp8266_connect_to_wifi(char* ssid, char* password, char* server_ip, char* server_port)
	{
 80008cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ce:	b0cf      	sub	sp, #316	@ 0x13c
 80008d0:	af04      	add	r7, sp, #16
 80008d2:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 80008d6:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 80008da:	6020      	str	r0, [r4, #0]
 80008dc:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 80008e0:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 80008e4:	6001      	str	r1, [r0, #0]
 80008e6:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 80008ea:	f5a1 7192 	sub.w	r1, r1, #292	@ 0x124
 80008ee:	600a      	str	r2, [r1, #0]
 80008f0:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80008f4:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 80008f8:	6013      	str	r3, [r2, #0]
		uint8_t connection[44]; // "wifi connected,(14)server connected()"
		uint8_t wifi_conn_status[60];
		uint8_t wifi_conn_status_1[60];
		char status_ok[30] = "STATUS:WiFi Connected";
 80008fa:	4b9d      	ldr	r3, [pc, #628]	@ (8000b70 <esp8266_connect_to_wifi+0x2a4>)
 80008fc:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8000900:	461d      	mov	r5, r3
 8000902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000906:	e895 0003 	ldmia.w	r5, {r0, r1}
 800090a:	6020      	str	r0, [r4, #0]
 800090c:	3404      	adds	r4, #4
 800090e:	8021      	strh	r1, [r4, #0]
 8000910:	f107 0372 	add.w	r3, r7, #114	@ 0x72
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
	    char status_not_ok[30] = "STATUS:Failed to connect WiFi";
 800091a:	4b96      	ldr	r3, [pc, #600]	@ (8000b74 <esp8266_connect_to_wifi+0x2a8>)
 800091c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000920:	461d      	mov	r5, r3
 8000922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000926:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800092a:	c407      	stmia	r4!, {r0, r1, r2}
 800092c:	8023      	strh	r3, [r4, #0]
		char status_waiting[40] = "STATUS:Waiting for connection...";
 800092e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000932:	f5a3 768a 	sub.w	r6, r3, #276	@ 0x114
 8000936:	4b90      	ldr	r3, [pc, #576]	@ (8000b78 <esp8266_connect_to_wifi+0x2ac>)
 8000938:	4634      	mov	r4, r6
 800093a:	461d      	mov	r5, r3
 800093c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800093e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000944:	682b      	ldr	r3, [r5, #0]
 8000946:	7023      	strb	r3, [r4, #0]
 8000948:	f106 0321 	add.w	r3, r6, #33	@ 0x21
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	f8c3 2003 	str.w	r2, [r3, #3]
		uint32_t start_time, end_time = 2000;
 8000954:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000958:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

		snprintf((char*)connection,sizeof(connection),"CONNECT:%s,%s,%s,%s",ssid,password,server_ip,server_port);
 800095c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000960:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000964:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8000968:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 800096c:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8000970:	6812      	ldr	r2, [r2, #0]
 8000972:	9202      	str	r2, [sp, #8]
 8000974:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8000978:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 800097c:	6812      	ldr	r2, [r2, #0]
 800097e:	9201      	str	r2, [sp, #4]
 8000980:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8000984:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 8000988:	6812      	ldr	r2, [r2, #0]
 800098a:	9200      	str	r2, [sp, #0]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a7b      	ldr	r2, [pc, #492]	@ (8000b7c <esp8266_connect_to_wifi+0x2b0>)
 8000990:	212c      	movs	r1, #44	@ 0x2c
 8000992:	f015 ffdb 	bl	801694c <sniprintf>
		//stm to esp
		if(HAL_UART_Transmit(&huart5, (uint8_t*)connection, sizeof(connection), HAL_MAX_DELAY ) == HAL_OK)
 8000996:	f107 01f4 	add.w	r1, r7, #244	@ 0xf4
 800099a:	f04f 33ff 	mov.w	r3, #4294967295
 800099e:	222c      	movs	r2, #44	@ 0x2c
 80009a0:	4877      	ldr	r0, [pc, #476]	@ (8000b80 <esp8266_connect_to_wifi+0x2b4>)
 80009a2:	f002 fbb4 	bl	800310e <HAL_UART_Transmit>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d102      	bne.n	80009b2 <esp8266_connect_to_wifi+0xe6>
		{
			printf("connect cmd data(network parameter send to esp8266)\n");
 80009ac:	4875      	ldr	r0, [pc, #468]	@ (8000b84 <esp8266_connect_to_wifi+0x2b8>)
 80009ae:	f015 ffc5 	bl	801693c <puts>

		while(1)
		{

		  //from ESP to STM
		  if ( (HAL_UART_Receive(&huart5,(uint8_t*)wifi_conn_status,sizeof(wifi_conn_status),1000)==HAL_OK) || (HAL_UART_Receive(&huart5,(uint8_t*)wifi_conn_status,sizeof(wifi_conn_status),1000)==HAL_TIMEOUT) )
 80009b2:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 80009b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ba:	223c      	movs	r2, #60	@ 0x3c
 80009bc:	4870      	ldr	r0, [pc, #448]	@ (8000b80 <esp8266_connect_to_wifi+0x2b4>)
 80009be:	f002 fc31 	bl	8003224 <HAL_UART_Receive>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d00b      	beq.n	80009e0 <esp8266_connect_to_wifi+0x114>
 80009c8:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 80009cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d0:	223c      	movs	r2, #60	@ 0x3c
 80009d2:	486b      	ldr	r0, [pc, #428]	@ (8000b80 <esp8266_connect_to_wifi+0x2b4>)
 80009d4:	f002 fc26 	bl	8003224 <HAL_UART_Receive>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b03      	cmp	r3, #3
 80009dc:	f040 80bc 	bne.w	8000b58 <esp8266_connect_to_wifi+0x28c>
		  {
		   start_time = HAL_GetTick();
 80009e0:	f000 ffa2 	bl	8001928 <HAL_GetTick>
 80009e4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
		   strncpy((char*)wifi_conn_status_1, (char*)wifi_conn_status, 33); //"wifi_connected\0" \\"Wifi Connected"  (last one is the standadrd)
 80009e8:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 80009ec:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80009f0:	2221      	movs	r2, #33	@ 0x21
 80009f2:	4618      	mov	r0, r3
 80009f4:	f016 f909 	bl	8016c0a <strncpy>

		   wifi_conn_status_1[33] = '\0';
 80009f8:	2300      	movs	r3, #0
 80009fa:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d

		  //strncpy(wifi_conn_status, connection+wifi_end_len, 16); //"server_connected\0"
		  //wifi_conn_status[16] = '\0'

		  if (strncmp((char*)wifi_conn_status_1, status_ok, strlen(status_ok)) == 0)
 80009fe:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fbe4 	bl	80001d0 <strlen>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8000a0e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000a12:	4618      	mov	r0, r3
 8000a14:	f016 f8e7 	bl	8016be6 <strncmp>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d145      	bne.n	8000aaa <esp8266_connect_to_wifi+0x1de>
		  {
			  //from STM to UI serial monitor
			  if( (HAL_UART_Transmit(&huart4, (uint8_t*)status_ok, sizeof(status_ok), 2000)== HAL_OK ) || (HAL_UART_Transmit(&huart4, (uint8_t*)status_ok, sizeof(status_ok), 2000)== HAL_TIMEOUT))
 8000a1e:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8000a22:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000a26:	221e      	movs	r2, #30
 8000a28:	4857      	ldr	r0, [pc, #348]	@ (8000b88 <esp8266_connect_to_wifi+0x2bc>)
 8000a2a:	f002 fb70 	bl	800310e <HAL_UART_Transmit>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d00b      	beq.n	8000a4c <esp8266_connect_to_wifi+0x180>
 8000a34:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8000a38:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000a3c:	221e      	movs	r2, #30
 8000a3e:	4852      	ldr	r0, [pc, #328]	@ (8000b88 <esp8266_connect_to_wifi+0x2bc>)
 8000a40:	f002 fb65 	bl	800310e <HAL_UART_Transmit>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	f040 808c 	bne.w	8000b64 <esp8266_connect_to_wifi+0x298>

			  {
				  memset(wifi_conn_status_1, 0, sizeof(wifi_conn_status_1));
 8000a4c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000a50:	223c      	movs	r2, #60	@ 0x3c
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f016 f8af 	bl	8016bb8 <memset>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);  //BLUE LED
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a60:	484a      	ldr	r0, [pc, #296]	@ (8000b8c <esp8266_connect_to_wifi+0x2c0>)
 8000a62:	f001 fda9 	bl	80025b8 <HAL_GPIO_WritePin>
				  HAL_Delay(500);
 8000a66:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a6a:	f000 ff69 	bl	8001940 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a74:	4845      	ldr	r0, [pc, #276]	@ (8000b8c <esp8266_connect_to_wifi+0x2c0>)
 8000a76:	f001 fd9f 	bl	80025b8 <HAL_GPIO_WritePin>
				  HAL_Delay(500);
 8000a7a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a7e:	f000 ff5f 	bl	8001940 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a88:	4840      	ldr	r0, [pc, #256]	@ (8000b8c <esp8266_connect_to_wifi+0x2c0>)
 8000a8a:	f001 fd95 	bl	80025b8 <HAL_GPIO_WritePin>
				  HAL_Delay(500);
 8000a8e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a92:	f000 ff55 	bl	8001940 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a9c:	483b      	ldr	r0, [pc, #236]	@ (8000b8c <esp8266_connect_to_wifi+0x2c0>)
 8000a9e:	f001 fd8b 	bl	80025b8 <HAL_GPIO_WritePin>


				  printf("wifi status received from esp8266 and send to UI");
 8000aa2:	483b      	ldr	r0, [pc, #236]	@ (8000b90 <esp8266_connect_to_wifi+0x2c4>)
 8000aa4:	f015 fee2 	bl	801686c <iprintf>
			  } // sending network status to UI from stm32
			  break;
 8000aa8:	e05c      	b.n	8000b64 <esp8266_connect_to_wifi+0x298>
		  }
		  else if(strncmp((char*)wifi_conn_status_1, status_not_ok, strlen(status_not_ok) ) == 0 )
 8000aaa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fb8e 	bl	80001d0 <strlen>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000aba:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f016 f891 	bl	8016be6 <strncmp>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d120      	bne.n	8000b0c <esp8266_connect_to_wifi+0x240>
		  {
			  //from STM to UI serial monitor
			  if(HAL_UART_Transmit(&huart4, (uint8_t*)status_not_ok, sizeof(status_not_ok), HAL_MAX_DELAY)==HAL_OK || (HAL_UART_Transmit(&huart4, (uint8_t*)status_not_ok, sizeof(status_not_ok), 1000)== HAL_TIMEOUT) ) // sending network status to UI from stm32
 8000aca:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad2:	221e      	movs	r2, #30
 8000ad4:	482c      	ldr	r0, [pc, #176]	@ (8000b88 <esp8266_connect_to_wifi+0x2bc>)
 8000ad6:	f002 fb1a 	bl	800310e <HAL_UART_Transmit>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d00a      	beq.n	8000af6 <esp8266_connect_to_wifi+0x22a>
 8000ae0:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000ae4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ae8:	221e      	movs	r2, #30
 8000aea:	4827      	ldr	r0, [pc, #156]	@ (8000b88 <esp8266_connect_to_wifi+0x2bc>)
 8000aec:	f002 fb0f 	bl	800310e <HAL_UART_Transmit>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b03      	cmp	r3, #3
 8000af4:	d102      	bne.n	8000afc <esp8266_connect_to_wifi+0x230>
			  {
				  //memset(wifi_conn_status_1, 0, sizeof(wifi_conn_status_1));
				  printf("wifi status received from esp8266 and send to UI");
 8000af6:	4826      	ldr	r0, [pc, #152]	@ (8000b90 <esp8266_connect_to_wifi+0x2c4>)
 8000af8:	f015 feb8 	bl	801686c <iprintf>
			  }
			  memset(wifi_conn_status_1, 0, sizeof(wifi_conn_status_1));
 8000afc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000b00:	223c      	movs	r2, #60	@ 0x3c
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f016 f857 	bl	8016bb8 <memset>
		  if (strncmp((char*)wifi_conn_status_1, status_ok, strlen(status_ok)) == 0)
 8000b0a:	e029      	b.n	8000b60 <esp8266_connect_to_wifi+0x294>
			  //break;
		  }

		  else if( strncmp((char*)wifi_conn_status_1, status_waiting, strlen(status_not_ok) ) == 0 && start_time >= end_time )
 8000b0c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fb5d 	bl	80001d0 <strlen>
 8000b16:	4602      	mov	r2, r0
 8000b18:	f107 0114 	add.w	r1, r7, #20
 8000b1c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000b20:	4618      	mov	r0, r3
 8000b22:	f016 f860 	bl	8016be6 <strncmp>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d119      	bne.n	8000b60 <esp8266_connect_to_wifi+0x294>
 8000b2c:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8000b30:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d313      	bcc.n	8000b60 <esp8266_connect_to_wifi+0x294>
		  {

			  HAL_UART_Transmit(&huart4, (uint8_t*)status_waiting, sizeof(status_waiting), HAL_MAX_DELAY);// sending network status to UI from stm32
 8000b38:	f107 0114 	add.w	r1, r7, #20
 8000b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b40:	2228      	movs	r2, #40	@ 0x28
 8000b42:	4811      	ldr	r0, [pc, #68]	@ (8000b88 <esp8266_connect_to_wifi+0x2bc>)
 8000b44:	f002 fae3 	bl	800310e <HAL_UART_Transmit>
			  memset(wifi_conn_status_1, 0, sizeof(wifi_conn_status_1));
 8000b48:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000b4c:	223c      	movs	r2, #60	@ 0x3c
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f016 f831 	bl	8016bb8 <memset>
		  if (strncmp((char*)wifi_conn_status_1, status_ok, strlen(status_ok)) == 0)
 8000b56:	e003      	b.n	8000b60 <esp8266_connect_to_wifi+0x294>

		}

		  else
		  {
			  printf("i havent received anything from serial connection ");
 8000b58:	480e      	ldr	r0, [pc, #56]	@ (8000b94 <esp8266_connect_to_wifi+0x2c8>)
 8000b5a:	f015 fe87 	bl	801686c <iprintf>
 8000b5e:	e728      	b.n	80009b2 <esp8266_connect_to_wifi+0xe6>
		  if (strncmp((char*)wifi_conn_status_1, status_ok, strlen(status_ok)) == 0)
 8000b60:	bf00      	nop
		  if ( (HAL_UART_Receive(&huart5,(uint8_t*)wifi_conn_status,sizeof(wifi_conn_status),1000)==HAL_OK) || (HAL_UART_Receive(&huart5,(uint8_t*)wifi_conn_status,sizeof(wifi_conn_status),1000)==HAL_TIMEOUT) )
 8000b62:	e726      	b.n	80009b2 <esp8266_connect_to_wifi+0xe6>
			  break;
 8000b64:	bf00      	nop
		  }

		}

	}
 8000b66:	bf00      	nop
 8000b68:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b70:	08017bc0 	.word	0x08017bc0
 8000b74:	08017be0 	.word	0x08017be0
 8000b78:	08017c00 	.word	0x08017c00
 8000b7c:	08017b10 	.word	0x08017b10
 8000b80:	20000138 	.word	0x20000138
 8000b84:	08017b24 	.word	0x08017b24
 8000b88:	200000f0 	.word	0x200000f0
 8000b8c:	40020c00 	.word	0x40020c00
 8000b90:	08017b58 	.word	0x08017b58
 8000b94:	08017b8c 	.word	0x08017b8c

08000b98 <generate_csr>:

//To generate CSR
void generate_csr(const char* organization)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	f5ad 6db4 	sub.w	sp, sp, #1440	@ 0x5a0
 8000b9e:	af02      	add	r7, sp, #8
 8000ba0:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8000ba4:	f2a3 5394 	subw	r3, r3, #1428	@ 0x594
 8000ba8:	6018      	str	r0, [r3, #0]
  int ret = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	f8c7 3594 	str.w	r3, [r7, #1428]	@ 0x594
  uint32_t start_time, end_time, time_taken;
  const char *pers = "csr_generation";
 8000bb0:	4ba3      	ldr	r3, [pc, #652]	@ (8000e40 <generate_csr+0x2a8>)
 8000bb2:	f8c7 3590 	str.w	r3, [r7, #1424]	@ 0x590


  // Record the start time before CSR generation


  mbedtls_entropy_init(&entropy);
 8000bb6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f00e fc66 	bl	800f48c <mbedtls_entropy_init>
  mbedtls_ctr_drbg_init(&ctr_drbg);
 8000bc0:	f107 0320 	add.w	r3, r7, #32
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f008 fec4 	bl	8009952 <mbedtls_ctr_drbg_init>
  mbedtls_pk_init(&key);
 8000bca:	f107 0318 	add.w	r3, r7, #24
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f00f f94c 	bl	800fe6c <mbedtls_pk_init>
  mbedtls_x509write_csr_init(&csr);
 8000bd4:	f107 0308 	add.w	r3, r7, #8
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f015 f90e 	bl	8015dfa <mbedtls_x509write_csr_init>

  // Get STM32 UID for to add as CN to the certificate
    get_stm32_uid(uid_str, sizeof(uid_str));
 8000bde:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8000be2:	2119      	movs	r1, #25
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fcd1 	bl	800058c <get_stm32_uid>

 // Seed the CTR_DRBG with entropy to ensure randomness
  if ((ret = mbedtls_ctr_drbg_seed(&ctr_drbg, mbedtls_entropy_func, &entropy, (const unsigned char *)pers, strlen(pers))) != 0)
 8000bea:	f8d7 0590 	ldr.w	r0, [r7, #1424]	@ 0x590
 8000bee:	f7ff faef 	bl	80001d0 <strlen>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8000bf8:	f107 0020 	add.w	r0, r7, #32
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	f8d7 3590 	ldr.w	r3, [r7, #1424]	@ 0x590
 8000c02:	4990      	ldr	r1, [pc, #576]	@ (8000e44 <generate_csr+0x2ac>)
 8000c04:	f008 fef4 	bl	80099f0 <mbedtls_ctr_drbg_seed>
 8000c08:	f8c7 0594 	str.w	r0, [r7, #1428]	@ 0x594
 8000c0c:	f8d7 3594 	ldr.w	r3, [r7, #1428]	@ 0x594
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d007      	beq.n	8000c24 <generate_csr+0x8c>
  {
    printf("Failed in mbedtls_ctr_drbg_seed, returned -0x%04x\n", -ret);
 8000c14:	f8d7 3594 	ldr.w	r3, [r7, #1428]	@ 0x594
 8000c18:	425b      	negs	r3, r3
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	488a      	ldr	r0, [pc, #552]	@ (8000e48 <generate_csr+0x2b0>)
 8000c1e:	f015 fe25 	bl	801686c <iprintf>
    goto cleanup;
 8000c22:	e0f4      	b.n	8000e0e <generate_csr+0x276>
  }


  // Set up the public and pri keys context to use Elliptic Curve Key (EC Key)
  if ((ret = mbedtls_pk_setup(&key, mbedtls_pk_info_from_type(MBEDTLS_PK_ECKEY))) != 0)
 8000c24:	2002      	movs	r0, #2
 8000c26:	f00f f94d 	bl	800fec4 <mbedtls_pk_info_from_type>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	f107 0318 	add.w	r3, r7, #24
 8000c30:	4611      	mov	r1, r2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f00f f968 	bl	800ff08 <mbedtls_pk_setup>
 8000c38:	f8c7 0594 	str.w	r0, [r7, #1428]	@ 0x594
 8000c3c:	f8d7 3594 	ldr.w	r3, [r7, #1428]	@ 0x594
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d007      	beq.n	8000c54 <generate_csr+0xbc>
  {
    printf("Failed in mbedtls_pk_setup, returned -0x%04x\n", -ret);
 8000c44:	f8d7 3594 	ldr.w	r3, [r7, #1428]	@ 0x594
 8000c48:	425b      	negs	r3, r3
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	487f      	ldr	r0, [pc, #508]	@ (8000e4c <generate_csr+0x2b4>)
 8000c4e:	f015 fe0d 	bl	801686c <iprintf>
    goto cleanup;
 8000c52:	e0dc      	b.n	8000e0e <generate_csr+0x276>
  }

  // Generate an ECC key pair for the specified curve

  start_time = HAL_GetTick();
 8000c54:	f000 fe68 	bl	8001928 <HAL_GetTick>
 8000c58:	f8c7 058c 	str.w	r0, [r7, #1420]	@ 0x58c


  //KEY pair generation
  if ((ret = mbedtls_ecp_gen_key(CURVE, mbedtls_pk_ec(key), mbedtls_ctr_drbg_random, &ctr_drbg)) != 0)
 8000c5c:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8000c60:	f5a3 63b0 	sub.w	r3, r3, #1408	@ 0x580
 8000c64:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c68:	f7ff fc82 	bl	8000570 <mbedtls_pk_ec>
 8000c6c:	4601      	mov	r1, r0
 8000c6e:	f107 0320 	add.w	r3, r7, #32
 8000c72:	4a77      	ldr	r2, [pc, #476]	@ (8000e50 <generate_csr+0x2b8>)
 8000c74:	2003      	movs	r0, #3
 8000c76:	f00c fef7 	bl	800da68 <mbedtls_ecp_gen_key>
 8000c7a:	f8c7 0594 	str.w	r0, [r7, #1428]	@ 0x594
 8000c7e:	f8d7 3594 	ldr.w	r3, [r7, #1428]	@ 0x594
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d007      	beq.n	8000c96 <generate_csr+0xfe>
  {
    printf("Failed in mbedtls_ecp_gen_key, returned -0x%04x\n", -ret);
 8000c86:	f8d7 3594 	ldr.w	r3, [r7, #1428]	@ 0x594
 8000c8a:	425b      	negs	r3, r3
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4871      	ldr	r0, [pc, #452]	@ (8000e54 <generate_csr+0x2bc>)
 8000c90:	f015 fdec 	bl	801686c <iprintf>
    goto cleanup;
 8000c94:	e0bb      	b.n	8000e0e <generate_csr+0x276>
  }

  end_time = HAL_GetTick();
 8000c96:	f000 fe47 	bl	8001928 <HAL_GetTick>
 8000c9a:	f8c7 0588 	str.w	r0, [r7, #1416]	@ 0x588

  time_taken = end_time - start_time ;
 8000c9e:	f8d7 2588 	ldr.w	r2, [r7, #1416]	@ 0x588
 8000ca2:	f8d7 358c 	ldr.w	r3, [r7, #1420]	@ 0x58c
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	f8c7 3584 	str.w	r3, [r7, #1412]	@ 0x584

  printf("Key pair Generation time: %ld\n",time_taken);
 8000cac:	f8d7 1584 	ldr.w	r1, [r7, #1412]	@ 0x584
 8000cb0:	4869      	ldr	r0, [pc, #420]	@ (8000e58 <generate_csr+0x2c0>)
 8000cb2:	f015 fddb 	bl	801686c <iprintf>


  // Export and print the private key in PEM format
      if ((ret = mbedtls_pk_write_key_pem(&key, Prkey_buf, sizeof(Prkey_buf))) != 0)
 8000cb6:	f507 6191 	add.w	r1, r7, #1160	@ 0x488
 8000cba:	f107 0318 	add.w	r3, r7, #24
 8000cbe:	22fa      	movs	r2, #250	@ 0xfa
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f00f fe09 	bl	80108d8 <mbedtls_pk_write_key_pem>
 8000cc6:	f8c7 0594 	str.w	r0, [r7, #1428]	@ 0x594
 8000cca:	f8d7 3594 	ldr.w	r3, [r7, #1428]	@ 0x594
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d007      	beq.n	8000ce2 <generate_csr+0x14a>
      {
          printf("Failed to export private key, returned -0x%04x\n", -ret);
 8000cd2:	f8d7 3594 	ldr.w	r3, [r7, #1428]	@ 0x594
 8000cd6:	425b      	negs	r3, r3
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4860      	ldr	r0, [pc, #384]	@ (8000e5c <generate_csr+0x2c4>)
 8000cdc:	f015 fdc6 	bl	801686c <iprintf>
          goto cleanup;
 8000ce0:	e095      	b.n	8000e0e <generate_csr+0x276>
      }

      Flash_Write_PrivateKey(Prkey_buf,strlen(Prkey_buf) );
 8000ce2:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fa72 	bl	80001d0 <strlen>
 8000cec:	4602      	mov	r2, r0
 8000cee:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fd19 	bl	800072c <Flash_Write_PrivateKey>

      printf("Private Key:\n%s\n%d\n", Prkey_buf,strlen(Prkey_buf));
 8000cfa:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fa66 	bl	80001d0 <strlen>
 8000d04:	4602      	mov	r2, r0
 8000d06:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4854      	ldr	r0, [pc, #336]	@ (8000e60 <generate_csr+0x2c8>)
 8000d0e:	f015 fdad 	bl	801686c <iprintf>


      // Export and print the public key in PEM format
      if ((ret = mbedtls_pk_write_pubkey_pem(&key, Pubkey_buf, sizeof(Pubkey_buf))) != 0)
 8000d12:	f507 7163 	add.w	r1, r7, #908	@ 0x38c
 8000d16:	f107 0318 	add.w	r3, r7, #24
 8000d1a:	22fa      	movs	r2, #250	@ 0xfa
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f00f fd9b 	bl	8010858 <mbedtls_pk_write_pubkey_pem>
 8000d22:	f8c7 0594 	str.w	r0, [r7, #1428]	@ 0x594
 8000d26:	f8d7 3594 	ldr.w	r3, [r7, #1428]	@ 0x594
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d007      	beq.n	8000d3e <generate_csr+0x1a6>
      {
          printf("Failed to export public key, returned -0x%04x\n", -ret);
 8000d2e:	f8d7 3594 	ldr.w	r3, [r7, #1428]	@ 0x594
 8000d32:	425b      	negs	r3, r3
 8000d34:	4619      	mov	r1, r3
 8000d36:	484b      	ldr	r0, [pc, #300]	@ (8000e64 <generate_csr+0x2cc>)
 8000d38:	f015 fd98 	bl	801686c <iprintf>
          goto cleanup;
 8000d3c:	e067      	b.n	8000e0e <generate_csr+0x276>
      }
      printf("Public Key:\n%s\n", Pubkey_buf);
 8000d3e:	f507 7363 	add.w	r3, r7, #908	@ 0x38c
 8000d42:	4619      	mov	r1, r3
 8000d44:	4848      	ldr	r0, [pc, #288]	@ (8000e68 <generate_csr+0x2d0>)
 8000d46:	f015 fd91 	bl	801686c <iprintf>


      start_time = HAL_GetTick();
 8000d4a:	f000 fded 	bl	8001928 <HAL_GetTick>
 8000d4e:	f8c7 058c 	str.w	r0, [r7, #1420]	@ 0x58c

  // Set the message digest algorithm to SHA-256 for the CSR
  mbedtls_x509write_csr_set_md_alg(&csr, MBEDTLS_MD_SHA256);
 8000d52:	f107 0308 	add.w	r3, r7, #8
 8000d56:	2106      	movs	r1, #6
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f015 f871 	bl	8015e40 <mbedtls_x509write_csr_set_md_alg>

  // Set the key to be used for signing the CSR
  mbedtls_x509write_csr_set_key(&csr, &key);
 8000d5e:	f107 0218 	add.w	r2, r7, #24
 8000d62:	f107 0308 	add.w	r3, r7, #8
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f015 f878 	bl	8015e5e <mbedtls_x509write_csr_set_key>

  // Set subject name with UID as CN
  snprintf(subject_name, sizeof(subject_name), "CN=%s,O=%s,C=IN", uid_str, organization);
 8000d6e:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 8000d72:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8000d76:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8000d7a:	f2a3 5394 	subw	r3, r3, #1428	@ 0x594
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	4613      	mov	r3, r2
 8000d84:	4a39      	ldr	r2, [pc, #228]	@ (8000e6c <generate_csr+0x2d4>)
 8000d86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d8a:	f015 fddf 	bl	801694c <sniprintf>

  // Set the subject name of the CSR (e.g., CN=Common Name, O=Organization, C=Country)
  mbedtls_x509write_csr_set_subject_name(&csr,subject_name);
 8000d8e:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f015 f86e 	bl	8015e7a <mbedtls_x509write_csr_set_subject_name>

  if ((ret = mbedtls_x509write_csr_pem(&csr, output_buf, sizeof(output_buf), mbedtls_ctr_drbg_random, &ctr_drbg)) < 0)
 8000d9e:	f107 0008 	add.w	r0, r7, #8
 8000da2:	f107 0320 	add.w	r3, r7, #32
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	4b29      	ldr	r3, [pc, #164]	@ (8000e50 <generate_csr+0x2b8>)
 8000daa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dae:	4930      	ldr	r1, [pc, #192]	@ (8000e70 <generate_csr+0x2d8>)
 8000db0:	f015 fb44 	bl	801643c <mbedtls_x509write_csr_pem>
 8000db4:	f8c7 0594 	str.w	r0, [r7, #1428]	@ 0x594
 8000db8:	f8d7 3594 	ldr.w	r3, [r7, #1428]	@ 0x594
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	da07      	bge.n	8000dd0 <generate_csr+0x238>
  {
    printf("Failed in mbedtls_x509write_csr_pem, returned -0x%04x\n", -ret);
 8000dc0:	f8d7 3594 	ldr.w	r3, [r7, #1428]	@ 0x594
 8000dc4:	425b      	negs	r3, r3
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	482a      	ldr	r0, [pc, #168]	@ (8000e74 <generate_csr+0x2dc>)
 8000dca:	f015 fd4f 	bl	801686c <iprintf>
    goto cleanup;
 8000dce:	e01e      	b.n	8000e0e <generate_csr+0x276>
  }

  end_time = HAL_GetTick();
 8000dd0:	f000 fdaa 	bl	8001928 <HAL_GetTick>
 8000dd4:	f8c7 0588 	str.w	r0, [r7, #1416]	@ 0x588

  time_taken = end_time - start_time;
 8000dd8:	f8d7 2588 	ldr.w	r2, [r7, #1416]	@ 0x588
 8000ddc:	f8d7 358c 	ldr.w	r3, [r7, #1420]	@ 0x58c
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	f8c7 3584 	str.w	r3, [r7, #1412]	@ 0x584

  printf("time taken for CSR generation: %ld\n", time_taken);
 8000de6:	f8d7 1584 	ldr.w	r1, [r7, #1412]	@ 0x584
 8000dea:	4823      	ldr	r0, [pc, #140]	@ (8000e78 <generate_csr+0x2e0>)
 8000dec:	f015 fd3e 	bl	801686c <iprintf>
  printf("CSR generated successfully:\n%s\n", output_buf);
 8000df0:	491f      	ldr	r1, [pc, #124]	@ (8000e70 <generate_csr+0x2d8>)
 8000df2:	4822      	ldr	r0, [pc, #136]	@ (8000e7c <generate_csr+0x2e4>)
 8000df4:	f015 fd3a 	bl	801686c <iprintf>

 // HAL_UART_Transmit(&huart4, output_buf, sizeof(output_buf),0);  // To send CSR to UI
  HAL_UART_Transmit(&huart4, output_buf, sizeof(output_buf),0);  // To send CSR to ESP8266 wifi module
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dfe:	491c      	ldr	r1, [pc, #112]	@ (8000e70 <generate_csr+0x2d8>)
 8000e00:	481f      	ldr	r0, [pc, #124]	@ (8000e80 <generate_csr+0x2e8>)
 8000e02:	f002 f984 	bl	800310e <HAL_UART_Transmit>

  strcpy(final_output_buf,output_buf);
 8000e06:	491a      	ldr	r1, [pc, #104]	@ (8000e70 <generate_csr+0x2d8>)
 8000e08:	481e      	ldr	r0, [pc, #120]	@ (8000e84 <generate_csr+0x2ec>)
 8000e0a:	f015 ffaa 	bl	8016d62 <strcpy>



cleanup:
  mbedtls_pk_free(&key);
 8000e0e:	f107 0318 	add.w	r3, r7, #24
 8000e12:	4618      	mov	r0, r3
 8000e14:	f00f f83a 	bl	800fe8c <mbedtls_pk_free>
  mbedtls_x509write_csr_free(&csr);
 8000e18:	f107 0308 	add.w	r3, r7, #8
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f014 fff9 	bl	8015e14 <mbedtls_x509write_csr_free>
  mbedtls_ctr_drbg_free(&ctr_drbg);
 8000e22:	f107 0320 	add.w	r3, r7, #32
 8000e26:	4618      	mov	r0, r3
 8000e28:	f008 fdf8 	bl	8009a1c <mbedtls_ctr_drbg_free>
  mbedtls_entropy_free(&entropy);
 8000e2c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000e30:	4618      	mov	r0, r3
 8000e32:	f00e fb51 	bl	800f4d8 <mbedtls_entropy_free>

  /* USER CODE END generate_csr_Init */
  return ;
 8000e36:	bf00      	nop
  //return output_buf;
}
 8000e38:	f507 67b3 	add.w	r7, r7, #1432	@ 0x598
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	08017c28 	.word	0x08017c28
 8000e44:	0800f783 	.word	0x0800f783
 8000e48:	08017c38 	.word	0x08017c38
 8000e4c:	08017c6c 	.word	0x08017c6c
 8000e50:	0800a1a1 	.word	0x0800a1a1
 8000e54:	08017c9c 	.word	0x08017c9c
 8000e58:	08017cd0 	.word	0x08017cd0
 8000e5c:	08017cf0 	.word	0x08017cf0
 8000e60:	08017d20 	.word	0x08017d20
 8000e64:	08017d34 	.word	0x08017d34
 8000e68:	08017d64 	.word	0x08017d64
 8000e6c:	08017d74 	.word	0x08017d74
 8000e70:	200009a4 	.word	0x200009a4
 8000e74:	08017d84 	.word	0x08017d84
 8000e78:	08017dbc 	.word	0x08017dbc
 8000e7c:	08017de0 	.word	0x08017de0
 8000e80:	200000f0 	.word	0x200000f0
 8000e84:	20000da4 	.word	0x20000da4

08000e88 <receive_certificate>:
}


//To Receive Server CA certificate(AKA Device certificate) According to my device CSR
int receive_certificate()
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8000e8e:	af00      	add	r7, sp, #0
    int ret = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
    char cmd_CSR[1024];
    memset(cmd_CSR, 0, sizeof(cmd_CSR));
 8000e96:	463b      	mov	r3, r7
 8000e98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f015 fe8a 	bl	8016bb8 <memset>
    strcpy(cmd_CSR,"GDC\n");
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	4a5f      	ldr	r2, [pc, #380]	@ (8001024 <receive_certificate+0x19c>)
 8000ea8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eac:	6018      	str	r0, [r3, #0]
 8000eae:	3304      	adds	r3, #4
 8000eb0:	7019      	strb	r1, [r3, #0]
    strcat(cmd_CSR,output_buf);
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	495c      	ldr	r1, [pc, #368]	@ (8001028 <receive_certificate+0x1a0>)
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f015 fe86 	bl	8016bc8 <strcat>

    // Sending CSR to ESP8266 to get Device Certificate (Dcert)
    if (HAL_UART_Transmit(&huart5, (uint8_t*)cmd_CSR, sizeof(cmd_CSR), HAL_MAX_DELAY) == HAL_OK)
 8000ebc:	4639      	mov	r1, r7
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ec6:	4859      	ldr	r0, [pc, #356]	@ (800102c <receive_certificate+0x1a4>)
 8000ec8:	f002 f921 	bl	800310e <HAL_UART_Transmit>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d102      	bne.n	8000ed8 <receive_certificate+0x50>
    {
        ret = 1;  //checking weather CSR send first to my server to get the dcerti back
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
    }

    // Listening for the Dcert from ESP8266
    while (1)
    {
        if (ret == 1)
 8000ed8:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d1fb      	bne.n	8000ed8 <receive_certificate+0x50>
        {
            // Receiving the certificate from ESP8266
            if ((HAL_UART_Receive(&huart5, certificate_data, DCERTIFICATE_SIZE, HAL_MAX_DELAY) == HAL_OK) || (HAL_UART_Receive(&huart5, certificate_data, DCERTIFICATE_SIZE, HAL_MAX_DELAY) == HAL_TIMEOUT))
 8000ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ee8:	4951      	ldr	r1, [pc, #324]	@ (8001030 <receive_certificate+0x1a8>)
 8000eea:	4850      	ldr	r0, [pc, #320]	@ (800102c <receive_certificate+0x1a4>)
 8000eec:	f002 f99a 	bl	8003224 <HAL_UART_Receive>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00a      	beq.n	8000f0c <receive_certificate+0x84>
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000efe:	494c      	ldr	r1, [pc, #304]	@ (8001030 <receive_certificate+0x1a8>)
 8000f00:	484a      	ldr	r0, [pc, #296]	@ (800102c <receive_certificate+0x1a4>)
 8000f02:	f002 f98f 	bl	8003224 <HAL_UART_Receive>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d1e5      	bne.n	8000ed8 <receive_certificate+0x50>
            {
                // Check if certificate begins and ends with the correct delimiters
                if (strncmp((char *)certificate_data, "-----BEGIN CERTIFICATE-----", 27) == 0 &&
 8000f0c:	221b      	movs	r2, #27
 8000f0e:	4949      	ldr	r1, [pc, #292]	@ (8001034 <receive_certificate+0x1ac>)
 8000f10:	4847      	ldr	r0, [pc, #284]	@ (8001030 <receive_certificate+0x1a8>)
 8000f12:	f015 fe68 	bl	8016be6 <strncmp>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d178      	bne.n	800100e <receive_certificate+0x186>
                    strstr((char *)certificate_data, "-----END CERTIFICATE-----") != NULL)
 8000f1c:	4946      	ldr	r1, [pc, #280]	@ (8001038 <receive_certificate+0x1b0>)
 8000f1e:	4844      	ldr	r0, [pc, #272]	@ (8001030 <receive_certificate+0x1a8>)
 8000f20:	f015 fe86 	bl	8016c30 <strstr>
 8000f24:	4603      	mov	r3, r0
                if (strncmp((char *)certificate_data, "-----BEGIN CERTIFICATE-----", 27) == 0 &&
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d071      	beq.n	800100e <receive_certificate+0x186>
                {
                    printf("Certificate received successfully.\n");
 8000f2a:	4844      	ldr	r0, [pc, #272]	@ (800103c <receive_certificate+0x1b4>)
 8000f2c:	f015 fd06 	bl	801693c <puts>

                    // Flash the certificate to memory
                    int flash_result = flash_certificate(certificate_data, strlen((char *)certificate_data));
 8000f30:	483f      	ldr	r0, [pc, #252]	@ (8001030 <receive_certificate+0x1a8>)
 8000f32:	f7ff f94d 	bl	80001d0 <strlen>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4619      	mov	r1, r3
 8000f3a:	483d      	ldr	r0, [pc, #244]	@ (8001030 <receive_certificate+0x1a8>)
 8000f3c:	f7ff fb52 	bl	80005e4 <flash_certificate>
 8000f40:	f8c7 0400 	str.w	r0, [r7, #1024]	@ 0x400

                    if (flash_result == 1)
 8000f44:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d103      	bne.n	8000f54 <receive_certificate+0xcc>
                    {
                        printf("Certificate flashed successfully in 11th sector of flash memory.\n");
 8000f4c:	483c      	ldr	r0, [pc, #240]	@ (8001040 <receive_certificate+0x1b8>)
 8000f4e:	f015 fcf5 	bl	801693c <puts>
 8000f52:	e010      	b.n	8000f76 <receive_certificate+0xee>
                    }
                    else if (flash_result == -1)
 8000f54:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8000f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f5c:	d103      	bne.n	8000f66 <receive_certificate+0xde>
                    {
                        printf("Error in erasing flash memory before writing certificate.\n");
 8000f5e:	4839      	ldr	r0, [pc, #228]	@ (8001044 <receive_certificate+0x1bc>)
 8000f60:	f015 fcec 	bl	801693c <puts>
 8000f64:	e007      	b.n	8000f76 <receive_certificate+0xee>
                    }
                    else if (flash_result == -2)
 8000f66:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8000f6a:	f113 0f02 	cmn.w	r3, #2
 8000f6e:	d102      	bne.n	8000f76 <receive_certificate+0xee>
                    {
                        printf("Error! Cannot write the certificate into the 11th sector of flash memory.\n");
 8000f70:	4835      	ldr	r0, [pc, #212]	@ (8001048 <receive_certificate+0x1c0>)
 8000f72:	f015 fce3 	bl	801693c <puts>
                    }

                    // Transmit the complete certificate to the UI through UART4
                    if (HAL_UART_Transmit(&huart4, (uint8_t *)Device_cert_buffer, DCERTIFICATE_SIZE, HAL_MAX_DELAY) == HAL_OK)
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f7e:	4933      	ldr	r1, [pc, #204]	@ (800104c <receive_certificate+0x1c4>)
 8000f80:	4833      	ldr	r0, [pc, #204]	@ (8001050 <receive_certificate+0x1c8>)
 8000f82:	f002 f8c4 	bl	800310e <HAL_UART_Transmit>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d13c      	bne.n	8001006 <receive_certificate+0x17e>
                    {
                        // Blink LEDs to indicate success
                        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);  // Red LED
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f92:	4830      	ldr	r0, [pc, #192]	@ (8001054 <receive_certificate+0x1cc>)
 8000f94:	f001 fb10 	bl	80025b8 <HAL_GPIO_WritePin>
                        HAL_Delay(500);
 8000f98:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f9c:	f000 fcd0 	bl	8001940 <HAL_Delay>
                        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fa6:	482b      	ldr	r0, [pc, #172]	@ (8001054 <receive_certificate+0x1cc>)
 8000fa8:	f001 fb06 	bl	80025b8 <HAL_GPIO_WritePin>
                        HAL_Delay(500);
 8000fac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fb0:	f000 fcc6 	bl	8001940 <HAL_Delay>
                        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);  // Blue LED
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fba:	4826      	ldr	r0, [pc, #152]	@ (8001054 <receive_certificate+0x1cc>)
 8000fbc:	f001 fafc 	bl	80025b8 <HAL_GPIO_WritePin>
                        HAL_Delay(500);
 8000fc0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fc4:	f000 fcbc 	bl	8001940 <HAL_Delay>
                        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fce:	4821      	ldr	r0, [pc, #132]	@ (8001054 <receive_certificate+0x1cc>)
 8000fd0:	f001 faf2 	bl	80025b8 <HAL_GPIO_WritePin>

                        printf("\nCertificate sent to UI successfully.\n");
 8000fd4:	4820      	ldr	r0, [pc, #128]	@ (8001058 <receive_certificate+0x1d0>)
 8000fd6:	f015 fcb1 	bl	801693c <puts>

                        // Send confirmation message to ESP8266
                        if (HAL_UART_Transmit(&huart5, (uint8_t *)confirm_msg, strlen(confirm_msg), HAL_MAX_DELAY) == HAL_OK)
 8000fda:	4820      	ldr	r0, [pc, #128]	@ (800105c <receive_certificate+0x1d4>)
 8000fdc:	f7ff f8f8 	bl	80001d0 <strlen>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe8:	491c      	ldr	r1, [pc, #112]	@ (800105c <receive_certificate+0x1d4>)
 8000fea:	4810      	ldr	r0, [pc, #64]	@ (800102c <receive_certificate+0x1a4>)
 8000fec:	f002 f88f 	bl	800310e <HAL_UART_Transmit>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d103      	bne.n	8000ffe <receive_certificate+0x176>
                        {
                            printf("\nConfirmation message sent to ESP8266: Certificate received.\n");
 8000ff6:	481a      	ldr	r0, [pc, #104]	@ (8001060 <receive_certificate+0x1d8>)
 8000ff8:	f015 fca0 	bl	801693c <puts>
                            break;  // Exit the loop once the process is complete
 8000ffc:	e00b      	b.n	8001016 <receive_certificate+0x18e>
                        }
                        else
                        {
                            printf("Failed to send confirmation message to ESP8266. Retrying...\n");
 8000ffe:	4819      	ldr	r0, [pc, #100]	@ (8001064 <receive_certificate+0x1dc>)
 8001000:	f015 fc9c 	bl	801693c <puts>
                {
 8001004:	e006      	b.n	8001014 <receive_certificate+0x18c>
                        }
                    }
                    else
                    {
                        printf("Failed to send certificate to UI. Retrying...\n");
 8001006:	4818      	ldr	r0, [pc, #96]	@ (8001068 <receive_certificate+0x1e0>)
 8001008:	f015 fc98 	bl	801693c <puts>
                {
 800100c:	e002      	b.n	8001014 <receive_certificate+0x18c>
                    }
                }
                else
                {
                    printf("Failed to receive certificate. Retrying...\n");
 800100e:	4817      	ldr	r0, [pc, #92]	@ (800106c <receive_certificate+0x1e4>)
 8001010:	f015 fc94 	bl	801693c <puts>
        if (ret == 1)
 8001014:	e760      	b.n	8000ed8 <receive_certificate+0x50>
                }
            }
        }
    }

    return ret;
 8001016:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
}
 800101a:	4618      	mov	r0, r3
 800101c:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	08017e48 	.word	0x08017e48
 8001028:	200009a4 	.word	0x200009a4
 800102c:	20000138 	.word	0x20000138
 8001030:	20000180 	.word	0x20000180
 8001034:	08017e50 	.word	0x08017e50
 8001038:	08017e6c 	.word	0x08017e6c
 800103c:	08017e88 	.word	0x08017e88
 8001040:	08017eac 	.word	0x08017eac
 8001044:	08017ef0 	.word	0x08017ef0
 8001048:	08017f2c 	.word	0x08017f2c
 800104c:	20000580 	.word	0x20000580
 8001050:	200000f0 	.word	0x200000f0
 8001054:	40020c00 	.word	0x40020c00
 8001058:	08017f78 	.word	0x08017f78
 800105c:	20000040 	.word	0x20000040
 8001060:	08017fa0 	.word	0x08017fa0
 8001064:	08017fe0 	.word	0x08017fe0
 8001068:	0801801c 	.word	0x0801801c
 800106c:	0801804c 	.word	0x0801804c

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001074:	f000 fbf2 	bl	800185c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001078:	f000 f88a 	bl	8001190 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107c:	f000 f95a 	bl	8001334 <MX_GPIO_Init>
  MX_RNG_Init();
 8001080:	f000 f8f0 	bl	8001264 <MX_RNG_Init>
  MX_UART4_Init();
 8001084:	f000 f902 	bl	800128c <MX_UART4_Init>
  MX_UART5_Init();
 8001088:	f000 f92a 	bl	80012e0 <MX_UART5_Init>
  MX_MBEDTLS_Init();
 800108c:	f003 f888 	bl	80041a0 <MX_MBEDTLS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
    {

      /* USER CODE END WHILE */
  	  if(HAL_UART_Receive(&huart4, (uint8_t*)uart_rx_buffer, sizeof(uart_rx_buffer), 1000) == HAL_OK || HAL_UART_Receive(&huart4, (uint8_t*)uart_rx_buffer, sizeof(uart_rx_buffer), 50) == HAL_TIMEOUT )
 8001090:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001094:	2208      	movs	r2, #8
 8001096:	4930      	ldr	r1, [pc, #192]	@ (8001158 <main+0xe8>)
 8001098:	4830      	ldr	r0, [pc, #192]	@ (800115c <main+0xec>)
 800109a:	f002 f8c3 	bl	8003224 <HAL_UART_Receive>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d008      	beq.n	80010b6 <main+0x46>
 80010a4:	2332      	movs	r3, #50	@ 0x32
 80010a6:	2208      	movs	r2, #8
 80010a8:	492b      	ldr	r1, [pc, #172]	@ (8001158 <main+0xe8>)
 80010aa:	482c      	ldr	r0, [pc, #176]	@ (800115c <main+0xec>)
 80010ac:	f002 f8ba 	bl	8003224 <HAL_UART_Receive>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d1ec      	bne.n	8001090 <main+0x20>
  	  {

  	 if( strstr( (char*)uart_rx_buffer,"GKC" ) != NULL )
 80010b6:	492a      	ldr	r1, [pc, #168]	@ (8001160 <main+0xf0>)
 80010b8:	4827      	ldr	r0, [pc, #156]	@ (8001158 <main+0xe8>)
 80010ba:	f015 fdb9 	bl	8016c30 <strstr>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d010      	beq.n	80010e6 <main+0x76>
  	 {
  		 generate_csr("SETS");
 80010c4:	4827      	ldr	r0, [pc, #156]	@ (8001164 <main+0xf4>)
 80010c6:	f7ff fd67 	bl	8000b98 <generate_csr>
  		 HAL_UART_Transmit(&huart4, final_output_buf, sizeof(final_output_buf),HAL_MAX_DELAY);
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010d2:	4925      	ldr	r1, [pc, #148]	@ (8001168 <main+0xf8>)
 80010d4:	4821      	ldr	r0, [pc, #132]	@ (800115c <main+0xec>)
 80010d6:	f002 f81a 	bl	800310e <HAL_UART_Transmit>
  		 memset(uart_rx_buffer, 0, sizeof(uart_rx_buffer));
 80010da:	2208      	movs	r2, #8
 80010dc:	2100      	movs	r1, #0
 80010de:	481e      	ldr	r0, [pc, #120]	@ (8001158 <main+0xe8>)
 80010e0:	f015 fd6a 	bl	8016bb8 <memset>
 80010e4:	e7d4      	b.n	8001090 <main+0x20>
  	 }
  	 else if (strstr((char*)uart_rx_buffer, "GI") != NULL )
 80010e6:	4921      	ldr	r1, [pc, #132]	@ (800116c <main+0xfc>)
 80010e8:	481b      	ldr	r0, [pc, #108]	@ (8001158 <main+0xe8>)
 80010ea:	f015 fda1 	bl	8016c30 <strstr>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d007      	beq.n	8001104 <main+0x94>
       {
  		 // Transmit acknowledgment back to the PC
  		 // Fetch device information (Chip Model, MAC Address, IP Address, UID)
  		 esp8266_get_device_info();
 80010f4:	f7ff fb70 	bl	80007d8 <esp8266_get_device_info>
  		 //HAL_UART_Transmit_IT(&huart5, (uint8_t*)msg_1, strlen(msg_1));
  		 memset(uart_rx_buffer, 0, sizeof(uart_rx_buffer));
 80010f8:	2208      	movs	r2, #8
 80010fa:	2100      	movs	r1, #0
 80010fc:	4816      	ldr	r0, [pc, #88]	@ (8001158 <main+0xe8>)
 80010fe:	f015 fd5b 	bl	8016bb8 <memset>
 8001102:	e7c5      	b.n	8001090 <main+0x20>
        }
  	 else if (strstr((char*)uart_rx_buffer, "CONNECT") != NULL)
 8001104:	491a      	ldr	r1, [pc, #104]	@ (8001170 <main+0x100>)
 8001106:	4814      	ldr	r0, [pc, #80]	@ (8001158 <main+0xe8>)
 8001108:	f015 fd92 	bl	8016c30 <strstr>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00e      	beq.n	8001130 <main+0xc0>
       {
         // Transmit acknowledgment back to the PC
  		 esp8266_connect_to_wifi("TP_LINK", "1122334455", "172.24.18.40", "443");
 8001112:	4b18      	ldr	r3, [pc, #96]	@ (8001174 <main+0x104>)
 8001114:	4a18      	ldr	r2, [pc, #96]	@ (8001178 <main+0x108>)
 8001116:	4919      	ldr	r1, [pc, #100]	@ (800117c <main+0x10c>)
 8001118:	4819      	ldr	r0, [pc, #100]	@ (8001180 <main+0x110>)
 800111a:	f7ff fbd7 	bl	80008cc <esp8266_connect_to_wifi>
  		 printf("esp8266_connect_to_wifi called");
 800111e:	4819      	ldr	r0, [pc, #100]	@ (8001184 <main+0x114>)
 8001120:	f015 fba4 	bl	801686c <iprintf>
  	   //HAL_UART_Transmit_IT(&huart5, (uint8_t*)msg_2, strlen(msg_2));
  	   memset(uart_rx_buffer, 0, sizeof(uart_rx_buffer));
 8001124:	2208      	movs	r2, #8
 8001126:	2100      	movs	r1, #0
 8001128:	480b      	ldr	r0, [pc, #44]	@ (8001158 <main+0xe8>)
 800112a:	f015 fd45 	bl	8016bb8 <memset>
 800112e:	e7af      	b.n	8001090 <main+0x20>
       }
      else if (strstr((char*)uart_rx_buffer, "GDC") != NULL)
 8001130:	4915      	ldr	r1, [pc, #84]	@ (8001188 <main+0x118>)
 8001132:	4809      	ldr	r0, [pc, #36]	@ (8001158 <main+0xe8>)
 8001134:	f015 fd7c 	bl	8016c30 <strstr>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d007      	beq.n	800114e <main+0xde>
       {
  	   // Transmit acknowledgment back to the PC
         receive_certificate();
 800113e:	f7ff fea3 	bl	8000e88 <receive_certificate>
  	   memset(uart_rx_buffer, 0, sizeof(uart_rx_buffer));
 8001142:	2208      	movs	r2, #8
 8001144:	2100      	movs	r1, #0
 8001146:	4804      	ldr	r0, [pc, #16]	@ (8001158 <main+0xe8>)
 8001148:	f015 fd36 	bl	8016bb8 <memset>
 800114c:	e7a0      	b.n	8001090 <main+0x20>
       }
      else{printf("i am in main while loop\n");}
 800114e:	480f      	ldr	r0, [pc, #60]	@ (800118c <main+0x11c>)
 8001150:	f015 fbf4 	bl	801693c <puts>
  	  if(HAL_UART_Receive(&huart4, (uint8_t*)uart_rx_buffer, sizeof(uart_rx_buffer), 1000) == HAL_OK || HAL_UART_Receive(&huart4, (uint8_t*)uart_rx_buffer, sizeof(uart_rx_buffer), 50) == HAL_TIMEOUT )
 8001154:	e79c      	b.n	8001090 <main+0x20>
 8001156:	bf00      	nop
 8001158:	2000099c 	.word	0x2000099c
 800115c:	200000f0 	.word	0x200000f0
 8001160:	08018078 	.word	0x08018078
 8001164:	0801807c 	.word	0x0801807c
 8001168:	20000da4 	.word	0x20000da4
 800116c:	08018084 	.word	0x08018084
 8001170:	08018088 	.word	0x08018088
 8001174:	08018090 	.word	0x08018090
 8001178:	08018094 	.word	0x08018094
 800117c:	080180a4 	.word	0x080180a4
 8001180:	080180b0 	.word	0x080180b0
 8001184:	080180b8 	.word	0x080180b8
 8001188:	080180d8 	.word	0x080180d8
 800118c:	080180dc 	.word	0x080180dc

08001190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b094      	sub	sp, #80	@ 0x50
 8001194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001196:	f107 0320 	add.w	r3, r7, #32
 800119a:	2230      	movs	r2, #48	@ 0x30
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f015 fd0a 	bl	8016bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b4:	2300      	movs	r3, #0
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	4b28      	ldr	r3, [pc, #160]	@ (800125c <SystemClock_Config+0xcc>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011bc:	4a27      	ldr	r2, [pc, #156]	@ (800125c <SystemClock_Config+0xcc>)
 80011be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c4:	4b25      	ldr	r3, [pc, #148]	@ (800125c <SystemClock_Config+0xcc>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	4b22      	ldr	r3, [pc, #136]	@ (8001260 <SystemClock_Config+0xd0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a21      	ldr	r2, [pc, #132]	@ (8001260 <SystemClock_Config+0xd0>)
 80011da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <SystemClock_Config+0xd0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ec:	2302      	movs	r3, #2
 80011ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f0:	2301      	movs	r3, #1
 80011f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f4:	2310      	movs	r3, #16
 80011f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f8:	2302      	movs	r3, #2
 80011fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011fc:	2300      	movs	r3, #0
 80011fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001200:	2308      	movs	r3, #8
 8001202:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001204:	2378      	movs	r3, #120	@ 0x78
 8001206:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001208:	2302      	movs	r3, #2
 800120a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800120c:	2305      	movs	r3, #5
 800120e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001210:	f107 0320 	add.w	r3, r7, #32
 8001214:	4618      	mov	r0, r3
 8001216:	f001 f9e9 	bl	80025ec <HAL_RCC_OscConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001220:	f000 f8e8 	bl	80013f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001224:	230f      	movs	r3, #15
 8001226:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001228:	2302      	movs	r3, #2
 800122a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001230:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001234:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001236:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800123a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	2103      	movs	r1, #3
 8001242:	4618      	mov	r0, r3
 8001244:	f001 fc4a 	bl	8002adc <HAL_RCC_ClockConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800124e:	f000 f8d1 	bl	80013f4 <Error_Handler>
  }
}
 8001252:	bf00      	nop
 8001254:	3750      	adds	r7, #80	@ 0x50
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800
 8001260:	40007000 	.word	0x40007000

08001264 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_Init 0 */
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */
  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <MX_RNG_Init+0x20>)
 800126a:	4a07      	ldr	r2, [pc, #28]	@ (8001288 <MX_RNG_Init+0x24>)
 800126c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	@ (8001284 <MX_RNG_Init+0x20>)
 8001270:	f001 fe14 	bl	8002e9c <HAL_RNG_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800127a:	f000 f8bb 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */
  /* USER CODE END RNG_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200000e0 	.word	0x200000e0
 8001288:	50060800 	.word	0x50060800

0800128c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_Init 0 */
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */
  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001290:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <MX_UART4_Init+0x4c>)
 8001292:	4a12      	ldr	r2, [pc, #72]	@ (80012dc <MX_UART4_Init+0x50>)
 8001294:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001296:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <MX_UART4_Init+0x4c>)
 8001298:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800129c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <MX_UART4_Init+0x4c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <MX_UART4_Init+0x4c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <MX_UART4_Init+0x4c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012b0:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <MX_UART4_Init+0x4c>)
 80012b2:	220c      	movs	r2, #12
 80012b4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b6:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <MX_UART4_Init+0x4c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <MX_UART4_Init+0x4c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012c2:	4805      	ldr	r0, [pc, #20]	@ (80012d8 <MX_UART4_Init+0x4c>)
 80012c4:	f001 fed3 	bl	800306e <HAL_UART_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80012ce:	f000 f891 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */
  /* USER CODE END UART4_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200000f0 	.word	0x200000f0
 80012dc:	40004c00 	.word	0x40004c00

080012e0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_Init 0 */
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */
  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80012e4:	4b11      	ldr	r3, [pc, #68]	@ (800132c <MX_UART5_Init+0x4c>)
 80012e6:	4a12      	ldr	r2, [pc, #72]	@ (8001330 <MX_UART5_Init+0x50>)
 80012e8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80012ea:	4b10      	ldr	r3, [pc, #64]	@ (800132c <MX_UART5_Init+0x4c>)
 80012ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012f0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	@ (800132c <MX_UART5_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <MX_UART5_Init+0x4c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <MX_UART5_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001304:	4b09      	ldr	r3, [pc, #36]	@ (800132c <MX_UART5_Init+0x4c>)
 8001306:	220c      	movs	r2, #12
 8001308:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130a:	4b08      	ldr	r3, [pc, #32]	@ (800132c <MX_UART5_Init+0x4c>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <MX_UART5_Init+0x4c>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001316:	4805      	ldr	r0, [pc, #20]	@ (800132c <MX_UART5_Init+0x4c>)
 8001318:	f001 fea9 	bl	800306e <HAL_UART_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001322:	f000 f867 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
  /* USER CODE END UART5_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000138 	.word	0x20000138
 8001330:	40005000 	.word	0x40005000

08001334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	@ 0x28
 8001338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	4b27      	ldr	r3, [pc, #156]	@ (80013ec <MX_GPIO_Init+0xb8>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	4a26      	ldr	r2, [pc, #152]	@ (80013ec <MX_GPIO_Init+0xb8>)
 8001354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001358:	6313      	str	r3, [r2, #48]	@ 0x30
 800135a:	4b24      	ldr	r3, [pc, #144]	@ (80013ec <MX_GPIO_Init+0xb8>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b20      	ldr	r3, [pc, #128]	@ (80013ec <MX_GPIO_Init+0xb8>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	4a1f      	ldr	r2, [pc, #124]	@ (80013ec <MX_GPIO_Init+0xb8>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	@ 0x30
 8001376:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <MX_GPIO_Init+0xb8>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	4b19      	ldr	r3, [pc, #100]	@ (80013ec <MX_GPIO_Init+0xb8>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	4a18      	ldr	r2, [pc, #96]	@ (80013ec <MX_GPIO_Init+0xb8>)
 800138c:	f043 0308 	orr.w	r3, r3, #8
 8001390:	6313      	str	r3, [r2, #48]	@ 0x30
 8001392:	4b16      	ldr	r3, [pc, #88]	@ (80013ec <MX_GPIO_Init+0xb8>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f003 0308 	and.w	r3, r3, #8
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <MX_GPIO_Init+0xb8>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a11      	ldr	r2, [pc, #68]	@ (80013ec <MX_GPIO_Init+0xb8>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <MX_GPIO_Init+0xb8>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 80013c0:	480b      	ldr	r0, [pc, #44]	@ (80013f0 <MX_GPIO_Init+0xbc>)
 80013c2:	f001 f8f9 	bl	80025b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD11 PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80013c6:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4619      	mov	r1, r3
 80013de:	4804      	ldr	r0, [pc, #16]	@ (80013f0 <MX_GPIO_Init+0xbc>)
 80013e0:	f000 ff4e 	bl	8002280 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013e4:	bf00      	nop
 80013e6:	3728      	adds	r7, #40	@ 0x28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020c00 	.word	0x40020c00

080013f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <HAL_MspInit+0x4c>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001412:	4a0f      	ldr	r2, [pc, #60]	@ (8001450 <HAL_MspInit+0x4c>)
 8001414:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001418:	6453      	str	r3, [r2, #68]	@ 0x44
 800141a:	4b0d      	ldr	r3, [pc, #52]	@ (8001450 <HAL_MspInit+0x4c>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	603b      	str	r3, [r7, #0]
 800142a:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <HAL_MspInit+0x4c>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142e:	4a08      	ldr	r2, [pc, #32]	@ (8001450 <HAL_MspInit+0x4c>)
 8001430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001434:	6413      	str	r3, [r2, #64]	@ 0x40
 8001436:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <HAL_MspInit+0x4c>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800

08001454 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0e      	ldr	r2, [pc, #56]	@ (800149c <HAL_RNG_MspInit+0x48>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d115      	bne.n	8001492 <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b0d      	ldr	r3, [pc, #52]	@ (80014a0 <HAL_RNG_MspInit+0x4c>)
 800146c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800146e:	4a0c      	ldr	r2, [pc, #48]	@ (80014a0 <HAL_RNG_MspInit+0x4c>)
 8001470:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001474:	6353      	str	r3, [r2, #52]	@ 0x34
 8001476:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <HAL_RNG_MspInit+0x4c>)
 8001478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800147a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	2050      	movs	r0, #80	@ 0x50
 8001488:	f000 fb59 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 800148c:	2050      	movs	r0, #80	@ 0x50
 800148e:	f000 fb72 	bl	8001b76 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	50060800 	.word	0x50060800
 80014a0:	40023800 	.word	0x40023800

080014a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08c      	sub	sp, #48	@ 0x30
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 031c 	add.w	r3, r7, #28
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a49      	ldr	r2, [pc, #292]	@ (80015e8 <HAL_UART_MspInit+0x144>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d134      	bne.n	8001530 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
 80014ca:	4b48      	ldr	r3, [pc, #288]	@ (80015ec <HAL_UART_MspInit+0x148>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ce:	4a47      	ldr	r2, [pc, #284]	@ (80015ec <HAL_UART_MspInit+0x148>)
 80014d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80014d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d6:	4b45      	ldr	r3, [pc, #276]	@ (80015ec <HAL_UART_MspInit+0x148>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014de:	61bb      	str	r3, [r7, #24]
 80014e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	4b41      	ldr	r3, [pc, #260]	@ (80015ec <HAL_UART_MspInit+0x148>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4a40      	ldr	r2, [pc, #256]	@ (80015ec <HAL_UART_MspInit+0x148>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4b3e      	ldr	r3, [pc, #248]	@ (80015ec <HAL_UART_MspInit+0x148>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014fe:	2303      	movs	r3, #3
 8001500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150a:	2303      	movs	r3, #3
 800150c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800150e:	2308      	movs	r3, #8
 8001510:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	4619      	mov	r1, r3
 8001518:	4835      	ldr	r0, [pc, #212]	@ (80015f0 <HAL_UART_MspInit+0x14c>)
 800151a:	f000 feb1 	bl	8002280 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	2034      	movs	r0, #52	@ 0x34
 8001524:	f000 fb0b 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001528:	2034      	movs	r0, #52	@ 0x34
 800152a:	f000 fb24 	bl	8001b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 800152e:	e057      	b.n	80015e0 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==UART5)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a2f      	ldr	r2, [pc, #188]	@ (80015f4 <HAL_UART_MspInit+0x150>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d152      	bne.n	80015e0 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_UART5_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b2b      	ldr	r3, [pc, #172]	@ (80015ec <HAL_UART_MspInit+0x148>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	4a2a      	ldr	r2, [pc, #168]	@ (80015ec <HAL_UART_MspInit+0x148>)
 8001544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001548:	6413      	str	r3, [r2, #64]	@ 0x40
 800154a:	4b28      	ldr	r3, [pc, #160]	@ (80015ec <HAL_UART_MspInit+0x148>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b24      	ldr	r3, [pc, #144]	@ (80015ec <HAL_UART_MspInit+0x148>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	4a23      	ldr	r2, [pc, #140]	@ (80015ec <HAL_UART_MspInit+0x148>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	6313      	str	r3, [r2, #48]	@ 0x30
 8001566:	4b21      	ldr	r3, [pc, #132]	@ (80015ec <HAL_UART_MspInit+0x148>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	4b1d      	ldr	r3, [pc, #116]	@ (80015ec <HAL_UART_MspInit+0x148>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	4a1c      	ldr	r2, [pc, #112]	@ (80015ec <HAL_UART_MspInit+0x148>)
 800157c:	f043 0308 	orr.w	r3, r3, #8
 8001580:	6313      	str	r3, [r2, #48]	@ 0x30
 8001582:	4b1a      	ldr	r3, [pc, #104]	@ (80015ec <HAL_UART_MspInit+0x148>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800158e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80015a0:	2308      	movs	r3, #8
 80015a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	4813      	ldr	r0, [pc, #76]	@ (80015f8 <HAL_UART_MspInit+0x154>)
 80015ac:	f000 fe68 	bl	8002280 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015b0:	2304      	movs	r3, #4
 80015b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80015c0:	2308      	movs	r3, #8
 80015c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	4619      	mov	r1, r3
 80015ca:	480c      	ldr	r0, [pc, #48]	@ (80015fc <HAL_UART_MspInit+0x158>)
 80015cc:	f000 fe58 	bl	8002280 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	2035      	movs	r0, #53	@ 0x35
 80015d6:	f000 fab2 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80015da:	2035      	movs	r0, #53	@ 0x35
 80015dc:	f000 facb 	bl	8001b76 <HAL_NVIC_EnableIRQ>
}
 80015e0:	bf00      	nop
 80015e2:	3730      	adds	r7, #48	@ 0x30
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40004c00 	.word	0x40004c00
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020000 	.word	0x40020000
 80015f4:	40005000 	.word	0x40005000
 80015f8:	40020800 	.word	0x40020800
 80015fc:	40020c00 	.word	0x40020c00

08001600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <NMI_Handler+0x4>

08001608 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <HardFault_Handler+0x4>

08001610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <MemManage_Handler+0x4>

08001618 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <BusFault_Handler+0x4>

08001620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <UsageFault_Handler+0x4>

08001628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001656:	f000 f953 	bl	8001900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001664:	4802      	ldr	r0, [pc, #8]	@ (8001670 <UART4_IRQHandler+0x10>)
 8001666:	f001 fe75 	bl	8003354 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200000f0 	.word	0x200000f0

08001674 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001678:	4802      	ldr	r0, [pc, #8]	@ (8001684 <UART5_IRQHandler+0x10>)
 800167a:	f001 fe6b 	bl	8003354 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000138 	.word	0x20000138

08001688 <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 800168c:	4802      	ldr	r0, [pc, #8]	@ (8001698 <HASH_RNG_IRQHandler+0x10>)
 800168e:	f001 fc85 	bl	8002f9c <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200000e0 	.word	0x200000e0

0800169c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	e00a      	b.n	80016c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016ae:	f3af 8000 	nop.w
 80016b2:	4601      	mov	r1, r0
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	1c5a      	adds	r2, r3, #1
 80016b8:	60ba      	str	r2, [r7, #8]
 80016ba:	b2ca      	uxtb	r2, r1
 80016bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	3301      	adds	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	dbf0      	blt.n	80016ae <_read+0x12>
  }

  return len;
 80016cc:	687b      	ldr	r3, [r7, #4]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	60f8      	str	r0, [r7, #12]
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	e009      	b.n	80016fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	1c5a      	adds	r2, r3, #1
 80016ec:	60ba      	str	r2, [r7, #8]
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	3301      	adds	r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	429a      	cmp	r2, r3
 8001702:	dbf1      	blt.n	80016e8 <_write+0x12>
  }
  return len;
 8001704:	687b      	ldr	r3, [r7, #4]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <_close>:

int _close(int file)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001716:	f04f 33ff 	mov.w	r3, #4294967295
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001736:	605a      	str	r2, [r3, #4]
  return 0;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <_isatty>:

int _isatty(int file)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800174e:	2301      	movs	r3, #1
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001780:	4a14      	ldr	r2, [pc, #80]	@ (80017d4 <_sbrk+0x5c>)
 8001782:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <_sbrk+0x60>)
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800178c:	4b13      	ldr	r3, [pc, #76]	@ (80017dc <_sbrk+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d102      	bne.n	800179a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001794:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <_sbrk+0x64>)
 8001796:	4a12      	ldr	r2, [pc, #72]	@ (80017e0 <_sbrk+0x68>)
 8001798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800179a:	4b10      	ldr	r3, [pc, #64]	@ (80017dc <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d207      	bcs.n	80017b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a8:	f015 faae 	bl	8016d08 <__errno>
 80017ac:	4603      	mov	r3, r0
 80017ae:	220c      	movs	r2, #12
 80017b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
 80017b6:	e009      	b.n	80017cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b8:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017be:	4b07      	ldr	r3, [pc, #28]	@ (80017dc <_sbrk+0x64>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	4a05      	ldr	r2, [pc, #20]	@ (80017dc <_sbrk+0x64>)
 80017c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ca:	68fb      	ldr	r3, [r7, #12]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20020000 	.word	0x20020000
 80017d8:	00000400 	.word	0x00000400
 80017dc:	200011a4 	.word	0x200011a4
 80017e0:	20001318 	.word	0x20001318

080017e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <SystemInit+0x20>)
 80017ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ee:	4a05      	ldr	r2, [pc, #20]	@ (8001804 <SystemInit+0x20>)
 80017f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001808:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001840 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800180c:	f7ff ffea 	bl	80017e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001810:	480c      	ldr	r0, [pc, #48]	@ (8001844 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001812:	490d      	ldr	r1, [pc, #52]	@ (8001848 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001814:	4a0d      	ldr	r2, [pc, #52]	@ (800184c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001818:	e002      	b.n	8001820 <LoopCopyDataInit>

0800181a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800181c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181e:	3304      	adds	r3, #4

08001820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001824:	d3f9      	bcc.n	800181a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001826:	4a0a      	ldr	r2, [pc, #40]	@ (8001850 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001828:	4c0a      	ldr	r4, [pc, #40]	@ (8001854 <LoopFillZerobss+0x22>)
  movs r3, #0
 800182a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800182c:	e001      	b.n	8001832 <LoopFillZerobss>

0800182e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001830:	3204      	adds	r2, #4

08001832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001834:	d3fb      	bcc.n	800182e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001836:	f015 fa6d 	bl	8016d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800183a:	f7ff fc19 	bl	8001070 <main>
  bx  lr    
 800183e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001840:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001848:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 800184c:	0801b84c 	.word	0x0801b84c
  ldr r2, =_sbss
 8001850:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8001854:	20001318 	.word	0x20001318

08001858 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <ADC_IRQHandler>
	...

0800185c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001860:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0d      	ldr	r2, [pc, #52]	@ (800189c <HAL_Init+0x40>)
 8001866:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800186a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800186c:	4b0b      	ldr	r3, [pc, #44]	@ (800189c <HAL_Init+0x40>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0a      	ldr	r2, [pc, #40]	@ (800189c <HAL_Init+0x40>)
 8001872:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001876:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001878:	4b08      	ldr	r3, [pc, #32]	@ (800189c <HAL_Init+0x40>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a07      	ldr	r2, [pc, #28]	@ (800189c <HAL_Init+0x40>)
 800187e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001882:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001884:	2003      	movs	r0, #3
 8001886:	f000 f94f 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800188a:	200f      	movs	r0, #15
 800188c:	f000 f808 	bl	80018a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001890:	f7ff fdb8 	bl	8001404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023c00 	.word	0x40023c00

080018a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a8:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <HAL_InitTick+0x54>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b12      	ldr	r3, [pc, #72]	@ (80018f8 <HAL_InitTick+0x58>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4619      	mov	r1, r3
 80018b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 f967 	bl	8001b92 <HAL_SYSTICK_Config>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00e      	b.n	80018ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b0f      	cmp	r3, #15
 80018d2:	d80a      	bhi.n	80018ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d4:	2200      	movs	r2, #0
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f000 f92f 	bl	8001b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e0:	4a06      	ldr	r2, [pc, #24]	@ (80018fc <HAL_InitTick+0x5c>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e000      	b.n	80018ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000054 	.word	0x20000054
 80018f8:	2000005c 	.word	0x2000005c
 80018fc:	20000058 	.word	0x20000058

08001900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_IncTick+0x20>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <HAL_IncTick+0x24>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4413      	add	r3, r2
 8001910:	4a04      	ldr	r2, [pc, #16]	@ (8001924 <HAL_IncTick+0x24>)
 8001912:	6013      	str	r3, [r2, #0]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	2000005c 	.word	0x2000005c
 8001924:	200011a8 	.word	0x200011a8

08001928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return uwTick;
 800192c:	4b03      	ldr	r3, [pc, #12]	@ (800193c <HAL_GetTick+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	200011a8 	.word	0x200011a8

08001940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001948:	f7ff ffee 	bl	8001928 <HAL_GetTick>
 800194c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001958:	d005      	beq.n	8001966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800195a:	4b0a      	ldr	r3, [pc, #40]	@ (8001984 <HAL_Delay+0x44>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4413      	add	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001966:	bf00      	nop
 8001968:	f7ff ffde 	bl	8001928 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	429a      	cmp	r2, r3
 8001976:	d8f7      	bhi.n	8001968 <HAL_Delay+0x28>
  {
  }
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	2000005c 	.word	0x2000005c

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	@ (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db0b      	blt.n	8001a16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4907      	ldr	r1, [pc, #28]	@ (8001a24 <__NVIC_EnableIRQ+0x38>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	db0a      	blt.n	8001a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	490c      	ldr	r1, [pc, #48]	@ (8001a74 <__NVIC_SetPriority+0x4c>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	0112      	lsls	r2, r2, #4
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a50:	e00a      	b.n	8001a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4908      	ldr	r1, [pc, #32]	@ (8001a78 <__NVIC_SetPriority+0x50>)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	3b04      	subs	r3, #4
 8001a60:	0112      	lsls	r2, r2, #4
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	440b      	add	r3, r1
 8001a66:	761a      	strb	r2, [r3, #24]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000e100 	.word	0xe000e100
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	@ 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f1c3 0307 	rsb	r3, r3, #7
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	bf28      	it	cs
 8001a9a:	2304      	movcs	r3, #4
 8001a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d902      	bls.n	8001aac <NVIC_EncodePriority+0x30>
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b03      	subs	r3, #3
 8001aaa:	e000      	b.n	8001aae <NVIC_EncodePriority+0x32>
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	401a      	ands	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43d9      	mvns	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	4313      	orrs	r3, r2
         );
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3724      	adds	r7, #36	@ 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001af4:	d301      	bcc.n	8001afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00f      	b.n	8001b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afa:	4a0a      	ldr	r2, [pc, #40]	@ (8001b24 <SysTick_Config+0x40>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b02:	210f      	movs	r1, #15
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f7ff ff8e 	bl	8001a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0c:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <SysTick_Config+0x40>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b12:	4b04      	ldr	r3, [pc, #16]	@ (8001b24 <SysTick_Config+0x40>)
 8001b14:	2207      	movs	r2, #7
 8001b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	e000e010 	.word	0xe000e010

08001b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff29 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b50:	f7ff ff3e 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	6978      	ldr	r0, [r7, #20]
 8001b5c:	f7ff ff8e 	bl	8001a7c <NVIC_EncodePriority>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff5d 	bl	8001a28 <__NVIC_SetPriority>
}
 8001b6e:	bf00      	nop
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff31 	bl	80019ec <__NVIC_EnableIRQ>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffa2 	bl	8001ae4 <SysTick_Config>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff feb6 	bl	8001928 <HAL_GetTick>
 8001bbc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d008      	beq.n	8001bdc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2280      	movs	r2, #128	@ 0x80
 8001bce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e052      	b.n	8001c82 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0216 	bic.w	r2, r2, #22
 8001bea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bfa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d103      	bne.n	8001c0c <HAL_DMA_Abort+0x62>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d007      	beq.n	8001c1c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0208 	bic.w	r2, r2, #8
 8001c1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0201 	bic.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c2c:	e013      	b.n	8001c56 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c2e:	f7ff fe7b 	bl	8001928 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b05      	cmp	r3, #5
 8001c3a:	d90c      	bls.n	8001c56 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2203      	movs	r2, #3
 8001c46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e015      	b.n	8001c82 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1e4      	bne.n	8001c2e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c68:	223f      	movs	r2, #63	@ 0x3f
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d004      	beq.n	8001ca8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2280      	movs	r2, #128	@ 0x80
 8001ca2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e00c      	b.n	8001cc2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2205      	movs	r2, #5
 8001cac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0201 	bic.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001ce2:	4b23      	ldr	r3, [pc, #140]	@ (8001d70 <HAL_FLASH_Program+0xa0>)
 8001ce4:	7e1b      	ldrb	r3, [r3, #24]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_FLASH_Program+0x1e>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e03b      	b.n	8001d66 <HAL_FLASH_Program+0x96>
 8001cee:	4b20      	ldr	r3, [pc, #128]	@ (8001d70 <HAL_FLASH_Program+0xa0>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001cf4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001cf8:	f000 f870 	bl	8001ddc <FLASH_WaitForLastOperation>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001d00:	7dfb      	ldrb	r3, [r7, #23]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d12b      	bne.n	8001d5e <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d105      	bne.n	8001d18 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001d0c:	783b      	ldrb	r3, [r7, #0]
 8001d0e:	4619      	mov	r1, r3
 8001d10:	68b8      	ldr	r0, [r7, #8]
 8001d12:	f000 f91b 	bl	8001f4c <FLASH_Program_Byte>
 8001d16:	e016      	b.n	8001d46 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d105      	bne.n	8001d2a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001d1e:	883b      	ldrh	r3, [r7, #0]
 8001d20:	4619      	mov	r1, r3
 8001d22:	68b8      	ldr	r0, [r7, #8]
 8001d24:	f000 f8ee 	bl	8001f04 <FLASH_Program_HalfWord>
 8001d28:	e00d      	b.n	8001d46 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d105      	bne.n	8001d3c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4619      	mov	r1, r3
 8001d34:	68b8      	ldr	r0, [r7, #8]
 8001d36:	f000 f8c3 	bl	8001ec0 <FLASH_Program_Word>
 8001d3a:	e004      	b.n	8001d46 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001d3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d40:	68b8      	ldr	r0, [r7, #8]
 8001d42:	f000 f88b 	bl	8001e5c <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d46:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001d4a:	f000 f847 	bl	8001ddc <FLASH_WaitForLastOperation>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001d52:	4b08      	ldr	r3, [pc, #32]	@ (8001d74 <HAL_FLASH_Program+0xa4>)
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	4a07      	ldr	r2, [pc, #28]	@ (8001d74 <HAL_FLASH_Program+0xa4>)
 8001d58:	f023 0301 	bic.w	r3, r3, #1
 8001d5c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001d5e:	4b04      	ldr	r3, [pc, #16]	@ (8001d70 <HAL_FLASH_Program+0xa0>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	761a      	strb	r2, [r3, #24]

  return status;
 8001d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200011ac 	.word	0x200011ac
 8001d74:	40023c00 	.word	0x40023c00

08001d78 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001d82:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <HAL_FLASH_Unlock+0x38>)
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	da0b      	bge.n	8001da2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001d8a:	4b09      	ldr	r3, [pc, #36]	@ (8001db0 <HAL_FLASH_Unlock+0x38>)
 8001d8c:	4a09      	ldr	r2, [pc, #36]	@ (8001db4 <HAL_FLASH_Unlock+0x3c>)
 8001d8e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001d90:	4b07      	ldr	r3, [pc, #28]	@ (8001db0 <HAL_FLASH_Unlock+0x38>)
 8001d92:	4a09      	ldr	r2, [pc, #36]	@ (8001db8 <HAL_FLASH_Unlock+0x40>)
 8001d94:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001d96:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <HAL_FLASH_Unlock+0x38>)
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	da01      	bge.n	8001da2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001da2:	79fb      	ldrb	r3, [r7, #7]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	40023c00 	.word	0x40023c00
 8001db4:	45670123 	.word	0x45670123
 8001db8:	cdef89ab 	.word	0xcdef89ab

08001dbc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001dc0:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <HAL_FLASH_Lock+0x1c>)
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	4a04      	ldr	r2, [pc, #16]	@ (8001dd8 <HAL_FLASH_Lock+0x1c>)
 8001dc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001dca:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	40023c00 	.word	0x40023c00

08001ddc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001de8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e54 <FLASH_WaitForLastOperation+0x78>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001dee:	f7ff fd9b 	bl	8001928 <HAL_GetTick>
 8001df2:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001df4:	e010      	b.n	8001e18 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfc:	d00c      	beq.n	8001e18 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d007      	beq.n	8001e14 <FLASH_WaitForLastOperation+0x38>
 8001e04:	f7ff fd90 	bl	8001928 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d201      	bcs.n	8001e18 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e019      	b.n	8001e4c <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001e18:	4b0f      	ldr	r3, [pc, #60]	@ (8001e58 <FLASH_WaitForLastOperation+0x7c>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1e8      	bne.n	8001df6 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001e24:	4b0c      	ldr	r3, [pc, #48]	@ (8001e58 <FLASH_WaitForLastOperation+0x7c>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001e30:	4b09      	ldr	r3, [pc, #36]	@ (8001e58 <FLASH_WaitForLastOperation+0x7c>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001e36:	4b08      	ldr	r3, [pc, #32]	@ (8001e58 <FLASH_WaitForLastOperation+0x7c>)
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001e42:	f000 f8a5 	bl	8001f90 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0

}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	200011ac 	.word	0x200011ac
 8001e58:	40023c00 	.word	0x40023c00

08001e5c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e68:	4b14      	ldr	r3, [pc, #80]	@ (8001ebc <FLASH_Program_DoubleWord+0x60>)
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	4a13      	ldr	r2, [pc, #76]	@ (8001ebc <FLASH_Program_DoubleWord+0x60>)
 8001e6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001e74:	4b11      	ldr	r3, [pc, #68]	@ (8001ebc <FLASH_Program_DoubleWord+0x60>)
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	4a10      	ldr	r2, [pc, #64]	@ (8001ebc <FLASH_Program_DoubleWord+0x60>)
 8001e7a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001e7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e80:	4b0e      	ldr	r3, [pc, #56]	@ (8001ebc <FLASH_Program_DoubleWord+0x60>)
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	4a0d      	ldr	r2, [pc, #52]	@ (8001ebc <FLASH_Program_DoubleWord+0x60>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001e92:	f3bf 8f6f 	isb	sy
}
 8001e96:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8001e98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	000a      	movs	r2, r1
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	68f9      	ldr	r1, [r7, #12]
 8001eaa:	3104      	adds	r1, #4
 8001eac:	4613      	mov	r3, r2
 8001eae:	600b      	str	r3, [r1, #0]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	40023c00 	.word	0x40023c00

08001ec0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001eca:	4b0d      	ldr	r3, [pc, #52]	@ (8001f00 <FLASH_Program_Word+0x40>)
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	4a0c      	ldr	r2, [pc, #48]	@ (8001f00 <FLASH_Program_Word+0x40>)
 8001ed0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ed4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f00 <FLASH_Program_Word+0x40>)
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	4a09      	ldr	r2, [pc, #36]	@ (8001f00 <FLASH_Program_Word+0x40>)
 8001edc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ee0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ee2:	4b07      	ldr	r3, [pc, #28]	@ (8001f00 <FLASH_Program_Word+0x40>)
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	4a06      	ldr	r2, [pc, #24]	@ (8001f00 <FLASH_Program_Word+0x40>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	601a      	str	r2, [r3, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	40023c00 	.word	0x40023c00

08001f04 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f10:	4b0d      	ldr	r3, [pc, #52]	@ (8001f48 <FLASH_Program_HalfWord+0x44>)
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	4a0c      	ldr	r2, [pc, #48]	@ (8001f48 <FLASH_Program_HalfWord+0x44>)
 8001f16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f48 <FLASH_Program_HalfWord+0x44>)
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	4a09      	ldr	r2, [pc, #36]	@ (8001f48 <FLASH_Program_HalfWord+0x44>)
 8001f22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f28:	4b07      	ldr	r3, [pc, #28]	@ (8001f48 <FLASH_Program_HalfWord+0x44>)
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	4a06      	ldr	r2, [pc, #24]	@ (8001f48 <FLASH_Program_HalfWord+0x44>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	887a      	ldrh	r2, [r7, #2]
 8001f38:	801a      	strh	r2, [r3, #0]
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40023c00 	.word	0x40023c00

08001f4c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f58:	4b0c      	ldr	r3, [pc, #48]	@ (8001f8c <FLASH_Program_Byte+0x40>)
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f8c <FLASH_Program_Byte+0x40>)
 8001f5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001f64:	4b09      	ldr	r3, [pc, #36]	@ (8001f8c <FLASH_Program_Byte+0x40>)
 8001f66:	4a09      	ldr	r2, [pc, #36]	@ (8001f8c <FLASH_Program_Byte+0x40>)
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f6c:	4b07      	ldr	r3, [pc, #28]	@ (8001f8c <FLASH_Program_Byte+0x40>)
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	4a06      	ldr	r2, [pc, #24]	@ (8001f8c <FLASH_Program_Byte+0x40>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	78fa      	ldrb	r2, [r7, #3]
 8001f7c:	701a      	strb	r2, [r3, #0]
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40023c00 	.word	0x40023c00

08001f90 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001f94:	4b27      	ldr	r3, [pc, #156]	@ (8002034 <FLASH_SetErrorCode+0xa4>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 0310 	and.w	r3, r3, #16
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001fa0:	4b25      	ldr	r3, [pc, #148]	@ (8002038 <FLASH_SetErrorCode+0xa8>)
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	f043 0310 	orr.w	r3, r3, #16
 8001fa8:	4a23      	ldr	r2, [pc, #140]	@ (8002038 <FLASH_SetErrorCode+0xa8>)
 8001faa:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001fac:	4b21      	ldr	r3, [pc, #132]	@ (8002034 <FLASH_SetErrorCode+0xa4>)
 8001fae:	2210      	movs	r2, #16
 8001fb0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001fb2:	4b20      	ldr	r3, [pc, #128]	@ (8002034 <FLASH_SetErrorCode+0xa4>)
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	f003 0320 	and.w	r3, r3, #32
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d008      	beq.n	8001fd0 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8002038 <FLASH_SetErrorCode+0xa8>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	f043 0308 	orr.w	r3, r3, #8
 8001fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8002038 <FLASH_SetErrorCode+0xa8>)
 8001fc8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001fca:	4b1a      	ldr	r3, [pc, #104]	@ (8002034 <FLASH_SetErrorCode+0xa4>)
 8001fcc:	2220      	movs	r2, #32
 8001fce:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001fd0:	4b18      	ldr	r3, [pc, #96]	@ (8002034 <FLASH_SetErrorCode+0xa4>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d008      	beq.n	8001fee <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001fdc:	4b16      	ldr	r3, [pc, #88]	@ (8002038 <FLASH_SetErrorCode+0xa8>)
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	4a14      	ldr	r2, [pc, #80]	@ (8002038 <FLASH_SetErrorCode+0xa8>)
 8001fe6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001fe8:	4b12      	ldr	r3, [pc, #72]	@ (8002034 <FLASH_SetErrorCode+0xa4>)
 8001fea:	2240      	movs	r2, #64	@ 0x40
 8001fec:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001fee:	4b11      	ldr	r3, [pc, #68]	@ (8002034 <FLASH_SetErrorCode+0xa4>)
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d008      	beq.n	800200c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8002038 <FLASH_SetErrorCode+0xa8>)
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f043 0302 	orr.w	r3, r3, #2
 8002002:	4a0d      	ldr	r2, [pc, #52]	@ (8002038 <FLASH_SetErrorCode+0xa8>)
 8002004:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002006:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <FLASH_SetErrorCode+0xa4>)
 8002008:	2280      	movs	r2, #128	@ 0x80
 800200a:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800200c:	4b09      	ldr	r3, [pc, #36]	@ (8002034 <FLASH_SetErrorCode+0xa4>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d008      	beq.n	800202a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002018:	4b07      	ldr	r3, [pc, #28]	@ (8002038 <FLASH_SetErrorCode+0xa8>)
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	f043 0320 	orr.w	r3, r3, #32
 8002020:	4a05      	ldr	r2, [pc, #20]	@ (8002038 <FLASH_SetErrorCode+0xa8>)
 8002022:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002024:	4b03      	ldr	r3, [pc, #12]	@ (8002034 <FLASH_SetErrorCode+0xa4>)
 8002026:	2202      	movs	r2, #2
 8002028:	60da      	str	r2, [r3, #12]
  }
}
 800202a:	bf00      	nop
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	40023c00 	.word	0x40023c00
 8002038:	200011ac 	.word	0x200011ac

0800203c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800204e:	4b31      	ldr	r3, [pc, #196]	@ (8002114 <HAL_FLASHEx_Erase+0xd8>)
 8002050:	7e1b      	ldrb	r3, [r3, #24]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d101      	bne.n	800205a <HAL_FLASHEx_Erase+0x1e>
 8002056:	2302      	movs	r3, #2
 8002058:	e058      	b.n	800210c <HAL_FLASHEx_Erase+0xd0>
 800205a:	4b2e      	ldr	r3, [pc, #184]	@ (8002114 <HAL_FLASHEx_Erase+0xd8>)
 800205c:	2201      	movs	r2, #1
 800205e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002060:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002064:	f7ff feba 	bl	8001ddc <FLASH_WaitForLastOperation>
 8002068:	4603      	mov	r3, r0
 800206a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800206c:	7bfb      	ldrb	r3, [r7, #15]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d148      	bne.n	8002104 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	f04f 32ff 	mov.w	r2, #4294967295
 8002078:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d115      	bne.n	80020ae <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	4619      	mov	r1, r3
 800208e:	4610      	mov	r0, r2
 8002090:	f000 f844 	bl	800211c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002094:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002098:	f7ff fea0 	bl	8001ddc <FLASH_WaitForLastOperation>
 800209c:	4603      	mov	r3, r0
 800209e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80020a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002118 <HAL_FLASHEx_Erase+0xdc>)
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002118 <HAL_FLASHEx_Erase+0xdc>)
 80020a6:	f023 0304 	bic.w	r3, r3, #4
 80020aa:	6113      	str	r3, [r2, #16]
 80020ac:	e028      	b.n	8002100 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	e01c      	b.n	80020f0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	4619      	mov	r1, r3
 80020be:	68b8      	ldr	r0, [r7, #8]
 80020c0:	f000 f850 	bl	8002164 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020c4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80020c8:	f7ff fe88 	bl	8001ddc <FLASH_WaitForLastOperation>
 80020cc:	4603      	mov	r3, r0
 80020ce:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80020d0:	4b11      	ldr	r3, [pc, #68]	@ (8002118 <HAL_FLASHEx_Erase+0xdc>)
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	4a10      	ldr	r2, [pc, #64]	@ (8002118 <HAL_FLASHEx_Erase+0xdc>)
 80020d6:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80020da:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	601a      	str	r2, [r3, #0]
          break;
 80020e8:	e00a      	b.n	8002100 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	3301      	adds	r3, #1
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	4413      	add	r3, r2
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d3da      	bcc.n	80020b6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002100:	f000 f878 	bl	80021f4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002104:	4b03      	ldr	r3, [pc, #12]	@ (8002114 <HAL_FLASHEx_Erase+0xd8>)
 8002106:	2200      	movs	r2, #0
 8002108:	761a      	strb	r2, [r3, #24]

  return status;
 800210a:	7bfb      	ldrb	r3, [r7, #15]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	200011ac 	.word	0x200011ac
 8002118:	40023c00 	.word	0x40023c00

0800211c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	6039      	str	r1, [r7, #0]
 8002126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002128:	4b0d      	ldr	r3, [pc, #52]	@ (8002160 <FLASH_MassErase+0x44>)
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	4a0c      	ldr	r2, [pc, #48]	@ (8002160 <FLASH_MassErase+0x44>)
 800212e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002132:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002134:	4b0a      	ldr	r3, [pc, #40]	@ (8002160 <FLASH_MassErase+0x44>)
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	4a09      	ldr	r2, [pc, #36]	@ (8002160 <FLASH_MassErase+0x44>)
 800213a:	f043 0304 	orr.w	r3, r3, #4
 800213e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002140:	4b07      	ldr	r3, [pc, #28]	@ (8002160 <FLASH_MassErase+0x44>)
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	021b      	lsls	r3, r3, #8
 8002148:	4313      	orrs	r3, r2
 800214a:	4a05      	ldr	r2, [pc, #20]	@ (8002160 <FLASH_MassErase+0x44>)
 800214c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002150:	6113      	str	r3, [r2, #16]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40023c00 	.word	0x40023c00

08002164 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d102      	bne.n	8002180 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	e010      	b.n	80021a2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d103      	bne.n	800218e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002186:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	e009      	b.n	80021a2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	2b02      	cmp	r3, #2
 8002192:	d103      	bne.n	800219c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002194:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	e002      	b.n	80021a2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800219c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80021a0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80021a2:	4b13      	ldr	r3, [pc, #76]	@ (80021f0 <FLASH_Erase_Sector+0x8c>)
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	4a12      	ldr	r2, [pc, #72]	@ (80021f0 <FLASH_Erase_Sector+0x8c>)
 80021a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80021ae:	4b10      	ldr	r3, [pc, #64]	@ (80021f0 <FLASH_Erase_Sector+0x8c>)
 80021b0:	691a      	ldr	r2, [r3, #16]
 80021b2:	490f      	ldr	r1, [pc, #60]	@ (80021f0 <FLASH_Erase_Sector+0x8c>)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80021ba:	4b0d      	ldr	r3, [pc, #52]	@ (80021f0 <FLASH_Erase_Sector+0x8c>)
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	4a0c      	ldr	r2, [pc, #48]	@ (80021f0 <FLASH_Erase_Sector+0x8c>)
 80021c0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80021c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <FLASH_Erase_Sector+0x8c>)
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	4313      	orrs	r3, r2
 80021d0:	4a07      	ldr	r2, [pc, #28]	@ (80021f0 <FLASH_Erase_Sector+0x8c>)
 80021d2:	f043 0302 	orr.w	r3, r3, #2
 80021d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80021d8:	4b05      	ldr	r3, [pc, #20]	@ (80021f0 <FLASH_Erase_Sector+0x8c>)
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	4a04      	ldr	r2, [pc, #16]	@ (80021f0 <FLASH_Erase_Sector+0x8c>)
 80021de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e2:	6113      	str	r3, [r2, #16]
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	40023c00 	.word	0x40023c00

080021f4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80021f8:	4b20      	ldr	r3, [pc, #128]	@ (800227c <FLASH_FlushCaches+0x88>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002200:	2b00      	cmp	r3, #0
 8002202:	d017      	beq.n	8002234 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002204:	4b1d      	ldr	r3, [pc, #116]	@ (800227c <FLASH_FlushCaches+0x88>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a1c      	ldr	r2, [pc, #112]	@ (800227c <FLASH_FlushCaches+0x88>)
 800220a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800220e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002210:	4b1a      	ldr	r3, [pc, #104]	@ (800227c <FLASH_FlushCaches+0x88>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a19      	ldr	r2, [pc, #100]	@ (800227c <FLASH_FlushCaches+0x88>)
 8002216:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	4b17      	ldr	r3, [pc, #92]	@ (800227c <FLASH_FlushCaches+0x88>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a16      	ldr	r2, [pc, #88]	@ (800227c <FLASH_FlushCaches+0x88>)
 8002222:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002226:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002228:	4b14      	ldr	r3, [pc, #80]	@ (800227c <FLASH_FlushCaches+0x88>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a13      	ldr	r2, [pc, #76]	@ (800227c <FLASH_FlushCaches+0x88>)
 800222e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002232:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002234:	4b11      	ldr	r3, [pc, #68]	@ (800227c <FLASH_FlushCaches+0x88>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800223c:	2b00      	cmp	r3, #0
 800223e:	d017      	beq.n	8002270 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002240:	4b0e      	ldr	r3, [pc, #56]	@ (800227c <FLASH_FlushCaches+0x88>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0d      	ldr	r2, [pc, #52]	@ (800227c <FLASH_FlushCaches+0x88>)
 8002246:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800224a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800224c:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <FLASH_FlushCaches+0x88>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0a      	ldr	r2, [pc, #40]	@ (800227c <FLASH_FlushCaches+0x88>)
 8002252:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	4b08      	ldr	r3, [pc, #32]	@ (800227c <FLASH_FlushCaches+0x88>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a07      	ldr	r2, [pc, #28]	@ (800227c <FLASH_FlushCaches+0x88>)
 800225e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002262:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002264:	4b05      	ldr	r3, [pc, #20]	@ (800227c <FLASH_FlushCaches+0x88>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a04      	ldr	r2, [pc, #16]	@ (800227c <FLASH_FlushCaches+0x88>)
 800226a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800226e:	6013      	str	r3, [r2, #0]
  }
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40023c00 	.word	0x40023c00

08002280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002280:	b480      	push	{r7}
 8002282:	b089      	sub	sp, #36	@ 0x24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002292:	2300      	movs	r3, #0
 8002294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	e16b      	b.n	8002574 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800229c:	2201      	movs	r2, #1
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	f040 815a 	bne.w	800256e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d005      	beq.n	80022d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d130      	bne.n	8002334 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	2203      	movs	r2, #3
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002308:	2201      	movs	r2, #1
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 0201 	and.w	r2, r3, #1
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	2b03      	cmp	r3, #3
 800233e:	d017      	beq.n	8002370 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	2203      	movs	r2, #3
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d123      	bne.n	80023c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	08da      	lsrs	r2, r3, #3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3208      	adds	r2, #8
 8002384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	220f      	movs	r2, #15
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	08da      	lsrs	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3208      	adds	r2, #8
 80023be:	69b9      	ldr	r1, [r7, #24]
 80023c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	2203      	movs	r2, #3
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 0203 	and.w	r2, r3, #3
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 80b4 	beq.w	800256e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	4b60      	ldr	r3, [pc, #384]	@ (800258c <HAL_GPIO_Init+0x30c>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240e:	4a5f      	ldr	r2, [pc, #380]	@ (800258c <HAL_GPIO_Init+0x30c>)
 8002410:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002414:	6453      	str	r3, [r2, #68]	@ 0x44
 8002416:	4b5d      	ldr	r3, [pc, #372]	@ (800258c <HAL_GPIO_Init+0x30c>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002422:	4a5b      	ldr	r2, [pc, #364]	@ (8002590 <HAL_GPIO_Init+0x310>)
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	089b      	lsrs	r3, r3, #2
 8002428:	3302      	adds	r3, #2
 800242a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	220f      	movs	r2, #15
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a52      	ldr	r2, [pc, #328]	@ (8002594 <HAL_GPIO_Init+0x314>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d02b      	beq.n	80024a6 <HAL_GPIO_Init+0x226>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a51      	ldr	r2, [pc, #324]	@ (8002598 <HAL_GPIO_Init+0x318>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d025      	beq.n	80024a2 <HAL_GPIO_Init+0x222>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a50      	ldr	r2, [pc, #320]	@ (800259c <HAL_GPIO_Init+0x31c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d01f      	beq.n	800249e <HAL_GPIO_Init+0x21e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a4f      	ldr	r2, [pc, #316]	@ (80025a0 <HAL_GPIO_Init+0x320>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d019      	beq.n	800249a <HAL_GPIO_Init+0x21a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a4e      	ldr	r2, [pc, #312]	@ (80025a4 <HAL_GPIO_Init+0x324>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d013      	beq.n	8002496 <HAL_GPIO_Init+0x216>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4d      	ldr	r2, [pc, #308]	@ (80025a8 <HAL_GPIO_Init+0x328>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00d      	beq.n	8002492 <HAL_GPIO_Init+0x212>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4c      	ldr	r2, [pc, #304]	@ (80025ac <HAL_GPIO_Init+0x32c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d007      	beq.n	800248e <HAL_GPIO_Init+0x20e>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a4b      	ldr	r2, [pc, #300]	@ (80025b0 <HAL_GPIO_Init+0x330>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d101      	bne.n	800248a <HAL_GPIO_Init+0x20a>
 8002486:	2307      	movs	r3, #7
 8002488:	e00e      	b.n	80024a8 <HAL_GPIO_Init+0x228>
 800248a:	2308      	movs	r3, #8
 800248c:	e00c      	b.n	80024a8 <HAL_GPIO_Init+0x228>
 800248e:	2306      	movs	r3, #6
 8002490:	e00a      	b.n	80024a8 <HAL_GPIO_Init+0x228>
 8002492:	2305      	movs	r3, #5
 8002494:	e008      	b.n	80024a8 <HAL_GPIO_Init+0x228>
 8002496:	2304      	movs	r3, #4
 8002498:	e006      	b.n	80024a8 <HAL_GPIO_Init+0x228>
 800249a:	2303      	movs	r3, #3
 800249c:	e004      	b.n	80024a8 <HAL_GPIO_Init+0x228>
 800249e:	2302      	movs	r3, #2
 80024a0:	e002      	b.n	80024a8 <HAL_GPIO_Init+0x228>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <HAL_GPIO_Init+0x228>
 80024a6:	2300      	movs	r3, #0
 80024a8:	69fa      	ldr	r2, [r7, #28]
 80024aa:	f002 0203 	and.w	r2, r2, #3
 80024ae:	0092      	lsls	r2, r2, #2
 80024b0:	4093      	lsls	r3, r2
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024b8:	4935      	ldr	r1, [pc, #212]	@ (8002590 <HAL_GPIO_Init+0x310>)
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	089b      	lsrs	r3, r3, #2
 80024be:	3302      	adds	r3, #2
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024c6:	4b3b      	ldr	r3, [pc, #236]	@ (80025b4 <HAL_GPIO_Init+0x334>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ea:	4a32      	ldr	r2, [pc, #200]	@ (80025b4 <HAL_GPIO_Init+0x334>)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024f0:	4b30      	ldr	r3, [pc, #192]	@ (80025b4 <HAL_GPIO_Init+0x334>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002514:	4a27      	ldr	r2, [pc, #156]	@ (80025b4 <HAL_GPIO_Init+0x334>)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800251a:	4b26      	ldr	r3, [pc, #152]	@ (80025b4 <HAL_GPIO_Init+0x334>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800253e:	4a1d      	ldr	r2, [pc, #116]	@ (80025b4 <HAL_GPIO_Init+0x334>)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002544:	4b1b      	ldr	r3, [pc, #108]	@ (80025b4 <HAL_GPIO_Init+0x334>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002568:	4a12      	ldr	r2, [pc, #72]	@ (80025b4 <HAL_GPIO_Init+0x334>)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3301      	adds	r3, #1
 8002572:	61fb      	str	r3, [r7, #28]
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	2b0f      	cmp	r3, #15
 8002578:	f67f ae90 	bls.w	800229c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	3724      	adds	r7, #36	@ 0x24
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800
 8002590:	40013800 	.word	0x40013800
 8002594:	40020000 	.word	0x40020000
 8002598:	40020400 	.word	0x40020400
 800259c:	40020800 	.word	0x40020800
 80025a0:	40020c00 	.word	0x40020c00
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40021400 	.word	0x40021400
 80025ac:	40021800 	.word	0x40021800
 80025b0:	40021c00 	.word	0x40021c00
 80025b4:	40013c00 	.word	0x40013c00

080025b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	807b      	strh	r3, [r7, #2]
 80025c4:	4613      	mov	r3, r2
 80025c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025c8:	787b      	ldrb	r3, [r7, #1]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ce:	887a      	ldrh	r2, [r7, #2]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025d4:	e003      	b.n	80025de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025d6:	887b      	ldrh	r3, [r7, #2]
 80025d8:	041a      	lsls	r2, r3, #16
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	619a      	str	r2, [r3, #24]
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e267      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d075      	beq.n	80026f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800260a:	4b88      	ldr	r3, [pc, #544]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b04      	cmp	r3, #4
 8002614:	d00c      	beq.n	8002630 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002616:	4b85      	ldr	r3, [pc, #532]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800261e:	2b08      	cmp	r3, #8
 8002620:	d112      	bne.n	8002648 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002622:	4b82      	ldr	r3, [pc, #520]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800262a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800262e:	d10b      	bne.n	8002648 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002630:	4b7e      	ldr	r3, [pc, #504]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d05b      	beq.n	80026f4 <HAL_RCC_OscConfig+0x108>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d157      	bne.n	80026f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e242      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002650:	d106      	bne.n	8002660 <HAL_RCC_OscConfig+0x74>
 8002652:	4b76      	ldr	r3, [pc, #472]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a75      	ldr	r2, [pc, #468]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e01d      	b.n	800269c <HAL_RCC_OscConfig+0xb0>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002668:	d10c      	bne.n	8002684 <HAL_RCC_OscConfig+0x98>
 800266a:	4b70      	ldr	r3, [pc, #448]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a6f      	ldr	r2, [pc, #444]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002670:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	4b6d      	ldr	r3, [pc, #436]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a6c      	ldr	r2, [pc, #432]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 800267c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	e00b      	b.n	800269c <HAL_RCC_OscConfig+0xb0>
 8002684:	4b69      	ldr	r3, [pc, #420]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a68      	ldr	r2, [pc, #416]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 800268a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	4b66      	ldr	r3, [pc, #408]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a65      	ldr	r2, [pc, #404]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800269a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d013      	beq.n	80026cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7ff f940 	bl	8001928 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ac:	f7ff f93c 	bl	8001928 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	@ 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e207      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	4b5b      	ldr	r3, [pc, #364]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0xc0>
 80026ca:	e014      	b.n	80026f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026cc:	f7ff f92c 	bl	8001928 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d4:	f7ff f928 	bl	8001928 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b64      	cmp	r3, #100	@ 0x64
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e1f3      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e6:	4b51      	ldr	r3, [pc, #324]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0xe8>
 80026f2:	e000      	b.n	80026f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d063      	beq.n	80027ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002702:	4b4a      	ldr	r3, [pc, #296]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00b      	beq.n	8002726 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800270e:	4b47      	ldr	r3, [pc, #284]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002716:	2b08      	cmp	r3, #8
 8002718:	d11c      	bne.n	8002754 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800271a:	4b44      	ldr	r3, [pc, #272]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d116      	bne.n	8002754 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002726:	4b41      	ldr	r3, [pc, #260]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d005      	beq.n	800273e <HAL_RCC_OscConfig+0x152>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d001      	beq.n	800273e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e1c7      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273e:	4b3b      	ldr	r3, [pc, #236]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4937      	ldr	r1, [pc, #220]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002752:	e03a      	b.n	80027ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d020      	beq.n	800279e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800275c:	4b34      	ldr	r3, [pc, #208]	@ (8002830 <HAL_RCC_OscConfig+0x244>)
 800275e:	2201      	movs	r2, #1
 8002760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002762:	f7ff f8e1 	bl	8001928 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800276a:	f7ff f8dd 	bl	8001928 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e1a8      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277c:	4b2b      	ldr	r3, [pc, #172]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002788:	4b28      	ldr	r3, [pc, #160]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4925      	ldr	r1, [pc, #148]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002798:	4313      	orrs	r3, r2
 800279a:	600b      	str	r3, [r1, #0]
 800279c:	e015      	b.n	80027ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800279e:	4b24      	ldr	r3, [pc, #144]	@ (8002830 <HAL_RCC_OscConfig+0x244>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7ff f8c0 	bl	8001928 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ac:	f7ff f8bc 	bl	8001928 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e187      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027be:	4b1b      	ldr	r3, [pc, #108]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d036      	beq.n	8002844 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d016      	beq.n	800280c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027de:	4b15      	ldr	r3, [pc, #84]	@ (8002834 <HAL_RCC_OscConfig+0x248>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e4:	f7ff f8a0 	bl	8001928 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ec:	f7ff f89c 	bl	8001928 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e167      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fe:	4b0b      	ldr	r3, [pc, #44]	@ (800282c <HAL_RCC_OscConfig+0x240>)
 8002800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0x200>
 800280a:	e01b      	b.n	8002844 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800280c:	4b09      	ldr	r3, [pc, #36]	@ (8002834 <HAL_RCC_OscConfig+0x248>)
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002812:	f7ff f889 	bl	8001928 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002818:	e00e      	b.n	8002838 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800281a:	f7ff f885 	bl	8001928 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d907      	bls.n	8002838 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e150      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
 800282c:	40023800 	.word	0x40023800
 8002830:	42470000 	.word	0x42470000
 8002834:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002838:	4b88      	ldr	r3, [pc, #544]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 800283a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1ea      	bne.n	800281a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 8097 	beq.w	8002980 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002852:	2300      	movs	r3, #0
 8002854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002856:	4b81      	ldr	r3, [pc, #516]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10f      	bne.n	8002882 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	4b7d      	ldr	r3, [pc, #500]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286a:	4a7c      	ldr	r2, [pc, #496]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 800286c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002870:	6413      	str	r3, [r2, #64]	@ 0x40
 8002872:	4b7a      	ldr	r3, [pc, #488]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800287e:	2301      	movs	r3, #1
 8002880:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002882:	4b77      	ldr	r3, [pc, #476]	@ (8002a60 <HAL_RCC_OscConfig+0x474>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288a:	2b00      	cmp	r3, #0
 800288c:	d118      	bne.n	80028c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800288e:	4b74      	ldr	r3, [pc, #464]	@ (8002a60 <HAL_RCC_OscConfig+0x474>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a73      	ldr	r2, [pc, #460]	@ (8002a60 <HAL_RCC_OscConfig+0x474>)
 8002894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800289a:	f7ff f845 	bl	8001928 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a2:	f7ff f841 	bl	8001928 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e10c      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002a60 <HAL_RCC_OscConfig+0x474>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0f0      	beq.n	80028a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d106      	bne.n	80028d6 <HAL_RCC_OscConfig+0x2ea>
 80028c8:	4b64      	ldr	r3, [pc, #400]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 80028ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028cc:	4a63      	ldr	r2, [pc, #396]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028d4:	e01c      	b.n	8002910 <HAL_RCC_OscConfig+0x324>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b05      	cmp	r3, #5
 80028dc:	d10c      	bne.n	80028f8 <HAL_RCC_OscConfig+0x30c>
 80028de:	4b5f      	ldr	r3, [pc, #380]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e2:	4a5e      	ldr	r2, [pc, #376]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 80028e4:	f043 0304 	orr.w	r3, r3, #4
 80028e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ea:	4b5c      	ldr	r3, [pc, #368]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ee:	4a5b      	ldr	r2, [pc, #364]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028f6:	e00b      	b.n	8002910 <HAL_RCC_OscConfig+0x324>
 80028f8:	4b58      	ldr	r3, [pc, #352]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 80028fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028fc:	4a57      	ldr	r2, [pc, #348]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 80028fe:	f023 0301 	bic.w	r3, r3, #1
 8002902:	6713      	str	r3, [r2, #112]	@ 0x70
 8002904:	4b55      	ldr	r3, [pc, #340]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002908:	4a54      	ldr	r2, [pc, #336]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 800290a:	f023 0304 	bic.w	r3, r3, #4
 800290e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d015      	beq.n	8002944 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002918:	f7ff f806 	bl	8001928 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291e:	e00a      	b.n	8002936 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002920:	f7ff f802 	bl	8001928 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800292e:	4293      	cmp	r3, r2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e0cb      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002936:	4b49      	ldr	r3, [pc, #292]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0ee      	beq.n	8002920 <HAL_RCC_OscConfig+0x334>
 8002942:	e014      	b.n	800296e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002944:	f7fe fff0 	bl	8001928 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800294a:	e00a      	b.n	8002962 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294c:	f7fe ffec 	bl	8001928 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e0b5      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002962:	4b3e      	ldr	r3, [pc, #248]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1ee      	bne.n	800294c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800296e:	7dfb      	ldrb	r3, [r7, #23]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d105      	bne.n	8002980 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002974:	4b39      	ldr	r3, [pc, #228]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002978:	4a38      	ldr	r2, [pc, #224]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 800297a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800297e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80a1 	beq.w	8002acc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800298a:	4b34      	ldr	r3, [pc, #208]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b08      	cmp	r3, #8
 8002994:	d05c      	beq.n	8002a50 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d141      	bne.n	8002a22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299e:	4b31      	ldr	r3, [pc, #196]	@ (8002a64 <HAL_RCC_OscConfig+0x478>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7fe ffc0 	bl	8001928 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ac:	f7fe ffbc 	bl	8001928 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e087      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029be:	4b27      	ldr	r3, [pc, #156]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69da      	ldr	r2, [r3, #28]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d8:	019b      	lsls	r3, r3, #6
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e0:	085b      	lsrs	r3, r3, #1
 80029e2:	3b01      	subs	r3, #1
 80029e4:	041b      	lsls	r3, r3, #16
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ec:	061b      	lsls	r3, r3, #24
 80029ee:	491b      	ldr	r1, [pc, #108]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a64 <HAL_RCC_OscConfig+0x478>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fa:	f7fe ff95 	bl	8001928 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a02:	f7fe ff91 	bl	8001928 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e05c      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a14:	4b11      	ldr	r3, [pc, #68]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0f0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x416>
 8002a20:	e054      	b.n	8002acc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a22:	4b10      	ldr	r3, [pc, #64]	@ (8002a64 <HAL_RCC_OscConfig+0x478>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a28:	f7fe ff7e 	bl	8001928 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a30:	f7fe ff7a 	bl	8001928 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e045      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a42:	4b06      	ldr	r3, [pc, #24]	@ (8002a5c <HAL_RCC_OscConfig+0x470>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0x444>
 8002a4e:	e03d      	b.n	8002acc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d107      	bne.n	8002a68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e038      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40007000 	.word	0x40007000
 8002a64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a68:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad8 <HAL_RCC_OscConfig+0x4ec>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d028      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d121      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d11a      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a98:	4013      	ands	r3, r2
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d111      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aae:	085b      	lsrs	r3, r3, #1
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d107      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800

08002adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0cc      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002af0:	4b68      	ldr	r3, [pc, #416]	@ (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d90c      	bls.n	8002b18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afe:	4b65      	ldr	r3, [pc, #404]	@ (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b06:	4b63      	ldr	r3, [pc, #396]	@ (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d001      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0b8      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d020      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b30:	4b59      	ldr	r3, [pc, #356]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4a58      	ldr	r2, [pc, #352]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b48:	4b53      	ldr	r3, [pc, #332]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	4a52      	ldr	r2, [pc, #328]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b54:	4b50      	ldr	r3, [pc, #320]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	494d      	ldr	r1, [pc, #308]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d044      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d107      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7a:	4b47      	ldr	r3, [pc, #284]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d119      	bne.n	8002bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e07f      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d003      	beq.n	8002b9a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d107      	bne.n	8002baa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d109      	bne.n	8002bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e06f      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002baa:	4b3b      	ldr	r3, [pc, #236]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e067      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bba:	4b37      	ldr	r3, [pc, #220]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f023 0203 	bic.w	r2, r3, #3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	4934      	ldr	r1, [pc, #208]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bcc:	f7fe feac 	bl	8001928 <HAL_GetTick>
 8002bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd2:	e00a      	b.n	8002bea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd4:	f7fe fea8 	bl	8001928 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e04f      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bea:	4b2b      	ldr	r3, [pc, #172]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 020c 	and.w	r2, r3, #12
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d1eb      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b25      	ldr	r3, [pc, #148]	@ (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d20c      	bcs.n	8002c24 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b22      	ldr	r3, [pc, #136]	@ (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c12:	4b20      	ldr	r3, [pc, #128]	@ (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e032      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c30:	4b19      	ldr	r3, [pc, #100]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	4916      	ldr	r1, [pc, #88]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d009      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c4e:	4b12      	ldr	r3, [pc, #72]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	490e      	ldr	r1, [pc, #56]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c62:	f000 f821 	bl	8002ca8 <HAL_RCC_GetSysClockFreq>
 8002c66:	4602      	mov	r2, r0
 8002c68:	4b0b      	ldr	r3, [pc, #44]	@ (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	091b      	lsrs	r3, r3, #4
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	490a      	ldr	r1, [pc, #40]	@ (8002c9c <HAL_RCC_ClockConfig+0x1c0>)
 8002c74:	5ccb      	ldrb	r3, [r1, r3]
 8002c76:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7a:	4a09      	ldr	r2, [pc, #36]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c7e:	4b09      	ldr	r3, [pc, #36]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fe fe0c 	bl	80018a0 <HAL_InitTick>

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40023c00 	.word	0x40023c00
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	08018c64 	.word	0x08018c64
 8002ca0:	20000054 	.word	0x20000054
 8002ca4:	20000058 	.word	0x20000058

08002ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cac:	b090      	sub	sp, #64	@ 0x40
 8002cae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cc0:	4b59      	ldr	r3, [pc, #356]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 030c 	and.w	r3, r3, #12
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d00d      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	f200 80a1 	bhi.w	8002e14 <HAL_RCC_GetSysClockFreq+0x16c>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x34>
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d003      	beq.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cda:	e09b      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cdc:	4b53      	ldr	r3, [pc, #332]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x184>)
 8002cde:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ce0:	e09b      	b.n	8002e1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ce2:	4b53      	ldr	r3, [pc, #332]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ce6:	e098      	b.n	8002e1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ce8:	4b4f      	ldr	r3, [pc, #316]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cf0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cf2:	4b4d      	ldr	r3, [pc, #308]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d028      	beq.n	8002d50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cfe:	4b4a      	ldr	r3, [pc, #296]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	099b      	lsrs	r3, r3, #6
 8002d04:	2200      	movs	r2, #0
 8002d06:	623b      	str	r3, [r7, #32]
 8002d08:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d10:	2100      	movs	r1, #0
 8002d12:	4b47      	ldr	r3, [pc, #284]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d14:	fb03 f201 	mul.w	r2, r3, r1
 8002d18:	2300      	movs	r3, #0
 8002d1a:	fb00 f303 	mul.w	r3, r0, r3
 8002d1e:	4413      	add	r3, r2
 8002d20:	4a43      	ldr	r2, [pc, #268]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d22:	fba0 1202 	umull	r1, r2, r0, r2
 8002d26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d28:	460a      	mov	r2, r1
 8002d2a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002d2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d2e:	4413      	add	r3, r2
 8002d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d34:	2200      	movs	r2, #0
 8002d36:	61bb      	str	r3, [r7, #24]
 8002d38:	61fa      	str	r2, [r7, #28]
 8002d3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d42:	f7fd fa9d 	bl	8000280 <__aeabi_uldivmod>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d4e:	e053      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d50:	4b35      	ldr	r3, [pc, #212]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	099b      	lsrs	r3, r3, #6
 8002d56:	2200      	movs	r2, #0
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	617a      	str	r2, [r7, #20]
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d62:	f04f 0b00 	mov.w	fp, #0
 8002d66:	4652      	mov	r2, sl
 8002d68:	465b      	mov	r3, fp
 8002d6a:	f04f 0000 	mov.w	r0, #0
 8002d6e:	f04f 0100 	mov.w	r1, #0
 8002d72:	0159      	lsls	r1, r3, #5
 8002d74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d78:	0150      	lsls	r0, r2, #5
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	ebb2 080a 	subs.w	r8, r2, sl
 8002d82:	eb63 090b 	sbc.w	r9, r3, fp
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d9a:	ebb2 0408 	subs.w	r4, r2, r8
 8002d9e:	eb63 0509 	sbc.w	r5, r3, r9
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	00eb      	lsls	r3, r5, #3
 8002dac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002db0:	00e2      	lsls	r2, r4, #3
 8002db2:	4614      	mov	r4, r2
 8002db4:	461d      	mov	r5, r3
 8002db6:	eb14 030a 	adds.w	r3, r4, sl
 8002dba:	603b      	str	r3, [r7, #0]
 8002dbc:	eb45 030b 	adc.w	r3, r5, fp
 8002dc0:	607b      	str	r3, [r7, #4]
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dce:	4629      	mov	r1, r5
 8002dd0:	028b      	lsls	r3, r1, #10
 8002dd2:	4621      	mov	r1, r4
 8002dd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dd8:	4621      	mov	r1, r4
 8002dda:	028a      	lsls	r2, r1, #10
 8002ddc:	4610      	mov	r0, r2
 8002dde:	4619      	mov	r1, r3
 8002de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002de2:	2200      	movs	r2, #0
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	60fa      	str	r2, [r7, #12]
 8002de8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dec:	f7fd fa48 	bl	8000280 <__aeabi_uldivmod>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4613      	mov	r3, r2
 8002df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002df8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	0c1b      	lsrs	r3, r3, #16
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	3301      	adds	r3, #1
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002e08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e12:	e002      	b.n	8002e1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e14:	4b05      	ldr	r3, [pc, #20]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x184>)
 8002e16:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3740      	adds	r7, #64	@ 0x40
 8002e20:	46bd      	mov	sp, r7
 8002e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	00f42400 	.word	0x00f42400
 8002e30:	017d7840 	.word	0x017d7840

08002e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e38:	4b03      	ldr	r3, [pc, #12]	@ (8002e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20000054 	.word	0x20000054

08002e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e50:	f7ff fff0 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002e54:	4602      	mov	r2, r0
 8002e56:	4b05      	ldr	r3, [pc, #20]	@ (8002e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	0a9b      	lsrs	r3, r3, #10
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	4903      	ldr	r1, [pc, #12]	@ (8002e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e62:	5ccb      	ldrb	r3, [r1, r3]
 8002e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	08018c74 	.word	0x08018c74

08002e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e78:	f7ff ffdc 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	4b05      	ldr	r3, [pc, #20]	@ (8002e94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	0b5b      	lsrs	r3, r3, #13
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	4903      	ldr	r1, [pc, #12]	@ (8002e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e8a:	5ccb      	ldrb	r3, [r1, r3]
 8002e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40023800 	.word	0x40023800
 8002e98:	08018c74 	.word	0x08018c74

08002e9c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e01c      	b.n	8002ee8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	795b      	ldrb	r3, [r3, #5]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d105      	bne.n	8002ec4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fe fac8 	bl	8001454 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 0204 	orr.w	r2, r2, #4
 8002ed8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	791b      	ldrb	r3, [r3, #4]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_RNG_GenerateRandomNumber+0x1a>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e044      	b.n	8002f94 <HAL_RNG_GenerateRandomNumber+0xa4>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	795b      	ldrb	r3, [r3, #5]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d133      	bne.n	8002f82 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f20:	f7fe fd02 	bl	8001928 <HAL_GetTick>
 8002f24:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002f26:	e018      	b.n	8002f5a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002f28:	f7fe fcfe 	bl	8001928 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d911      	bls.n	8002f5a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d00a      	beq.n	8002f5a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e01c      	b.n	8002f94 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d1df      	bne.n	8002f28 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	715a      	strb	r2, [r3, #5]
 8002f80:	e004      	b.n	8002f8c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2204      	movs	r2, #4
 8002f86:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	711a      	strb	r2, [r3, #4]

  return status;
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d005      	beq.n	8002fc6 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2210      	movs	r2, #16
 8002fbe:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	e009      	b.n	8002fda <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d004      	beq.n	8002fda <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2208      	movs	r2, #8
 8002fd4:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d10b      	bne.n	8002ff8 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f837 	bl	800305a <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8002ff4:	605a      	str	r2, [r3, #4]

    return;
 8002ff6:	e022      	b.n	800303e <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d01d      	beq.n	800303e <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0208 	bic.w	r2, r2, #8
 8003010:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	795b      	ldrb	r3, [r3, #5]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b04      	cmp	r3, #4
 8003024:	d00b      	beq.n	800303e <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	4619      	mov	r1, r3
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f803 	bl	8003044 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e042      	b.n	8003106 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d106      	bne.n	800309a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7fe fa05 	bl	80014a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2224      	movs	r2, #36	@ 0x24
 800309e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030b0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 fe00 	bl	8003cb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691a      	ldr	r2, [r3, #16]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030d6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030e6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2220      	movs	r2, #32
 80030f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2220      	movs	r2, #32
 80030fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b08a      	sub	sp, #40	@ 0x28
 8003112:	af02      	add	r7, sp, #8
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	603b      	str	r3, [r7, #0]
 800311a:	4613      	mov	r3, r2
 800311c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b20      	cmp	r3, #32
 800312c:	d175      	bne.n	800321a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <HAL_UART_Transmit+0x2c>
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e06e      	b.n	800321c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2221      	movs	r2, #33	@ 0x21
 8003148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800314c:	f7fe fbec 	bl	8001928 <HAL_GetTick>
 8003150:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	88fa      	ldrh	r2, [r7, #6]
 8003156:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	88fa      	ldrh	r2, [r7, #6]
 800315c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003166:	d108      	bne.n	800317a <HAL_UART_Transmit+0x6c>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d104      	bne.n	800317a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003170:	2300      	movs	r3, #0
 8003172:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	61bb      	str	r3, [r7, #24]
 8003178:	e003      	b.n	8003182 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800317e:	2300      	movs	r3, #0
 8003180:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003182:	e02e      	b.n	80031e2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2200      	movs	r2, #0
 800318c:	2180      	movs	r1, #128	@ 0x80
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 fb9c 	bl	80038cc <UART_WaitOnFlagUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d005      	beq.n	80031a6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2220      	movs	r2, #32
 800319e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e03a      	b.n	800321c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10b      	bne.n	80031c4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031ba:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	3302      	adds	r3, #2
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	e007      	b.n	80031d4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	781a      	ldrb	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	3301      	adds	r3, #1
 80031d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031d8:	b29b      	uxth	r3, r3
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1cb      	bne.n	8003184 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2200      	movs	r2, #0
 80031f4:	2140      	movs	r1, #64	@ 0x40
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 fb68 	bl	80038cc <UART_WaitOnFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d005      	beq.n	800320e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e006      	b.n	800321c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	e000      	b.n	800321c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800321a:	2302      	movs	r3, #2
  }
}
 800321c:	4618      	mov	r0, r3
 800321e:	3720      	adds	r7, #32
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08a      	sub	sp, #40	@ 0x28
 8003228:	af02      	add	r7, sp, #8
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	4613      	mov	r3, r2
 8003232:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b20      	cmp	r3, #32
 8003242:	f040 8081 	bne.w	8003348 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <HAL_UART_Receive+0x2e>
 800324c:	88fb      	ldrh	r3, [r7, #6]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e079      	b.n	800334a <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2222      	movs	r2, #34	@ 0x22
 8003260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800326a:	f7fe fb5d 	bl	8001928 <HAL_GetTick>
 800326e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	88fa      	ldrh	r2, [r7, #6]
 8003274:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	88fa      	ldrh	r2, [r7, #6]
 800327a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003284:	d108      	bne.n	8003298 <HAL_UART_Receive+0x74>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d104      	bne.n	8003298 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	e003      	b.n	80032a0 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800329c:	2300      	movs	r3, #0
 800329e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80032a0:	e047      	b.n	8003332 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2200      	movs	r2, #0
 80032aa:	2120      	movs	r1, #32
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 fb0d 	bl	80038cc <UART_WaitOnFlagUntilTimeout>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e042      	b.n	800334a <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10c      	bne.n	80032e4 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	3302      	adds	r3, #2
 80032e0:	61bb      	str	r3, [r7, #24]
 80032e2:	e01f      	b.n	8003324 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032ec:	d007      	beq.n	80032fe <HAL_UART_Receive+0xda>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10a      	bne.n	800330c <HAL_UART_Receive+0xe8>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	b2da      	uxtb	r2, r3
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	701a      	strb	r2, [r3, #0]
 800330a:	e008      	b.n	800331e <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003318:	b2da      	uxtb	r2, r3
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	3301      	adds	r3, #1
 8003322:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003328:	b29b      	uxth	r3, r3
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003336:	b29b      	uxth	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1b2      	bne.n	80032a2 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	e000      	b.n	800334a <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003348:	2302      	movs	r3, #2
  }
}
 800334a:	4618      	mov	r0, r3
 800334c:	3720      	adds	r7, #32
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b0ba      	sub	sp, #232	@ 0xe8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800337a:	2300      	movs	r3, #0
 800337c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003380:	2300      	movs	r3, #0
 8003382:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10f      	bne.n	80033ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800339a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800339e:	f003 0320 	and.w	r3, r3, #32
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d009      	beq.n	80033ba <HAL_UART_IRQHandler+0x66>
 80033a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033aa:	f003 0320 	and.w	r3, r3, #32
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 fbc2 	bl	8003b3c <UART_Receive_IT>
      return;
 80033b8:	e25b      	b.n	8003872 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 80de 	beq.w	8003580 <HAL_UART_IRQHandler+0x22c>
 80033c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d106      	bne.n	80033de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80d1 	beq.w	8003580 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00b      	beq.n	8003402 <HAL_UART_IRQHandler+0xae>
 80033ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d005      	beq.n	8003402 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fa:	f043 0201 	orr.w	r2, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00b      	beq.n	8003426 <HAL_UART_IRQHandler+0xd2>
 800340e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d005      	beq.n	8003426 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341e:	f043 0202 	orr.w	r2, r3, #2
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00b      	beq.n	800344a <HAL_UART_IRQHandler+0xf6>
 8003432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d005      	beq.n	800344a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003442:	f043 0204 	orr.w	r2, r3, #4
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800344a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b00      	cmp	r3, #0
 8003454:	d011      	beq.n	800347a <HAL_UART_IRQHandler+0x126>
 8003456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800345a:	f003 0320 	and.w	r3, r3, #32
 800345e:	2b00      	cmp	r3, #0
 8003460:	d105      	bne.n	800346e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d005      	beq.n	800347a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003472:	f043 0208 	orr.w	r2, r3, #8
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 81f2 	beq.w	8003868 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003488:	f003 0320 	and.w	r3, r3, #32
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <HAL_UART_IRQHandler+0x14e>
 8003490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 fb4d 	bl	8003b3c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ac:	2b40      	cmp	r3, #64	@ 0x40
 80034ae:	bf0c      	ite	eq
 80034b0:	2301      	moveq	r3, #1
 80034b2:	2300      	movne	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d103      	bne.n	80034ce <HAL_UART_IRQHandler+0x17a>
 80034c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d04f      	beq.n	800356e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 fa55 	bl	800397e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034de:	2b40      	cmp	r3, #64	@ 0x40
 80034e0:	d141      	bne.n	8003566 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3314      	adds	r3, #20
 80034e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034f0:	e853 3f00 	ldrex	r3, [r3]
 80034f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80034f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003500:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3314      	adds	r3, #20
 800350a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800350e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003512:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003516:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800351a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800351e:	e841 2300 	strex	r3, r2, [r1]
 8003522:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003526:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1d9      	bne.n	80034e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003532:	2b00      	cmp	r3, #0
 8003534:	d013      	beq.n	800355e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800353a:	4a7e      	ldr	r2, [pc, #504]	@ (8003734 <HAL_UART_IRQHandler+0x3e0>)
 800353c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003542:	4618      	mov	r0, r3
 8003544:	f7fe fba1 	bl	8001c8a <HAL_DMA_Abort_IT>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d016      	beq.n	800357c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003558:	4610      	mov	r0, r2
 800355a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800355c:	e00e      	b.n	800357c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f99e 	bl	80038a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003564:	e00a      	b.n	800357c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f99a 	bl	80038a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800356c:	e006      	b.n	800357c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f996 	bl	80038a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800357a:	e175      	b.n	8003868 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800357c:	bf00      	nop
    return;
 800357e:	e173      	b.n	8003868 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003584:	2b01      	cmp	r3, #1
 8003586:	f040 814f 	bne.w	8003828 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800358a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800358e:	f003 0310 	and.w	r3, r3, #16
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 8148 	beq.w	8003828 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800359c:	f003 0310 	and.w	r3, r3, #16
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 8141 	beq.w	8003828 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035a6:	2300      	movs	r3, #0
 80035a8:	60bb      	str	r3, [r7, #8]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c6:	2b40      	cmp	r3, #64	@ 0x40
 80035c8:	f040 80b6 	bne.w	8003738 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 8145 	beq.w	800386c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80035e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035ea:	429a      	cmp	r2, r3
 80035ec:	f080 813e 	bcs.w	800386c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003602:	f000 8088 	beq.w	8003716 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	330c      	adds	r3, #12
 800360c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003610:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003614:	e853 3f00 	ldrex	r3, [r3]
 8003618:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800361c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003620:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003624:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	330c      	adds	r3, #12
 800362e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003632:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003636:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800363e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003642:	e841 2300 	strex	r3, r2, [r1]
 8003646:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800364a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1d9      	bne.n	8003606 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3314      	adds	r3, #20
 8003658:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800365c:	e853 3f00 	ldrex	r3, [r3]
 8003660:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003662:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3314      	adds	r3, #20
 8003672:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003676:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800367a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800367e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003682:	e841 2300 	strex	r3, r2, [r1]
 8003686:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003688:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1e1      	bne.n	8003652 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	3314      	adds	r3, #20
 8003694:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003696:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003698:	e853 3f00 	ldrex	r3, [r3]
 800369c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800369e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	3314      	adds	r3, #20
 80036ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80036b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80036b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80036b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80036ba:	e841 2300 	strex	r3, r2, [r1]
 80036be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80036c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1e3      	bne.n	800368e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	330c      	adds	r3, #12
 80036da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036de:	e853 3f00 	ldrex	r3, [r3]
 80036e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80036e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036e6:	f023 0310 	bic.w	r3, r3, #16
 80036ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	330c      	adds	r3, #12
 80036f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80036f8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80036fa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003700:	e841 2300 	strex	r3, r2, [r1]
 8003704:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003706:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1e3      	bne.n	80036d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003710:	4618      	mov	r0, r3
 8003712:	f7fe fa4a 	bl	8001baa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003724:	b29b      	uxth	r3, r3
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	b29b      	uxth	r3, r3
 800372a:	4619      	mov	r1, r3
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f8c1 	bl	80038b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003732:	e09b      	b.n	800386c <HAL_UART_IRQHandler+0x518>
 8003734:	08003a45 	.word	0x08003a45
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003740:	b29b      	uxth	r3, r3
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 808e 	beq.w	8003870 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003754:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 8089 	beq.w	8003870 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	330c      	adds	r3, #12
 8003764:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003768:	e853 3f00 	ldrex	r3, [r3]
 800376c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800376e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003770:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003774:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	330c      	adds	r3, #12
 800377e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003782:	647a      	str	r2, [r7, #68]	@ 0x44
 8003784:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003786:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003788:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800378a:	e841 2300 	strex	r3, r2, [r1]
 800378e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1e3      	bne.n	800375e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	3314      	adds	r3, #20
 800379c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a0:	e853 3f00 	ldrex	r3, [r3]
 80037a4:	623b      	str	r3, [r7, #32]
   return(result);
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	f023 0301 	bic.w	r3, r3, #1
 80037ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	3314      	adds	r3, #20
 80037b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80037ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80037bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037c2:	e841 2300 	strex	r3, r2, [r1]
 80037c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1e3      	bne.n	8003796 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	330c      	adds	r3, #12
 80037e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	e853 3f00 	ldrex	r3, [r3]
 80037ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 0310 	bic.w	r3, r3, #16
 80037f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	330c      	adds	r3, #12
 80037fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003800:	61fa      	str	r2, [r7, #28]
 8003802:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003804:	69b9      	ldr	r1, [r7, #24]
 8003806:	69fa      	ldr	r2, [r7, #28]
 8003808:	e841 2300 	strex	r3, r2, [r1]
 800380c:	617b      	str	r3, [r7, #20]
   return(result);
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1e3      	bne.n	80037dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800381a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800381e:	4619      	mov	r1, r3
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f847 	bl	80038b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003826:	e023      	b.n	8003870 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800382c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003830:	2b00      	cmp	r3, #0
 8003832:	d009      	beq.n	8003848 <HAL_UART_IRQHandler+0x4f4>
 8003834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f913 	bl	8003a6c <UART_Transmit_IT>
    return;
 8003846:	e014      	b.n	8003872 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800384c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00e      	beq.n	8003872 <HAL_UART_IRQHandler+0x51e>
 8003854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f953 	bl	8003b0c <UART_EndTransmit_IT>
    return;
 8003866:	e004      	b.n	8003872 <HAL_UART_IRQHandler+0x51e>
    return;
 8003868:	bf00      	nop
 800386a:	e002      	b.n	8003872 <HAL_UART_IRQHandler+0x51e>
      return;
 800386c:	bf00      	nop
 800386e:	e000      	b.n	8003872 <HAL_UART_IRQHandler+0x51e>
      return;
 8003870:	bf00      	nop
  }
}
 8003872:	37e8      	adds	r7, #232	@ 0xe8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	4613      	mov	r3, r2
 80038da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038dc:	e03b      	b.n	8003956 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e4:	d037      	beq.n	8003956 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e6:	f7fe f81f 	bl	8001928 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	6a3a      	ldr	r2, [r7, #32]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d302      	bcc.n	80038fc <UART_WaitOnFlagUntilTimeout+0x30>
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e03a      	b.n	8003976 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f003 0304 	and.w	r3, r3, #4
 800390a:	2b00      	cmp	r3, #0
 800390c:	d023      	beq.n	8003956 <UART_WaitOnFlagUntilTimeout+0x8a>
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b80      	cmp	r3, #128	@ 0x80
 8003912:	d020      	beq.n	8003956 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2b40      	cmp	r3, #64	@ 0x40
 8003918:	d01d      	beq.n	8003956 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b08      	cmp	r3, #8
 8003926:	d116      	bne.n	8003956 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	617b      	str	r3, [r7, #20]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f81d 	bl	800397e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2208      	movs	r2, #8
 8003948:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e00f      	b.n	8003976 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4013      	ands	r3, r2
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	429a      	cmp	r2, r3
 8003964:	bf0c      	ite	eq
 8003966:	2301      	moveq	r3, #1
 8003968:	2300      	movne	r3, #0
 800396a:	b2db      	uxtb	r3, r3
 800396c:	461a      	mov	r2, r3
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	429a      	cmp	r2, r3
 8003972:	d0b4      	beq.n	80038de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800397e:	b480      	push	{r7}
 8003980:	b095      	sub	sp, #84	@ 0x54
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	330c      	adds	r3, #12
 800398c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003990:	e853 3f00 	ldrex	r3, [r3]
 8003994:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003998:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800399c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	330c      	adds	r3, #12
 80039a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80039a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039ae:	e841 2300 	strex	r3, r2, [r1]
 80039b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1e5      	bne.n	8003986 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3314      	adds	r3, #20
 80039c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	e853 3f00 	ldrex	r3, [r3]
 80039c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f023 0301 	bic.w	r3, r3, #1
 80039d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3314      	adds	r3, #20
 80039d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039e2:	e841 2300 	strex	r3, r2, [r1]
 80039e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1e5      	bne.n	80039ba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d119      	bne.n	8003a2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	330c      	adds	r3, #12
 80039fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	e853 3f00 	ldrex	r3, [r3]
 8003a04:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f023 0310 	bic.w	r3, r3, #16
 8003a0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	330c      	adds	r3, #12
 8003a14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a16:	61ba      	str	r2, [r7, #24]
 8003a18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1a:	6979      	ldr	r1, [r7, #20]
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	e841 2300 	strex	r3, r2, [r1]
 8003a22:	613b      	str	r3, [r7, #16]
   return(result);
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1e5      	bne.n	80039f6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a38:	bf00      	nop
 8003a3a:	3754      	adds	r7, #84	@ 0x54
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f7ff ff1e 	bl	80038a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a64:	bf00      	nop
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b21      	cmp	r3, #33	@ 0x21
 8003a7e:	d13e      	bne.n	8003afe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a88:	d114      	bne.n	8003ab4 <UART_Transmit_IT+0x48>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d110      	bne.n	8003ab4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aa6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	1c9a      	adds	r2, r3, #2
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	621a      	str	r2, [r3, #32]
 8003ab2:	e008      	b.n	8003ac6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	1c59      	adds	r1, r3, #1
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6211      	str	r1, [r2, #32]
 8003abe:	781a      	ldrb	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10f      	bne.n	8003afa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ae8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003af8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	e000      	b.n	8003b00 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003afe:	2302      	movs	r3, #2
  }
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b22:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff fea3 	bl	8003878 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08c      	sub	sp, #48	@ 0x30
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b22      	cmp	r3, #34	@ 0x22
 8003b4e:	f040 80ae 	bne.w	8003cae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b5a:	d117      	bne.n	8003b8c <UART_Receive_IT+0x50>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d113      	bne.n	8003b8c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b64:	2300      	movs	r3, #0
 8003b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b7e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b84:	1c9a      	adds	r2, r3, #2
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b8a:	e026      	b.n	8003bda <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b9e:	d007      	beq.n	8003bb0 <UART_Receive_IT+0x74>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10a      	bne.n	8003bbe <UART_Receive_IT+0x82>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d106      	bne.n	8003bbe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bba:	701a      	strb	r2, [r3, #0]
 8003bbc:	e008      	b.n	8003bd0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	4619      	mov	r1, r3
 8003be8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d15d      	bne.n	8003caa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0220 	bic.w	r2, r2, #32
 8003bfc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695a      	ldr	r2, [r3, #20]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0201 	bic.w	r2, r2, #1
 8003c1c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d135      	bne.n	8003ca0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	330c      	adds	r3, #12
 8003c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	e853 3f00 	ldrex	r3, [r3]
 8003c48:	613b      	str	r3, [r7, #16]
   return(result);
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f023 0310 	bic.w	r3, r3, #16
 8003c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	330c      	adds	r3, #12
 8003c58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c5a:	623a      	str	r2, [r7, #32]
 8003c5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5e:	69f9      	ldr	r1, [r7, #28]
 8003c60:	6a3a      	ldr	r2, [r7, #32]
 8003c62:	e841 2300 	strex	r3, r2, [r1]
 8003c66:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1e5      	bne.n	8003c3a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	2b10      	cmp	r3, #16
 8003c7a:	d10a      	bne.n	8003c92 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c96:	4619      	mov	r1, r3
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7ff fe0b 	bl	80038b4 <HAL_UARTEx_RxEventCallback>
 8003c9e:	e002      	b.n	8003ca6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff fdf3 	bl	800388c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	e002      	b.n	8003cb0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	e000      	b.n	8003cb0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003cae:	2302      	movs	r3, #2
  }
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3730      	adds	r7, #48	@ 0x30
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cbc:	b0c0      	sub	sp, #256	@ 0x100
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd4:	68d9      	ldr	r1, [r3, #12]
 8003cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	ea40 0301 	orr.w	r3, r0, r1
 8003ce0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d10:	f021 010c 	bic.w	r1, r1, #12
 8003d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d1e:	430b      	orrs	r3, r1
 8003d20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d32:	6999      	ldr	r1, [r3, #24]
 8003d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	ea40 0301 	orr.w	r3, r0, r1
 8003d3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	4b8f      	ldr	r3, [pc, #572]	@ (8003f84 <UART_SetConfig+0x2cc>)
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d005      	beq.n	8003d58 <UART_SetConfig+0xa0>
 8003d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	4b8d      	ldr	r3, [pc, #564]	@ (8003f88 <UART_SetConfig+0x2d0>)
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d104      	bne.n	8003d62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d58:	f7ff f88c 	bl	8002e74 <HAL_RCC_GetPCLK2Freq>
 8003d5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d60:	e003      	b.n	8003d6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d62:	f7ff f873 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 8003d66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d74:	f040 810c 	bne.w	8003f90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003d8a:	4622      	mov	r2, r4
 8003d8c:	462b      	mov	r3, r5
 8003d8e:	1891      	adds	r1, r2, r2
 8003d90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d92:	415b      	adcs	r3, r3
 8003d94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	eb12 0801 	adds.w	r8, r2, r1
 8003da0:	4629      	mov	r1, r5
 8003da2:	eb43 0901 	adc.w	r9, r3, r1
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003db2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003db6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dba:	4690      	mov	r8, r2
 8003dbc:	4699      	mov	r9, r3
 8003dbe:	4623      	mov	r3, r4
 8003dc0:	eb18 0303 	adds.w	r3, r8, r3
 8003dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003dc8:	462b      	mov	r3, r5
 8003dca:	eb49 0303 	adc.w	r3, r9, r3
 8003dce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003dde:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003de2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003de6:	460b      	mov	r3, r1
 8003de8:	18db      	adds	r3, r3, r3
 8003dea:	653b      	str	r3, [r7, #80]	@ 0x50
 8003dec:	4613      	mov	r3, r2
 8003dee:	eb42 0303 	adc.w	r3, r2, r3
 8003df2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003df4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003df8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003dfc:	f7fc fa40 	bl	8000280 <__aeabi_uldivmod>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4b61      	ldr	r3, [pc, #388]	@ (8003f8c <UART_SetConfig+0x2d4>)
 8003e06:	fba3 2302 	umull	r2, r3, r3, r2
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	011c      	lsls	r4, r3, #4
 8003e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e12:	2200      	movs	r2, #0
 8003e14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e20:	4642      	mov	r2, r8
 8003e22:	464b      	mov	r3, r9
 8003e24:	1891      	adds	r1, r2, r2
 8003e26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e28:	415b      	adcs	r3, r3
 8003e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e30:	4641      	mov	r1, r8
 8003e32:	eb12 0a01 	adds.w	sl, r2, r1
 8003e36:	4649      	mov	r1, r9
 8003e38:	eb43 0b01 	adc.w	fp, r3, r1
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	f04f 0300 	mov.w	r3, #0
 8003e44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e50:	4692      	mov	sl, r2
 8003e52:	469b      	mov	fp, r3
 8003e54:	4643      	mov	r3, r8
 8003e56:	eb1a 0303 	adds.w	r3, sl, r3
 8003e5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e5e:	464b      	mov	r3, r9
 8003e60:	eb4b 0303 	adc.w	r3, fp, r3
 8003e64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	18db      	adds	r3, r3, r3
 8003e80:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e82:	4613      	mov	r3, r2
 8003e84:	eb42 0303 	adc.w	r3, r2, r3
 8003e88:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e92:	f7fc f9f5 	bl	8000280 <__aeabi_uldivmod>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f8c <UART_SetConfig+0x2d4>)
 8003e9e:	fba3 2301 	umull	r2, r3, r3, r1
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	2264      	movs	r2, #100	@ 0x64
 8003ea6:	fb02 f303 	mul.w	r3, r2, r3
 8003eaa:	1acb      	subs	r3, r1, r3
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003eb2:	4b36      	ldr	r3, [pc, #216]	@ (8003f8c <UART_SetConfig+0x2d4>)
 8003eb4:	fba3 2302 	umull	r2, r3, r3, r2
 8003eb8:	095b      	lsrs	r3, r3, #5
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ec0:	441c      	add	r4, r3
 8003ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ecc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ed0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ed4:	4642      	mov	r2, r8
 8003ed6:	464b      	mov	r3, r9
 8003ed8:	1891      	adds	r1, r2, r2
 8003eda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003edc:	415b      	adcs	r3, r3
 8003ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ee0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ee4:	4641      	mov	r1, r8
 8003ee6:	1851      	adds	r1, r2, r1
 8003ee8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003eea:	4649      	mov	r1, r9
 8003eec:	414b      	adcs	r3, r1
 8003eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003efc:	4659      	mov	r1, fp
 8003efe:	00cb      	lsls	r3, r1, #3
 8003f00:	4651      	mov	r1, sl
 8003f02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f06:	4651      	mov	r1, sl
 8003f08:	00ca      	lsls	r2, r1, #3
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4603      	mov	r3, r0
 8003f10:	4642      	mov	r2, r8
 8003f12:	189b      	adds	r3, r3, r2
 8003f14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f18:	464b      	mov	r3, r9
 8003f1a:	460a      	mov	r2, r1
 8003f1c:	eb42 0303 	adc.w	r3, r2, r3
 8003f20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f30:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f38:	460b      	mov	r3, r1
 8003f3a:	18db      	adds	r3, r3, r3
 8003f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f3e:	4613      	mov	r3, r2
 8003f40:	eb42 0303 	adc.w	r3, r2, r3
 8003f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f4e:	f7fc f997 	bl	8000280 <__aeabi_uldivmod>
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	4b0d      	ldr	r3, [pc, #52]	@ (8003f8c <UART_SetConfig+0x2d4>)
 8003f58:	fba3 1302 	umull	r1, r3, r3, r2
 8003f5c:	095b      	lsrs	r3, r3, #5
 8003f5e:	2164      	movs	r1, #100	@ 0x64
 8003f60:	fb01 f303 	mul.w	r3, r1, r3
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	3332      	adds	r3, #50	@ 0x32
 8003f6a:	4a08      	ldr	r2, [pc, #32]	@ (8003f8c <UART_SetConfig+0x2d4>)
 8003f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f70:	095b      	lsrs	r3, r3, #5
 8003f72:	f003 0207 	and.w	r2, r3, #7
 8003f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4422      	add	r2, r4
 8003f7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f80:	e106      	b.n	8004190 <UART_SetConfig+0x4d8>
 8003f82:	bf00      	nop
 8003f84:	40011000 	.word	0x40011000
 8003f88:	40011400 	.word	0x40011400
 8003f8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f94:	2200      	movs	r2, #0
 8003f96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003fa2:	4642      	mov	r2, r8
 8003fa4:	464b      	mov	r3, r9
 8003fa6:	1891      	adds	r1, r2, r2
 8003fa8:	6239      	str	r1, [r7, #32]
 8003faa:	415b      	adcs	r3, r3
 8003fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fb2:	4641      	mov	r1, r8
 8003fb4:	1854      	adds	r4, r2, r1
 8003fb6:	4649      	mov	r1, r9
 8003fb8:	eb43 0501 	adc.w	r5, r3, r1
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	00eb      	lsls	r3, r5, #3
 8003fc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fca:	00e2      	lsls	r2, r4, #3
 8003fcc:	4614      	mov	r4, r2
 8003fce:	461d      	mov	r5, r3
 8003fd0:	4643      	mov	r3, r8
 8003fd2:	18e3      	adds	r3, r4, r3
 8003fd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fd8:	464b      	mov	r3, r9
 8003fda:	eb45 0303 	adc.w	r3, r5, r3
 8003fde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ffe:	4629      	mov	r1, r5
 8004000:	008b      	lsls	r3, r1, #2
 8004002:	4621      	mov	r1, r4
 8004004:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004008:	4621      	mov	r1, r4
 800400a:	008a      	lsls	r2, r1, #2
 800400c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004010:	f7fc f936 	bl	8000280 <__aeabi_uldivmod>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4b60      	ldr	r3, [pc, #384]	@ (800419c <UART_SetConfig+0x4e4>)
 800401a:	fba3 2302 	umull	r2, r3, r3, r2
 800401e:	095b      	lsrs	r3, r3, #5
 8004020:	011c      	lsls	r4, r3, #4
 8004022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004026:	2200      	movs	r2, #0
 8004028:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800402c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004030:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004034:	4642      	mov	r2, r8
 8004036:	464b      	mov	r3, r9
 8004038:	1891      	adds	r1, r2, r2
 800403a:	61b9      	str	r1, [r7, #24]
 800403c:	415b      	adcs	r3, r3
 800403e:	61fb      	str	r3, [r7, #28]
 8004040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004044:	4641      	mov	r1, r8
 8004046:	1851      	adds	r1, r2, r1
 8004048:	6139      	str	r1, [r7, #16]
 800404a:	4649      	mov	r1, r9
 800404c:	414b      	adcs	r3, r1
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800405c:	4659      	mov	r1, fp
 800405e:	00cb      	lsls	r3, r1, #3
 8004060:	4651      	mov	r1, sl
 8004062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004066:	4651      	mov	r1, sl
 8004068:	00ca      	lsls	r2, r1, #3
 800406a:	4610      	mov	r0, r2
 800406c:	4619      	mov	r1, r3
 800406e:	4603      	mov	r3, r0
 8004070:	4642      	mov	r2, r8
 8004072:	189b      	adds	r3, r3, r2
 8004074:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004078:	464b      	mov	r3, r9
 800407a:	460a      	mov	r2, r1
 800407c:	eb42 0303 	adc.w	r3, r2, r3
 8004080:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800408e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800409c:	4649      	mov	r1, r9
 800409e:	008b      	lsls	r3, r1, #2
 80040a0:	4641      	mov	r1, r8
 80040a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040a6:	4641      	mov	r1, r8
 80040a8:	008a      	lsls	r2, r1, #2
 80040aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80040ae:	f7fc f8e7 	bl	8000280 <__aeabi_uldivmod>
 80040b2:	4602      	mov	r2, r0
 80040b4:	460b      	mov	r3, r1
 80040b6:	4611      	mov	r1, r2
 80040b8:	4b38      	ldr	r3, [pc, #224]	@ (800419c <UART_SetConfig+0x4e4>)
 80040ba:	fba3 2301 	umull	r2, r3, r3, r1
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	2264      	movs	r2, #100	@ 0x64
 80040c2:	fb02 f303 	mul.w	r3, r2, r3
 80040c6:	1acb      	subs	r3, r1, r3
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	3332      	adds	r3, #50	@ 0x32
 80040cc:	4a33      	ldr	r2, [pc, #204]	@ (800419c <UART_SetConfig+0x4e4>)
 80040ce:	fba2 2303 	umull	r2, r3, r2, r3
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040d8:	441c      	add	r4, r3
 80040da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040de:	2200      	movs	r2, #0
 80040e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80040e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80040e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80040e8:	4642      	mov	r2, r8
 80040ea:	464b      	mov	r3, r9
 80040ec:	1891      	adds	r1, r2, r2
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	415b      	adcs	r3, r3
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040f8:	4641      	mov	r1, r8
 80040fa:	1851      	adds	r1, r2, r1
 80040fc:	6039      	str	r1, [r7, #0]
 80040fe:	4649      	mov	r1, r9
 8004100:	414b      	adcs	r3, r1
 8004102:	607b      	str	r3, [r7, #4]
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004110:	4659      	mov	r1, fp
 8004112:	00cb      	lsls	r3, r1, #3
 8004114:	4651      	mov	r1, sl
 8004116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800411a:	4651      	mov	r1, sl
 800411c:	00ca      	lsls	r2, r1, #3
 800411e:	4610      	mov	r0, r2
 8004120:	4619      	mov	r1, r3
 8004122:	4603      	mov	r3, r0
 8004124:	4642      	mov	r2, r8
 8004126:	189b      	adds	r3, r3, r2
 8004128:	66bb      	str	r3, [r7, #104]	@ 0x68
 800412a:	464b      	mov	r3, r9
 800412c:	460a      	mov	r2, r1
 800412e:	eb42 0303 	adc.w	r3, r2, r3
 8004132:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	663b      	str	r3, [r7, #96]	@ 0x60
 800413e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800414c:	4649      	mov	r1, r9
 800414e:	008b      	lsls	r3, r1, #2
 8004150:	4641      	mov	r1, r8
 8004152:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004156:	4641      	mov	r1, r8
 8004158:	008a      	lsls	r2, r1, #2
 800415a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800415e:	f7fc f88f 	bl	8000280 <__aeabi_uldivmod>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	4b0d      	ldr	r3, [pc, #52]	@ (800419c <UART_SetConfig+0x4e4>)
 8004168:	fba3 1302 	umull	r1, r3, r3, r2
 800416c:	095b      	lsrs	r3, r3, #5
 800416e:	2164      	movs	r1, #100	@ 0x64
 8004170:	fb01 f303 	mul.w	r3, r1, r3
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	3332      	adds	r3, #50	@ 0x32
 800417a:	4a08      	ldr	r2, [pc, #32]	@ (800419c <UART_SetConfig+0x4e4>)
 800417c:	fba2 2303 	umull	r2, r3, r2, r3
 8004180:	095b      	lsrs	r3, r3, #5
 8004182:	f003 020f 	and.w	r2, r3, #15
 8004186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4422      	add	r2, r4
 800418e:	609a      	str	r2, [r3, #8]
}
 8004190:	bf00      	nop
 8004192:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004196:	46bd      	mov	sp, r7
 8004198:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800419c:	51eb851f 	.word	0x51eb851f

080041a0 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 80041a4:	bf00      	nop
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
	...

080041b0 <mbedtls_hardware_poll>:
#include "mbedtls/entropy_poll.h"

extern RNG_HandleTypeDef hrng;

int mbedtls_hardware_poll( void *Data, unsigned char *Output, size_t Len, size_t *oLen )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t randomValue;

  for (index = 0; index < Len/4; index++)
 80041be:	2300      	movs	r3, #0
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	e019      	b.n	80041f8 <mbedtls_hardware_poll+0x48>
  {
    if (HAL_RNG_GenerateRandomNumber(&hrng, &randomValue) == HAL_OK)
 80041c4:	f107 0310 	add.w	r3, r7, #16
 80041c8:	4619      	mov	r1, r3
 80041ca:	4810      	ldr	r0, [pc, #64]	@ (800420c <mbedtls_hardware_poll+0x5c>)
 80041cc:	f7fe fe90 	bl	8002ef0 <HAL_RNG_GenerateRandomNumber>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10b      	bne.n	80041ee <mbedtls_hardware_poll+0x3e>
    {
      *oLen += 4;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	1d1a      	adds	r2, r3, #4
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	601a      	str	r2, [r3, #0]
      memcpy(&(Output[index * 4]), &randomValue, 4);
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	4413      	add	r3, r2
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	e001      	b.n	80041f2 <mbedtls_hardware_poll+0x42>
    }
    else
    {
      Error_Handler();
 80041ee:	f7fd f901 	bl	80013f4 <Error_Handler>
  for (index = 0; index < Len/4; index++)
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	3301      	adds	r3, #1
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	089b      	lsrs	r3, r3, #2
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d3e0      	bcc.n	80041c4 <mbedtls_hardware_poll+0x14>
    }
  }

  return 0;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	200000e0 	.word	0x200000e0

08004210 <mbedtls_aes_init>:
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8004218:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800421c:	2100      	movs	r1, #0
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f012 fcca 	bl	8016bb8 <memset>
}
 8004224:	bf00      	nop
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d005      	beq.n	8004246 <mbedtls_aes_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 800423a:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f00c fb9c 	bl	801097c <mbedtls_platform_zeroize>
 8004244:	e000      	b.n	8004248 <mbedtls_aes_free+0x1c>
        return;
 8004246:	bf00      	nop
}
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004262:	d012      	beq.n	800428a <mbedtls_aes_setkey_enc+0x3a>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800426a:	d812      	bhi.n	8004292 <mbedtls_aes_setkey_enc+0x42>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b80      	cmp	r3, #128	@ 0x80
 8004270:	d003      	beq.n	800427a <mbedtls_aes_setkey_enc+0x2a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2bc0      	cmp	r3, #192	@ 0xc0
 8004276:	d004      	beq.n	8004282 <mbedtls_aes_setkey_enc+0x32>
 8004278:	e00b      	b.n	8004292 <mbedtls_aes_setkey_enc+0x42>
    {
        case 128: ctx->nr = 10; break;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	220a      	movs	r2, #10
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	e00a      	b.n	8004298 <mbedtls_aes_setkey_enc+0x48>
        case 192: ctx->nr = 12; break;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	220c      	movs	r2, #12
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	e006      	b.n	8004298 <mbedtls_aes_setkey_enc+0x48>
        case 256: ctx->nr = 14; break;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	220e      	movs	r2, #14
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	e002      	b.n	8004298 <mbedtls_aes_setkey_enc+0x48>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 8004292:	f06f 031f 	mvn.w	r3, #31
 8004296:	e1a7      	b.n	80045e8 <mbedtls_aes_setkey_enc+0x398>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	3308      	adds	r3, #8
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 80042a4:	2300      	movs	r3, #0
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	e027      	b.n	80042fa <mbedtls_aes_setkey_enc+0xaa>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	4413      	add	r3, r2
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	4619      	mov	r1, r3
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	3301      	adds	r3, #1
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	4413      	add	r3, r2
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	021b      	lsls	r3, r3, #8
 80042c4:	ea41 0203 	orr.w	r2, r1, r3
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	3302      	adds	r3, #2
 80042ce:	68b9      	ldr	r1, [r7, #8]
 80042d0:	440b      	add	r3, r1
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	041b      	lsls	r3, r3, #16
 80042d6:	ea42 0103 	orr.w	r1, r2, r3
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	3303      	adds	r3, #3
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	4413      	add	r3, r2
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	061a      	lsls	r2, r3, #24
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	6938      	ldr	r0, [r7, #16]
 80042ee:	4403      	add	r3, r0
 80042f0:	430a      	orrs	r2, r1
 80042f2:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	3301      	adds	r3, #1
 80042f8:	617b      	str	r3, [r7, #20]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	429a      	cmp	r2, r3
 8004302:	d3d2      	bcc.n	80042aa <mbedtls_aes_setkey_enc+0x5a>
    }

    switch( ctx->nr )
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b0e      	cmp	r3, #14
 800430a:	f000 80ca 	beq.w	80044a2 <mbedtls_aes_setkey_enc+0x252>
 800430e:	2b0e      	cmp	r3, #14
 8004310:	f300 8169 	bgt.w	80045e6 <mbedtls_aes_setkey_enc+0x396>
 8004314:	2b0a      	cmp	r3, #10
 8004316:	d002      	beq.n	800431e <mbedtls_aes_setkey_enc+0xce>
 8004318:	2b0c      	cmp	r3, #12
 800431a:	d057      	beq.n	80043cc <mbedtls_aes_setkey_enc+0x17c>
 800431c:	e163      	b.n	80045e6 <mbedtls_aes_setkey_enc+0x396>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	e04f      	b.n	80043c4 <mbedtls_aes_setkey_enc+0x174>
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	495f      	ldr	r1, [pc, #380]	@ (80044a8 <mbedtls_aes_setkey_enc+0x258>)
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004330:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	320c      	adds	r2, #12
 8004336:	6812      	ldr	r2, [r2, #0]
 8004338:	0a12      	lsrs	r2, r2, #8
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	495b      	ldr	r1, [pc, #364]	@ (80044ac <mbedtls_aes_setkey_enc+0x25c>)
 800433e:	5c8a      	ldrb	r2, [r1, r2]
                RK[4]  = RK[0] ^ RCON[i] ^
 8004340:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	330c      	adds	r3, #12
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	0c1b      	lsrs	r3, r3, #16
 800434a:	b2db      	uxtb	r3, r3
 800434c:	4957      	ldr	r1, [pc, #348]	@ (80044ac <mbedtls_aes_setkey_enc+0x25c>)
 800434e:	5ccb      	ldrb	r3, [r1, r3]
 8004350:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8004352:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	330c      	adds	r3, #12
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	0e1b      	lsrs	r3, r3, #24
 800435c:	4953      	ldr	r1, [pc, #332]	@ (80044ac <mbedtls_aes_setkey_enc+0x25c>)
 800435e:	5ccb      	ldrb	r3, [r1, r3]
 8004360:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8004362:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	330c      	adds	r3, #12
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	b2db      	uxtb	r3, r3
 800436e:	4a4f      	ldr	r2, [pc, #316]	@ (80044ac <mbedtls_aes_setkey_enc+0x25c>)
 8004370:	5cd3      	ldrb	r3, [r2, r3]
 8004372:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ RCON[i] ^
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	3310      	adds	r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8004378:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 800437a:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	3304      	adds	r3, #4
 8004380:	6819      	ldr	r1, [r3, #0]
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	3310      	adds	r3, #16
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	3314      	adds	r3, #20
 800438c:	404a      	eors	r2, r1
 800438e:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	3308      	adds	r3, #8
 8004394:	6819      	ldr	r1, [r3, #0]
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	3314      	adds	r3, #20
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	3318      	adds	r3, #24
 80043a0:	404a      	eors	r2, r1
 80043a2:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	330c      	adds	r3, #12
 80043a8:	6819      	ldr	r1, [r3, #0]
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	3318      	adds	r3, #24
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	331c      	adds	r3, #28
 80043b4:	404a      	eors	r2, r1
 80043b6:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 10; i++, RK += 4 )
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	3301      	adds	r3, #1
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	3310      	adds	r3, #16
 80043c2:	613b      	str	r3, [r7, #16]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	2b09      	cmp	r3, #9
 80043c8:	d9ac      	bls.n	8004324 <mbedtls_aes_setkey_enc+0xd4>
            }
            break;
 80043ca:	e10c      	b.n	80045e6 <mbedtls_aes_setkey_enc+0x396>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	e063      	b.n	800449a <mbedtls_aes_setkey_enc+0x24a>
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	4934      	ldr	r1, [pc, #208]	@ (80044a8 <mbedtls_aes_setkey_enc+0x258>)
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80043de:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	3214      	adds	r2, #20
 80043e4:	6812      	ldr	r2, [r2, #0]
 80043e6:	0a12      	lsrs	r2, r2, #8
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	4930      	ldr	r1, [pc, #192]	@ (80044ac <mbedtls_aes_setkey_enc+0x25c>)
 80043ec:	5c8a      	ldrb	r2, [r1, r2]
                RK[6]  = RK[0] ^ RCON[i] ^
 80043ee:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	3314      	adds	r3, #20
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	0c1b      	lsrs	r3, r3, #16
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	492c      	ldr	r1, [pc, #176]	@ (80044ac <mbedtls_aes_setkey_enc+0x25c>)
 80043fc:	5ccb      	ldrb	r3, [r1, r3]
 80043fe:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8004400:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	3314      	adds	r3, #20
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	0e1b      	lsrs	r3, r3, #24
 800440a:	4928      	ldr	r1, [pc, #160]	@ (80044ac <mbedtls_aes_setkey_enc+0x25c>)
 800440c:	5ccb      	ldrb	r3, [r1, r3]
 800440e:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8004410:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	3314      	adds	r3, #20
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	4a23      	ldr	r2, [pc, #140]	@ (80044ac <mbedtls_aes_setkey_enc+0x25c>)
 800441e:	5cd3      	ldrb	r3, [r2, r3]
 8004420:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ RCON[i] ^
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	3318      	adds	r3, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8004426:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ RCON[i] ^
 8004428:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	3304      	adds	r3, #4
 800442e:	6819      	ldr	r1, [r3, #0]
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	3318      	adds	r3, #24
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	331c      	adds	r3, #28
 800443a:	404a      	eors	r2, r1
 800443c:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	3308      	adds	r3, #8
 8004442:	6819      	ldr	r1, [r3, #0]
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	331c      	adds	r3, #28
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	3320      	adds	r3, #32
 800444e:	404a      	eors	r2, r1
 8004450:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	330c      	adds	r3, #12
 8004456:	6819      	ldr	r1, [r3, #0]
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	3320      	adds	r3, #32
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	3324      	adds	r3, #36	@ 0x24
 8004462:	404a      	eors	r2, r1
 8004464:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	3310      	adds	r3, #16
 800446a:	6819      	ldr	r1, [r3, #0]
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	3324      	adds	r3, #36	@ 0x24
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	3328      	adds	r3, #40	@ 0x28
 8004476:	404a      	eors	r2, r1
 8004478:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	3314      	adds	r3, #20
 800447e:	6819      	ldr	r1, [r3, #0]
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	3328      	adds	r3, #40	@ 0x28
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	332c      	adds	r3, #44	@ 0x2c
 800448a:	404a      	eors	r2, r1
 800448c:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 8; i++, RK += 6 )
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	3301      	adds	r3, #1
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	3318      	adds	r3, #24
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2b07      	cmp	r3, #7
 800449e:	d998      	bls.n	80043d2 <mbedtls_aes_setkey_enc+0x182>
            }
            break;
 80044a0:	e0a1      	b.n	80045e6 <mbedtls_aes_setkey_enc+0x396>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	e099      	b.n	80045dc <mbedtls_aes_setkey_enc+0x38c>
 80044a8:	0801ae7c 	.word	0x0801ae7c
 80044ac:	08018c7c 	.word	0x08018c7c
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	494f      	ldr	r1, [pc, #316]	@ (80045f4 <mbedtls_aes_setkey_enc+0x3a4>)
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80044bc:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	321c      	adds	r2, #28
 80044c2:	6812      	ldr	r2, [r2, #0]
 80044c4:	0a12      	lsrs	r2, r2, #8
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	494b      	ldr	r1, [pc, #300]	@ (80045f8 <mbedtls_aes_setkey_enc+0x3a8>)
 80044ca:	5c8a      	ldrb	r2, [r1, r2]
                RK[8]  = RK[0] ^ RCON[i] ^
 80044cc:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	331c      	adds	r3, #28
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	0c1b      	lsrs	r3, r3, #16
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	4947      	ldr	r1, [pc, #284]	@ (80045f8 <mbedtls_aes_setkey_enc+0x3a8>)
 80044da:	5ccb      	ldrb	r3, [r1, r3]
 80044dc:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 80044de:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	331c      	adds	r3, #28
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	0e1b      	lsrs	r3, r3, #24
 80044e8:	4943      	ldr	r1, [pc, #268]	@ (80045f8 <mbedtls_aes_setkey_enc+0x3a8>)
 80044ea:	5ccb      	ldrb	r3, [r1, r3]
 80044ec:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 80044ee:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	331c      	adds	r3, #28
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	4a3f      	ldr	r2, [pc, #252]	@ (80045f8 <mbedtls_aes_setkey_enc+0x3a8>)
 80044fc:	5cd3      	ldrb	r3, [r2, r3]
 80044fe:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ RCON[i] ^
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	3320      	adds	r3, #32
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8004504:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ RCON[i] ^
 8004506:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	3304      	adds	r3, #4
 800450c:	6819      	ldr	r1, [r3, #0]
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	3320      	adds	r3, #32
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	3324      	adds	r3, #36	@ 0x24
 8004518:	404a      	eors	r2, r1
 800451a:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	3308      	adds	r3, #8
 8004520:	6819      	ldr	r1, [r3, #0]
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	3324      	adds	r3, #36	@ 0x24
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	3328      	adds	r3, #40	@ 0x28
 800452c:	404a      	eors	r2, r1
 800452e:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	330c      	adds	r3, #12
 8004534:	6819      	ldr	r1, [r3, #0]
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	3328      	adds	r3, #40	@ 0x28
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	332c      	adds	r3, #44	@ 0x2c
 8004540:	404a      	eors	r2, r1
 8004542:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	3310      	adds	r3, #16
 8004548:	681b      	ldr	r3, [r3, #0]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	322c      	adds	r2, #44	@ 0x2c
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	b2d2      	uxtb	r2, r2
 8004552:	4929      	ldr	r1, [pc, #164]	@ (80045f8 <mbedtls_aes_setkey_enc+0x3a8>)
 8004554:	5c8a      	ldrb	r2, [r1, r2]
                RK[12] = RK[4] ^
 8004556:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	332c      	adds	r3, #44	@ 0x2c
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	0a1b      	lsrs	r3, r3, #8
 8004560:	b2db      	uxtb	r3, r3
 8004562:	4925      	ldr	r1, [pc, #148]	@ (80045f8 <mbedtls_aes_setkey_enc+0x3a8>)
 8004564:	5ccb      	ldrb	r3, [r1, r3]
 8004566:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 8004568:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	332c      	adds	r3, #44	@ 0x2c
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	0c1b      	lsrs	r3, r3, #16
 8004572:	b2db      	uxtb	r3, r3
 8004574:	4920      	ldr	r1, [pc, #128]	@ (80045f8 <mbedtls_aes_setkey_enc+0x3a8>)
 8004576:	5ccb      	ldrb	r3, [r1, r3]
 8004578:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800457a:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	332c      	adds	r3, #44	@ 0x2c
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	0e1b      	lsrs	r3, r3, #24
 8004586:	4a1c      	ldr	r2, [pc, #112]	@ (80045f8 <mbedtls_aes_setkey_enc+0x3a8>)
 8004588:	5cd3      	ldrb	r3, [r2, r3]
 800458a:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	3330      	adds	r3, #48	@ 0x30
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8004590:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 8004592:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	3314      	adds	r3, #20
 8004598:	6819      	ldr	r1, [r3, #0]
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	3330      	adds	r3, #48	@ 0x30
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	3334      	adds	r3, #52	@ 0x34
 80045a4:	404a      	eors	r2, r1
 80045a6:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	3318      	adds	r3, #24
 80045ac:	6819      	ldr	r1, [r3, #0]
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	3334      	adds	r3, #52	@ 0x34
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	3338      	adds	r3, #56	@ 0x38
 80045b8:	404a      	eors	r2, r1
 80045ba:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	331c      	adds	r3, #28
 80045c0:	6819      	ldr	r1, [r3, #0]
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	3338      	adds	r3, #56	@ 0x38
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	333c      	adds	r3, #60	@ 0x3c
 80045cc:	404a      	eors	r2, r1
 80045ce:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 7; i++, RK += 8 )
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	3301      	adds	r3, #1
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	3320      	adds	r3, #32
 80045da:	613b      	str	r3, [r7, #16]
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2b06      	cmp	r3, #6
 80045e0:	f67f af66 	bls.w	80044b0 <mbedtls_aes_setkey_enc+0x260>
            }
            break;
 80045e4:	bf00      	nop
    }

    return( 0 );
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	0801ae7c 	.word	0x0801ae7c
 80045f8:	08018c7c 	.word	0x08018c7c

080045fc <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 80045fc:	b480      	push	{r7}
 80045fe:	b08f      	sub	sp, #60	@ 0x3c
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	633b      	str	r3, [r7, #48]	@ 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	3301      	adds	r3, #1
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	431a      	orrs	r2, r3
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	3302      	adds	r3, #2
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	041b      	lsls	r3, r3, #16
 8004626:	431a      	orrs	r2, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	3303      	adds	r3, #3
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	061b      	lsls	r3, r3, #24
 8004630:	4313      	orrs	r3, r2
 8004632:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004636:	1d1a      	adds	r2, r3, #4
 8004638:	633a      	str	r2, [r7, #48]	@ 0x30
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800463e:	4053      	eors	r3, r2
 8004640:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	3304      	adds	r3, #4
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	461a      	mov	r2, r3
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	3305      	adds	r3, #5
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	021b      	lsls	r3, r3, #8
 8004652:	431a      	orrs	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	3306      	adds	r3, #6
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	041b      	lsls	r3, r3, #16
 800465c:	431a      	orrs	r2, r3
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	3307      	adds	r3, #7
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	061b      	lsls	r3, r3, #24
 8004666:	4313      	orrs	r3, r2
 8004668:	62bb      	str	r3, [r7, #40]	@ 0x28
 800466a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800466c:	1d1a      	adds	r2, r3, #4
 800466e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004674:	4053      	eors	r3, r2
 8004676:	62bb      	str	r3, [r7, #40]	@ 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	3308      	adds	r3, #8
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	3309      	adds	r3, #9
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	021b      	lsls	r3, r3, #8
 8004688:	431a      	orrs	r2, r3
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	330a      	adds	r3, #10
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	041b      	lsls	r3, r3, #16
 8004692:	431a      	orrs	r2, r3
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	330b      	adds	r3, #11
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	061b      	lsls	r3, r3, #24
 800469c:	4313      	orrs	r3, r2
 800469e:	627b      	str	r3, [r7, #36]	@ 0x24
 80046a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a2:	1d1a      	adds	r2, r3, #4
 80046a4:	633a      	str	r2, [r7, #48]	@ 0x30
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046aa:	4053      	eors	r3, r2
 80046ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	330c      	adds	r3, #12
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	461a      	mov	r2, r3
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	330d      	adds	r3, #13
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	021b      	lsls	r3, r3, #8
 80046be:	431a      	orrs	r2, r3
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	330e      	adds	r3, #14
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	041b      	lsls	r3, r3, #16
 80046c8:	431a      	orrs	r2, r3
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	330f      	adds	r3, #15
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	061b      	lsls	r3, r3, #24
 80046d2:	4313      	orrs	r3, r2
 80046d4:	623b      	str	r3, [r7, #32]
 80046d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d8:	1d1a      	adds	r2, r3, #4
 80046da:	633a      	str	r2, [r7, #48]	@ 0x30
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6a3a      	ldr	r2, [r7, #32]
 80046e0:	4053      	eors	r3, r2
 80046e2:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	105b      	asrs	r3, r3, #1
 80046ea:	3b01      	subs	r3, #1
 80046ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80046ee:	e0fa      	b.n	80048e6 <mbedtls_internal_aes_encrypt+0x2ea>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80046f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f2:	1d1a      	adds	r2, r3, #4
 80046f4:	633a      	str	r2, [r7, #48]	@ 0x30
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	49ab      	ldr	r1, [pc, #684]	@ (80049ac <mbedtls_internal_aes_encrypt+0x3b0>)
 80046fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004702:	405a      	eors	r2, r3
 8004704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004706:	0a1b      	lsrs	r3, r3, #8
 8004708:	b2db      	uxtb	r3, r3
 800470a:	49a9      	ldr	r1, [pc, #676]	@ (80049b0 <mbedtls_internal_aes_encrypt+0x3b4>)
 800470c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004710:	405a      	eors	r2, r3
 8004712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004714:	0c1b      	lsrs	r3, r3, #16
 8004716:	b2db      	uxtb	r3, r3
 8004718:	49a6      	ldr	r1, [pc, #664]	@ (80049b4 <mbedtls_internal_aes_encrypt+0x3b8>)
 800471a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800471e:	405a      	eors	r2, r3
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	0e1b      	lsrs	r3, r3, #24
 8004724:	49a4      	ldr	r1, [pc, #656]	@ (80049b8 <mbedtls_internal_aes_encrypt+0x3bc>)
 8004726:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800472a:	4053      	eors	r3, r2
 800472c:	61fb      	str	r3, [r7, #28]
 800472e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004730:	1d1a      	adds	r2, r3, #4
 8004732:	633a      	str	r2, [r7, #48]	@ 0x30
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004738:	b2db      	uxtb	r3, r3
 800473a:	499c      	ldr	r1, [pc, #624]	@ (80049ac <mbedtls_internal_aes_encrypt+0x3b0>)
 800473c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004740:	405a      	eors	r2, r3
 8004742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004744:	0a1b      	lsrs	r3, r3, #8
 8004746:	b2db      	uxtb	r3, r3
 8004748:	4999      	ldr	r1, [pc, #612]	@ (80049b0 <mbedtls_internal_aes_encrypt+0x3b4>)
 800474a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800474e:	405a      	eors	r2, r3
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	0c1b      	lsrs	r3, r3, #16
 8004754:	b2db      	uxtb	r3, r3
 8004756:	4997      	ldr	r1, [pc, #604]	@ (80049b4 <mbedtls_internal_aes_encrypt+0x3b8>)
 8004758:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800475c:	405a      	eors	r2, r3
 800475e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004760:	0e1b      	lsrs	r3, r3, #24
 8004762:	4995      	ldr	r1, [pc, #596]	@ (80049b8 <mbedtls_internal_aes_encrypt+0x3bc>)
 8004764:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004768:	4053      	eors	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
 800476c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476e:	1d1a      	adds	r2, r3, #4
 8004770:	633a      	str	r2, [r7, #48]	@ 0x30
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004776:	b2db      	uxtb	r3, r3
 8004778:	498c      	ldr	r1, [pc, #560]	@ (80049ac <mbedtls_internal_aes_encrypt+0x3b0>)
 800477a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800477e:	405a      	eors	r2, r3
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	0a1b      	lsrs	r3, r3, #8
 8004784:	b2db      	uxtb	r3, r3
 8004786:	498a      	ldr	r1, [pc, #552]	@ (80049b0 <mbedtls_internal_aes_encrypt+0x3b4>)
 8004788:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800478c:	405a      	eors	r2, r3
 800478e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004790:	0c1b      	lsrs	r3, r3, #16
 8004792:	b2db      	uxtb	r3, r3
 8004794:	4987      	ldr	r1, [pc, #540]	@ (80049b4 <mbedtls_internal_aes_encrypt+0x3b8>)
 8004796:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800479a:	405a      	eors	r2, r3
 800479c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479e:	0e1b      	lsrs	r3, r3, #24
 80047a0:	4985      	ldr	r1, [pc, #532]	@ (80049b8 <mbedtls_internal_aes_encrypt+0x3bc>)
 80047a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80047a6:	4053      	eors	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ac:	1d1a      	adds	r2, r3, #4
 80047ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	497d      	ldr	r1, [pc, #500]	@ (80049ac <mbedtls_internal_aes_encrypt+0x3b0>)
 80047b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80047bc:	405a      	eors	r2, r3
 80047be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c0:	0a1b      	lsrs	r3, r3, #8
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	497a      	ldr	r1, [pc, #488]	@ (80049b0 <mbedtls_internal_aes_encrypt+0x3b4>)
 80047c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80047ca:	405a      	eors	r2, r3
 80047cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ce:	0c1b      	lsrs	r3, r3, #16
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	4978      	ldr	r1, [pc, #480]	@ (80049b4 <mbedtls_internal_aes_encrypt+0x3b8>)
 80047d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80047d8:	405a      	eors	r2, r3
 80047da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047dc:	0e1b      	lsrs	r3, r3, #24
 80047de:	4976      	ldr	r1, [pc, #472]	@ (80049b8 <mbedtls_internal_aes_encrypt+0x3bc>)
 80047e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80047e4:	4053      	eors	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80047e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ea:	1d1a      	adds	r2, r3, #4
 80047ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	496d      	ldr	r1, [pc, #436]	@ (80049ac <mbedtls_internal_aes_encrypt+0x3b0>)
 80047f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80047fa:	405a      	eors	r2, r3
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	0a1b      	lsrs	r3, r3, #8
 8004800:	b2db      	uxtb	r3, r3
 8004802:	496b      	ldr	r1, [pc, #428]	@ (80049b0 <mbedtls_internal_aes_encrypt+0x3b4>)
 8004804:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004808:	405a      	eors	r2, r3
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	0c1b      	lsrs	r3, r3, #16
 800480e:	b2db      	uxtb	r3, r3
 8004810:	4968      	ldr	r1, [pc, #416]	@ (80049b4 <mbedtls_internal_aes_encrypt+0x3b8>)
 8004812:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004816:	405a      	eors	r2, r3
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	0e1b      	lsrs	r3, r3, #24
 800481c:	4966      	ldr	r1, [pc, #408]	@ (80049b8 <mbedtls_internal_aes_encrypt+0x3bc>)
 800481e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004822:	4053      	eors	r3, r2
 8004824:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004828:	1d1a      	adds	r2, r3, #4
 800482a:	633a      	str	r2, [r7, #48]	@ 0x30
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	b2db      	uxtb	r3, r3
 8004832:	495e      	ldr	r1, [pc, #376]	@ (80049ac <mbedtls_internal_aes_encrypt+0x3b0>)
 8004834:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004838:	405a      	eors	r2, r3
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	0a1b      	lsrs	r3, r3, #8
 800483e:	b2db      	uxtb	r3, r3
 8004840:	495b      	ldr	r1, [pc, #364]	@ (80049b0 <mbedtls_internal_aes_encrypt+0x3b4>)
 8004842:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004846:	405a      	eors	r2, r3
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	0c1b      	lsrs	r3, r3, #16
 800484c:	b2db      	uxtb	r3, r3
 800484e:	4959      	ldr	r1, [pc, #356]	@ (80049b4 <mbedtls_internal_aes_encrypt+0x3b8>)
 8004850:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004854:	405a      	eors	r2, r3
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	0e1b      	lsrs	r3, r3, #24
 800485a:	4957      	ldr	r1, [pc, #348]	@ (80049b8 <mbedtls_internal_aes_encrypt+0x3bc>)
 800485c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004860:	4053      	eors	r3, r2
 8004862:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004866:	1d1a      	adds	r2, r3, #4
 8004868:	633a      	str	r2, [r7, #48]	@ 0x30
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	494e      	ldr	r1, [pc, #312]	@ (80049ac <mbedtls_internal_aes_encrypt+0x3b0>)
 8004872:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004876:	405a      	eors	r2, r3
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	0a1b      	lsrs	r3, r3, #8
 800487c:	b2db      	uxtb	r3, r3
 800487e:	494c      	ldr	r1, [pc, #304]	@ (80049b0 <mbedtls_internal_aes_encrypt+0x3b4>)
 8004880:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004884:	405a      	eors	r2, r3
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	0c1b      	lsrs	r3, r3, #16
 800488a:	b2db      	uxtb	r3, r3
 800488c:	4949      	ldr	r1, [pc, #292]	@ (80049b4 <mbedtls_internal_aes_encrypt+0x3b8>)
 800488e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004892:	405a      	eors	r2, r3
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	0e1b      	lsrs	r3, r3, #24
 8004898:	4947      	ldr	r1, [pc, #284]	@ (80049b8 <mbedtls_internal_aes_encrypt+0x3bc>)
 800489a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800489e:	4053      	eors	r3, r2
 80048a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80048a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a4:	1d1a      	adds	r2, r3, #4
 80048a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	493f      	ldr	r1, [pc, #252]	@ (80049ac <mbedtls_internal_aes_encrypt+0x3b0>)
 80048b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80048b4:	405a      	eors	r2, r3
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	0a1b      	lsrs	r3, r3, #8
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	493c      	ldr	r1, [pc, #240]	@ (80049b0 <mbedtls_internal_aes_encrypt+0x3b4>)
 80048be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80048c2:	405a      	eors	r2, r3
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	0c1b      	lsrs	r3, r3, #16
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	493a      	ldr	r1, [pc, #232]	@ (80049b4 <mbedtls_internal_aes_encrypt+0x3b8>)
 80048cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80048d0:	405a      	eors	r2, r3
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	0e1b      	lsrs	r3, r3, #24
 80048d6:	4938      	ldr	r1, [pc, #224]	@ (80049b8 <mbedtls_internal_aes_encrypt+0x3bc>)
 80048d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80048dc:	4053      	eors	r3, r2
 80048de:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80048e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048e2:	3b01      	subs	r3, #1
 80048e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80048e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f73f af01 	bgt.w	80046f0 <mbedtls_internal_aes_encrypt+0xf4>
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80048ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f0:	1d1a      	adds	r2, r3, #4
 80048f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	492c      	ldr	r1, [pc, #176]	@ (80049ac <mbedtls_internal_aes_encrypt+0x3b0>)
 80048fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004900:	405a      	eors	r2, r3
 8004902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004904:	0a1b      	lsrs	r3, r3, #8
 8004906:	b2db      	uxtb	r3, r3
 8004908:	4929      	ldr	r1, [pc, #164]	@ (80049b0 <mbedtls_internal_aes_encrypt+0x3b4>)
 800490a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800490e:	405a      	eors	r2, r3
 8004910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004912:	0c1b      	lsrs	r3, r3, #16
 8004914:	b2db      	uxtb	r3, r3
 8004916:	4927      	ldr	r1, [pc, #156]	@ (80049b4 <mbedtls_internal_aes_encrypt+0x3b8>)
 8004918:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800491c:	405a      	eors	r2, r3
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	0e1b      	lsrs	r3, r3, #24
 8004922:	4925      	ldr	r1, [pc, #148]	@ (80049b8 <mbedtls_internal_aes_encrypt+0x3bc>)
 8004924:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004928:	4053      	eors	r3, r2
 800492a:	61fb      	str	r3, [r7, #28]
 800492c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492e:	1d1a      	adds	r2, r3, #4
 8004930:	633a      	str	r2, [r7, #48]	@ 0x30
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004936:	b2db      	uxtb	r3, r3
 8004938:	491c      	ldr	r1, [pc, #112]	@ (80049ac <mbedtls_internal_aes_encrypt+0x3b0>)
 800493a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800493e:	405a      	eors	r2, r3
 8004940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004942:	0a1b      	lsrs	r3, r3, #8
 8004944:	b2db      	uxtb	r3, r3
 8004946:	491a      	ldr	r1, [pc, #104]	@ (80049b0 <mbedtls_internal_aes_encrypt+0x3b4>)
 8004948:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800494c:	405a      	eors	r2, r3
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	0c1b      	lsrs	r3, r3, #16
 8004952:	b2db      	uxtb	r3, r3
 8004954:	4917      	ldr	r1, [pc, #92]	@ (80049b4 <mbedtls_internal_aes_encrypt+0x3b8>)
 8004956:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800495a:	405a      	eors	r2, r3
 800495c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800495e:	0e1b      	lsrs	r3, r3, #24
 8004960:	4915      	ldr	r1, [pc, #84]	@ (80049b8 <mbedtls_internal_aes_encrypt+0x3bc>)
 8004962:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004966:	4053      	eors	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
 800496a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496c:	1d1a      	adds	r2, r3, #4
 800496e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004974:	b2db      	uxtb	r3, r3
 8004976:	490d      	ldr	r1, [pc, #52]	@ (80049ac <mbedtls_internal_aes_encrypt+0x3b0>)
 8004978:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800497c:	405a      	eors	r2, r3
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	0a1b      	lsrs	r3, r3, #8
 8004982:	b2db      	uxtb	r3, r3
 8004984:	490a      	ldr	r1, [pc, #40]	@ (80049b0 <mbedtls_internal_aes_encrypt+0x3b4>)
 8004986:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800498a:	405a      	eors	r2, r3
 800498c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800498e:	0c1b      	lsrs	r3, r3, #16
 8004990:	b2db      	uxtb	r3, r3
 8004992:	4908      	ldr	r1, [pc, #32]	@ (80049b4 <mbedtls_internal_aes_encrypt+0x3b8>)
 8004994:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004998:	405a      	eors	r2, r3
 800499a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499c:	0e1b      	lsrs	r3, r3, #24
 800499e:	4906      	ldr	r1, [pc, #24]	@ (80049b8 <mbedtls_internal_aes_encrypt+0x3bc>)
 80049a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80049a4:	4053      	eors	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]
 80049a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049aa:	e007      	b.n	80049bc <mbedtls_internal_aes_encrypt+0x3c0>
 80049ac:	08018d7c 	.word	0x08018d7c
 80049b0:	0801917c 	.word	0x0801917c
 80049b4:	0801957c 	.word	0x0801957c
 80049b8:	0801997c 	.word	0x0801997c
 80049bc:	1d1a      	adds	r2, r3, #4
 80049be:	633a      	str	r2, [r7, #48]	@ 0x30
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	4979      	ldr	r1, [pc, #484]	@ (8004bac <mbedtls_internal_aes_encrypt+0x5b0>)
 80049c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80049cc:	405a      	eors	r2, r3
 80049ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d0:	0a1b      	lsrs	r3, r3, #8
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	4976      	ldr	r1, [pc, #472]	@ (8004bb0 <mbedtls_internal_aes_encrypt+0x5b4>)
 80049d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80049da:	405a      	eors	r2, r3
 80049dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049de:	0c1b      	lsrs	r3, r3, #16
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	4974      	ldr	r1, [pc, #464]	@ (8004bb4 <mbedtls_internal_aes_encrypt+0x5b8>)
 80049e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80049e8:	405a      	eors	r2, r3
 80049ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ec:	0e1b      	lsrs	r3, r3, #24
 80049ee:	4972      	ldr	r1, [pc, #456]	@ (8004bb8 <mbedtls_internal_aes_encrypt+0x5bc>)
 80049f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80049f4:	4053      	eors	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 80049f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fa:	1d1a      	adds	r2, r3, #4
 80049fc:	633a      	str	r2, [r7, #48]	@ 0x30
 80049fe:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 8004a00:	69fa      	ldr	r2, [r7, #28]
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	496d      	ldr	r1, [pc, #436]	@ (8004bbc <mbedtls_internal_aes_encrypt+0x5c0>)
 8004a06:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 8004a08:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	0a1b      	lsrs	r3, r3, #8
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	496a      	ldr	r1, [pc, #424]	@ (8004bbc <mbedtls_internal_aes_encrypt+0x5c0>)
 8004a12:	5ccb      	ldrb	r3, [r1, r3]
 8004a14:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 8004a16:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	0c1b      	lsrs	r3, r3, #16
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	4967      	ldr	r1, [pc, #412]	@ (8004bbc <mbedtls_internal_aes_encrypt+0x5c0>)
 8004a20:	5ccb      	ldrb	r3, [r1, r3]
 8004a22:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8004a24:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	0e1b      	lsrs	r3, r3, #24
 8004a2a:	4964      	ldr	r1, [pc, #400]	@ (8004bbc <mbedtls_internal_aes_encrypt+0x5c0>)
 8004a2c:	5ccb      	ldrb	r3, [r1, r3]
 8004a2e:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 8004a30:	4053      	eors	r3, r2
 8004a32:	62fb      	str	r3, [r7, #44]	@ 0x2c

    X1 = *RK++ ^ \
 8004a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a36:	1d1a      	adds	r2, r3, #4
 8004a38:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a3a:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	495e      	ldr	r1, [pc, #376]	@ (8004bbc <mbedtls_internal_aes_encrypt+0x5c0>)
 8004a42:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 8004a44:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	0a1b      	lsrs	r3, r3, #8
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	495b      	ldr	r1, [pc, #364]	@ (8004bbc <mbedtls_internal_aes_encrypt+0x5c0>)
 8004a4e:	5ccb      	ldrb	r3, [r1, r3]
 8004a50:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8004a52:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	0c1b      	lsrs	r3, r3, #16
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	4958      	ldr	r1, [pc, #352]	@ (8004bbc <mbedtls_internal_aes_encrypt+0x5c0>)
 8004a5c:	5ccb      	ldrb	r3, [r1, r3]
 8004a5e:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8004a60:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	0e1b      	lsrs	r3, r3, #24
 8004a66:	4955      	ldr	r1, [pc, #340]	@ (8004bbc <mbedtls_internal_aes_encrypt+0x5c0>)
 8004a68:	5ccb      	ldrb	r3, [r1, r3]
 8004a6a:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 8004a6c:	4053      	eors	r3, r2
 8004a6e:	62bb      	str	r3, [r7, #40]	@ 0x28

    X2 = *RK++ ^ \
 8004a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a72:	1d1a      	adds	r2, r3, #4
 8004a74:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a76:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	494f      	ldr	r1, [pc, #316]	@ (8004bbc <mbedtls_internal_aes_encrypt+0x5c0>)
 8004a7e:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 8004a80:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	0a1b      	lsrs	r3, r3, #8
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	494c      	ldr	r1, [pc, #304]	@ (8004bbc <mbedtls_internal_aes_encrypt+0x5c0>)
 8004a8a:	5ccb      	ldrb	r3, [r1, r3]
 8004a8c:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8004a8e:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	0c1b      	lsrs	r3, r3, #16
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	4949      	ldr	r1, [pc, #292]	@ (8004bbc <mbedtls_internal_aes_encrypt+0x5c0>)
 8004a98:	5ccb      	ldrb	r3, [r1, r3]
 8004a9a:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8004a9c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	0e1b      	lsrs	r3, r3, #24
 8004aa2:	4946      	ldr	r1, [pc, #280]	@ (8004bbc <mbedtls_internal_aes_encrypt+0x5c0>)
 8004aa4:	5ccb      	ldrb	r3, [r1, r3]
 8004aa6:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 8004aa8:	4053      	eors	r3, r2
 8004aaa:	627b      	str	r3, [r7, #36]	@ 0x24

    X3 = *RK++ ^ \
 8004aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aae:	1d1a      	adds	r2, r3, #4
 8004ab0:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ab2:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	4940      	ldr	r1, [pc, #256]	@ (8004bbc <mbedtls_internal_aes_encrypt+0x5c0>)
 8004aba:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 8004abc:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	0a1b      	lsrs	r3, r3, #8
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	493d      	ldr	r1, [pc, #244]	@ (8004bbc <mbedtls_internal_aes_encrypt+0x5c0>)
 8004ac6:	5ccb      	ldrb	r3, [r1, r3]
 8004ac8:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8004aca:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	0c1b      	lsrs	r3, r3, #16
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	493a      	ldr	r1, [pc, #232]	@ (8004bbc <mbedtls_internal_aes_encrypt+0x5c0>)
 8004ad4:	5ccb      	ldrb	r3, [r1, r3]
 8004ad6:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8004ad8:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	0e1b      	lsrs	r3, r3, #24
 8004ade:	4937      	ldr	r1, [pc, #220]	@ (8004bbc <mbedtls_internal_aes_encrypt+0x5c0>)
 8004ae0:	5ccb      	ldrb	r3, [r1, r3]
 8004ae2:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 8004ae4:	4053      	eors	r3, r2
 8004ae6:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 8004ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	701a      	strb	r2, [r3, #0]
 8004af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af2:	0a1a      	lsrs	r2, r3, #8
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3301      	adds	r3, #1
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	701a      	strb	r2, [r3, #0]
 8004afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004afe:	0c1a      	lsrs	r2, r3, #16
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3302      	adds	r3, #2
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	701a      	strb	r2, [r3, #0]
 8004b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b0a:	0e1a      	lsrs	r2, r3, #24
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3303      	adds	r3, #3
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3304      	adds	r3, #4
 8004b18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	701a      	strb	r2, [r3, #0]
 8004b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b20:	0a1a      	lsrs	r2, r3, #8
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	3305      	adds	r3, #5
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	701a      	strb	r2, [r3, #0]
 8004b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b2c:	0c1a      	lsrs	r2, r3, #16
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3306      	adds	r3, #6
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]
 8004b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b38:	0e1a      	lsrs	r2, r3, #24
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3307      	adds	r3, #7
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3308      	adds	r3, #8
 8004b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b48:	b2d2      	uxtb	r2, r2
 8004b4a:	701a      	strb	r2, [r3, #0]
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4e:	0a1a      	lsrs	r2, r3, #8
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3309      	adds	r3, #9
 8004b54:	b2d2      	uxtb	r2, r2
 8004b56:	701a      	strb	r2, [r3, #0]
 8004b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5a:	0c1a      	lsrs	r2, r3, #16
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	330a      	adds	r3, #10
 8004b60:	b2d2      	uxtb	r2, r2
 8004b62:	701a      	strb	r2, [r3, #0]
 8004b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b66:	0e1a      	lsrs	r2, r3, #24
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	330b      	adds	r3, #11
 8004b6c:	b2d2      	uxtb	r2, r2
 8004b6e:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	330c      	adds	r3, #12
 8004b74:	6a3a      	ldr	r2, [r7, #32]
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	701a      	strb	r2, [r3, #0]
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	0a1a      	lsrs	r2, r3, #8
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	330d      	adds	r3, #13
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	701a      	strb	r2, [r3, #0]
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	0c1a      	lsrs	r2, r3, #16
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	330e      	adds	r3, #14
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	0e1a      	lsrs	r2, r3, #24
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	330f      	adds	r3, #15
 8004b9a:	b2d2      	uxtb	r2, r2
 8004b9c:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	373c      	adds	r7, #60	@ 0x3c
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	08018d7c 	.word	0x08018d7c
 8004bb0:	0801917c 	.word	0x0801917c
 8004bb4:	0801957c 	.word	0x0801957c
 8004bb8:	0801997c 	.word	0x0801997c
 8004bbc:	08018c7c 	.word	0x08018c7c

08004bc0 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b08f      	sub	sp, #60	@ 0x3c
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	633b      	str	r3, [r7, #48]	@ 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	021b      	lsls	r3, r3, #8
 8004be0:	431a      	orrs	r2, r3
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	3302      	adds	r3, #2
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	041b      	lsls	r3, r3, #16
 8004bea:	431a      	orrs	r2, r3
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	3303      	adds	r3, #3
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	061b      	lsls	r3, r3, #24
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfa:	1d1a      	adds	r2, r3, #4
 8004bfc:	633a      	str	r2, [r7, #48]	@ 0x30
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c02:	4053      	eors	r3, r2
 8004c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	3304      	adds	r3, #4
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	3305      	adds	r3, #5
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	021b      	lsls	r3, r3, #8
 8004c16:	431a      	orrs	r2, r3
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	3306      	adds	r3, #6
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	041b      	lsls	r3, r3, #16
 8004c20:	431a      	orrs	r2, r3
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	3307      	adds	r3, #7
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	061b      	lsls	r3, r3, #24
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c30:	1d1a      	adds	r2, r3, #4
 8004c32:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c38:	4053      	eors	r3, r2
 8004c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	3308      	adds	r3, #8
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	461a      	mov	r2, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	3309      	adds	r3, #9
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	021b      	lsls	r3, r3, #8
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	330a      	adds	r3, #10
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	041b      	lsls	r3, r3, #16
 8004c56:	431a      	orrs	r2, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	330b      	adds	r3, #11
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	061b      	lsls	r3, r3, #24
 8004c60:	4313      	orrs	r3, r2
 8004c62:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c66:	1d1a      	adds	r2, r3, #4
 8004c68:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c6e:	4053      	eors	r3, r2
 8004c70:	627b      	str	r3, [r7, #36]	@ 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	330c      	adds	r3, #12
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	330d      	adds	r3, #13
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	021b      	lsls	r3, r3, #8
 8004c82:	431a      	orrs	r2, r3
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	330e      	adds	r3, #14
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	041b      	lsls	r3, r3, #16
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	330f      	adds	r3, #15
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	061b      	lsls	r3, r3, #24
 8004c96:	4313      	orrs	r3, r2
 8004c98:	623b      	str	r3, [r7, #32]
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9c:	1d1a      	adds	r2, r3, #4
 8004c9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6a3a      	ldr	r2, [r7, #32]
 8004ca4:	4053      	eors	r3, r2
 8004ca6:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	105b      	asrs	r3, r3, #1
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cb2:	e0fa      	b.n	8004eaa <mbedtls_internal_aes_decrypt+0x2ea>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8004cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb6:	1d1a      	adds	r2, r3, #4
 8004cb8:	633a      	str	r2, [r7, #48]	@ 0x30
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	49ab      	ldr	r1, [pc, #684]	@ (8004f70 <mbedtls_internal_aes_decrypt+0x3b0>)
 8004cc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004cc6:	405a      	eors	r2, r3
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	0a1b      	lsrs	r3, r3, #8
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	49a9      	ldr	r1, [pc, #676]	@ (8004f74 <mbedtls_internal_aes_decrypt+0x3b4>)
 8004cd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004cd4:	405a      	eors	r2, r3
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd8:	0c1b      	lsrs	r3, r3, #16
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	49a6      	ldr	r1, [pc, #664]	@ (8004f78 <mbedtls_internal_aes_decrypt+0x3b8>)
 8004cde:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ce2:	405a      	eors	r2, r3
 8004ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce6:	0e1b      	lsrs	r3, r3, #24
 8004ce8:	49a4      	ldr	r1, [pc, #656]	@ (8004f7c <mbedtls_internal_aes_decrypt+0x3bc>)
 8004cea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004cee:	4053      	eors	r3, r2
 8004cf0:	61fb      	str	r3, [r7, #28]
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf4:	1d1a      	adds	r2, r3, #4
 8004cf6:	633a      	str	r2, [r7, #48]	@ 0x30
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	499c      	ldr	r1, [pc, #624]	@ (8004f70 <mbedtls_internal_aes_decrypt+0x3b0>)
 8004d00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d04:	405a      	eors	r2, r3
 8004d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d08:	0a1b      	lsrs	r3, r3, #8
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	4999      	ldr	r1, [pc, #612]	@ (8004f74 <mbedtls_internal_aes_decrypt+0x3b4>)
 8004d0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d12:	405a      	eors	r2, r3
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	0c1b      	lsrs	r3, r3, #16
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	4997      	ldr	r1, [pc, #604]	@ (8004f78 <mbedtls_internal_aes_decrypt+0x3b8>)
 8004d1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d20:	405a      	eors	r2, r3
 8004d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d24:	0e1b      	lsrs	r3, r3, #24
 8004d26:	4995      	ldr	r1, [pc, #596]	@ (8004f7c <mbedtls_internal_aes_decrypt+0x3bc>)
 8004d28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d2c:	4053      	eors	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
 8004d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d32:	1d1a      	adds	r2, r3, #4
 8004d34:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	498c      	ldr	r1, [pc, #560]	@ (8004f70 <mbedtls_internal_aes_decrypt+0x3b0>)
 8004d3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d42:	405a      	eors	r2, r3
 8004d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d46:	0a1b      	lsrs	r3, r3, #8
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	498a      	ldr	r1, [pc, #552]	@ (8004f74 <mbedtls_internal_aes_decrypt+0x3b4>)
 8004d4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d50:	405a      	eors	r2, r3
 8004d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d54:	0c1b      	lsrs	r3, r3, #16
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	4987      	ldr	r1, [pc, #540]	@ (8004f78 <mbedtls_internal_aes_decrypt+0x3b8>)
 8004d5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d5e:	405a      	eors	r2, r3
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	0e1b      	lsrs	r3, r3, #24
 8004d64:	4985      	ldr	r1, [pc, #532]	@ (8004f7c <mbedtls_internal_aes_decrypt+0x3bc>)
 8004d66:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d6a:	4053      	eors	r3, r2
 8004d6c:	617b      	str	r3, [r7, #20]
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d70:	1d1a      	adds	r2, r3, #4
 8004d72:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	497d      	ldr	r1, [pc, #500]	@ (8004f70 <mbedtls_internal_aes_decrypt+0x3b0>)
 8004d7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d80:	405a      	eors	r2, r3
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	0a1b      	lsrs	r3, r3, #8
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	497a      	ldr	r1, [pc, #488]	@ (8004f74 <mbedtls_internal_aes_decrypt+0x3b4>)
 8004d8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d8e:	405a      	eors	r2, r3
 8004d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d92:	0c1b      	lsrs	r3, r3, #16
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	4978      	ldr	r1, [pc, #480]	@ (8004f78 <mbedtls_internal_aes_decrypt+0x3b8>)
 8004d98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d9c:	405a      	eors	r2, r3
 8004d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da0:	0e1b      	lsrs	r3, r3, #24
 8004da2:	4976      	ldr	r1, [pc, #472]	@ (8004f7c <mbedtls_internal_aes_decrypt+0x3bc>)
 8004da4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004da8:	4053      	eors	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8004dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dae:	1d1a      	adds	r2, r3, #4
 8004db0:	633a      	str	r2, [r7, #48]	@ 0x30
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	496d      	ldr	r1, [pc, #436]	@ (8004f70 <mbedtls_internal_aes_decrypt+0x3b0>)
 8004dba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004dbe:	405a      	eors	r2, r3
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	0a1b      	lsrs	r3, r3, #8
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	496b      	ldr	r1, [pc, #428]	@ (8004f74 <mbedtls_internal_aes_decrypt+0x3b4>)
 8004dc8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004dcc:	405a      	eors	r2, r3
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	0c1b      	lsrs	r3, r3, #16
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	4968      	ldr	r1, [pc, #416]	@ (8004f78 <mbedtls_internal_aes_decrypt+0x3b8>)
 8004dd6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004dda:	405a      	eors	r2, r3
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	0e1b      	lsrs	r3, r3, #24
 8004de0:	4966      	ldr	r1, [pc, #408]	@ (8004f7c <mbedtls_internal_aes_decrypt+0x3bc>)
 8004de2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004de6:	4053      	eors	r3, r2
 8004de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dec:	1d1a      	adds	r2, r3, #4
 8004dee:	633a      	str	r2, [r7, #48]	@ 0x30
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	495e      	ldr	r1, [pc, #376]	@ (8004f70 <mbedtls_internal_aes_decrypt+0x3b0>)
 8004df8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004dfc:	405a      	eors	r2, r3
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	0a1b      	lsrs	r3, r3, #8
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	495b      	ldr	r1, [pc, #364]	@ (8004f74 <mbedtls_internal_aes_decrypt+0x3b4>)
 8004e06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e0a:	405a      	eors	r2, r3
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	0c1b      	lsrs	r3, r3, #16
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	4959      	ldr	r1, [pc, #356]	@ (8004f78 <mbedtls_internal_aes_decrypt+0x3b8>)
 8004e14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e18:	405a      	eors	r2, r3
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	0e1b      	lsrs	r3, r3, #24
 8004e1e:	4957      	ldr	r1, [pc, #348]	@ (8004f7c <mbedtls_internal_aes_decrypt+0x3bc>)
 8004e20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e24:	4053      	eors	r3, r2
 8004e26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2a:	1d1a      	adds	r2, r3, #4
 8004e2c:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	494e      	ldr	r1, [pc, #312]	@ (8004f70 <mbedtls_internal_aes_decrypt+0x3b0>)
 8004e36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e3a:	405a      	eors	r2, r3
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	0a1b      	lsrs	r3, r3, #8
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	494c      	ldr	r1, [pc, #304]	@ (8004f74 <mbedtls_internal_aes_decrypt+0x3b4>)
 8004e44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e48:	405a      	eors	r2, r3
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	0c1b      	lsrs	r3, r3, #16
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	4949      	ldr	r1, [pc, #292]	@ (8004f78 <mbedtls_internal_aes_decrypt+0x3b8>)
 8004e52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e56:	405a      	eors	r2, r3
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	0e1b      	lsrs	r3, r3, #24
 8004e5c:	4947      	ldr	r1, [pc, #284]	@ (8004f7c <mbedtls_internal_aes_decrypt+0x3bc>)
 8004e5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e62:	4053      	eors	r3, r2
 8004e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e68:	1d1a      	adds	r2, r3, #4
 8004e6a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	493f      	ldr	r1, [pc, #252]	@ (8004f70 <mbedtls_internal_aes_decrypt+0x3b0>)
 8004e74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e78:	405a      	eors	r2, r3
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	0a1b      	lsrs	r3, r3, #8
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	493c      	ldr	r1, [pc, #240]	@ (8004f74 <mbedtls_internal_aes_decrypt+0x3b4>)
 8004e82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e86:	405a      	eors	r2, r3
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	0c1b      	lsrs	r3, r3, #16
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	493a      	ldr	r1, [pc, #232]	@ (8004f78 <mbedtls_internal_aes_decrypt+0x3b8>)
 8004e90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e94:	405a      	eors	r2, r3
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	0e1b      	lsrs	r3, r3, #24
 8004e9a:	4938      	ldr	r1, [pc, #224]	@ (8004f7c <mbedtls_internal_aes_decrypt+0x3bc>)
 8004e9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ea0:	4053      	eors	r3, r2
 8004ea2:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8004ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f73f af01 	bgt.w	8004cb4 <mbedtls_internal_aes_decrypt+0xf4>
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb4:	1d1a      	adds	r2, r3, #4
 8004eb6:	633a      	str	r2, [r7, #48]	@ 0x30
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	492c      	ldr	r1, [pc, #176]	@ (8004f70 <mbedtls_internal_aes_decrypt+0x3b0>)
 8004ec0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ec4:	405a      	eors	r2, r3
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	0a1b      	lsrs	r3, r3, #8
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	4929      	ldr	r1, [pc, #164]	@ (8004f74 <mbedtls_internal_aes_decrypt+0x3b4>)
 8004ece:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ed2:	405a      	eors	r2, r3
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed6:	0c1b      	lsrs	r3, r3, #16
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	4927      	ldr	r1, [pc, #156]	@ (8004f78 <mbedtls_internal_aes_decrypt+0x3b8>)
 8004edc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ee0:	405a      	eors	r2, r3
 8004ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee4:	0e1b      	lsrs	r3, r3, #24
 8004ee6:	4925      	ldr	r1, [pc, #148]	@ (8004f7c <mbedtls_internal_aes_decrypt+0x3bc>)
 8004ee8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004eec:	4053      	eors	r3, r2
 8004eee:	61fb      	str	r3, [r7, #28]
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef2:	1d1a      	adds	r2, r3, #4
 8004ef4:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	491c      	ldr	r1, [pc, #112]	@ (8004f70 <mbedtls_internal_aes_decrypt+0x3b0>)
 8004efe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f02:	405a      	eors	r2, r3
 8004f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f06:	0a1b      	lsrs	r3, r3, #8
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	491a      	ldr	r1, [pc, #104]	@ (8004f74 <mbedtls_internal_aes_decrypt+0x3b4>)
 8004f0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f10:	405a      	eors	r2, r3
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	0c1b      	lsrs	r3, r3, #16
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	4917      	ldr	r1, [pc, #92]	@ (8004f78 <mbedtls_internal_aes_decrypt+0x3b8>)
 8004f1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f1e:	405a      	eors	r2, r3
 8004f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f22:	0e1b      	lsrs	r3, r3, #24
 8004f24:	4915      	ldr	r1, [pc, #84]	@ (8004f7c <mbedtls_internal_aes_decrypt+0x3bc>)
 8004f26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f2a:	4053      	eors	r3, r2
 8004f2c:	61bb      	str	r3, [r7, #24]
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f30:	1d1a      	adds	r2, r3, #4
 8004f32:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	490d      	ldr	r1, [pc, #52]	@ (8004f70 <mbedtls_internal_aes_decrypt+0x3b0>)
 8004f3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f40:	405a      	eors	r2, r3
 8004f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f44:	0a1b      	lsrs	r3, r3, #8
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	490a      	ldr	r1, [pc, #40]	@ (8004f74 <mbedtls_internal_aes_decrypt+0x3b4>)
 8004f4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f4e:	405a      	eors	r2, r3
 8004f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f52:	0c1b      	lsrs	r3, r3, #16
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	4908      	ldr	r1, [pc, #32]	@ (8004f78 <mbedtls_internal_aes_decrypt+0x3b8>)
 8004f58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f5c:	405a      	eors	r2, r3
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	0e1b      	lsrs	r3, r3, #24
 8004f62:	4906      	ldr	r1, [pc, #24]	@ (8004f7c <mbedtls_internal_aes_decrypt+0x3bc>)
 8004f64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f68:	4053      	eors	r3, r2
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6e:	e007      	b.n	8004f80 <mbedtls_internal_aes_decrypt+0x3c0>
 8004f70:	08019e7c 	.word	0x08019e7c
 8004f74:	0801a27c 	.word	0x0801a27c
 8004f78:	0801a67c 	.word	0x0801a67c
 8004f7c:	0801aa7c 	.word	0x0801aa7c
 8004f80:	1d1a      	adds	r2, r3, #4
 8004f82:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	4979      	ldr	r1, [pc, #484]	@ (8005170 <mbedtls_internal_aes_decrypt+0x5b0>)
 8004f8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f90:	405a      	eors	r2, r3
 8004f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f94:	0a1b      	lsrs	r3, r3, #8
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	4976      	ldr	r1, [pc, #472]	@ (8005174 <mbedtls_internal_aes_decrypt+0x5b4>)
 8004f9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f9e:	405a      	eors	r2, r3
 8004fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa2:	0c1b      	lsrs	r3, r3, #16
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	4974      	ldr	r1, [pc, #464]	@ (8005178 <mbedtls_internal_aes_decrypt+0x5b8>)
 8004fa8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004fac:	405a      	eors	r2, r3
 8004fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fb0:	0e1b      	lsrs	r3, r3, #24
 8004fb2:	4972      	ldr	r1, [pc, #456]	@ (800517c <mbedtls_internal_aes_decrypt+0x5bc>)
 8004fb4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004fb8:	4053      	eors	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbe:	1d1a      	adds	r2, r3, #4
 8004fc0:	633a      	str	r2, [r7, #48]	@ 0x30
 8004fc2:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8004fc4:	69fa      	ldr	r2, [r7, #28]
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	496d      	ldr	r1, [pc, #436]	@ (8005180 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004fca:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 8004fcc:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	0a1b      	lsrs	r3, r3, #8
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	496a      	ldr	r1, [pc, #424]	@ (8005180 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004fd6:	5ccb      	ldrb	r3, [r1, r3]
 8004fd8:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8004fda:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	0c1b      	lsrs	r3, r3, #16
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	4967      	ldr	r1, [pc, #412]	@ (8005180 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004fe4:	5ccb      	ldrb	r3, [r1, r3]
 8004fe6:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8004fe8:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	0e1b      	lsrs	r3, r3, #24
 8004fee:	4964      	ldr	r1, [pc, #400]	@ (8005180 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004ff0:	5ccb      	ldrb	r3, [r1, r3]
 8004ff2:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 8004ff4:	4053      	eors	r3, r2
 8004ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    X1 = *RK++ ^ \
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffa:	1d1a      	adds	r2, r3, #4
 8004ffc:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ffe:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	495e      	ldr	r1, [pc, #376]	@ (8005180 <mbedtls_internal_aes_decrypt+0x5c0>)
 8005006:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 8005008:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	0a1b      	lsrs	r3, r3, #8
 800500e:	b2db      	uxtb	r3, r3
 8005010:	495b      	ldr	r1, [pc, #364]	@ (8005180 <mbedtls_internal_aes_decrypt+0x5c0>)
 8005012:	5ccb      	ldrb	r3, [r1, r3]
 8005014:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8005016:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	0c1b      	lsrs	r3, r3, #16
 800501c:	b2db      	uxtb	r3, r3
 800501e:	4958      	ldr	r1, [pc, #352]	@ (8005180 <mbedtls_internal_aes_decrypt+0x5c0>)
 8005020:	5ccb      	ldrb	r3, [r1, r3]
 8005022:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8005024:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	0e1b      	lsrs	r3, r3, #24
 800502a:	4955      	ldr	r1, [pc, #340]	@ (8005180 <mbedtls_internal_aes_decrypt+0x5c0>)
 800502c:	5ccb      	ldrb	r3, [r1, r3]
 800502e:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 8005030:	4053      	eors	r3, r2
 8005032:	62bb      	str	r3, [r7, #40]	@ 0x28

    X2 = *RK++ ^ \
 8005034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005036:	1d1a      	adds	r2, r3, #4
 8005038:	633a      	str	r2, [r7, #48]	@ 0x30
 800503a:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	494f      	ldr	r1, [pc, #316]	@ (8005180 <mbedtls_internal_aes_decrypt+0x5c0>)
 8005042:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 8005044:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	0a1b      	lsrs	r3, r3, #8
 800504a:	b2db      	uxtb	r3, r3
 800504c:	494c      	ldr	r1, [pc, #304]	@ (8005180 <mbedtls_internal_aes_decrypt+0x5c0>)
 800504e:	5ccb      	ldrb	r3, [r1, r3]
 8005050:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8005052:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	0c1b      	lsrs	r3, r3, #16
 8005058:	b2db      	uxtb	r3, r3
 800505a:	4949      	ldr	r1, [pc, #292]	@ (8005180 <mbedtls_internal_aes_decrypt+0x5c0>)
 800505c:	5ccb      	ldrb	r3, [r1, r3]
 800505e:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8005060:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	0e1b      	lsrs	r3, r3, #24
 8005066:	4946      	ldr	r1, [pc, #280]	@ (8005180 <mbedtls_internal_aes_decrypt+0x5c0>)
 8005068:	5ccb      	ldrb	r3, [r1, r3]
 800506a:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 800506c:	4053      	eors	r3, r2
 800506e:	627b      	str	r3, [r7, #36]	@ 0x24

    X3 = *RK++ ^ \
 8005070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005072:	1d1a      	adds	r2, r3, #4
 8005074:	633a      	str	r2, [r7, #48]	@ 0x30
 8005076:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	4940      	ldr	r1, [pc, #256]	@ (8005180 <mbedtls_internal_aes_decrypt+0x5c0>)
 800507e:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 8005080:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	0a1b      	lsrs	r3, r3, #8
 8005086:	b2db      	uxtb	r3, r3
 8005088:	493d      	ldr	r1, [pc, #244]	@ (8005180 <mbedtls_internal_aes_decrypt+0x5c0>)
 800508a:	5ccb      	ldrb	r3, [r1, r3]
 800508c:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 800508e:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	0c1b      	lsrs	r3, r3, #16
 8005094:	b2db      	uxtb	r3, r3
 8005096:	493a      	ldr	r1, [pc, #232]	@ (8005180 <mbedtls_internal_aes_decrypt+0x5c0>)
 8005098:	5ccb      	ldrb	r3, [r1, r3]
 800509a:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800509c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	0e1b      	lsrs	r3, r3, #24
 80050a2:	4937      	ldr	r1, [pc, #220]	@ (8005180 <mbedtls_internal_aes_decrypt+0x5c0>)
 80050a4:	5ccb      	ldrb	r3, [r1, r3]
 80050a6:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 80050a8:	4053      	eors	r3, r2
 80050aa:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 80050ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	701a      	strb	r2, [r3, #0]
 80050b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b6:	0a1a      	lsrs	r2, r3, #8
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3301      	adds	r3, #1
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050c2:	0c1a      	lsrs	r2, r3, #16
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3302      	adds	r3, #2
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	701a      	strb	r2, [r3, #0]
 80050cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ce:	0e1a      	lsrs	r2, r3, #24
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3303      	adds	r3, #3
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3304      	adds	r3, #4
 80050dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	701a      	strb	r2, [r3, #0]
 80050e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e4:	0a1a      	lsrs	r2, r3, #8
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	3305      	adds	r3, #5
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]
 80050ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f0:	0c1a      	lsrs	r2, r3, #16
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3306      	adds	r3, #6
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050fc:	0e1a      	lsrs	r2, r3, #24
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	3307      	adds	r3, #7
 8005102:	b2d2      	uxtb	r2, r2
 8005104:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	3308      	adds	r3, #8
 800510a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	701a      	strb	r2, [r3, #0]
 8005110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005112:	0a1a      	lsrs	r2, r3, #8
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3309      	adds	r3, #9
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	701a      	strb	r2, [r3, #0]
 800511c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511e:	0c1a      	lsrs	r2, r3, #16
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	330a      	adds	r3, #10
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	701a      	strb	r2, [r3, #0]
 8005128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512a:	0e1a      	lsrs	r2, r3, #24
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	330b      	adds	r3, #11
 8005130:	b2d2      	uxtb	r2, r2
 8005132:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	330c      	adds	r3, #12
 8005138:	6a3a      	ldr	r2, [r7, #32]
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	701a      	strb	r2, [r3, #0]
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	0a1a      	lsrs	r2, r3, #8
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	330d      	adds	r3, #13
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	0c1a      	lsrs	r2, r3, #16
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	330e      	adds	r3, #14
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	701a      	strb	r2, [r3, #0]
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	0e1a      	lsrs	r2, r3, #24
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	330f      	adds	r3, #15
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	373c      	adds	r7, #60	@ 0x3c
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	08019e7c 	.word	0x08019e7c
 8005174:	0801a27c 	.word	0x0801a27c
 8005178:	0801a67c 	.word	0x0801a67c
 800517c:	0801aa7c 	.word	0x0801aa7c
 8005180:	08019d7c 	.word	0x08019d7c

08005184 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	603b      	str	r3, [r7, #0]
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d106      	bne.n	80051a6 <mbedtls_aes_crypt_ecb+0x22>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f7ff fa2d 	bl	80045fc <mbedtls_internal_aes_encrypt>
 80051a2:	4603      	mov	r3, r0
 80051a4:	e005      	b.n	80051b2 <mbedtls_aes_crypt_ecb+0x2e>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f7ff fd08 	bl	8004bc0 <mbedtls_internal_aes_decrypt>
 80051b0:	4603      	mov	r3, r0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
    if( ( end - *p ) < 1 )
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	dc02      	bgt.n	80051da <mbedtls_asn1_get_len+0x1e>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80051d4:	f06f 035f 	mvn.w	r3, #95	@ 0x5f
 80051d8:	e0ac      	b.n	8005334 <mbedtls_asn1_get_len+0x178>

    if( ( **p & 0x80 ) == 0 )
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	b25b      	sxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	db09      	blt.n	80051fa <mbedtls_asn1_get_len+0x3e>
        *len = *(*p)++;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	1c59      	adds	r1, r3, #1
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	6011      	str	r1, [r2, #0]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	e090      	b.n	800531c <mbedtls_asn1_get_len+0x160>
    else
    {
        switch( **p & 0x7F )
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005204:	3b01      	subs	r3, #1
 8005206:	2b03      	cmp	r3, #3
 8005208:	f200 8085 	bhi.w	8005316 <mbedtls_asn1_get_len+0x15a>
 800520c:	a201      	add	r2, pc, #4	@ (adr r2, 8005214 <mbedtls_asn1_get_len+0x58>)
 800520e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005212:	bf00      	nop
 8005214:	08005225 	.word	0x08005225
 8005218:	08005251 	.word	0x08005251
 800521c:	08005287 	.word	0x08005287
 8005220:	080052c9 	.word	0x080052c9
        {
        case 1:
            if( ( end - *p ) < 2 )
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b01      	cmp	r3, #1
 800522e:	dc02      	bgt.n	8005236 <mbedtls_asn1_get_len+0x7a>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8005230:	f06f 035f 	mvn.w	r3, #95	@ 0x5f
 8005234:	e07e      	b.n	8005334 <mbedtls_asn1_get_len+0x178>

            *len = (*p)[1];
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3301      	adds	r3, #1
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	461a      	mov	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	601a      	str	r2, [r3, #0]
            (*p) += 2;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	1c9a      	adds	r2, r3, #2
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	601a      	str	r2, [r3, #0]
            break;
 800524e:	e065      	b.n	800531c <mbedtls_asn1_get_len+0x160>

        case 2:
            if( ( end - *p ) < 3 )
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b02      	cmp	r3, #2
 800525a:	dc02      	bgt.n	8005262 <mbedtls_asn1_get_len+0xa6>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800525c:	f06f 035f 	mvn.w	r3, #95	@ 0x5f
 8005260:	e068      	b.n	8005334 <mbedtls_asn1_get_len+0x178>

            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	3301      	adds	r3, #1
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	021b      	lsls	r3, r3, #8
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	6812      	ldr	r2, [r2, #0]
 8005270:	3202      	adds	r2, #2
 8005272:	7812      	ldrb	r2, [r2, #0]
 8005274:	431a      	orrs	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	601a      	str	r2, [r3, #0]
            (*p) += 3;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	1cda      	adds	r2, r3, #3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	601a      	str	r2, [r3, #0]
            break;
 8005284:	e04a      	b.n	800531c <mbedtls_asn1_get_len+0x160>

        case 3:
            if( ( end - *p ) < 4 )
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b03      	cmp	r3, #3
 8005290:	dc02      	bgt.n	8005298 <mbedtls_asn1_get_len+0xdc>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8005292:	f06f 035f 	mvn.w	r3, #95	@ 0x5f
 8005296:	e04d      	b.n	8005334 <mbedtls_asn1_get_len+0x178>

            *len = ( (size_t)(*p)[1] << 16 ) |
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3301      	adds	r3, #1
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	041a      	lsls	r2, r3, #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3302      	adds	r3, #2
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	021b      	lsls	r3, r3, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 80052ac:	4313      	orrs	r3, r2
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	6812      	ldr	r2, [r2, #0]
 80052b2:	3203      	adds	r2, #3
 80052b4:	7812      	ldrb	r2, [r2, #0]
 80052b6:	431a      	orrs	r2, r3
            *len = ( (size_t)(*p)[1] << 16 ) |
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	601a      	str	r2, [r3, #0]
            (*p) += 4;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	1d1a      	adds	r2, r3, #4
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	601a      	str	r2, [r3, #0]
            break;
 80052c6:	e029      	b.n	800531c <mbedtls_asn1_get_len+0x160>

        case 4:
            if( ( end - *p ) < 5 )
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	dc02      	bgt.n	80052da <mbedtls_asn1_get_len+0x11e>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80052d4:	f06f 035f 	mvn.w	r3, #95	@ 0x5f
 80052d8:	e02c      	b.n	8005334 <mbedtls_asn1_get_len+0x178>

            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3301      	adds	r3, #1
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	061a      	lsls	r2, r3, #24
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3302      	adds	r3, #2
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	041b      	lsls	r3, r3, #16
 80052ee:	431a      	orrs	r2, r3
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3303      	adds	r3, #3
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	021b      	lsls	r3, r3, #8
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 80052fa:	4313      	orrs	r3, r2
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	6812      	ldr	r2, [r2, #0]
 8005300:	3204      	adds	r2, #4
 8005302:	7812      	ldrb	r2, [r2, #0]
 8005304:	431a      	orrs	r2, r3
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	601a      	str	r2, [r3, #0]
            (*p) += 5;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	1d5a      	adds	r2, r3, #5
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	601a      	str	r2, [r3, #0]
            break;
 8005314:	e002      	b.n	800531c <mbedtls_asn1_get_len+0x160>

        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8005316:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800531a:	e00b      	b.n	8005334 <mbedtls_asn1_get_len+0x178>
        }
    }

    if( *len > (size_t) ( end - *p ) )
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	68b9      	ldr	r1, [r7, #8]
 8005326:	1a8a      	subs	r2, r1, r2
 8005328:	4293      	cmp	r3, r2
 800532a:	d902      	bls.n	8005332 <mbedtls_asn1_get_len+0x176>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800532c:	f06f 035f 	mvn.w	r3, #95	@ 0x5f
 8005330:	e000      	b.n	8005334 <mbedtls_asn1_get_len+0x178>

    return( 0 );
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
    if( ( end - *p ) < 1 )
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	dc02      	bgt.n	8005360 <mbedtls_asn1_get_tag+0x20>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800535a:	f06f 035f 	mvn.w	r3, #95	@ 0x5f
 800535e:	e014      	b.n	800538a <mbedtls_asn1_get_tag+0x4a>

    if( **p != tag )
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	4293      	cmp	r3, r2
 800536c:	d002      	beq.n	8005374 <mbedtls_asn1_get_tag+0x34>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 800536e:	f06f 0361 	mvn.w	r3, #97	@ 0x61
 8005372:	e00a      	b.n	800538a <mbedtls_asn1_get_tag+0x4a>

    (*p)++;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	601a      	str	r2, [r3, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	68b9      	ldr	r1, [r7, #8]
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f7ff ff1a 	bl	80051bc <mbedtls_asn1_get_len>
 8005388:	4603      	mov	r3, r0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b086      	sub	sp, #24
 8005396:	af00      	add	r7, sp, #0
 8005398:	60f8      	str	r0, [r7, #12]
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800539e:	f107 0210 	add.w	r2, r7, #16
 80053a2:	2302      	movs	r3, #2
 80053a4:	68b9      	ldr	r1, [r7, #8]
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f7ff ffca 	bl	8005340 <mbedtls_asn1_get_tag>
 80053ac:	6178      	str	r0, [r7, #20]
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <mbedtls_asn1_get_mpi+0x26>
        return( ret );
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	e00e      	b.n	80053d6 <mbedtls_asn1_get_mpi+0x44>

    ret = mbedtls_mpi_read_binary( X, *p, len );
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4619      	mov	r1, r3
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f001 fa00 	bl	80067c6 <mbedtls_mpi_read_binary>
 80053c6:	6178      	str	r0, [r7, #20]

    *p += len;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	441a      	add	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	601a      	str	r2, [r3, #0]

    return( ret );
 80053d4:	697b      	ldr	r3, [r7, #20]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <mbedtls_asn1_free_named_data>:

    return( 0 );
}

void mbedtls_asn1_free_named_data( mbedtls_asn1_named_data *cur )
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b082      	sub	sp, #8
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
    if( cur == NULL )
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00e      	beq.n	800540a <mbedtls_asn1_free_named_data+0x2c>
        return;

    mbedtls_free( cur->oid.p );
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f011 f8c3 	bl	801657c <free>
    mbedtls_free( cur->val.p );
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f011 f8be 	bl	801657c <free>

    mbedtls_platform_zeroize( cur, sizeof( mbedtls_asn1_named_data ) );
 8005400:	2120      	movs	r1, #32
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f00b faba 	bl	801097c <mbedtls_platform_zeroize>
 8005408:	e000      	b.n	800540c <mbedtls_asn1_free_named_data+0x2e>
        return;
 800540a:	bf00      	nop
}
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <mbedtls_asn1_free_named_data_list>:

void mbedtls_asn1_free_named_data_list( mbedtls_asn1_named_data **head )
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b084      	sub	sp, #16
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
    mbedtls_asn1_named_data *cur;

    while( ( cur = *head ) != NULL )
 800541a:	e009      	b.n	8005430 <mbedtls_asn1_free_named_data_list+0x1e>
    {
        *head = cur->next;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	699a      	ldr	r2, [r3, #24]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	601a      	str	r2, [r3, #0]
        mbedtls_asn1_free_named_data( cur );
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f7ff ffda 	bl	80053de <mbedtls_asn1_free_named_data>
        mbedtls_free( cur );
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f011 f8a6 	bl	801657c <free>
    while( ( cur = *head ) != NULL )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	60fb      	str	r3, [r7, #12]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1ef      	bne.n	800541c <mbedtls_asn1_free_named_data_list+0xa>
    }
}
 800543c:	bf00      	nop
 800543e:	bf00      	nop
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <mbedtls_asn1_write_len>:
#define mbedtls_calloc    calloc
#define mbedtls_free       free
#endif

int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
{
 8005446:	b480      	push	{r7}
 8005448:	b085      	sub	sp, #20
 800544a:	af00      	add	r7, sp, #0
 800544c:	60f8      	str	r0, [r7, #12]
 800544e:	60b9      	str	r1, [r7, #8]
 8005450:	607a      	str	r2, [r7, #4]
    if( len < 0x80 )
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b7f      	cmp	r3, #127	@ 0x7f
 8005456:	d814      	bhi.n	8005482 <mbedtls_asn1_write_len+0x3c>
    {
        if( *p - start < 1 )
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	dc02      	bgt.n	800546a <mbedtls_asn1_write_len+0x24>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 8005464:	f06f 036b 	mvn.w	r3, #107	@ 0x6b
 8005468:	e0cf      	b.n	800560a <mbedtls_asn1_write_len+0x1c4>

        *--(*p) = (unsigned char) len;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	1e5a      	subs	r2, r3, #1
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	b2d2      	uxtb	r2, r2
 800547c:	701a      	strb	r2, [r3, #0]
        return( 1 );
 800547e:	2301      	movs	r3, #1
 8005480:	e0c3      	b.n	800560a <mbedtls_asn1_write_len+0x1c4>
    }

    if( len <= 0xFF )
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2bff      	cmp	r3, #255	@ 0xff
 8005486:	d81d      	bhi.n	80054c4 <mbedtls_asn1_write_len+0x7e>
    {
        if( *p - start < 2 )
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	2b01      	cmp	r3, #1
 8005492:	dc02      	bgt.n	800549a <mbedtls_asn1_write_len+0x54>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 8005494:	f06f 036b 	mvn.w	r3, #107	@ 0x6b
 8005498:	e0b7      	b.n	800560a <mbedtls_asn1_write_len+0x1c4>

        *--(*p) = (unsigned char) len;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	1e5a      	subs	r2, r3, #1
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	701a      	strb	r2, [r3, #0]
        *--(*p) = 0x81;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	1e5a      	subs	r2, r3, #1
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2281      	movs	r2, #129	@ 0x81
 80054be:	701a      	strb	r2, [r3, #0]
        return( 2 );
 80054c0:	2302      	movs	r3, #2
 80054c2:	e0a2      	b.n	800560a <mbedtls_asn1_write_len+0x1c4>
    }

    if( len <= 0xFFFF )
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054ca:	d228      	bcs.n	800551e <mbedtls_asn1_write_len+0xd8>
    {
        if( *p - start < 3 )
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	dc02      	bgt.n	80054de <mbedtls_asn1_write_len+0x98>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 80054d8:	f06f 036b 	mvn.w	r3, #107	@ 0x6b
 80054dc:	e095      	b.n	800560a <mbedtls_asn1_write_len+0x1c4>

        *--(*p) = ( len       ) & 0xFF;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	1e5a      	subs	r2, r3, #1
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	701a      	strb	r2, [r3, #0]
        *--(*p) = ( len >>  8 ) & 0xFF;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	0a19      	lsrs	r1, r3, #8
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	1e5a      	subs	r2, r3, #1
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	601a      	str	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	b2ca      	uxtb	r2, r1
 8005506:	701a      	strb	r2, [r3, #0]
        *--(*p) = 0x82;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	1e5a      	subs	r2, r3, #1
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2282      	movs	r2, #130	@ 0x82
 8005518:	701a      	strb	r2, [r3, #0]
        return( 3 );
 800551a:	2303      	movs	r3, #3
 800551c:	e075      	b.n	800560a <mbedtls_asn1_write_len+0x1c4>
    }

    if( len <= 0xFFFFFF )
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005524:	d233      	bcs.n	800558e <mbedtls_asn1_write_len+0x148>
    {
        if( *p - start < 4 )
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b03      	cmp	r3, #3
 8005530:	dc02      	bgt.n	8005538 <mbedtls_asn1_write_len+0xf2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 8005532:	f06f 036b 	mvn.w	r3, #107	@ 0x6b
 8005536:	e068      	b.n	800560a <mbedtls_asn1_write_len+0x1c4>

        *--(*p) = ( len       ) & 0xFF;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	1e5a      	subs	r2, r3, #1
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	b2d2      	uxtb	r2, r2
 800554a:	701a      	strb	r2, [r3, #0]
        *--(*p) = ( len >>  8 ) & 0xFF;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	0a19      	lsrs	r1, r3, #8
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	1e5a      	subs	r2, r3, #1
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	b2ca      	uxtb	r2, r1
 8005560:	701a      	strb	r2, [r3, #0]
        *--(*p) = ( len >> 16 ) & 0xFF;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	0c19      	lsrs	r1, r3, #16
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	1e5a      	subs	r2, r3, #1
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	b2ca      	uxtb	r2, r1
 8005576:	701a      	strb	r2, [r3, #0]
        *--(*p) = 0x83;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	1e5a      	subs	r2, r3, #1
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2283      	movs	r2, #131	@ 0x83
 8005588:	701a      	strb	r2, [r3, #0]
        return( 4 );
 800558a:	2304      	movs	r3, #4
 800558c:	e03d      	b.n	800560a <mbedtls_asn1_write_len+0x1c4>

#if SIZE_MAX > 0xFFFFFFFF
    if( len <= 0xFFFFFFFF )
#endif
    {
        if( *p - start < 5 )
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b04      	cmp	r3, #4
 8005598:	dc02      	bgt.n	80055a0 <mbedtls_asn1_write_len+0x15a>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 800559a:	f06f 036b 	mvn.w	r3, #107	@ 0x6b
 800559e:	e034      	b.n	800560a <mbedtls_asn1_write_len+0x1c4>

        *--(*p) = ( len       ) & 0xFF;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	1e5a      	subs	r2, r3, #1
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	b2d2      	uxtb	r2, r2
 80055b2:	701a      	strb	r2, [r3, #0]
        *--(*p) = ( len >>  8 ) & 0xFF;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	0a19      	lsrs	r1, r3, #8
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	1e5a      	subs	r2, r3, #1
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	b2ca      	uxtb	r2, r1
 80055c8:	701a      	strb	r2, [r3, #0]
        *--(*p) = ( len >> 16 ) & 0xFF;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	0c19      	lsrs	r1, r3, #16
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	1e5a      	subs	r2, r3, #1
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	b2ca      	uxtb	r2, r1
 80055de:	701a      	strb	r2, [r3, #0]
        *--(*p) = ( len >> 24 ) & 0xFF;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	0e19      	lsrs	r1, r3, #24
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	1e5a      	subs	r2, r3, #1
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	b2ca      	uxtb	r2, r1
 80055f4:	701a      	strb	r2, [r3, #0]
        *--(*p) = 0x84;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	1e5a      	subs	r2, r3, #1
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2284      	movs	r2, #132	@ 0x84
 8005606:	701a      	strb	r2, [r3, #0]
        return( 5 );
 8005608:	2305      	movs	r3, #5
    }

#if SIZE_MAX > 0xFFFFFFFF
    return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
#endif
}
 800560a:	4618      	mov	r0, r3
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <mbedtls_asn1_write_tag>:

int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
{
 8005616:	b480      	push	{r7}
 8005618:	b085      	sub	sp, #20
 800561a:	af00      	add	r7, sp, #0
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	4613      	mov	r3, r2
 8005622:	71fb      	strb	r3, [r7, #7]
    if( *p - start < 1 )
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	dc02      	bgt.n	8005636 <mbedtls_asn1_write_tag+0x20>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 8005630:	f06f 036b 	mvn.w	r3, #107	@ 0x6b
 8005634:	e009      	b.n	800564a <mbedtls_asn1_write_tag+0x34>

    *--(*p) = tag;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	1e5a      	subs	r2, r3, #1
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	79fa      	ldrb	r2, [r7, #7]
 8005646:	701a      	strb	r2, [r3, #0]

    return( 1 );
 8005648:	2301      	movs	r3, #1
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <mbedtls_asn1_write_raw_buffer>:

int mbedtls_asn1_write_raw_buffer( unsigned char **p, unsigned char *start,
                           const unsigned char *buf, size_t size )
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b086      	sub	sp, #24
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	607a      	str	r2, [r7, #4]
 8005662:	603b      	str	r3, [r7, #0]
    size_t len = 0;
 8005664:	2300      	movs	r3, #0
 8005666:	617b      	str	r3, [r7, #20]

    if( *p < start || (size_t)( *p - start ) < size )
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	429a      	cmp	r2, r3
 8005670:	d807      	bhi.n	8005682 <mbedtls_asn1_write_raw_buffer+0x2c>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	461a      	mov	r2, r3
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	4293      	cmp	r3, r2
 8005680:	d902      	bls.n	8005688 <mbedtls_asn1_write_raw_buffer+0x32>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 8005682:	f06f 036b 	mvn.w	r3, #107	@ 0x6b
 8005686:	e010      	b.n	80056aa <mbedtls_asn1_write_raw_buffer+0x54>

    len = size;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	617b      	str	r3, [r7, #20]
    (*p) -= len;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	425b      	negs	r3, r3
 8005694:	441a      	add	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	601a      	str	r2, [r3, #0]
    memcpy( *p, buf, len );
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f011 fb65 	bl	8016d72 <memcpy>

    return( (int) len );
 80056a8:	697b      	ldr	r3, [r7, #20]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <mbedtls_asn1_write_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b086      	sub	sp, #24
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	60f8      	str	r0, [r7, #12]
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len = 0;
 80056be:	2300      	movs	r3, #0
 80056c0:	613b      	str	r3, [r7, #16]

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 ff14 	bl	80064f0 <mbedtls_mpi_size>
 80056c8:	6138      	str	r0, [r7, #16]

    if( *p < start || (size_t)( *p - start ) < len )
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d807      	bhi.n	80056e4 <mbedtls_asn1_write_mpi+0x32>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	461a      	mov	r2, r3
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d902      	bls.n	80056ea <mbedtls_asn1_write_mpi+0x38>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 80056e4:	f06f 036b 	mvn.w	r3, #107	@ 0x6b
 80056e8:	e051      	b.n	800578e <mbedtls_asn1_write_mpi+0xdc>

    (*p) -= len;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	425b      	negs	r3, r3
 80056f2:	441a      	add	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	601a      	str	r2, [r3, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4619      	mov	r1, r3
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f001 f8ad 	bl	8006860 <mbedtls_mpi_write_binary>
 8005706:	6178      	str	r0, [r7, #20]
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d13e      	bne.n	800578c <mbedtls_asn1_write_mpi+0xda>

    // DER format assumes 2s complement for numbers, so the leftmost bit
    // should be 0 for positive numbers and 1 for negative numbers.
    //
    if( X->s ==1 && **p & 0x80 )
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d11a      	bne.n	800574c <mbedtls_asn1_write_mpi+0x9a>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	b25b      	sxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	da14      	bge.n	800574c <mbedtls_asn1_write_mpi+0x9a>
    {
        if( *p - start < 1 )
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	dc02      	bgt.n	8005734 <mbedtls_asn1_write_mpi+0x82>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 800572e:	f06f 036b 	mvn.w	r3, #107	@ 0x6b
 8005732:	e02c      	b.n	800578e <mbedtls_asn1_write_mpi+0xdc>

        *--(*p) = 0x00;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	1e5a      	subs	r2, r3, #1
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2200      	movs	r2, #0
 8005744:	701a      	strb	r2, [r3, #0]
        len += 1;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	3301      	adds	r3, #1
 800574a:	613b      	str	r3, [r7, #16]
    }

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	68b9      	ldr	r1, [r7, #8]
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f7ff fe78 	bl	8005446 <mbedtls_asn1_write_len>
 8005756:	6178      	str	r0, [r7, #20]
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	2b00      	cmp	r3, #0
 800575c:	da01      	bge.n	8005762 <mbedtls_asn1_write_mpi+0xb0>
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	e015      	b.n	800578e <mbedtls_asn1_write_mpi+0xdc>
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	4413      	add	r3, r2
 8005768:	613b      	str	r3, [r7, #16]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 800576a:	2202      	movs	r2, #2
 800576c:	68b9      	ldr	r1, [r7, #8]
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f7ff ff51 	bl	8005616 <mbedtls_asn1_write_tag>
 8005774:	6178      	str	r0, [r7, #20]
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2b00      	cmp	r3, #0
 800577a:	da01      	bge.n	8005780 <mbedtls_asn1_write_mpi+0xce>
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	e006      	b.n	800578e <mbedtls_asn1_write_mpi+0xdc>
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	4413      	add	r3, r2
 8005786:	613b      	str	r3, [r7, #16]

    ret = (int) len;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	617b      	str	r3, [r7, #20]

cleanup:
    return( ret );
 800578c:	697b      	ldr	r3, [r7, #20]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3718      	adds	r7, #24
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <mbedtls_asn1_write_null>:
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_write_null( unsigned char **p, unsigned char *start )
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b084      	sub	sp, #16
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	6039      	str	r1, [r7, #0]
    int ret;
    size_t len = 0;
 80057a0:	2300      	movs	r3, #0
 80057a2:	60fb      	str	r3, [r7, #12]

    // Write NULL
    //
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, 0) );
 80057a4:	2200      	movs	r2, #0
 80057a6:	6839      	ldr	r1, [r7, #0]
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff fe4c 	bl	8005446 <mbedtls_asn1_write_len>
 80057ae:	60b8      	str	r0, [r7, #8]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	da01      	bge.n	80057ba <mbedtls_asn1_write_null+0x24>
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	e013      	b.n	80057e2 <mbedtls_asn1_write_null+0x4c>
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4413      	add	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_NULL ) );
 80057c2:	2205      	movs	r2, #5
 80057c4:	6839      	ldr	r1, [r7, #0]
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7ff ff25 	bl	8005616 <mbedtls_asn1_write_tag>
 80057cc:	60b8      	str	r0, [r7, #8]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	da01      	bge.n	80057d8 <mbedtls_asn1_write_null+0x42>
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	e004      	b.n	80057e2 <mbedtls_asn1_write_null+0x4c>
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4413      	add	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]

    return( (int) len );
 80057e0:	68fb      	ldr	r3, [r7, #12]
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <mbedtls_asn1_write_oid>:

int mbedtls_asn1_write_oid( unsigned char **p, unsigned char *start,
                    const char *oid, size_t oid_len )
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b086      	sub	sp, #24
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	607a      	str	r2, [r7, #4]
 80057f6:	603b      	str	r3, [r7, #0]
    int ret;
    size_t len = 0;
 80057f8:	2300      	movs	r3, #0
 80057fa:	617b      	str	r3, [r7, #20]

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start,
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	68b9      	ldr	r1, [r7, #8]
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f7ff ff27 	bl	8005656 <mbedtls_asn1_write_raw_buffer>
 8005808:	6138      	str	r0, [r7, #16]
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	da01      	bge.n	8005814 <mbedtls_asn1_write_oid+0x2a>
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	e022      	b.n	800585a <mbedtls_asn1_write_oid+0x70>
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	4413      	add	r3, r2
 800581a:	617b      	str	r3, [r7, #20]
                                  (const unsigned char *) oid, oid_len ) );
    MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_len( p, start, len ) );
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	68b9      	ldr	r1, [r7, #8]
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f7ff fe10 	bl	8005446 <mbedtls_asn1_write_len>
 8005826:	6138      	str	r0, [r7, #16]
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	da01      	bge.n	8005832 <mbedtls_asn1_write_oid+0x48>
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	e013      	b.n	800585a <mbedtls_asn1_write_oid+0x70>
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	4413      	add	r3, r2
 8005838:	617b      	str	r3, [r7, #20]
    MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_OID ) );
 800583a:	2206      	movs	r2, #6
 800583c:	68b9      	ldr	r1, [r7, #8]
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f7ff fee9 	bl	8005616 <mbedtls_asn1_write_tag>
 8005844:	6138      	str	r0, [r7, #16]
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	da01      	bge.n	8005850 <mbedtls_asn1_write_oid+0x66>
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	e004      	b.n	800585a <mbedtls_asn1_write_oid+0x70>
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	4413      	add	r3, r2
 8005856:	617b      	str	r3, [r7, #20]

    return( (int) len );
 8005858:	697b      	ldr	r3, [r7, #20]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3718      	adds	r7, #24
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <mbedtls_asn1_write_algorithm_identifier>:

int mbedtls_asn1_write_algorithm_identifier( unsigned char **p, unsigned char *start,
                                     const char *oid, size_t oid_len,
                                     size_t par_len )
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b086      	sub	sp, #24
 8005866:	af00      	add	r7, sp, #0
 8005868:	60f8      	str	r0, [r7, #12]
 800586a:	60b9      	str	r1, [r7, #8]
 800586c:	607a      	str	r2, [r7, #4]
 800586e:	603b      	str	r3, [r7, #0]
    int ret;
    size_t len = 0;
 8005870:	2300      	movs	r3, #0
 8005872:	617b      	str	r3, [r7, #20]

    if( par_len == 0 )
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10e      	bne.n	8005898 <mbedtls_asn1_write_algorithm_identifier+0x36>
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_null( p, start ) );
 800587a:	68b9      	ldr	r1, [r7, #8]
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f7ff ff8a 	bl	8005796 <mbedtls_asn1_write_null>
 8005882:	6138      	str	r0, [r7, #16]
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	2b00      	cmp	r3, #0
 8005888:	da01      	bge.n	800588e <mbedtls_asn1_write_algorithm_identifier+0x2c>
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	e037      	b.n	80058fe <mbedtls_asn1_write_algorithm_identifier+0x9c>
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	4413      	add	r3, r2
 8005894:	617b      	str	r3, [r7, #20]
 8005896:	e003      	b.n	80058a0 <mbedtls_asn1_write_algorithm_identifier+0x3e>
    else
        len += par_len;
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	4413      	add	r3, r2
 800589e:	617b      	str	r3, [r7, #20]

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_oid( p, start, oid, oid_len ) );
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	68b9      	ldr	r1, [r7, #8]
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f7ff ff9f 	bl	80057ea <mbedtls_asn1_write_oid>
 80058ac:	6138      	str	r0, [r7, #16]
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	da01      	bge.n	80058b8 <mbedtls_asn1_write_algorithm_identifier+0x56>
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	e022      	b.n	80058fe <mbedtls_asn1_write_algorithm_identifier+0x9c>
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4413      	add	r3, r2
 80058be:	617b      	str	r3, [r7, #20]

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	68b9      	ldr	r1, [r7, #8]
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f7ff fdbe 	bl	8005446 <mbedtls_asn1_write_len>
 80058ca:	6138      	str	r0, [r7, #16]
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	da01      	bge.n	80058d6 <mbedtls_asn1_write_algorithm_identifier+0x74>
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	e013      	b.n	80058fe <mbedtls_asn1_write_algorithm_identifier+0x9c>
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	4413      	add	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start,
 80058de:	2230      	movs	r2, #48	@ 0x30
 80058e0:	68b9      	ldr	r1, [r7, #8]
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f7ff fe97 	bl	8005616 <mbedtls_asn1_write_tag>
 80058e8:	6138      	str	r0, [r7, #16]
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	da01      	bge.n	80058f4 <mbedtls_asn1_write_algorithm_identifier+0x92>
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	e004      	b.n	80058fe <mbedtls_asn1_write_algorithm_identifier+0x9c>
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	4413      	add	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]
                                       MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) );

    return( (int) len );
 80058fc:	697b      	ldr	r3, [r7, #20]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <mbedtls_asn1_write_bool>:

int mbedtls_asn1_write_bool( unsigned char **p, unsigned char *start, int boolean )
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b086      	sub	sp, #24
 800590a:	af00      	add	r7, sp, #0
 800590c:	60f8      	str	r0, [r7, #12]
 800590e:	60b9      	str	r1, [r7, #8]
 8005910:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len = 0;
 8005912:	2300      	movs	r3, #0
 8005914:	617b      	str	r3, [r7, #20]

    if( *p - start < 1 )
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	dc02      	bgt.n	8005928 <mbedtls_asn1_write_bool+0x22>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 8005922:	f06f 036b 	mvn.w	r3, #107	@ 0x6b
 8005926:	e030      	b.n	800598a <mbedtls_asn1_write_bool+0x84>

    *--(*p) = (boolean) ? 255 : 0;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <mbedtls_asn1_write_bool+0x2c>
 800592e:	21ff      	movs	r1, #255	@ 0xff
 8005930:	e000      	b.n	8005934 <mbedtls_asn1_write_bool+0x2e>
 8005932:	2100      	movs	r1, #0
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	1e5a      	subs	r2, r3, #1
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	460a      	mov	r2, r1
 8005944:	701a      	strb	r2, [r3, #0]
    len++;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	3301      	adds	r3, #1
 800594a:	617b      	str	r3, [r7, #20]

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	68b9      	ldr	r1, [r7, #8]
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f7ff fd78 	bl	8005446 <mbedtls_asn1_write_len>
 8005956:	6138      	str	r0, [r7, #16]
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	da01      	bge.n	8005962 <mbedtls_asn1_write_bool+0x5c>
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	e013      	b.n	800598a <mbedtls_asn1_write_bool+0x84>
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	4413      	add	r3, r2
 8005968:	617b      	str	r3, [r7, #20]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_BOOLEAN ) );
 800596a:	2201      	movs	r2, #1
 800596c:	68b9      	ldr	r1, [r7, #8]
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f7ff fe51 	bl	8005616 <mbedtls_asn1_write_tag>
 8005974:	6138      	str	r0, [r7, #16]
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	da01      	bge.n	8005980 <mbedtls_asn1_write_bool+0x7a>
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	e004      	b.n	800598a <mbedtls_asn1_write_bool+0x84>
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	4413      	add	r3, r2
 8005986:	617b      	str	r3, [r7, #20]

    return( (int) len );
 8005988:	697b      	ldr	r3, [r7, #20]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <mbedtls_asn1_write_int>:

int mbedtls_asn1_write_int( unsigned char **p, unsigned char *start, int val )
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b086      	sub	sp, #24
 8005996:	af00      	add	r7, sp, #0
 8005998:	60f8      	str	r0, [r7, #12]
 800599a:	60b9      	str	r1, [r7, #8]
 800599c:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len = 0;
 800599e:	2300      	movs	r3, #0
 80059a0:	617b      	str	r3, [r7, #20]

    if( *p - start < 1 )
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	dc02      	bgt.n	80059b4 <mbedtls_asn1_write_int+0x22>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 80059ae:	f06f 036b 	mvn.w	r3, #107	@ 0x6b
 80059b2:	e049      	b.n	8005a48 <mbedtls_asn1_write_int+0xb6>

    len += 1;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	3301      	adds	r3, #1
 80059b8:	617b      	str	r3, [r7, #20]
    *--(*p) = val;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	1e5a      	subs	r2, r3, #1
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	701a      	strb	r2, [r3, #0]

    if( val > 0 && **p & 0x80 )
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	dd1a      	ble.n	8005a0a <mbedtls_asn1_write_int+0x78>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	b25b      	sxtb	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	da14      	bge.n	8005a0a <mbedtls_asn1_write_int+0x78>
    {
        if( *p - start < 1 )
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	dc02      	bgt.n	80059f2 <mbedtls_asn1_write_int+0x60>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 80059ec:	f06f 036b 	mvn.w	r3, #107	@ 0x6b
 80059f0:	e02a      	b.n	8005a48 <mbedtls_asn1_write_int+0xb6>

        *--(*p) = 0x00;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	1e5a      	subs	r2, r3, #1
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2200      	movs	r2, #0
 8005a02:	701a      	strb	r2, [r3, #0]
        len += 1;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	3301      	adds	r3, #1
 8005a08:	617b      	str	r3, [r7, #20]
    }

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	68b9      	ldr	r1, [r7, #8]
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f7ff fd19 	bl	8005446 <mbedtls_asn1_write_len>
 8005a14:	6138      	str	r0, [r7, #16]
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	da01      	bge.n	8005a20 <mbedtls_asn1_write_int+0x8e>
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	e013      	b.n	8005a48 <mbedtls_asn1_write_int+0xb6>
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4413      	add	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 8005a28:	2202      	movs	r2, #2
 8005a2a:	68b9      	ldr	r1, [r7, #8]
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f7ff fdf2 	bl	8005616 <mbedtls_asn1_write_tag>
 8005a32:	6138      	str	r0, [r7, #16]
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	da01      	bge.n	8005a3e <mbedtls_asn1_write_int+0xac>
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	e004      	b.n	8005a48 <mbedtls_asn1_write_int+0xb6>
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4413      	add	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]

    return( (int) len );
 8005a46:	697b      	ldr	r3, [r7, #20]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <mbedtls_asn1_write_tagged_string>:

int mbedtls_asn1_write_tagged_string( unsigned char **p, unsigned char *start, int tag,
    const char *text, size_t text_len )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	603b      	str	r3, [r7, #0]
    int ret;
    size_t len = 0;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	617b      	str	r3, [r7, #20]

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start,
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	68b9      	ldr	r1, [r7, #8]
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f7ff fdf4 	bl	8005656 <mbedtls_asn1_write_raw_buffer>
 8005a6e:	6138      	str	r0, [r7, #16]
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	da01      	bge.n	8005a7a <mbedtls_asn1_write_tagged_string+0x2a>
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	e024      	b.n	8005ac4 <mbedtls_asn1_write_tagged_string+0x74>
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	4413      	add	r3, r2
 8005a80:	617b      	str	r3, [r7, #20]
        (const unsigned char *) text, text_len ) );

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	68b9      	ldr	r1, [r7, #8]
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f7ff fcdd 	bl	8005446 <mbedtls_asn1_write_len>
 8005a8c:	6138      	str	r0, [r7, #16]
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	da01      	bge.n	8005a98 <mbedtls_asn1_write_tagged_string+0x48>
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	e015      	b.n	8005ac4 <mbedtls_asn1_write_tagged_string+0x74>
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, tag ) );
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	68b9      	ldr	r1, [r7, #8]
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f7ff fdb4 	bl	8005616 <mbedtls_asn1_write_tag>
 8005aae:	6138      	str	r0, [r7, #16]
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	da01      	bge.n	8005aba <mbedtls_asn1_write_tagged_string+0x6a>
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	e004      	b.n	8005ac4 <mbedtls_asn1_write_tagged_string+0x74>
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	4413      	add	r3, r2
 8005ac0:	617b      	str	r3, [r7, #20]

    return( (int) len );
 8005ac2:	697b      	ldr	r3, [r7, #20]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <asn1_find_named_data>:
/* This is a copy of the ASN.1 parsing function mbedtls_asn1_find_named_data(),
 * which is replicated to avoid a dependency ASN1_WRITE_C on ASN1_PARSE_C. */
static mbedtls_asn1_named_data *asn1_find_named_data(
                                               mbedtls_asn1_named_data *list,
                                               const char *oid, size_t len )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
    while( list != NULL )
 8005ad8:	e011      	b.n	8005afe <asn1_find_named_data+0x32>
    {
        if( list->oid.len == len &&
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d109      	bne.n	8005af8 <asn1_find_named_data+0x2c>
            memcmp( list->oid.p, oid, len ) == 0 )
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	68b9      	ldr	r1, [r7, #8]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f011 f839 	bl	8016b64 <memcmp>
 8005af2:	4603      	mov	r3, r0
        if( list->oid.len == len &&
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d006      	beq.n	8005b06 <asn1_find_named_data+0x3a>
        {
            break;
        }

        list = list->next;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	60fb      	str	r3, [r7, #12]
    while( list != NULL )
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1ea      	bne.n	8005ada <asn1_find_named_data+0xe>
 8005b04:	e000      	b.n	8005b08 <asn1_find_named_data+0x3c>
            break;
 8005b06:	bf00      	nop
    }

    return( list );
 8005b08:	68fb      	ldr	r3, [r7, #12]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <mbedtls_asn1_store_named_data>:
mbedtls_asn1_named_data *mbedtls_asn1_store_named_data(
                                        mbedtls_asn1_named_data **head,
                                        const char *oid, size_t oid_len,
                                        const unsigned char *val,
                                        size_t val_len )
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b086      	sub	sp, #24
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	60f8      	str	r0, [r7, #12]
 8005b1a:	60b9      	str	r1, [r7, #8]
 8005b1c:	607a      	str	r2, [r7, #4]
 8005b1e:	603b      	str	r3, [r7, #0]
    mbedtls_asn1_named_data *cur;

    if( ( cur = asn1_find_named_data( *head, oid, oid_len ) ) == NULL )
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	68b9      	ldr	r1, [r7, #8]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7ff ffcf 	bl	8005acc <asn1_find_named_data>
 8005b2e:	6178      	str	r0, [r7, #20]
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d146      	bne.n	8005bc4 <mbedtls_asn1_store_named_data+0xb2>
    {
        // Add new entry if not present yet based on OID
        //
        cur = (mbedtls_asn1_named_data*)mbedtls_calloc( 1,
 8005b36:	2120      	movs	r1, #32
 8005b38:	2001      	movs	r0, #1
 8005b3a:	f010 fd03 	bl	8016544 <calloc>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	617b      	str	r3, [r7, #20]
                                            sizeof(mbedtls_asn1_named_data) );
        if( cur == NULL )
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <mbedtls_asn1_store_named_data+0x3a>
            return( NULL );
 8005b48:	2300      	movs	r3, #0
 8005b4a:	e061      	b.n	8005c10 <mbedtls_asn1_store_named_data+0xfe>

        cur->oid.len = oid_len;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	605a      	str	r2, [r3, #4]
        cur->oid.p = mbedtls_calloc( 1, oid_len );
 8005b52:	6879      	ldr	r1, [r7, #4]
 8005b54:	2001      	movs	r0, #1
 8005b56:	f010 fcf5 	bl	8016544 <calloc>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	609a      	str	r2, [r3, #8]
        if( cur->oid.p == NULL )
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d104      	bne.n	8005b74 <mbedtls_asn1_store_named_data+0x62>
        {
            mbedtls_free( cur );
 8005b6a:	6978      	ldr	r0, [r7, #20]
 8005b6c:	f010 fd06 	bl	801657c <free>
            return( NULL );
 8005b70:	2300      	movs	r3, #0
 8005b72:	e04d      	b.n	8005c10 <mbedtls_asn1_store_named_data+0xfe>
        }

        memcpy( cur->oid.p, oid, oid_len );
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	68b9      	ldr	r1, [r7, #8]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f011 f8f8 	bl	8016d72 <memcpy>

        cur->val.len = val_len;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	6a3a      	ldr	r2, [r7, #32]
 8005b86:	611a      	str	r2, [r3, #16]
        cur->val.p = mbedtls_calloc( 1, val_len );
 8005b88:	6a39      	ldr	r1, [r7, #32]
 8005b8a:	2001      	movs	r0, #1
 8005b8c:	f010 fcda 	bl	8016544 <calloc>
 8005b90:	4603      	mov	r3, r0
 8005b92:	461a      	mov	r2, r3
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	615a      	str	r2, [r3, #20]
        if( cur->val.p == NULL )
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d109      	bne.n	8005bb4 <mbedtls_asn1_store_named_data+0xa2>
        {
            mbedtls_free( cur->oid.p );
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f010 fce9 	bl	801657c <free>
            mbedtls_free( cur );
 8005baa:	6978      	ldr	r0, [r7, #20]
 8005bac:	f010 fce6 	bl	801657c <free>
            return( NULL );
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	e02d      	b.n	8005c10 <mbedtls_asn1_store_named_data+0xfe>
        }

        cur->next = *head;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	619a      	str	r2, [r3, #24]
        *head = cur;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	601a      	str	r2, [r3, #0]
 8005bc2:	e01a      	b.n	8005bfa <mbedtls_asn1_store_named_data+0xe8>
    }
    else if( cur->val.len < val_len )
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	6a3a      	ldr	r2, [r7, #32]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d915      	bls.n	8005bfa <mbedtls_asn1_store_named_data+0xe8>
        /*
         * Enlarge existing value buffer if needed
         * Preserve old data until the allocation succeeded, to leave list in
         * a consistent state in case allocation fails.
         */
        void *p = mbedtls_calloc( 1, val_len );
 8005bce:	6a39      	ldr	r1, [r7, #32]
 8005bd0:	2001      	movs	r0, #1
 8005bd2:	f010 fcb7 	bl	8016544 <calloc>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	613b      	str	r3, [r7, #16]
        if( p == NULL )
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <mbedtls_asn1_store_named_data+0xd2>
            return( NULL );
 8005be0:	2300      	movs	r3, #0
 8005be2:	e015      	b.n	8005c10 <mbedtls_asn1_store_named_data+0xfe>

        mbedtls_free( cur->val.p );
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f010 fcc7 	bl	801657c <free>
        cur->val.p = p;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	615a      	str	r2, [r3, #20]
        cur->val.len = val_len;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	6a3a      	ldr	r2, [r7, #32]
 8005bf8:	611a      	str	r2, [r3, #16]
    }

    if( val != NULL )
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d006      	beq.n	8005c0e <mbedtls_asn1_store_named_data+0xfc>
        memcpy( cur->val.p, val, val_len );
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	6a3a      	ldr	r2, [r7, #32]
 8005c06:	6839      	ldr	r1, [r7, #0]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f011 f8b2 	bl	8016d72 <memcpy>

    return( cur );
 8005c0e:	697b      	ldr	r3, [r7, #20]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <mbedtls_base64_encode>:
/*
 * Encode a buffer into base64 format
 */
int mbedtls_base64_encode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b08b      	sub	sp, #44	@ 0x2c
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
 8005c24:	603b      	str	r3, [r7, #0]
    size_t i, n;
    int C1, C2, C3;
    unsigned char *p;

    if( slen == 0 )
 8005c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d104      	bne.n	8005c36 <mbedtls_base64_encode+0x1e>
    {
        *olen = 0;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	601a      	str	r2, [r3, #0]
        return( 0 );
 8005c32:	2300      	movs	r3, #0
 8005c34:	e0d8      	b.n	8005de8 <mbedtls_base64_encode+0x1d0>
    }

    n = slen / 3 + ( slen % 3 != 0 );
 8005c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c38:	4a6e      	ldr	r2, [pc, #440]	@ (8005df4 <mbedtls_base64_encode+0x1dc>)
 8005c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3e:	0858      	lsrs	r0, r3, #1
 8005c40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c42:	4b6c      	ldr	r3, [pc, #432]	@ (8005df4 <mbedtls_base64_encode+0x1dc>)
 8005c44:	fba3 2301 	umull	r2, r3, r3, r1
 8005c48:	085a      	lsrs	r2, r3, #1
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	4413      	add	r3, r2
 8005c50:	1aca      	subs	r2, r1, r3
 8005c52:	2a00      	cmp	r2, #0
 8005c54:	bf14      	ite	ne
 8005c56:	2301      	movne	r3, #1
 8005c58:	2300      	moveq	r3, #0
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	4403      	add	r3, r0
 8005c5e:	61fb      	str	r3, [r7, #28]

    if( n > ( BASE64_SIZE_T_MAX - 1 ) / 4 )
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c66:	d306      	bcc.n	8005c76 <mbedtls_base64_encode+0x5e>
    {
        *olen = BASE64_SIZE_T_MAX;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c6e:	601a      	str	r2, [r3, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 8005c70:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8005c74:	e0b8      	b.n	8005de8 <mbedtls_base64_encode+0x1d0>
    }

    n *= 4;
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	61fb      	str	r3, [r7, #28]

    if( ( dlen < n + 1 ) || ( NULL == dst ) )
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d302      	bcc.n	8005c8c <mbedtls_base64_encode+0x74>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d106      	bne.n	8005c9a <mbedtls_base64_encode+0x82>
    {
        *olen = n + 1;
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	1c5a      	adds	r2, r3, #1
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	601a      	str	r2, [r3, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 8005c94:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8005c98:	e0a6      	b.n	8005de8 <mbedtls_base64_encode+0x1d0>
    }

    n = ( slen / 3 ) * 3;
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9c:	4a55      	ldr	r2, [pc, #340]	@ (8005df4 <mbedtls_base64_encode+0x1dc>)
 8005c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca2:	085a      	lsrs	r2, r3, #1
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	4413      	add	r3, r2
 8005caa:	61fb      	str	r3, [r7, #28]

    for( i = 0, p = dst; i < n; i += 3 )
 8005cac:	2300      	movs	r3, #0
 8005cae:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	623b      	str	r3, [r7, #32]
 8005cb4:	e042      	b.n	8005d3c <mbedtls_base64_encode+0x124>
    {
        C1 = *src++;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	1c5a      	adds	r2, r3, #1
 8005cba:	603a      	str	r2, [r7, #0]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	61bb      	str	r3, [r7, #24]
        C2 = *src++;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	603a      	str	r2, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	617b      	str	r3, [r7, #20]
        C3 = *src++;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	1c5a      	adds	r2, r3, #1
 8005cce:	603a      	str	r2, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	613b      	str	r3, [r7, #16]

        *p++ = base64_enc_map[(C1 >> 2) & 0x3F];
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	109b      	asrs	r3, r3, #2
 8005cd8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	1c59      	adds	r1, r3, #1
 8005ce0:	6239      	str	r1, [r7, #32]
 8005ce2:	4945      	ldr	r1, [pc, #276]	@ (8005df8 <mbedtls_base64_encode+0x1e0>)
 8005ce4:	5c8a      	ldrb	r2, [r1, r2]
 8005ce6:	701a      	strb	r2, [r3, #0]
        *p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	111b      	asrs	r3, r3, #4
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005cfa:	6a3b      	ldr	r3, [r7, #32]
 8005cfc:	1c59      	adds	r1, r3, #1
 8005cfe:	6239      	str	r1, [r7, #32]
 8005d00:	493d      	ldr	r1, [pc, #244]	@ (8005df8 <mbedtls_base64_encode+0x1e0>)
 8005d02:	5c8a      	ldrb	r2, [r1, r2]
 8005d04:	701a      	strb	r2, [r3, #0]
        *p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	119b      	asrs	r3, r3, #6
 8005d12:	4413      	add	r3, r2
 8005d14:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005d18:	6a3b      	ldr	r3, [r7, #32]
 8005d1a:	1c59      	adds	r1, r3, #1
 8005d1c:	6239      	str	r1, [r7, #32]
 8005d1e:	4936      	ldr	r1, [pc, #216]	@ (8005df8 <mbedtls_base64_encode+0x1e0>)
 8005d20:	5c8a      	ldrb	r2, [r1, r2]
 8005d22:	701a      	strb	r2, [r3, #0]
        *p++ = base64_enc_map[C3 & 0x3F];
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	1c59      	adds	r1, r3, #1
 8005d2e:	6239      	str	r1, [r7, #32]
 8005d30:	4931      	ldr	r1, [pc, #196]	@ (8005df8 <mbedtls_base64_encode+0x1e0>)
 8005d32:	5c8a      	ldrb	r2, [r1, r2]
 8005d34:	701a      	strb	r2, [r3, #0]
    for( i = 0, p = dst; i < n; i += 3 )
 8005d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d38:	3303      	adds	r3, #3
 8005d3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d3b8      	bcc.n	8005cb6 <mbedtls_base64_encode+0x9e>
    }

    if( i < slen )
 8005d44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d243      	bcs.n	8005dd4 <mbedtls_base64_encode+0x1bc>
    {
        C1 = *src++;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	1c5a      	adds	r2, r3, #1
 8005d50:	603a      	str	r2, [r7, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	61bb      	str	r3, [r7, #24]
        C2 = ( ( i + 1 ) < slen ) ? *src++ : 0;
 8005d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d58:	3301      	adds	r3, #1
 8005d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d904      	bls.n	8005d6a <mbedtls_base64_encode+0x152>
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	603a      	str	r2, [r7, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	e000      	b.n	8005d6c <mbedtls_base64_encode+0x154>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	617b      	str	r3, [r7, #20]

        *p++ = base64_enc_map[(C1 >> 2) & 0x3F];
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	109b      	asrs	r3, r3, #2
 8005d72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	1c59      	adds	r1, r3, #1
 8005d7a:	6239      	str	r1, [r7, #32]
 8005d7c:	491e      	ldr	r1, [pc, #120]	@ (8005df8 <mbedtls_base64_encode+0x1e0>)
 8005d7e:	5c8a      	ldrb	r2, [r1, r2]
 8005d80:	701a      	strb	r2, [r3, #0]
        *p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	011b      	lsls	r3, r3, #4
 8005d86:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	111b      	asrs	r3, r3, #4
 8005d8e:	4413      	add	r3, r2
 8005d90:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005d94:	6a3b      	ldr	r3, [r7, #32]
 8005d96:	1c59      	adds	r1, r3, #1
 8005d98:	6239      	str	r1, [r7, #32]
 8005d9a:	4917      	ldr	r1, [pc, #92]	@ (8005df8 <mbedtls_base64_encode+0x1e0>)
 8005d9c:	5c8a      	ldrb	r2, [r1, r2]
 8005d9e:	701a      	strb	r2, [r3, #0]

        if( ( i + 1 ) < slen )
 8005da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da2:	3301      	adds	r3, #1
 8005da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d90a      	bls.n	8005dc0 <mbedtls_base64_encode+0x1a8>
             *p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	1c59      	adds	r1, r3, #1
 8005db6:	6239      	str	r1, [r7, #32]
 8005db8:	490f      	ldr	r1, [pc, #60]	@ (8005df8 <mbedtls_base64_encode+0x1e0>)
 8005dba:	5c8a      	ldrb	r2, [r1, r2]
 8005dbc:	701a      	strb	r2, [r3, #0]
 8005dbe:	e004      	b.n	8005dca <mbedtls_base64_encode+0x1b2>
        else *p++ = '=';
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	1c5a      	adds	r2, r3, #1
 8005dc4:	623a      	str	r2, [r7, #32]
 8005dc6:	223d      	movs	r2, #61	@ 0x3d
 8005dc8:	701a      	strb	r2, [r3, #0]

        *p++ = '=';
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	1c5a      	adds	r2, r3, #1
 8005dce:	623a      	str	r2, [r7, #32]
 8005dd0:	223d      	movs	r2, #61	@ 0x3d
 8005dd2:	701a      	strb	r2, [r3, #0]
    }

    *olen = p - dst;
 8005dd4:	6a3a      	ldr	r2, [r7, #32]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	461a      	mov	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	601a      	str	r2, [r3, #0]
    *p = 0;
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	2200      	movs	r2, #0
 8005de4:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	372c      	adds	r7, #44	@ 0x2c
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	aaaaaaab 	.word	0xaaaaaaab
 8005df8:	0801aea4 	.word	0x0801aea4

08005dfc <mbedtls_mpi_zeroize>:
#define BITS_TO_LIMBS(i)  ( (i) / biL + ( (i) % biL != 0 ) )
#define CHARS_TO_LIMBS(i) ( (i) / ciL + ( (i) % ciL != 0 ) )

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
    mbedtls_platform_zeroize( v, ciL * n );
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f00a fdb5 	bl	801097c <mbedtls_platform_zeroize>
}
 8005e12:	bf00      	nop
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <mbedtls_mpi_init>:

/*
 * Initialize one MPI
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	601a      	str	r2, [r3, #0]
    X->n = 0;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	605a      	str	r2, [r3, #4]
    X->p = NULL;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	609a      	str	r2, [r3, #8]
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <mbedtls_mpi_free>:

/*
 * Unallocate one MPI
 */
void mbedtls_mpi_free( mbedtls_mpi *X )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
    if( X == NULL )
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d01a      	beq.n	8005e84 <mbedtls_mpi_free+0x44>
        return;

    if( X->p != NULL )
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00c      	beq.n	8005e70 <mbedtls_mpi_free+0x30>
    {
        mbedtls_mpi_zeroize( X->p, X->n );
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689a      	ldr	r2, [r3, #8]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	4619      	mov	r1, r3
 8005e60:	4610      	mov	r0, r2
 8005e62:	f7ff ffcb 	bl	8005dfc <mbedtls_mpi_zeroize>
        mbedtls_free( X->p );
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f010 fb86 	bl	801657c <free>
    }

    X->s = 1;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	601a      	str	r2, [r3, #0]
    X->n = 0;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	605a      	str	r2, [r3, #4]
    X->p = NULL;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	609a      	str	r2, [r3, #8]
 8005e82:	e000      	b.n	8005e86 <mbedtls_mpi_free+0x46>
        return;
 8005e84:	bf00      	nop
}
 8005e86:	3708      	adds	r7, #8
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <mbedtls_mpi_grow>:

/*
 * Enlarge to the specified number of limbs
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint *p;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d902      	bls.n	8005ea6 <mbedtls_mpi_grow+0x1a>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8005ea0:	f06f 030f 	mvn.w	r3, #15
 8005ea4:	e031      	b.n	8005f0a <mbedtls_mpi_grow+0x7e>

    if( X->n < nblimbs )
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d92b      	bls.n	8005f08 <mbedtls_mpi_grow+0x7c>
    {
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8005eb0:	2104      	movs	r1, #4
 8005eb2:	6838      	ldr	r0, [r7, #0]
 8005eb4:	f010 fb46 	bl	8016544 <calloc>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d102      	bne.n	8005ec8 <mbedtls_mpi_grow+0x3c>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8005ec2:	f06f 030f 	mvn.w	r3, #15
 8005ec6:	e020      	b.n	8005f0a <mbedtls_mpi_grow+0x7e>

        if( X->p != NULL )
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d015      	beq.n	8005efc <mbedtls_mpi_grow+0x70>
        {
            memcpy( p, X->p, X->n * ciL );
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6899      	ldr	r1, [r3, #8]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	461a      	mov	r2, r3
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f010 ff48 	bl	8016d72 <memcpy>
            mbedtls_mpi_zeroize( X->p, X->n );
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	689a      	ldr	r2, [r3, #8]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	4619      	mov	r1, r3
 8005eec:	4610      	mov	r0, r2
 8005eee:	f7ff ff85 	bl	8005dfc <mbedtls_mpi_zeroize>
            mbedtls_free( X->p );
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f010 fb40 	bl	801657c <free>
        }

        X->n = nblimbs;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	605a      	str	r2, [r3, #4]
        X->p = p;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	609a      	str	r2, [r3, #8]
    }

    return( 0 );
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <mbedtls_mpi_shrink>:
/*
 * Resize down as much as possible,
 * while keeping at least the specified number of limbs
 */
int mbedtls_mpi_shrink( mbedtls_mpi *X, size_t nblimbs )
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint *p;
    size_t i;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d902      	bls.n	8005f2c <mbedtls_mpi_shrink+0x1a>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8005f26:	f06f 030f 	mvn.w	r3, #15
 8005f2a:	e054      	b.n	8005fd6 <mbedtls_mpi_shrink+0xc4>

    /* Actually resize up in this case */
    if( X->n <= nblimbs )
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d305      	bcc.n	8005f42 <mbedtls_mpi_shrink+0x30>
        return( mbedtls_mpi_grow( X, nblimbs ) );
 8005f36:	6839      	ldr	r1, [r7, #0]
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7ff ffa7 	bl	8005e8c <mbedtls_mpi_grow>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	e049      	b.n	8005fd6 <mbedtls_mpi_shrink+0xc4>

    for( i = X->n - 1; i > 0; i-- )
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	60fb      	str	r3, [r7, #12]
 8005f4a:	e00a      	b.n	8005f62 <mbedtls_mpi_shrink+0x50>
        if( X->p[i] != 0 )
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d106      	bne.n	8005f6a <mbedtls_mpi_shrink+0x58>
    for( i = X->n - 1; i > 0; i-- )
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	60fb      	str	r3, [r7, #12]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1f1      	bne.n	8005f4c <mbedtls_mpi_shrink+0x3a>
 8005f68:	e000      	b.n	8005f6c <mbedtls_mpi_shrink+0x5a>
            break;
 8005f6a:	bf00      	nop
    i++;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	60fb      	str	r3, [r7, #12]

    if( i < nblimbs )
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d201      	bcs.n	8005f7e <mbedtls_mpi_shrink+0x6c>
        i = nblimbs;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	60fb      	str	r3, [r7, #12]

    if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( i, ciL ) ) == NULL )
 8005f7e:	2104      	movs	r1, #4
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f010 fadf 	bl	8016544 <calloc>
 8005f86:	4603      	mov	r3, r0
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d102      	bne.n	8005f96 <mbedtls_mpi_shrink+0x84>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8005f90:	f06f 030f 	mvn.w	r3, #15
 8005f94:	e01f      	b.n	8005fd6 <mbedtls_mpi_shrink+0xc4>

    if( X->p != NULL )
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d014      	beq.n	8005fc8 <mbedtls_mpi_shrink+0xb6>
    {
        memcpy( p, X->p, i * ciL );
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6899      	ldr	r1, [r3, #8]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	68b8      	ldr	r0, [r7, #8]
 8005faa:	f010 fee2 	bl	8016d72 <memcpy>
        mbedtls_mpi_zeroize( X->p, X->n );
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689a      	ldr	r2, [r3, #8]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4610      	mov	r0, r2
 8005fba:	f7ff ff1f 	bl	8005dfc <mbedtls_mpi_zeroize>
        mbedtls_free( X->p );
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f010 fada 	bl	801657c <free>
    }

    X->n = i;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	605a      	str	r2, [r3, #4]
    X->p = p;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	609a      	str	r2, [r3, #8]

    return( 0 );
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <mbedtls_mpi_copy>:

/*
 * Copy the contents of Y into X
 */
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b084      	sub	sp, #16
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	6039      	str	r1, [r7, #0]
    int ret = 0;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60fb      	str	r3, [r7, #12]
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d101      	bne.n	8005ff8 <mbedtls_mpi_copy+0x1a>
        return( 0 );
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	e04a      	b.n	800608e <mbedtls_mpi_copy+0xb0>

    if( Y->p == NULL )
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d104      	bne.n	800600a <mbedtls_mpi_copy+0x2c>
    {
        mbedtls_mpi_free( X );
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f7ff ff1d 	bl	8005e40 <mbedtls_mpi_free>
        return( 0 );
 8006006:	2300      	movs	r3, #0
 8006008:	e041      	b.n	800608e <mbedtls_mpi_copy+0xb0>
    }

    for( i = Y->n - 1; i > 0; i-- )
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	3b01      	subs	r3, #1
 8006010:	60bb      	str	r3, [r7, #8]
 8006012:	e00a      	b.n	800602a <mbedtls_mpi_copy+0x4c>
        if( Y->p[i] != 0 )
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d106      	bne.n	8006032 <mbedtls_mpi_copy+0x54>
    for( i = Y->n - 1; i > 0; i-- )
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	3b01      	subs	r3, #1
 8006028:	60bb      	str	r3, [r7, #8]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1f1      	bne.n	8006014 <mbedtls_mpi_copy+0x36>
 8006030:	e000      	b.n	8006034 <mbedtls_mpi_copy+0x56>
            break;
 8006032:	bf00      	nop
    i++;
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	3301      	adds	r3, #1
 8006038:	60bb      	str	r3, [r7, #8]

    X->s = Y->s;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	601a      	str	r2, [r3, #0]

    if( X->n < i )
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	429a      	cmp	r2, r3
 800604a:	d908      	bls.n	800605e <mbedtls_mpi_copy+0x80>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 800604c:	68b9      	ldr	r1, [r7, #8]
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7ff ff1c 	bl	8005e8c <mbedtls_mpi_grow>
 8006054:	60f8      	str	r0, [r7, #12]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00e      	beq.n	800607a <mbedtls_mpi_copy+0x9c>
 800605c:	e016      	b.n	800608c <mbedtls_mpi_copy+0xae>
    }
    else
    {
        memset( X->p + i, 0, ( X->n - i ) * ciL );
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	689a      	ldr	r2, [r3, #8]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	18d0      	adds	r0, r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	461a      	mov	r2, r3
 8006074:	2100      	movs	r1, #0
 8006076:	f010 fd9f 	bl	8016bb8 <memset>
    }

    memcpy( X->p, Y->p, i * ciL );
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6898      	ldr	r0, [r3, #8]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	6899      	ldr	r1, [r3, #8]
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	461a      	mov	r2, r3
 8006088:	f010 fe73 	bl	8016d72 <memcpy>

cleanup:

    return( ret );
 800608c:	68fb      	ldr	r3, [r7, #12]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <mbedtls_mpi_safe_cond_assign>:
 * Conditionally assign X = Y, without leaking information
 * about whether the assignment was made or not.
 * (Leaking information about the respective sizes of X and Y is ok however.)
 */
int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X, const mbedtls_mpi *Y, unsigned char assign )
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b086      	sub	sp, #24
 800609a:	af00      	add	r7, sp, #0
 800609c:	60f8      	str	r0, [r7, #12]
 800609e:	60b9      	str	r1, [r7, #8]
 80060a0:	4613      	mov	r3, r2
 80060a2:	71fb      	strb	r3, [r7, #7]
    int ret = 0;
 80060a4:	2300      	movs	r3, #0
 80060a6:	613b      	str	r3, [r7, #16]
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    /* make sure assign is 0 or 1 in a time-constant manner */
    assign = (assign | (unsigned char)-assign) >> 7;
 80060a8:	79fb      	ldrb	r3, [r7, #7]
 80060aa:	425b      	negs	r3, r3
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	79fb      	ldrb	r3, [r7, #7]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	09db      	lsrs	r3, r3, #7
 80060b6:	71fb      	strb	r3, [r7, #7]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	4619      	mov	r1, r3
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f7ff fee4 	bl	8005e8c <mbedtls_mpi_grow>
 80060c4:	6138      	str	r0, [r7, #16]
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d150      	bne.n	800616e <mbedtls_mpi_safe_cond_assign+0xd8>

    X->s = X->s * ( 1 - assign ) + Y->s * assign;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	79fa      	ldrb	r2, [r7, #7]
 80060d2:	f1c2 0201 	rsb	r2, r2, #1
 80060d6:	fb03 f202 	mul.w	r2, r3, r2
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	79f9      	ldrb	r1, [r7, #7]
 80060e0:	fb01 f303 	mul.w	r3, r1, r3
 80060e4:	441a      	add	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	601a      	str	r2, [r3, #0]

    for( i = 0; i < Y->n; i++ )
 80060ea:	2300      	movs	r3, #0
 80060ec:	617b      	str	r3, [r7, #20]
 80060ee:	e01d      	b.n	800612c <mbedtls_mpi_safe_cond_assign+0x96>
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	689a      	ldr	r2, [r3, #8]
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	79fa      	ldrb	r2, [r7, #7]
 80060fe:	f1c2 0201 	rsb	r2, r2, #1
 8006102:	fb02 f103 	mul.w	r1, r2, r3
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	689a      	ldr	r2, [r3, #8]
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	79fa      	ldrb	r2, [r7, #7]
 8006114:	fb03 f202 	mul.w	r2, r3, r2
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6898      	ldr	r0, [r3, #8]
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4403      	add	r3, r0
 8006122:	440a      	add	r2, r1
 8006124:	601a      	str	r2, [r3, #0]
    for( i = 0; i < Y->n; i++ )
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	3301      	adds	r3, #1
 800612a:	617b      	str	r3, [r7, #20]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	429a      	cmp	r2, r3
 8006134:	d3dc      	bcc.n	80060f0 <mbedtls_mpi_safe_cond_assign+0x5a>

    for( ; i < X->n; i++ )
 8006136:	e014      	b.n	8006162 <mbedtls_mpi_safe_cond_assign+0xcc>
        X->p[i] *= ( 1 - assign );
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	79fb      	ldrb	r3, [r7, #7]
 8006146:	f1c3 0301 	rsb	r3, r3, #1
 800614a:	4618      	mov	r0, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6899      	ldr	r1, [r3, #8]
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	440b      	add	r3, r1
 8006156:	fb00 f202 	mul.w	r2, r0, r2
 800615a:	601a      	str	r2, [r3, #0]
    for( ; i < X->n; i++ )
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	3301      	adds	r3, #1
 8006160:	617b      	str	r3, [r7, #20]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	429a      	cmp	r2, r3
 800616a:	d3e5      	bcc.n	8006138 <mbedtls_mpi_safe_cond_assign+0xa2>

cleanup:
 800616c:	bf00      	nop
    return( ret );
 800616e:	693b      	ldr	r3, [r7, #16]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <mbedtls_mpi_safe_cond_swap>:
 * about whether the swap was made or not.
 * Here it is not ok to simply swap the pointers, which whould lead to
 * different memory access patterns when X and Y are used afterwards.
 */
int mbedtls_mpi_safe_cond_swap( mbedtls_mpi *X, mbedtls_mpi *Y, unsigned char swap )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b088      	sub	sp, #32
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	4613      	mov	r3, r2
 8006184:	71fb      	strb	r3, [r7, #7]
    size_t i;
    mbedtls_mpi_uint tmp;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	429a      	cmp	r2, r3
 800618c:	d101      	bne.n	8006192 <mbedtls_mpi_safe_cond_swap+0x1a>
        return( 0 );
 800618e:	2300      	movs	r3, #0
 8006190:	e080      	b.n	8006294 <mbedtls_mpi_safe_cond_swap+0x11c>

    /* make sure swap is 0 or 1 in a time-constant manner */
    swap = (swap | (unsigned char)-swap) >> 7;
 8006192:	79fb      	ldrb	r3, [r7, #7]
 8006194:	425b      	negs	r3, r3
 8006196:	b2da      	uxtb	r2, r3
 8006198:	79fb      	ldrb	r3, [r7, #7]
 800619a:	4313      	orrs	r3, r2
 800619c:	b2db      	uxtb	r3, r3
 800619e:	09db      	lsrs	r3, r3, #7
 80061a0:	71fb      	strb	r3, [r7, #7]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	4619      	mov	r1, r3
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f7ff fe6f 	bl	8005e8c <mbedtls_mpi_grow>
 80061ae:	61f8      	str	r0, [r7, #28]
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d16d      	bne.n	8006292 <mbedtls_mpi_safe_cond_swap+0x11a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( Y, X->n ) );
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	4619      	mov	r1, r3
 80061bc:	68b8      	ldr	r0, [r7, #8]
 80061be:	f7ff fe65 	bl	8005e8c <mbedtls_mpi_grow>
 80061c2:	61f8      	str	r0, [r7, #28]
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d163      	bne.n	8006292 <mbedtls_mpi_safe_cond_swap+0x11a>

    s = X->s;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	617b      	str	r3, [r7, #20]
    X->s = X->s * ( 1 - swap ) + Y->s * swap;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	79fa      	ldrb	r2, [r7, #7]
 80061d6:	f1c2 0201 	rsb	r2, r2, #1
 80061da:	fb03 f202 	mul.w	r2, r3, r2
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	79f9      	ldrb	r1, [r7, #7]
 80061e4:	fb01 f303 	mul.w	r3, r1, r3
 80061e8:	441a      	add	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	601a      	str	r2, [r3, #0]
    Y->s = Y->s * ( 1 - swap ) +    s * swap;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	79fa      	ldrb	r2, [r7, #7]
 80061f4:	f1c2 0201 	rsb	r2, r2, #1
 80061f8:	fb03 f202 	mul.w	r2, r3, r2
 80061fc:	79fb      	ldrb	r3, [r7, #7]
 80061fe:	6979      	ldr	r1, [r7, #20]
 8006200:	fb01 f303 	mul.w	r3, r1, r3
 8006204:	441a      	add	r2, r3
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	601a      	str	r2, [r3, #0]


    for( i = 0; i < X->n; i++ )
 800620a:	2300      	movs	r3, #0
 800620c:	61bb      	str	r3, [r7, #24]
 800620e:	e03a      	b.n	8006286 <mbedtls_mpi_safe_cond_swap+0x10e>
    {
        tmp = X->p[i];
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	689a      	ldr	r2, [r3, #8]
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	613b      	str	r3, [r7, #16]
        X->p[i] = X->p[i] * ( 1 - swap ) + Y->p[i] * swap;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	79fa      	ldrb	r2, [r7, #7]
 800622c:	f1c2 0201 	rsb	r2, r2, #1
 8006230:	fb02 f103 	mul.w	r1, r2, r3
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	79fa      	ldrb	r2, [r7, #7]
 8006242:	fb03 f202 	mul.w	r2, r3, r2
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6898      	ldr	r0, [r3, #8]
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4403      	add	r3, r0
 8006250:	440a      	add	r2, r1
 8006252:	601a      	str	r2, [r3, #0]
        Y->p[i] = Y->p[i] * ( 1 - swap ) +     tmp * swap;
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	689a      	ldr	r2, [r3, #8]
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	79fa      	ldrb	r2, [r7, #7]
 8006262:	f1c2 0201 	rsb	r2, r2, #1
 8006266:	fb02 f103 	mul.w	r1, r2, r3
 800626a:	79fb      	ldrb	r3, [r7, #7]
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	fb03 f202 	mul.w	r2, r3, r2
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	6898      	ldr	r0, [r3, #8]
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4403      	add	r3, r0
 800627c:	440a      	add	r2, r1
 800627e:	601a      	str	r2, [r3, #0]
    for( i = 0; i < X->n; i++ )
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	3301      	adds	r3, #1
 8006284:	61bb      	str	r3, [r7, #24]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	429a      	cmp	r2, r3
 800628e:	d3bf      	bcc.n	8006210 <mbedtls_mpi_safe_cond_swap+0x98>
    }

cleanup:
 8006290:	bf00      	nop
    return( ret );
 8006292:	69fb      	ldr	r3, [r7, #28]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3720      	adds	r7, #32
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <mbedtls_mpi_lset>:

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
    int ret;
    MPI_VALIDATE_RET( X != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 80062a6:	2101      	movs	r1, #1
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7ff fdef 	bl	8005e8c <mbedtls_mpi_grow>
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d119      	bne.n	80062ea <mbedtls_mpi_lset+0x4e>
    memset( X->p, 0, X->n * ciL );
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6898      	ldr	r0, [r3, #8]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	461a      	mov	r2, r3
 80062c2:	2100      	movs	r1, #0
 80062c4:	f010 fc78 	bl	8016bb8 <memset>

    X->p[0] = ( z < 0 ) ? -z : z;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80062ce:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	da02      	bge.n	80062e4 <mbedtls_mpi_lset+0x48>
 80062de:	f04f 32ff 	mov.w	r2, #4294967295
 80062e2:	e000      	b.n	80062e6 <mbedtls_mpi_lset+0x4a>
 80062e4:	2201      	movs	r2, #1
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	601a      	str	r2, [r3, #0]

cleanup:

    return( ret );
 80062ea:	68fb      	ldr	r3, [r7, #12]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <mbedtls_mpi_get_bit>:

/*
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
    MPI_VALIDATE_RET( X != NULL );

    if( X->n * biL <= pos )
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	015b      	lsls	r3, r3, #5
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	429a      	cmp	r2, r3
 8006308:	d301      	bcc.n	800630e <mbedtls_mpi_get_bit+0x1a>
        return( 0 );
 800630a:	2300      	movs	r3, #0
 800630c:	e00d      	b.n	800632a <mbedtls_mpi_get_bit+0x36>

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	689a      	ldr	r2, [r3, #8]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	095b      	lsrs	r3, r3, #5
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	f003 031f 	and.w	r3, r3, #31
 8006322:	fa22 f303 	lsr.w	r3, r2, r3
 8006326:	f003 0301 	and.w	r3, r3, #1
}
 800632a:	4618      	mov	r0, r3
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <mbedtls_mpi_set_bit>:

/*
 * Set a bit to a specific value of 0 or 1
 */
int mbedtls_mpi_set_bit( mbedtls_mpi *X, size_t pos, unsigned char val )
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b088      	sub	sp, #32
 800633a:	af00      	add	r7, sp, #0
 800633c:	60f8      	str	r0, [r7, #12]
 800633e:	60b9      	str	r1, [r7, #8]
 8006340:	4613      	mov	r3, r2
 8006342:	71fb      	strb	r3, [r7, #7]
    int ret = 0;
 8006344:	2300      	movs	r3, #0
 8006346:	61fb      	str	r3, [r7, #28]
    size_t off = pos / biL;
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	095b      	lsrs	r3, r3, #5
 800634c:	61bb      	str	r3, [r7, #24]
    size_t idx = pos % biL;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f003 031f 	and.w	r3, r3, #31
 8006354:	617b      	str	r3, [r7, #20]
    MPI_VALIDATE_RET( X != NULL );

    if( val != 0 && val != 1 )
 8006356:	79fb      	ldrb	r3, [r7, #7]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d005      	beq.n	8006368 <mbedtls_mpi_set_bit+0x32>
 800635c:	79fb      	ldrb	r3, [r7, #7]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d002      	beq.n	8006368 <mbedtls_mpi_set_bit+0x32>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8006362:	f06f 0303 	mvn.w	r3, #3
 8006366:	e037      	b.n	80063d8 <mbedtls_mpi_set_bit+0xa2>

    if( X->n * biL <= pos )
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	015b      	lsls	r3, r3, #5
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	429a      	cmp	r2, r3
 8006372:	d30e      	bcc.n	8006392 <mbedtls_mpi_set_bit+0x5c>
    {
        if( val == 0 )
 8006374:	79fb      	ldrb	r3, [r7, #7]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <mbedtls_mpi_set_bit+0x48>
            return( 0 );
 800637a:	2300      	movs	r3, #0
 800637c:	e02c      	b.n	80063d8 <mbedtls_mpi_set_bit+0xa2>

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, off + 1 ) );
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	3301      	adds	r3, #1
 8006382:	4619      	mov	r1, r3
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f7ff fd81 	bl	8005e8c <mbedtls_mpi_grow>
 800638a:	61f8      	str	r0, [r7, #28]
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d121      	bne.n	80063d6 <mbedtls_mpi_set_bit+0xa0>
    }

    X->p[off] &= ~( (mbedtls_mpi_uint) 0x01 << idx );
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	689a      	ldr	r2, [r3, #8]
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	6819      	ldr	r1, [r3, #0]
 800639e:	2201      	movs	r2, #1
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	fa02 f303 	lsl.w	r3, r2, r3
 80063a6:	43da      	mvns	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6898      	ldr	r0, [r3, #8]
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4403      	add	r3, r0
 80063b2:	400a      	ands	r2, r1
 80063b4:	601a      	str	r2, [r3, #0]
    X->p[off] |= (mbedtls_mpi_uint) val << idx;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	689a      	ldr	r2, [r3, #8]
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	6819      	ldr	r1, [r3, #0]
 80063c2:	79fa      	ldrb	r2, [r7, #7]
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	409a      	lsls	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6898      	ldr	r0, [r3, #8]
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4403      	add	r3, r0
 80063d2:	430a      	orrs	r2, r1
 80063d4:	601a      	str	r2, [r3, #0]

cleanup:

    return( ret );
 80063d6:	69fb      	ldr	r3, [r7, #28]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3720      	adds	r7, #32
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <mbedtls_mpi_lsb>:

/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
 80063e0:	b480      	push	{r7}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
    size_t i, j, count = 0;
 80063e8:	2300      	movs	r3, #0
 80063ea:	60fb      	str	r3, [r7, #12]
    MBEDTLS_INTERNAL_VALIDATE_RET( X != NULL, 0 );

    for( i = 0; i < X->n; i++ )
 80063ec:	2300      	movs	r3, #0
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	e01d      	b.n	800642e <mbedtls_mpi_lsb+0x4e>
        for( j = 0; j < biL; j++, count++ )
 80063f2:	2300      	movs	r3, #0
 80063f4:	613b      	str	r3, [r7, #16]
 80063f6:	e014      	b.n	8006422 <mbedtls_mpi_lsb+0x42>
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	fa22 f303 	lsr.w	r3, r2, r3
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <mbedtls_mpi_lsb+0x36>
                return( count );
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	e011      	b.n	800643a <mbedtls_mpi_lsb+0x5a>
        for( j = 0; j < biL; j++, count++ )
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	3301      	adds	r3, #1
 800641a:	613b      	str	r3, [r7, #16]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	3301      	adds	r3, #1
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	2b1f      	cmp	r3, #31
 8006426:	d9e7      	bls.n	80063f8 <mbedtls_mpi_lsb+0x18>
    for( i = 0; i < X->n; i++ )
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	3301      	adds	r3, #1
 800642c:	617b      	str	r3, [r7, #20]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	429a      	cmp	r2, r3
 8006436:	d3dc      	bcc.n	80063f2 <mbedtls_mpi_lsb+0x12>

    return( 0 );
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	371c      	adds	r7, #28
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <mbedtls_clz>:

/*
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
 8006446:	b480      	push	{r7}
 8006448:	b085      	sub	sp, #20
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 800644e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006452:	60bb      	str	r3, [r7, #8]

    for( j = 0; j < biL; j++ )
 8006454:	2300      	movs	r3, #0
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	e00a      	b.n	8006470 <mbedtls_clz+0x2a>
    {
        if( x & mask ) break;
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	4013      	ands	r3, r2
 8006460:	2b00      	cmp	r3, #0
 8006462:	d109      	bne.n	8006478 <mbedtls_clz+0x32>

        mask >>= 1;
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	085b      	lsrs	r3, r3, #1
 8006468:	60bb      	str	r3, [r7, #8]
    for( j = 0; j < biL; j++ )
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3301      	adds	r3, #1
 800646e:	60fb      	str	r3, [r7, #12]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2b1f      	cmp	r3, #31
 8006474:	d9f1      	bls.n	800645a <mbedtls_clz+0x14>
 8006476:	e000      	b.n	800647a <mbedtls_clz+0x34>
        if( x & mask ) break;
 8006478:	bf00      	nop
    }

    return j;
 800647a:	68fb      	ldr	r3, [r7, #12]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <mbedtls_mpi_bitlen>:

/*
 * Return the number of bits
 */
size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
    size_t i, j;

    if( X->n == 0 )
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <mbedtls_mpi_bitlen+0x14>
        return( 0 );
 8006498:	2300      	movs	r3, #0
 800649a:	e025      	b.n	80064e8 <mbedtls_mpi_bitlen+0x60>

    for( i = X->n - 1; i > 0; i-- )
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	3b01      	subs	r3, #1
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	e00a      	b.n	80064bc <mbedtls_mpi_bitlen+0x34>
        if( X->p[i] != 0 )
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689a      	ldr	r2, [r3, #8]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d106      	bne.n	80064c4 <mbedtls_mpi_bitlen+0x3c>
    for( i = X->n - 1; i > 0; i-- )
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3b01      	subs	r3, #1
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1f1      	bne.n	80064a6 <mbedtls_mpi_bitlen+0x1e>
 80064c2:	e000      	b.n	80064c6 <mbedtls_mpi_bitlen+0x3e>
            break;
 80064c4:	bf00      	nop

    j = biL - mbedtls_clz( X->p[i] );
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689a      	ldr	r2, [r3, #8]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7ff ffb7 	bl	8006446 <mbedtls_clz>
 80064d8:	4603      	mov	r3, r0
 80064da:	f1c3 0320 	rsb	r3, r3, #32
 80064de:	60bb      	str	r3, [r7, #8]

    return( ( i * biL ) + j );
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	4413      	add	r3, r2
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <mbedtls_mpi_size>:

/*
 * Return the total size in bytes
 */
size_t mbedtls_mpi_size( const mbedtls_mpi *X )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7ff ffc5 	bl	8006488 <mbedtls_mpi_bitlen>
 80064fe:	4603      	mov	r3, r0
 8006500:	3307      	adds	r3, #7
 8006502:	08db      	lsrs	r3, r3, #3
}
 8006504:	4618      	mov	r0, r3
 8006506:	3708      	adds	r7, #8
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <mpi_get_digit>:

/*
 * Convert an ASCII character to digit value
 */
static int mpi_get_digit( mbedtls_mpi_uint *d, int radix, char c )
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	4613      	mov	r3, r2
 8006518:	71fb      	strb	r3, [r7, #7]
    *d = 255;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	22ff      	movs	r2, #255	@ 0xff
 800651e:	601a      	str	r2, [r3, #0]

    if( c >= 0x30 && c <= 0x39 ) *d = c - 0x30;
 8006520:	79fb      	ldrb	r3, [r7, #7]
 8006522:	2b2f      	cmp	r3, #47	@ 0x2f
 8006524:	d907      	bls.n	8006536 <mpi_get_digit+0x2a>
 8006526:	79fb      	ldrb	r3, [r7, #7]
 8006528:	2b39      	cmp	r3, #57	@ 0x39
 800652a:	d804      	bhi.n	8006536 <mpi_get_digit+0x2a>
 800652c:	79fb      	ldrb	r3, [r7, #7]
 800652e:	3b30      	subs	r3, #48	@ 0x30
 8006530:	461a      	mov	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	601a      	str	r2, [r3, #0]
    if( c >= 0x41 && c <= 0x46 ) *d = c - 0x37;
 8006536:	79fb      	ldrb	r3, [r7, #7]
 8006538:	2b40      	cmp	r3, #64	@ 0x40
 800653a:	d907      	bls.n	800654c <mpi_get_digit+0x40>
 800653c:	79fb      	ldrb	r3, [r7, #7]
 800653e:	2b46      	cmp	r3, #70	@ 0x46
 8006540:	d804      	bhi.n	800654c <mpi_get_digit+0x40>
 8006542:	79fb      	ldrb	r3, [r7, #7]
 8006544:	3b37      	subs	r3, #55	@ 0x37
 8006546:	461a      	mov	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	601a      	str	r2, [r3, #0]
    if( c >= 0x61 && c <= 0x66 ) *d = c - 0x57;
 800654c:	79fb      	ldrb	r3, [r7, #7]
 800654e:	2b60      	cmp	r3, #96	@ 0x60
 8006550:	d907      	bls.n	8006562 <mpi_get_digit+0x56>
 8006552:	79fb      	ldrb	r3, [r7, #7]
 8006554:	2b66      	cmp	r3, #102	@ 0x66
 8006556:	d804      	bhi.n	8006562 <mpi_get_digit+0x56>
 8006558:	79fb      	ldrb	r3, [r7, #7]
 800655a:	3b57      	subs	r3, #87	@ 0x57
 800655c:	461a      	mov	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	601a      	str	r2, [r3, #0]

    if( *d >= (mbedtls_mpi_uint) radix )
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	429a      	cmp	r2, r3
 800656a:	d302      	bcc.n	8006572 <mpi_get_digit+0x66>
        return( MBEDTLS_ERR_MPI_INVALID_CHARACTER );
 800656c:	f06f 0305 	mvn.w	r3, #5
 8006570:	e000      	b.n	8006574 <mpi_get_digit+0x68>

    return( 0 );
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <mbedtls_mpi_read_string>:

/*
 * Import from an ASCII string
 */
int mbedtls_mpi_read_string( mbedtls_mpi *X, int radix, const char *s )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b08e      	sub	sp, #56	@ 0x38
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
    mbedtls_mpi_uint d;
    mbedtls_mpi T;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( s != NULL );

    if( radix < 2 || radix > 16 )
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	2b01      	cmp	r3, #1
 8006590:	dd02      	ble.n	8006598 <mbedtls_mpi_read_string+0x18>
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	2b10      	cmp	r3, #16
 8006596:	dd02      	ble.n	800659e <mbedtls_mpi_read_string+0x1e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8006598:	f06f 0303 	mvn.w	r3, #3
 800659c:	e0d0      	b.n	8006740 <mbedtls_mpi_read_string+0x1c0>

    mbedtls_mpi_init( &T );
 800659e:	f107 0314 	add.w	r3, r7, #20
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7ff fc39 	bl	8005e1a <mbedtls_mpi_init>

    slen = strlen( s );
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7f9 fe11 	bl	80001d0 <strlen>
 80065ae:	62b8      	str	r0, [r7, #40]	@ 0x28

    if( radix == 16 )
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2b10      	cmp	r3, #16
 80065b4:	d167      	bne.n	8006686 <mbedtls_mpi_read_string+0x106>
    {
        if( slen > MPI_SIZE_T_MAX >> 2 )
 80065b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065bc:	d302      	bcc.n	80065c4 <mbedtls_mpi_read_string+0x44>
            return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80065be:	f06f 0303 	mvn.w	r3, #3
 80065c2:	e0bd      	b.n	8006740 <mbedtls_mpi_read_string+0x1c0>

        n = BITS_TO_LIMBS( slen << 2 );
 80065c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	095b      	lsrs	r3, r3, #5
 80065ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065cc:	0092      	lsls	r2, r2, #2
 80065ce:	f002 021f 	and.w	r2, r2, #31
 80065d2:	2a00      	cmp	r2, #0
 80065d4:	bf14      	ite	ne
 80065d6:	2201      	movne	r2, #1
 80065d8:	2200      	moveq	r2, #0
 80065da:	b2d2      	uxtb	r2, r2
 80065dc:	4413      	add	r3, r2
 80065de:	627b      	str	r3, [r7, #36]	@ 0x24

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n ) );
 80065e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f7ff fc52 	bl	8005e8c <mbedtls_mpi_grow>
 80065e8:	6378      	str	r0, [r7, #52]	@ 0x34
 80065ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f040 80a1 	bne.w	8006734 <mbedtls_mpi_read_string+0x1b4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 80065f2:	2100      	movs	r1, #0
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f7ff fe51 	bl	800629c <mbedtls_mpi_lset>
 80065fa:	6378      	str	r0, [r7, #52]	@ 0x34
 80065fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f040 8098 	bne.w	8006734 <mbedtls_mpi_read_string+0x1b4>

        for( i = slen, j = 0; i > 0; i--, j++ )
 8006604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006606:	633b      	str	r3, [r7, #48]	@ 0x30
 8006608:	2300      	movs	r3, #0
 800660a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800660c:	e037      	b.n	800667e <mbedtls_mpi_read_string+0xfe>
        {
            if( i == 1 && s[i - 1] == '-' )
 800660e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006610:	2b01      	cmp	r3, #1
 8006612:	d10b      	bne.n	800662c <mbedtls_mpi_read_string+0xac>
 8006614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006616:	3b01      	subs	r3, #1
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	4413      	add	r3, r2
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	2b2d      	cmp	r3, #45	@ 0x2d
 8006620:	d104      	bne.n	800662c <mbedtls_mpi_read_string+0xac>
            {
                X->s = -1;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f04f 32ff 	mov.w	r2, #4294967295
 8006628:	601a      	str	r2, [r3, #0]
                break;
 800662a:	e083      	b.n	8006734 <mbedtls_mpi_read_string+0x1b4>
            }

            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i - 1] ) );
 800662c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662e:	3b01      	subs	r3, #1
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	4413      	add	r3, r2
 8006634:	781a      	ldrb	r2, [r3, #0]
 8006636:	f107 0320 	add.w	r3, r7, #32
 800663a:	68b9      	ldr	r1, [r7, #8]
 800663c:	4618      	mov	r0, r3
 800663e:	f7ff ff65 	bl	800650c <mpi_get_digit>
 8006642:	6378      	str	r0, [r7, #52]	@ 0x34
 8006644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006646:	2b00      	cmp	r3, #0
 8006648:	d174      	bne.n	8006734 <mbedtls_mpi_read_string+0x1b4>
            X->p[j / ( 2 * ciL )] |= d << ( ( j % ( 2 * ciL ) ) << 2 );
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6899      	ldr	r1, [r3, #8]
 800664e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006650:	08db      	lsrs	r3, r3, #3
 8006652:	009a      	lsls	r2, r3, #2
 8006654:	440a      	add	r2, r1
 8006656:	6811      	ldr	r1, [r2, #0]
 8006658:	6a38      	ldr	r0, [r7, #32]
 800665a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800665c:	0092      	lsls	r2, r2, #2
 800665e:	f002 021c 	and.w	r2, r2, #28
 8006662:	fa00 f202 	lsl.w	r2, r0, r2
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	6880      	ldr	r0, [r0, #8]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4403      	add	r3, r0
 800666e:	430a      	orrs	r2, r1
 8006670:	601a      	str	r2, [r3, #0]
        for( i = slen, j = 0; i > 0; i--, j++ )
 8006672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006674:	3b01      	subs	r3, #1
 8006676:	633b      	str	r3, [r7, #48]	@ 0x30
 8006678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800667a:	3301      	adds	r3, #1
 800667c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800667e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1c4      	bne.n	800660e <mbedtls_mpi_read_string+0x8e>
 8006684:	e056      	b.n	8006734 <mbedtls_mpi_read_string+0x1b4>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8006686:	2100      	movs	r1, #0
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f7ff fe07 	bl	800629c <mbedtls_mpi_lset>
 800668e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006692:	2b00      	cmp	r3, #0
 8006694:	d14e      	bne.n	8006734 <mbedtls_mpi_read_string+0x1b4>

        for( i = 0; i < slen; i++ )
 8006696:	2300      	movs	r3, #0
 8006698:	633b      	str	r3, [r7, #48]	@ 0x30
 800669a:	e046      	b.n	800672a <mbedtls_mpi_read_string+0x1aa>
        {
            if( i == 0 && s[i] == '-' )
 800669c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10a      	bne.n	80066b8 <mbedtls_mpi_read_string+0x138>
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a6:	4413      	add	r3, r2
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	2b2d      	cmp	r3, #45	@ 0x2d
 80066ac:	d104      	bne.n	80066b8 <mbedtls_mpi_read_string+0x138>
            {
                X->s = -1;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f04f 32ff 	mov.w	r2, #4294967295
 80066b4:	601a      	str	r2, [r3, #0]
                continue;
 80066b6:	e035      	b.n	8006724 <mbedtls_mpi_read_string+0x1a4>
            }

            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i] ) );
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066bc:	4413      	add	r3, r2
 80066be:	781a      	ldrb	r2, [r3, #0]
 80066c0:	f107 0320 	add.w	r3, r7, #32
 80066c4:	68b9      	ldr	r1, [r7, #8]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7ff ff20 	bl	800650c <mpi_get_digit>
 80066cc:	6378      	str	r0, [r7, #52]	@ 0x34
 80066ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d12f      	bne.n	8006734 <mbedtls_mpi_read_string+0x1b4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T, X, radix ) );
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	f107 0314 	add.w	r3, r7, #20
 80066da:	68f9      	ldr	r1, [r7, #12]
 80066dc:	4618      	mov	r0, r3
 80066de:	f002 fa29 	bl	8008b34 <mbedtls_mpi_mul_int>
 80066e2:	6378      	str	r0, [r7, #52]	@ 0x34
 80066e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d124      	bne.n	8006734 <mbedtls_mpi_read_string+0x1b4>

            if( X->s == 1 )
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d10c      	bne.n	800670c <mbedtls_mpi_read_string+0x18c>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, &T, d ) );
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	461a      	mov	r2, r3
 80066f6:	f107 0314 	add.w	r3, r7, #20
 80066fa:	4619      	mov	r1, r3
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 fd80 	bl	8007202 <mbedtls_mpi_add_int>
 8006702:	6378      	str	r0, [r7, #52]	@ 0x34
 8006704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00c      	beq.n	8006724 <mbedtls_mpi_read_string+0x1a4>
 800670a:	e013      	b.n	8006734 <mbedtls_mpi_read_string+0x1b4>
            }
            else
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( X, &T, d ) );
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	461a      	mov	r2, r3
 8006710:	f107 0314 	add.w	r3, r7, #20
 8006714:	4619      	mov	r1, r3
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 fd97 	bl	800724a <mbedtls_mpi_sub_int>
 800671c:	6378      	str	r0, [r7, #52]	@ 0x34
 800671e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006720:	2b00      	cmp	r3, #0
 8006722:	d107      	bne.n	8006734 <mbedtls_mpi_read_string+0x1b4>
        for( i = 0; i < slen; i++ )
 8006724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006726:	3301      	adds	r3, #1
 8006728:	633b      	str	r3, [r7, #48]	@ 0x30
 800672a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800672c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672e:	429a      	cmp	r2, r3
 8006730:	d3b4      	bcc.n	800669c <mbedtls_mpi_read_string+0x11c>
            }
        }
    }

cleanup:
 8006732:	bf00      	nop

    mbedtls_mpi_free( &T );
 8006734:	f107 0314 	add.w	r3, r7, #20
 8006738:	4618      	mov	r0, r3
 800673a:	f7ff fb81 	bl	8005e40 <mbedtls_mpi_free>

    return( ret );
 800673e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006740:	4618      	mov	r0, r3
 8006742:	3738      	adds	r7, #56	@ 0x38
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <mpi_uint_bigendian_to_host>:
        tmp |= ( x & 0xFF ) << ( ( ciL - 1 - i ) << 3 );
    return( tmp );
}

static mbedtls_mpi_uint mpi_uint_bigendian_to_host( mbedtls_mpi_uint x )
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
#if defined(have_bswap)
    /* The compiler is hopefully able to statically evaluate this! */
    switch( sizeof(mbedtls_mpi_uint) )
    {
        case 4:
            return( __builtin_bswap32(x) );
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	ba1b      	rev	r3, r3
#endif /* __BYTE_ORDER__ */

    /* Fall back to C-based reordering if we don't know the byte order
     * or we couldn't use a compiler-specific builtin. */
    return( mpi_uint_bigendian_to_host_c( x ) );
}
 8006754:	4618      	mov	r0, r3
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <mpi_bigendian_to_host>:

static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint *cur_limb_left;
    mbedtls_mpi_uint *cur_limb_right;
    if( limbs == 0 )
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d026      	beq.n	80067be <mpi_bigendian_to_host+0x5e>
     * For that, simultaneously traverse the limbs from left to right
     * and from right to left, as long as the left index is not bigger
     * than the right index (it's not a problem if limbs is odd and the
     * indices coincide in the last iteration).
     */
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800677a:	3b01      	subs	r3, #1
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	4413      	add	r3, r2
 8006782:	613b      	str	r3, [r7, #16]
 8006784:	e016      	b.n	80067b4 <mpi_bigendian_to_host+0x54>
         cur_limb_left++, cur_limb_right-- )
    {
        mbedtls_mpi_uint tmp;
        /* Note that if cur_limb_left == cur_limb_right,
         * this code effectively swaps the bytes only once. */
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4618      	mov	r0, r3
 800678c:	f7ff ffdc 	bl	8006748 <mpi_uint_bigendian_to_host>
 8006790:	60f8      	str	r0, [r7, #12]
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4618      	mov	r0, r3
 8006798:	f7ff ffd6 	bl	8006748 <mpi_uint_bigendian_to_host>
 800679c:	4602      	mov	r2, r0
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	601a      	str	r2, [r3, #0]
        *cur_limb_right = tmp;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	601a      	str	r2, [r3, #0]
         cur_limb_left++, cur_limb_right-- )
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	3304      	adds	r3, #4
 80067ac:	617b      	str	r3, [r7, #20]
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	3b04      	subs	r3, #4
 80067b2:	613b      	str	r3, [r7, #16]
         cur_limb_left <= cur_limb_right;
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d9e4      	bls.n	8006786 <mpi_bigendian_to_host+0x26>
 80067bc:	e000      	b.n	80067c0 <mpi_bigendian_to_host+0x60>
        return;
 80067be:	bf00      	nop
    }
}
 80067c0:	3718      	adds	r7, #24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <mbedtls_mpi_read_binary>:

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b088      	sub	sp, #32
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	60f8      	str	r0, [r7, #12]
 80067ce:	60b9      	str	r1, [r7, #8]
 80067d0:	607a      	str	r2, [r7, #4]
    int ret;
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	089b      	lsrs	r3, r3, #2
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	f002 0203 	and.w	r2, r2, #3
 80067dc:	2a00      	cmp	r2, #0
 80067de:	bf14      	ite	ne
 80067e0:	2201      	movne	r2, #1
 80067e2:	2200      	moveq	r2, #0
 80067e4:	b2d2      	uxtb	r2, r2
 80067e6:	4413      	add	r3, r2
 80067e8:	61bb      	str	r3, [r7, #24]
    size_t const overhead = ( limbs * ciL ) - buflen;
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	009a      	lsls	r2, r3, #2
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	617b      	str	r3, [r7, #20]

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d00d      	beq.n	800681a <mbedtls_mpi_read_binary+0x54>
    {
        mbedtls_mpi_free( X );
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f7ff fb1e 	bl	8005e40 <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f7ff fb08 	bl	8005e1a <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 800680a:	69b9      	ldr	r1, [r7, #24]
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f7ff fb3d 	bl	8005e8c <mbedtls_mpi_grow>
 8006812:	61f8      	str	r0, [r7, #28]
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d11d      	bne.n	8006856 <mbedtls_mpi_read_binary+0x90>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800681a:	2100      	movs	r1, #0
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f7ff fd3d 	bl	800629c <mbedtls_mpi_lset>
 8006822:	61f8      	str	r0, [r7, #28]
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d115      	bne.n	8006856 <mbedtls_mpi_read_binary+0x90>

    /* Avoid calling `memcpy` with NULL source argument,
     * even if buflen is 0. */
    if( buf != NULL )
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d011      	beq.n	8006854 <mbedtls_mpi_read_binary+0x8e>
    {
        Xp = (unsigned char*) X->p;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	613b      	str	r3, [r7, #16]
        memcpy( Xp + overhead, buf, buflen );
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	4413      	add	r3, r2
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	68b9      	ldr	r1, [r7, #8]
 8006840:	4618      	mov	r0, r3
 8006842:	f010 fa96 	bl	8016d72 <memcpy>

        mpi_bigendian_to_host( X->p, limbs );
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	69b9      	ldr	r1, [r7, #24]
 800684c:	4618      	mov	r0, r3
 800684e:	f7ff ff87 	bl	8006760 <mpi_bigendian_to_host>
 8006852:	e000      	b.n	8006856 <mbedtls_mpi_read_binary+0x90>
    }

cleanup:
 8006854:	bf00      	nop

    return( ret );
 8006856:	69fb      	ldr	r3, [r7, #28]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3720      	adds	r7, #32
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <mbedtls_mpi_write_binary>:
/*
 * Export X into unsigned binary data, big endian
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X,
                              unsigned char *buf, size_t buflen )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b088      	sub	sp, #32
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
    size_t i;

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    stored_bytes = X->n * ciL;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	613b      	str	r3, [r7, #16]

    if( stored_bytes < buflen )
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	429a      	cmp	r2, r3
 800687a:	d210      	bcs.n	800689e <mbedtls_mpi_write_binary+0x3e>
        /* There is enough space in the output buffer. Write initial
         * null bytes and record the position at which to start
         * writing the significant bytes. In this case, the execution
         * trace of this function does not depend on the value of the
         * number. */
        bytes_to_copy = stored_bytes;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	61fb      	str	r3, [r7, #28]
        p = buf + buflen - stored_bytes;
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	4413      	add	r3, r2
 800688a:	61bb      	str	r3, [r7, #24]
        memset( buf, 0, buflen - stored_bytes );
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	461a      	mov	r2, r3
 8006894:	2100      	movs	r1, #0
 8006896:	68b8      	ldr	r0, [r7, #8]
 8006898:	f010 f98e 	bl	8016bb8 <memset>
 800689c:	e020      	b.n	80068e0 <mbedtls_mpi_write_binary+0x80>
    }
    else
    {
        /* The output buffer is smaller than the allocated size of X.
         * However X may fit if its leading bytes are zero. */
        bytes_to_copy = buflen;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	61fb      	str	r3, [r7, #28]
        p = buf;
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	61bb      	str	r3, [r7, #24]
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	e015      	b.n	80068d8 <mbedtls_mpi_write_binary+0x78>
        {
            if( GET_BYTE( X, i ) != 0 )
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f023 0303 	bic.w	r3, r3, #3
 80068b6:	4413      	add	r3, r2
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f003 0303 	and.w	r3, r3, #3
 80068c0:	00db      	lsls	r3, r3, #3
 80068c2:	fa22 f303 	lsr.w	r3, r2, r3
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <mbedtls_mpi_write_binary+0x72>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 80068cc:	f06f 0307 	mvn.w	r3, #7
 80068d0:	e026      	b.n	8006920 <mbedtls_mpi_write_binary+0xc0>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	3301      	adds	r3, #1
 80068d6:	617b      	str	r3, [r7, #20]
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d3e5      	bcc.n	80068ac <mbedtls_mpi_write_binary+0x4c>
        }
    }

    for( i = 0; i < bytes_to_copy; i++ )
 80068e0:	2300      	movs	r3, #0
 80068e2:	617b      	str	r3, [r7, #20]
 80068e4:	e017      	b.n	8006916 <mbedtls_mpi_write_binary+0xb6>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	689a      	ldr	r2, [r3, #8]
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	f023 0303 	bic.w	r3, r3, #3
 80068f0:	4413      	add	r3, r2
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	f003 0303 	and.w	r3, r3, #3
 80068fa:	00db      	lsls	r3, r3, #3
 80068fc:	fa22 f103 	lsr.w	r1, r2, r3
 8006900:	69fa      	ldr	r2, [r7, #28]
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	3b01      	subs	r3, #1
 8006908:	69ba      	ldr	r2, [r7, #24]
 800690a:	4413      	add	r3, r2
 800690c:	b2ca      	uxtb	r2, r1
 800690e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < bytes_to_copy; i++ )
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	3301      	adds	r3, #1
 8006914:	617b      	str	r3, [r7, #20]
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	429a      	cmp	r2, r3
 800691c:	d3e3      	bcc.n	80068e6 <mbedtls_mpi_write_binary+0x86>

    return( 0 );
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3720      	adds	r7, #32
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <mbedtls_mpi_shift_l>:

/*
 * Left-shift: X <<= count
 */
int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b088      	sub	sp, #32
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
    int ret;
    size_t i, v0, t1;
    mbedtls_mpi_uint r0 = 0, r1;
 8006932:	2300      	movs	r3, #0
 8006934:	617b      	str	r3, [r7, #20]
    MPI_VALIDATE_RET( X != NULL );

    v0 = count / (biL    );
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	095b      	lsrs	r3, r3, #5
 800693a:	613b      	str	r3, [r7, #16]
    t1 = count & (biL - 1);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	f003 031f 	and.w	r3, r3, #31
 8006942:	60fb      	str	r3, [r7, #12]

    i = mbedtls_mpi_bitlen( X ) + count;
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f7ff fd9f 	bl	8006488 <mbedtls_mpi_bitlen>
 800694a:	4602      	mov	r2, r0
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	4413      	add	r3, r2
 8006950:	61bb      	str	r3, [r7, #24]

    if( X->n * biL < i )
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	015b      	lsls	r3, r3, #5
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	429a      	cmp	r2, r3
 800695c:	d912      	bls.n	8006984 <mbedtls_mpi_shift_l+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	095b      	lsrs	r3, r3, #5
 8006962:	69ba      	ldr	r2, [r7, #24]
 8006964:	f002 021f 	and.w	r2, r2, #31
 8006968:	2a00      	cmp	r2, #0
 800696a:	bf14      	ite	ne
 800696c:	2201      	movne	r2, #1
 800696e:	2200      	moveq	r2, #0
 8006970:	b2d2      	uxtb	r2, r2
 8006972:	4413      	add	r3, r2
 8006974:	4619      	mov	r1, r3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7ff fa88 	bl	8005e8c <mbedtls_mpi_grow>
 800697c:	61f8      	str	r0, [r7, #28]
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d16e      	bne.n	8006a62 <mbedtls_mpi_shift_l+0x13a>

    ret = 0;
 8006984:	2300      	movs	r3, #0
 8006986:	61fb      	str	r3, [r7, #28]

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d02f      	beq.n	80069ee <mbedtls_mpi_shift_l+0xc6>
    {
        for( i = X->n; i > v0; i-- )
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	61bb      	str	r3, [r7, #24]
 8006994:	e016      	b.n	80069c4 <mbedtls_mpi_shift_l+0x9c>
            X->p[i - 1] = X->p[i - v0 - 1];
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	689a      	ldr	r2, [r3, #8]
 800699a:	69b9      	ldr	r1, [r7, #24]
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	1acb      	subs	r3, r1, r3
 80069a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80069a4:	3b01      	subs	r3, #1
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	441a      	add	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6899      	ldr	r1, [r3, #8]
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80069b4:	3b01      	subs	r3, #1
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	440b      	add	r3, r1
 80069ba:	6812      	ldr	r2, [r2, #0]
 80069bc:	601a      	str	r2, [r3, #0]
        for( i = X->n; i > v0; i-- )
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	3b01      	subs	r3, #1
 80069c2:	61bb      	str	r3, [r7, #24]
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d8e4      	bhi.n	8006996 <mbedtls_mpi_shift_l+0x6e>

        for( ; i > 0; i-- )
 80069cc:	e00c      	b.n	80069e8 <mbedtls_mpi_shift_l+0xc0>
            X->p[i - 1] = 0;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	689a      	ldr	r2, [r3, #8]
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80069d8:	3b01      	subs	r3, #1
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	2200      	movs	r2, #0
 80069e0:	601a      	str	r2, [r3, #0]
        for( ; i > 0; i-- )
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	3b01      	subs	r3, #1
 80069e6:	61bb      	str	r3, [r7, #24]
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1ef      	bne.n	80069ce <mbedtls_mpi_shift_l+0xa6>
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d035      	beq.n	8006a60 <mbedtls_mpi_shift_l+0x138>
    {
        for( i = v0; i < X->n; i++ )
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	61bb      	str	r3, [r7, #24]
 80069f8:	e02d      	b.n	8006a56 <mbedtls_mpi_shift_l+0x12e>
        {
            r1 = X->p[i] >> (biL - t1);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689a      	ldr	r2, [r3, #8]
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4413      	add	r3, r2
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f1c3 0320 	rsb	r3, r3, #32
 8006a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a10:	60bb      	str	r3, [r7, #8]
            X->p[i] <<= t1;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689a      	ldr	r2, [r3, #8]
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	6819      	ldr	r1, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689a      	ldr	r2, [r3, #8]
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8006a2e:	601a      	str	r2, [r3, #0]
            X->p[i] |= r0;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689a      	ldr	r2, [r3, #8]
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	6819      	ldr	r1, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	689a      	ldr	r2, [r3, #8]
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4413      	add	r3, r2
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	601a      	str	r2, [r3, #0]
            r0 = r1;
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	617b      	str	r3, [r7, #20]
        for( i = v0; i < X->n; i++ )
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	3301      	adds	r3, #1
 8006a54:	61bb      	str	r3, [r7, #24]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d3cc      	bcc.n	80069fa <mbedtls_mpi_shift_l+0xd2>
        }
    }

cleanup:
 8006a60:	bf00      	nop

    return( ret );
 8006a62:	69fb      	ldr	r3, [r7, #28]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3720      	adds	r7, #32
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <mbedtls_mpi_shift_r>:

/*
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b088      	sub	sp, #32
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
 8006a76:	2300      	movs	r3, #0
 8006a78:	61bb      	str	r3, [r7, #24]
    MPI_VALIDATE_RET( X != NULL );

    v0 = count /  biL;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	095b      	lsrs	r3, r3, #5
 8006a7e:	617b      	str	r3, [r7, #20]
    v1 = count & (biL - 1);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	f003 031f 	and.w	r3, r3, #31
 8006a86:	613b      	str	r3, [r7, #16]

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d807      	bhi.n	8006aa2 <mbedtls_mpi_shift_r+0x36>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d108      	bne.n	8006aae <mbedtls_mpi_shift_r+0x42>
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d005      	beq.n	8006aae <mbedtls_mpi_shift_r+0x42>
        return mbedtls_mpi_lset( X, 0 );
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f7ff fbf9 	bl	800629c <mbedtls_mpi_lset>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	e075      	b.n	8006b9a <mbedtls_mpi_shift_r+0x12e>

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d02a      	beq.n	8006b0a <mbedtls_mpi_shift_r+0x9e>
    {
        for( i = 0; i < X->n - v0; i++ )
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	61fb      	str	r3, [r7, #28]
 8006ab8:	e010      	b.n	8006adc <mbedtls_mpi_shift_r+0x70>
            X->p[i] = X->p[i + v0];
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	689a      	ldr	r2, [r3, #8]
 8006abe:	69f9      	ldr	r1, [r7, #28]
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	440b      	add	r3, r1
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	441a      	add	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6899      	ldr	r1, [r3, #8]
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	440b      	add	r3, r1
 8006ad2:	6812      	ldr	r2, [r2, #0]
 8006ad4:	601a      	str	r2, [r3, #0]
        for( i = 0; i < X->n - v0; i++ )
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	61fb      	str	r3, [r7, #28]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	69fa      	ldr	r2, [r7, #28]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d3e7      	bcc.n	8006aba <mbedtls_mpi_shift_r+0x4e>

        for( ; i < X->n; i++ )
 8006aea:	e009      	b.n	8006b00 <mbedtls_mpi_shift_r+0x94>
            X->p[i] = 0;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689a      	ldr	r2, [r3, #8]
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	2200      	movs	r2, #0
 8006af8:	601a      	str	r2, [r3, #0]
        for( ; i < X->n; i++ )
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	3301      	adds	r3, #1
 8006afe:	61fb      	str	r3, [r7, #28]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	69fa      	ldr	r2, [r7, #28]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d3f0      	bcc.n	8006aec <mbedtls_mpi_shift_r+0x80>
    }

    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d043      	beq.n	8006b98 <mbedtls_mpi_shift_r+0x12c>
    {
        for( i = X->n; i > 0; i-- )
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	61fb      	str	r3, [r7, #28]
 8006b16:	e03c      	b.n	8006b92 <mbedtls_mpi_shift_r+0x126>
        {
            r1 = X->p[i - 1] << (biL - v1);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b22:	3b01      	subs	r3, #1
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	f1c3 0320 	rsb	r3, r3, #32
 8006b30:	fa02 f303 	lsl.w	r3, r2, r3
 8006b34:	60fb      	str	r3, [r7, #12]
            X->p[i - 1] >>= v1;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	689a      	ldr	r2, [r3, #8]
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b40:	3b01      	subs	r3, #1
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	6819      	ldr	r1, [r3, #0]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b52:	3b01      	subs	r3, #1
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	fa21 f202 	lsr.w	r2, r1, r2
 8006b5e:	601a      	str	r2, [r3, #0]
            X->p[i - 1] |= r0;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689a      	ldr	r2, [r3, #8]
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	6819      	ldr	r1, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	689a      	ldr	r2, [r3, #8]
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	69ba      	ldr	r2, [r7, #24]
 8006b84:	430a      	orrs	r2, r1
 8006b86:	601a      	str	r2, [r3, #0]
            r0 = r1;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	61bb      	str	r3, [r7, #24]
        for( i = X->n; i > 0; i-- )
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	61fb      	str	r3, [r7, #28]
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1bf      	bne.n	8006b18 <mbedtls_mpi_shift_r+0xac>
        }
    }

    return( 0 );
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3720      	adds	r7, #32
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <mbedtls_mpi_cmp_abs>:

/*
 * Compare unsigned values
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b085      	sub	sp, #20
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	6039      	str	r1, [r7, #0]
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	60fb      	str	r3, [r7, #12]
 8006bb2:	e00d      	b.n	8006bd0 <mbedtls_mpi_cmp_abs+0x2e>
        if( X->p[i - 1] != 0 )
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d106      	bne.n	8006bd8 <mbedtls_mpi_cmp_abs+0x36>
    for( i = X->n; i > 0; i-- )
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1ee      	bne.n	8006bb4 <mbedtls_mpi_cmp_abs+0x12>
 8006bd6:	e000      	b.n	8006bda <mbedtls_mpi_cmp_abs+0x38>
            break;
 8006bd8:	bf00      	nop

    for( j = Y->n; j > 0; j-- )
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	60bb      	str	r3, [r7, #8]
 8006be0:	e00d      	b.n	8006bfe <mbedtls_mpi_cmp_abs+0x5c>
        if( Y->p[j - 1] != 0 )
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	689a      	ldr	r2, [r3, #8]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006bec:	3b01      	subs	r3, #1
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d106      	bne.n	8006c06 <mbedtls_mpi_cmp_abs+0x64>
    for( j = Y->n; j > 0; j-- )
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	60bb      	str	r3, [r7, #8]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1ee      	bne.n	8006be2 <mbedtls_mpi_cmp_abs+0x40>
 8006c04:	e000      	b.n	8006c08 <mbedtls_mpi_cmp_abs+0x66>
            break;
 8006c06:	bf00      	nop

    if( i == 0 && j == 0 )
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d104      	bne.n	8006c18 <mbedtls_mpi_cmp_abs+0x76>
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <mbedtls_mpi_cmp_abs+0x76>
        return( 0 );
 8006c14:	2300      	movs	r3, #0
 8006c16:	e040      	b.n	8006c9a <mbedtls_mpi_cmp_abs+0xf8>

    if( i > j ) return(  1 );
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d901      	bls.n	8006c24 <mbedtls_mpi_cmp_abs+0x82>
 8006c20:	2301      	movs	r3, #1
 8006c22:	e03a      	b.n	8006c9a <mbedtls_mpi_cmp_abs+0xf8>
    if( j > i ) return( -1 );
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d932      	bls.n	8006c92 <mbedtls_mpi_cmp_abs+0xf0>
 8006c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c30:	e033      	b.n	8006c9a <mbedtls_mpi_cmp_abs+0xf8>

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	689a      	ldr	r2, [r3, #8]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	6899      	ldr	r1, [r3, #8]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	440b      	add	r3, r1
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d901      	bls.n	8006c5e <mbedtls_mpi_cmp_abs+0xbc>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e01d      	b.n	8006c9a <mbedtls_mpi_cmp_abs+0xf8>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	689a      	ldr	r2, [r3, #8]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	6899      	ldr	r1, [r3, #8]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	440b      	add	r3, r1
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d202      	bcs.n	8006c8c <mbedtls_mpi_cmp_abs+0xea>
 8006c86:	f04f 33ff 	mov.w	r3, #4294967295
 8006c8a:	e006      	b.n	8006c9a <mbedtls_mpi_cmp_abs+0xf8>
    for( ; i > 0; i-- )
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	60fb      	str	r3, [r7, #12]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1cc      	bne.n	8006c32 <mbedtls_mpi_cmp_abs+0x90>
    }

    return( 0 );
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <mbedtls_mpi_cmp_mpi>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b085      	sub	sp, #20
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	6039      	str	r1, [r7, #0]
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	60fb      	str	r3, [r7, #12]
 8006cb6:	e00d      	b.n	8006cd4 <mbedtls_mpi_cmp_mpi+0x2e>
        if( X->p[i - 1] != 0 )
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	689a      	ldr	r2, [r3, #8]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d106      	bne.n	8006cdc <mbedtls_mpi_cmp_mpi+0x36>
    for( i = X->n; i > 0; i-- )
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1ee      	bne.n	8006cb8 <mbedtls_mpi_cmp_mpi+0x12>
 8006cda:	e000      	b.n	8006cde <mbedtls_mpi_cmp_mpi+0x38>
            break;
 8006cdc:	bf00      	nop

    for( j = Y->n; j > 0; j-- )
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	60bb      	str	r3, [r7, #8]
 8006ce4:	e00d      	b.n	8006d02 <mbedtls_mpi_cmp_mpi+0x5c>
        if( Y->p[j - 1] != 0 )
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	689a      	ldr	r2, [r3, #8]
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d106      	bne.n	8006d0a <mbedtls_mpi_cmp_mpi+0x64>
    for( j = Y->n; j > 0; j-- )
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	60bb      	str	r3, [r7, #8]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1ee      	bne.n	8006ce6 <mbedtls_mpi_cmp_mpi+0x40>
 8006d08:	e000      	b.n	8006d0c <mbedtls_mpi_cmp_mpi+0x66>
            break;
 8006d0a:	bf00      	nop

    if( i == 0 && j == 0 )
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d104      	bne.n	8006d1c <mbedtls_mpi_cmp_mpi+0x76>
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <mbedtls_mpi_cmp_mpi+0x76>
        return( 0 );
 8006d18:	2300      	movs	r3, #0
 8006d1a:	e059      	b.n	8006dd0 <mbedtls_mpi_cmp_mpi+0x12a>

    if( i > j ) return(  X->s );
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d902      	bls.n	8006d2a <mbedtls_mpi_cmp_mpi+0x84>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	e052      	b.n	8006dd0 <mbedtls_mpi_cmp_mpi+0x12a>
    if( j > i ) return( -Y->s );
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d903      	bls.n	8006d3a <mbedtls_mpi_cmp_mpi+0x94>
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	425b      	negs	r3, r3
 8006d38:	e04a      	b.n	8006dd0 <mbedtls_mpi_cmp_mpi+0x12a>

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	dd05      	ble.n	8006d4e <mbedtls_mpi_cmp_mpi+0xa8>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	da01      	bge.n	8006d4e <mbedtls_mpi_cmp_mpi+0xa8>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e040      	b.n	8006dd0 <mbedtls_mpi_cmp_mpi+0x12a>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	dd38      	ble.n	8006dc8 <mbedtls_mpi_cmp_mpi+0x122>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	da34      	bge.n	8006dc8 <mbedtls_mpi_cmp_mpi+0x122>
 8006d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d62:	e035      	b.n	8006dd0 <mbedtls_mpi_cmp_mpi+0x12a>

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	689a      	ldr	r2, [r3, #8]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	6899      	ldr	r1, [r3, #8]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d80:	3b01      	subs	r3, #1
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	440b      	add	r3, r1
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d902      	bls.n	8006d92 <mbedtls_mpi_cmp_mpi+0xec>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	e01e      	b.n	8006dd0 <mbedtls_mpi_cmp_mpi+0x12a>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689a      	ldr	r2, [r3, #8]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	6899      	ldr	r1, [r3, #8]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006dae:	3b01      	subs	r3, #1
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	440b      	add	r3, r1
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d203      	bcs.n	8006dc2 <mbedtls_mpi_cmp_mpi+0x11c>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	425b      	negs	r3, r3
 8006dc0:	e006      	b.n	8006dd0 <mbedtls_mpi_cmp_mpi+0x12a>
    for( ; i > 0; i-- )
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	60fb      	str	r3, [r7, #12]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1ca      	bne.n	8006d64 <mbedtls_mpi_cmp_mpi+0xbe>
    }

    return( 0 );
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <mbedtls_mpi_cmp_int>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );

    *p  = ( z < 0 ) ? -z : z;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	bfb8      	it	lt
 8006dec:	425b      	neglt	r3, r3
 8006dee:	60bb      	str	r3, [r7, #8]
    Y.s = ( z < 0 ) ? -1 : 1;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	da02      	bge.n	8006dfc <mbedtls_mpi_cmp_int+0x20>
 8006df6:	f04f 33ff 	mov.w	r3, #4294967295
 8006dfa:	e000      	b.n	8006dfe <mbedtls_mpi_cmp_int+0x22>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	60fb      	str	r3, [r7, #12]
    Y.n = 1;
 8006e00:	2301      	movs	r3, #1
 8006e02:	613b      	str	r3, [r7, #16]
    Y.p = p;
 8006e04:	f107 0308 	add.w	r3, r7, #8
 8006e08:	617b      	str	r3, [r7, #20]

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 8006e0a:	f107 030c 	add.w	r3, r7, #12
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f7ff ff48 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 8006e16:	4603      	mov	r3, r0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <mbedtls_mpi_add_abs>:

/*
 * Unsigned addition: X = |A| + |B|  (HAC 14.7)
 */
int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b08c      	sub	sp, #48	@ 0x30
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
    mbedtls_mpi_uint *o, *p, c, tmp;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( X == B )
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d105      	bne.n	8006e40 <mbedtls_mpi_add_abs+0x20>
    {
        const mbedtls_mpi *T = A; A = X; B = T;
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	617b      	str	r3, [r7, #20]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	60bb      	str	r3, [r7, #8]
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	607b      	str	r3, [r7, #4]
    }

    if( X != A )
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d008      	beq.n	8006e5a <mbedtls_mpi_add_abs+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 8006e48:	68b9      	ldr	r1, [r7, #8]
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f7ff f8c7 	bl	8005fde <mbedtls_mpi_copy>
 8006e50:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f040 808d 	bne.w	8006f74 <mbedtls_mpi_add_abs+0x154>

    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	601a      	str	r2, [r3, #0]

    for( j = B->n; j > 0; j-- )
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e66:	e00d      	b.n	8006e84 <mbedtls_mpi_add_abs+0x64>
        if( B->p[j - 1] != 0 )
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689a      	ldr	r2, [r3, #8]
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e72:	3b01      	subs	r3, #1
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4413      	add	r3, r2
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d106      	bne.n	8006e8c <mbedtls_mpi_add_abs+0x6c>
    for( j = B->n; j > 0; j-- )
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e80:	3b01      	subs	r3, #1
 8006e82:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1ee      	bne.n	8006e68 <mbedtls_mpi_add_abs+0x48>
 8006e8a:	e000      	b.n	8006e8e <mbedtls_mpi_add_abs+0x6e>
            break;
 8006e8c:	bf00      	nop

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 8006e8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f7fe fffb 	bl	8005e8c <mbedtls_mpi_grow>
 8006e96:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d16a      	bne.n	8006f74 <mbedtls_mpi_add_abs+0x154>

    o = B->p; p = X->p; c = 0;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	623b      	str	r3, [r7, #32]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	61fb      	str	r3, [r7, #28]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	61bb      	str	r3, [r7, #24]

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 8006eae:	2300      	movs	r3, #0
 8006eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006eb2:	e02c      	b.n	8006f0e <mbedtls_mpi_add_abs+0xee>
    {
        tmp= *o;
 8006eb4:	6a3b      	ldr	r3, [r7, #32]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	613b      	str	r3, [r7, #16]
        *p +=  c; c  = ( *p <  c );
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	441a      	add	r2, r3
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	bf8c      	ite	hi
 8006ed0:	2301      	movhi	r3, #1
 8006ed2:	2300      	movls	r3, #0
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	61bb      	str	r3, [r7, #24]
        *p += tmp; c += ( *p < tmp );
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	441a      	add	r2, r3
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	bf8c      	ite	hi
 8006eee:	2301      	movhi	r3, #1
 8006ef0:	2300      	movls	r3, #0
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	4413      	add	r3, r2
 8006efa:	61bb      	str	r3, [r7, #24]
    for( i = 0; i < j; i++, o++, p++ )
 8006efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006efe:	3301      	adds	r3, #1
 8006f00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	3304      	adds	r3, #4
 8006f06:	623b      	str	r3, [r7, #32]
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	61fb      	str	r3, [r7, #28]
 8006f0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d3ce      	bcc.n	8006eb4 <mbedtls_mpi_add_abs+0x94>
    }

    while( c != 0 )
 8006f16:	e029      	b.n	8006f6c <mbedtls_mpi_add_abs+0x14c>
    {
        if( i >= X->n )
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d30f      	bcc.n	8006f42 <mbedtls_mpi_add_abs+0x122>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 8006f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f24:	3301      	adds	r3, #1
 8006f26:	4619      	mov	r1, r3
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f7fe ffaf 	bl	8005e8c <mbedtls_mpi_grow>
 8006f2e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d11e      	bne.n	8006f74 <mbedtls_mpi_add_abs+0x154>
            p = X->p + i;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	61fb      	str	r3, [r7, #28]
        }

        *p += c; c = ( *p < c ); i++; p++;
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	441a      	add	r2, r3
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	69ba      	ldr	r2, [r7, #24]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	bf8c      	ite	hi
 8006f58:	2301      	movhi	r3, #1
 8006f5a:	2300      	movls	r3, #0
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	61bb      	str	r3, [r7, #24]
 8006f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f62:	3301      	adds	r3, #1
 8006f64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	61fb      	str	r3, [r7, #28]
    while( c != 0 )
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1d2      	bne.n	8006f18 <mbedtls_mpi_add_abs+0xf8>
    }

cleanup:
 8006f72:	bf00      	nop

    return( ret );
 8006f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3730      	adds	r7, #48	@ 0x30
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <mpi_sub_hlp>:

/*
 * Helper for mbedtls_mpi subtraction
 */
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b089      	sub	sp, #36	@ 0x24
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	60f8      	str	r0, [r7, #12]
 8006f86:	60b9      	str	r1, [r7, #8]
 8006f88:	607a      	str	r2, [r7, #4]
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	61bb      	str	r3, [r7, #24]
 8006f8e:	2300      	movs	r3, #0
 8006f90:	61fb      	str	r3, [r7, #28]
 8006f92:	e02b      	b.n	8006fec <mpi_sub_hlp+0x6e>
    {
        z = ( *d <  c );     *d -=  c;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	69ba      	ldr	r2, [r7, #24]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	bf8c      	ite	hi
 8006f9e:	2301      	movhi	r3, #1
 8006fa0:	2300      	movls	r3, #0
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	617b      	str	r3, [r7, #20]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	1ad2      	subs	r2, r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	601a      	str	r2, [r3, #0]
        c = ( *d < *s ) + z; *d -= *s;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	bf34      	ite	cc
 8006fbe:	2301      	movcc	r3, #1
 8006fc0:	2300      	movcs	r3, #0
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	4413      	add	r3, r2
 8006fca:	61bb      	str	r3, [r7, #24]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	1ad2      	subs	r2, r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	601a      	str	r2, [r3, #0]
    for( i = c = 0; i < n; i++, s++, d++ )
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	61fb      	str	r3, [r7, #28]
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	3304      	adds	r3, #4
 8006fe4:	60bb      	str	r3, [r7, #8]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	3304      	adds	r3, #4
 8006fea:	607b      	str	r3, [r7, #4]
 8006fec:	69fa      	ldr	r2, [r7, #28]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d3cf      	bcc.n	8006f94 <mpi_sub_hlp+0x16>
    }

    while( c != 0 )
 8006ff4:	e013      	b.n	800701e <mpi_sub_hlp+0xa0>
    {
        z = ( *d < c ); *d -= c;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	69ba      	ldr	r2, [r7, #24]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	bf8c      	ite	hi
 8007000:	2301      	movhi	r3, #1
 8007002:	2300      	movls	r3, #0
 8007004:	b2db      	uxtb	r3, r3
 8007006:	617b      	str	r3, [r7, #20]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	1ad2      	subs	r2, r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	601a      	str	r2, [r3, #0]
        c = z; d++;
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	61bb      	str	r3, [r7, #24]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	3304      	adds	r3, #4
 800701c:	607b      	str	r3, [r7, #4]
    while( c != 0 )
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1e8      	bne.n	8006ff6 <mpi_sub_hlp+0x78>
    }
}
 8007024:	bf00      	nop
 8007026:	bf00      	nop
 8007028:	3724      	adds	r7, #36	@ 0x24
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <mbedtls_mpi_sub_abs>:

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b08a      	sub	sp, #40	@ 0x28
 8007036:	af00      	add	r7, sp, #0
 8007038:	60f8      	str	r0, [r7, #12]
 800703a:	60b9      	str	r1, [r7, #8]
 800703c:	607a      	str	r2, [r7, #4]
    size_t n;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800703e:	6879      	ldr	r1, [r7, #4]
 8007040:	68b8      	ldr	r0, [r7, #8]
 8007042:	f7ff fdae 	bl	8006ba2 <mbedtls_mpi_cmp_abs>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	da02      	bge.n	8007052 <mbedtls_mpi_sub_abs+0x20>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 800704c:	f06f 0309 	mvn.w	r3, #9
 8007050:	e04b      	b.n	80070ea <mbedtls_mpi_sub_abs+0xb8>

    mbedtls_mpi_init( &TB );
 8007052:	f107 0314 	add.w	r3, r7, #20
 8007056:	4618      	mov	r0, r3
 8007058:	f7fe fedf 	bl	8005e1a <mbedtls_mpi_init>

    if( X == B )
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	429a      	cmp	r2, r3
 8007062:	d10c      	bne.n	800707e <mbedtls_mpi_sub_abs+0x4c>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 8007064:	f107 0314 	add.w	r3, r7, #20
 8007068:	6879      	ldr	r1, [r7, #4]
 800706a:	4618      	mov	r0, r3
 800706c:	f7fe ffb7 	bl	8005fde <mbedtls_mpi_copy>
 8007070:	6278      	str	r0, [r7, #36]	@ 0x24
 8007072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007074:	2b00      	cmp	r3, #0
 8007076:	d132      	bne.n	80070de <mbedtls_mpi_sub_abs+0xac>
        B = &TB;
 8007078:	f107 0314 	add.w	r3, r7, #20
 800707c:	607b      	str	r3, [r7, #4]
    }

    if( X != A )
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	429a      	cmp	r2, r3
 8007084:	d007      	beq.n	8007096 <mbedtls_mpi_sub_abs+0x64>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 8007086:	68b9      	ldr	r1, [r7, #8]
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f7fe ffa8 	bl	8005fde <mbedtls_mpi_copy>
 800708e:	6278      	str	r0, [r7, #36]	@ 0x24
 8007090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007092:	2b00      	cmp	r3, #0
 8007094:	d123      	bne.n	80070de <mbedtls_mpi_sub_abs+0xac>

    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2201      	movs	r2, #1
 800709a:	601a      	str	r2, [r3, #0]

    ret = 0;
 800709c:	2300      	movs	r3, #0
 800709e:	627b      	str	r3, [r7, #36]	@ 0x24

    for( n = B->n; n > 0; n-- )
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	623b      	str	r3, [r7, #32]
 80070a6:	e00d      	b.n	80070c4 <mbedtls_mpi_sub_abs+0x92>
        if( B->p[n - 1] != 0 )
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	689a      	ldr	r2, [r3, #8]
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80070b2:	3b01      	subs	r3, #1
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4413      	add	r3, r2
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d106      	bne.n	80070cc <mbedtls_mpi_sub_abs+0x9a>
    for( n = B->n; n > 0; n-- )
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	3b01      	subs	r3, #1
 80070c2:	623b      	str	r3, [r7, #32]
 80070c4:	6a3b      	ldr	r3, [r7, #32]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1ee      	bne.n	80070a8 <mbedtls_mpi_sub_abs+0x76>
 80070ca:	e000      	b.n	80070ce <mbedtls_mpi_sub_abs+0x9c>
            break;
 80070cc:	bf00      	nop

    mpi_sub_hlp( n, B->p, X->p );
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6899      	ldr	r1, [r3, #8]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	461a      	mov	r2, r3
 80070d8:	6a38      	ldr	r0, [r7, #32]
 80070da:	f7ff ff50 	bl	8006f7e <mpi_sub_hlp>

cleanup:

    mbedtls_mpi_free( &TB );
 80070de:	f107 0314 	add.w	r3, r7, #20
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7fe feac 	bl	8005e40 <mbedtls_mpi_free>

    return( ret );
 80070e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3728      	adds	r7, #40	@ 0x28
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <mbedtls_mpi_add_mpi>:

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b086      	sub	sp, #24
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	60f8      	str	r0, [r7, #12]
 80070fa:	60b9      	str	r1, [r7, #8]
 80070fc:	607a      	str	r2, [r7, #4]
    int ret, s;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	613b      	str	r3, [r7, #16]
    if( A->s * B->s < 0 )
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	6812      	ldr	r2, [r2, #0]
 800710c:	fb02 f303 	mul.w	r3, r2, r3
 8007110:	2b00      	cmp	r3, #0
 8007112:	da21      	bge.n	8007158 <mbedtls_mpi_add_mpi+0x66>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 8007114:	6879      	ldr	r1, [r7, #4]
 8007116:	68b8      	ldr	r0, [r7, #8]
 8007118:	f7ff fd43 	bl	8006ba2 <mbedtls_mpi_cmp_abs>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	db0c      	blt.n	800713c <mbedtls_mpi_add_mpi+0x4a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	68b9      	ldr	r1, [r7, #8]
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f7ff ff83 	bl	8007032 <mbedtls_mpi_sub_abs>
 800712c:	6178      	str	r0, [r7, #20]
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d11d      	bne.n	8007170 <mbedtls_mpi_add_mpi+0x7e>
            X->s =  s;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	601a      	str	r2, [r3, #0]
 800713a:	e019      	b.n	8007170 <mbedtls_mpi_add_mpi+0x7e>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	6879      	ldr	r1, [r7, #4]
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	f7ff ff76 	bl	8007032 <mbedtls_mpi_sub_abs>
 8007146:	6178      	str	r0, [r7, #20]
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d110      	bne.n	8007170 <mbedtls_mpi_add_mpi+0x7e>
            X->s = -s;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	425a      	negs	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	601a      	str	r2, [r3, #0]
 8007156:	e00b      	b.n	8007170 <mbedtls_mpi_add_mpi+0x7e>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	68b9      	ldr	r1, [r7, #8]
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f7ff fe5f 	bl	8006e20 <mbedtls_mpi_add_abs>
 8007162:	6178      	str	r0, [r7, #20]
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d102      	bne.n	8007170 <mbedtls_mpi_add_mpi+0x7e>
        X->s = s;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	601a      	str	r2, [r3, #0]
    }

cleanup:

    return( ret );
 8007170:	697b      	ldr	r3, [r7, #20]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3718      	adds	r7, #24
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <mbedtls_mpi_sub_mpi>:

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b086      	sub	sp, #24
 800717e:	af00      	add	r7, sp, #0
 8007180:	60f8      	str	r0, [r7, #12]
 8007182:	60b9      	str	r1, [r7, #8]
 8007184:	607a      	str	r2, [r7, #4]
    int ret, s;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	613b      	str	r3, [r7, #16]
    if( A->s * B->s > 0 )
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	6812      	ldr	r2, [r2, #0]
 8007194:	fb02 f303 	mul.w	r3, r2, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	dd21      	ble.n	80071e0 <mbedtls_mpi_sub_mpi+0x66>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 800719c:	6879      	ldr	r1, [r7, #4]
 800719e:	68b8      	ldr	r0, [r7, #8]
 80071a0:	f7ff fcff 	bl	8006ba2 <mbedtls_mpi_cmp_abs>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	db0c      	blt.n	80071c4 <mbedtls_mpi_sub_mpi+0x4a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	68b9      	ldr	r1, [r7, #8]
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f7ff ff3f 	bl	8007032 <mbedtls_mpi_sub_abs>
 80071b4:	6178      	str	r0, [r7, #20]
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d11d      	bne.n	80071f8 <mbedtls_mpi_sub_mpi+0x7e>
            X->s =  s;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	e019      	b.n	80071f8 <mbedtls_mpi_sub_mpi+0x7e>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	6879      	ldr	r1, [r7, #4]
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f7ff ff32 	bl	8007032 <mbedtls_mpi_sub_abs>
 80071ce:	6178      	str	r0, [r7, #20]
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d110      	bne.n	80071f8 <mbedtls_mpi_sub_mpi+0x7e>
            X->s = -s;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	425a      	negs	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	e00b      	b.n	80071f8 <mbedtls_mpi_sub_mpi+0x7e>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	68b9      	ldr	r1, [r7, #8]
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f7ff fe1b 	bl	8006e20 <mbedtls_mpi_add_abs>
 80071ea:	6178      	str	r0, [r7, #20]
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d102      	bne.n	80071f8 <mbedtls_mpi_sub_mpi+0x7e>
        X->s = s;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	601a      	str	r2, [r3, #0]
    }

cleanup:

    return( ret );
 80071f8:	697b      	ldr	r3, [r7, #20]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3718      	adds	r7, #24
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <mbedtls_mpi_add_int>:

/*
 * Signed addition: X = A + b
 */
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b088      	sub	sp, #32
 8007206:	af00      	add	r7, sp, #0
 8007208:	60f8      	str	r0, [r7, #12]
 800720a:	60b9      	str	r1, [r7, #8]
 800720c:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	bfb8      	it	lt
 8007214:	425b      	neglt	r3, r3
 8007216:	613b      	str	r3, [r7, #16]
    _B.s = ( b < 0 ) ? -1 : 1;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	da02      	bge.n	8007224 <mbedtls_mpi_add_int+0x22>
 800721e:	f04f 33ff 	mov.w	r3, #4294967295
 8007222:	e000      	b.n	8007226 <mbedtls_mpi_add_int+0x24>
 8007224:	2301      	movs	r3, #1
 8007226:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 8007228:	2301      	movs	r3, #1
 800722a:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 800722c:	f107 0310 	add.w	r3, r7, #16
 8007230:	61fb      	str	r3, [r7, #28]

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 8007232:	f107 0314 	add.w	r3, r7, #20
 8007236:	461a      	mov	r2, r3
 8007238:	68b9      	ldr	r1, [r7, #8]
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f7ff ff59 	bl	80070f2 <mbedtls_mpi_add_mpi>
 8007240:	4603      	mov	r3, r0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3720      	adds	r7, #32
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <mbedtls_mpi_sub_int>:

/*
 * Signed subtraction: X = A - b
 */
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b088      	sub	sp, #32
 800724e:	af00      	add	r7, sp, #0
 8007250:	60f8      	str	r0, [r7, #12]
 8007252:	60b9      	str	r1, [r7, #8]
 8007254:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	bfb8      	it	lt
 800725c:	425b      	neglt	r3, r3
 800725e:	613b      	str	r3, [r7, #16]
    _B.s = ( b < 0 ) ? -1 : 1;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	da02      	bge.n	800726c <mbedtls_mpi_sub_int+0x22>
 8007266:	f04f 33ff 	mov.w	r3, #4294967295
 800726a:	e000      	b.n	800726e <mbedtls_mpi_sub_int+0x24>
 800726c:	2301      	movs	r3, #1
 800726e:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 8007270:	2301      	movs	r3, #1
 8007272:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 8007274:	f107 0310 	add.w	r3, r7, #16
 8007278:	61fb      	str	r3, [r7, #28]

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 800727a:	f107 0314 	add.w	r3, r7, #20
 800727e:	461a      	mov	r2, r3
 8007280:	68b9      	ldr	r1, [r7, #8]
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f7ff ff79 	bl	800717a <mbedtls_mpi_sub_mpi>
 8007288:	4603      	mov	r3, r0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3720      	adds	r7, #32
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 8007292:	b480      	push	{r7}
 8007294:	b09f      	sub	sp, #124	@ 0x7c
 8007296:	af00      	add	r7, sp, #0
 8007298:	60f8      	str	r0, [r7, #12]
 800729a:	60b9      	str	r1, [r7, #8]
 800729c:	607a      	str	r2, [r7, #4]
 800729e:	603b      	str	r3, [r7, #0]
    mbedtls_mpi_uint c = 0, t = 0;
 80072a0:	2300      	movs	r3, #0
 80072a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80072a4:	2300      	movs	r3, #0
 80072a6:	673b      	str	r3, [r7, #112]	@ 0x70
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 80072a8:	f000 bf49 	b.w	800813e <mpi_mul_hlp+0xeac>
    {
        MULADDC_INIT
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	0c1b      	lsrs	r3, r3, #16
 80072b6:	62bb      	str	r3, [r7, #40]	@ 0x28
        MULADDC_CORE   MULADDC_CORE
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	627b      	str	r3, [r7, #36]	@ 0x24
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	0c1b      	lsrs	r3, r3, #16
 80072c6:	623b      	str	r3, [r7, #32]
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	3304      	adds	r3, #4
 80072cc:	60bb      	str	r3, [r7, #8]
 80072ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072d2:	fb02 f303 	mul.w	r3, r2, r3
 80072d6:	61fb      	str	r3, [r7, #28]
 80072d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072dc:	fb02 f303 	mul.w	r3, r2, r3
 80072e0:	61bb      	str	r3, [r7, #24]
 80072e2:	6a3b      	ldr	r3, [r7, #32]
 80072e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072e6:	fb02 f303 	mul.w	r3, r2, r3
 80072ea:	617b      	str	r3, [r7, #20]
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072f0:	fb02 f303 	mul.w	r3, r2, r3
 80072f4:	613b      	str	r3, [r7, #16]
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	0c1b      	lsrs	r3, r3, #16
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	4413      	add	r3, r2
 80072fe:	613b      	str	r3, [r7, #16]
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	0c1b      	lsrs	r3, r3, #16
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	4413      	add	r3, r2
 8007308:	613b      	str	r3, [r7, #16]
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	041b      	lsls	r3, r3, #16
 800730e:	61fb      	str	r3, [r7, #28]
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	041b      	lsls	r3, r3, #16
 8007314:	617b      	str	r3, [r7, #20]
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	4413      	add	r3, r2
 800731c:	61bb      	str	r3, [r7, #24]
 800731e:	69ba      	ldr	r2, [r7, #24]
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	429a      	cmp	r2, r3
 8007324:	bf34      	ite	cc
 8007326:	2301      	movcc	r3, #1
 8007328:	2300      	movcs	r3, #0
 800732a:	b2db      	uxtb	r3, r3
 800732c:	461a      	mov	r2, r3
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	4413      	add	r3, r2
 8007332:	613b      	str	r3, [r7, #16]
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	4413      	add	r3, r2
 800733a:	61bb      	str	r3, [r7, #24]
 800733c:	69ba      	ldr	r2, [r7, #24]
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	429a      	cmp	r2, r3
 8007342:	bf34      	ite	cc
 8007344:	2301      	movcc	r3, #1
 8007346:	2300      	movcs	r3, #0
 8007348:	b2db      	uxtb	r3, r3
 800734a:	461a      	mov	r2, r3
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	4413      	add	r3, r2
 8007350:	613b      	str	r3, [r7, #16]
 8007352:	69ba      	ldr	r2, [r7, #24]
 8007354:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007356:	4413      	add	r3, r2
 8007358:	61bb      	str	r3, [r7, #24]
 800735a:	69ba      	ldr	r2, [r7, #24]
 800735c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800735e:	429a      	cmp	r2, r3
 8007360:	bf34      	ite	cc
 8007362:	2301      	movcc	r3, #1
 8007364:	2300      	movcs	r3, #0
 8007366:	b2db      	uxtb	r3, r3
 8007368:	461a      	mov	r2, r3
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	4413      	add	r3, r2
 800736e:	613b      	str	r3, [r7, #16]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	69ba      	ldr	r2, [r7, #24]
 8007376:	4413      	add	r3, r2
 8007378:	61bb      	str	r3, [r7, #24]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	69ba      	ldr	r2, [r7, #24]
 8007380:	429a      	cmp	r2, r3
 8007382:	bf34      	ite	cc
 8007384:	2301      	movcc	r3, #1
 8007386:	2300      	movcs	r3, #0
 8007388:	b2db      	uxtb	r3, r3
 800738a:	461a      	mov	r2, r3
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	4413      	add	r3, r2
 8007390:	613b      	str	r3, [r7, #16]
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	677b      	str	r3, [r7, #116]	@ 0x74
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	1d1a      	adds	r2, r3, #4
 800739a:	607a      	str	r2, [r7, #4]
 800739c:	69ba      	ldr	r2, [r7, #24]
 800739e:	601a      	str	r2, [r3, #0]
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	0c1b      	lsrs	r3, r3, #16
 80073ae:	623b      	str	r3, [r7, #32]
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	3304      	adds	r3, #4
 80073b4:	60bb      	str	r3, [r7, #8]
 80073b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073ba:	fb02 f303 	mul.w	r3, r2, r3
 80073be:	61fb      	str	r3, [r7, #28]
 80073c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073c4:	fb02 f303 	mul.w	r3, r2, r3
 80073c8:	61bb      	str	r3, [r7, #24]
 80073ca:	6a3b      	ldr	r3, [r7, #32]
 80073cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073ce:	fb02 f303 	mul.w	r3, r2, r3
 80073d2:	617b      	str	r3, [r7, #20]
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073d8:	fb02 f303 	mul.w	r3, r2, r3
 80073dc:	613b      	str	r3, [r7, #16]
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	0c1b      	lsrs	r3, r3, #16
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	4413      	add	r3, r2
 80073e6:	613b      	str	r3, [r7, #16]
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	0c1b      	lsrs	r3, r3, #16
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	4413      	add	r3, r2
 80073f0:	613b      	str	r3, [r7, #16]
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	041b      	lsls	r3, r3, #16
 80073f6:	61fb      	str	r3, [r7, #28]
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	041b      	lsls	r3, r3, #16
 80073fc:	617b      	str	r3, [r7, #20]
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	4413      	add	r3, r2
 8007404:	61bb      	str	r3, [r7, #24]
 8007406:	69ba      	ldr	r2, [r7, #24]
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	429a      	cmp	r2, r3
 800740c:	bf34      	ite	cc
 800740e:	2301      	movcc	r3, #1
 8007410:	2300      	movcs	r3, #0
 8007412:	b2db      	uxtb	r3, r3
 8007414:	461a      	mov	r2, r3
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	4413      	add	r3, r2
 800741a:	613b      	str	r3, [r7, #16]
 800741c:	69ba      	ldr	r2, [r7, #24]
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	4413      	add	r3, r2
 8007422:	61bb      	str	r3, [r7, #24]
 8007424:	69ba      	ldr	r2, [r7, #24]
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	429a      	cmp	r2, r3
 800742a:	bf34      	ite	cc
 800742c:	2301      	movcc	r3, #1
 800742e:	2300      	movcs	r3, #0
 8007430:	b2db      	uxtb	r3, r3
 8007432:	461a      	mov	r2, r3
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	4413      	add	r3, r2
 8007438:	613b      	str	r3, [r7, #16]
 800743a:	69ba      	ldr	r2, [r7, #24]
 800743c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800743e:	4413      	add	r3, r2
 8007440:	61bb      	str	r3, [r7, #24]
 8007442:	69ba      	ldr	r2, [r7, #24]
 8007444:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007446:	429a      	cmp	r2, r3
 8007448:	bf34      	ite	cc
 800744a:	2301      	movcc	r3, #1
 800744c:	2300      	movcs	r3, #0
 800744e:	b2db      	uxtb	r3, r3
 8007450:	461a      	mov	r2, r3
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	4413      	add	r3, r2
 8007456:	613b      	str	r3, [r7, #16]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	4413      	add	r3, r2
 8007460:	61bb      	str	r3, [r7, #24]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	69ba      	ldr	r2, [r7, #24]
 8007468:	429a      	cmp	r2, r3
 800746a:	bf34      	ite	cc
 800746c:	2301      	movcc	r3, #1
 800746e:	2300      	movcs	r3, #0
 8007470:	b2db      	uxtb	r3, r3
 8007472:	461a      	mov	r2, r3
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	4413      	add	r3, r2
 8007478:	613b      	str	r3, [r7, #16]
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	677b      	str	r3, [r7, #116]	@ 0x74
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	1d1a      	adds	r2, r3, #4
 8007482:	607a      	str	r2, [r7, #4]
 8007484:	69ba      	ldr	r2, [r7, #24]
 8007486:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	b29b      	uxth	r3, r3
 800748e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	0c1b      	lsrs	r3, r3, #16
 8007496:	623b      	str	r3, [r7, #32]
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	3304      	adds	r3, #4
 800749c:	60bb      	str	r3, [r7, #8]
 800749e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074a2:	fb02 f303 	mul.w	r3, r2, r3
 80074a6:	61fb      	str	r3, [r7, #28]
 80074a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074ac:	fb02 f303 	mul.w	r3, r2, r3
 80074b0:	61bb      	str	r3, [r7, #24]
 80074b2:	6a3b      	ldr	r3, [r7, #32]
 80074b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074b6:	fb02 f303 	mul.w	r3, r2, r3
 80074ba:	617b      	str	r3, [r7, #20]
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074c0:	fb02 f303 	mul.w	r3, r2, r3
 80074c4:	613b      	str	r3, [r7, #16]
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	0c1b      	lsrs	r3, r3, #16
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	4413      	add	r3, r2
 80074ce:	613b      	str	r3, [r7, #16]
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	0c1b      	lsrs	r3, r3, #16
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	4413      	add	r3, r2
 80074d8:	613b      	str	r3, [r7, #16]
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	041b      	lsls	r3, r3, #16
 80074de:	61fb      	str	r3, [r7, #28]
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	041b      	lsls	r3, r3, #16
 80074e4:	617b      	str	r3, [r7, #20]
 80074e6:	69ba      	ldr	r2, [r7, #24]
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	4413      	add	r3, r2
 80074ec:	61bb      	str	r3, [r7, #24]
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	bf34      	ite	cc
 80074f6:	2301      	movcc	r3, #1
 80074f8:	2300      	movcs	r3, #0
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	461a      	mov	r2, r3
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	4413      	add	r3, r2
 8007502:	613b      	str	r3, [r7, #16]
 8007504:	69ba      	ldr	r2, [r7, #24]
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	4413      	add	r3, r2
 800750a:	61bb      	str	r3, [r7, #24]
 800750c:	69ba      	ldr	r2, [r7, #24]
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	429a      	cmp	r2, r3
 8007512:	bf34      	ite	cc
 8007514:	2301      	movcc	r3, #1
 8007516:	2300      	movcs	r3, #0
 8007518:	b2db      	uxtb	r3, r3
 800751a:	461a      	mov	r2, r3
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	4413      	add	r3, r2
 8007520:	613b      	str	r3, [r7, #16]
 8007522:	69ba      	ldr	r2, [r7, #24]
 8007524:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007526:	4413      	add	r3, r2
 8007528:	61bb      	str	r3, [r7, #24]
 800752a:	69ba      	ldr	r2, [r7, #24]
 800752c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800752e:	429a      	cmp	r2, r3
 8007530:	bf34      	ite	cc
 8007532:	2301      	movcc	r3, #1
 8007534:	2300      	movcs	r3, #0
 8007536:	b2db      	uxtb	r3, r3
 8007538:	461a      	mov	r2, r3
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	4413      	add	r3, r2
 800753e:	613b      	str	r3, [r7, #16]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	69ba      	ldr	r2, [r7, #24]
 8007546:	4413      	add	r3, r2
 8007548:	61bb      	str	r3, [r7, #24]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	69ba      	ldr	r2, [r7, #24]
 8007550:	429a      	cmp	r2, r3
 8007552:	bf34      	ite	cc
 8007554:	2301      	movcc	r3, #1
 8007556:	2300      	movcs	r3, #0
 8007558:	b2db      	uxtb	r3, r3
 800755a:	461a      	mov	r2, r3
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	4413      	add	r3, r2
 8007560:	613b      	str	r3, [r7, #16]
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	677b      	str	r3, [r7, #116]	@ 0x74
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	1d1a      	adds	r2, r3, #4
 800756a:	607a      	str	r2, [r7, #4]
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	b29b      	uxth	r3, r3
 8007576:	627b      	str	r3, [r7, #36]	@ 0x24
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	0c1b      	lsrs	r3, r3, #16
 800757e:	623b      	str	r3, [r7, #32]
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	3304      	adds	r3, #4
 8007584:	60bb      	str	r3, [r7, #8]
 8007586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007588:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800758a:	fb02 f303 	mul.w	r3, r2, r3
 800758e:	61fb      	str	r3, [r7, #28]
 8007590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007594:	fb02 f303 	mul.w	r3, r2, r3
 8007598:	61bb      	str	r3, [r7, #24]
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800759e:	fb02 f303 	mul.w	r3, r2, r3
 80075a2:	617b      	str	r3, [r7, #20]
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075a8:	fb02 f303 	mul.w	r3, r2, r3
 80075ac:	613b      	str	r3, [r7, #16]
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	0c1b      	lsrs	r3, r3, #16
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	4413      	add	r3, r2
 80075b6:	613b      	str	r3, [r7, #16]
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	0c1b      	lsrs	r3, r3, #16
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	4413      	add	r3, r2
 80075c0:	613b      	str	r3, [r7, #16]
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	041b      	lsls	r3, r3, #16
 80075c6:	61fb      	str	r3, [r7, #28]
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	041b      	lsls	r3, r3, #16
 80075cc:	617b      	str	r3, [r7, #20]
 80075ce:	69ba      	ldr	r2, [r7, #24]
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	4413      	add	r3, r2
 80075d4:	61bb      	str	r3, [r7, #24]
 80075d6:	69ba      	ldr	r2, [r7, #24]
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	429a      	cmp	r2, r3
 80075dc:	bf34      	ite	cc
 80075de:	2301      	movcc	r3, #1
 80075e0:	2300      	movcs	r3, #0
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	461a      	mov	r2, r3
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	4413      	add	r3, r2
 80075ea:	613b      	str	r3, [r7, #16]
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	4413      	add	r3, r2
 80075f2:	61bb      	str	r3, [r7, #24]
 80075f4:	69ba      	ldr	r2, [r7, #24]
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	bf34      	ite	cc
 80075fc:	2301      	movcc	r3, #1
 80075fe:	2300      	movcs	r3, #0
 8007600:	b2db      	uxtb	r3, r3
 8007602:	461a      	mov	r2, r3
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	4413      	add	r3, r2
 8007608:	613b      	str	r3, [r7, #16]
 800760a:	69ba      	ldr	r2, [r7, #24]
 800760c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800760e:	4413      	add	r3, r2
 8007610:	61bb      	str	r3, [r7, #24]
 8007612:	69ba      	ldr	r2, [r7, #24]
 8007614:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007616:	429a      	cmp	r2, r3
 8007618:	bf34      	ite	cc
 800761a:	2301      	movcc	r3, #1
 800761c:	2300      	movcs	r3, #0
 800761e:	b2db      	uxtb	r3, r3
 8007620:	461a      	mov	r2, r3
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	4413      	add	r3, r2
 8007626:	613b      	str	r3, [r7, #16]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	69ba      	ldr	r2, [r7, #24]
 800762e:	4413      	add	r3, r2
 8007630:	61bb      	str	r3, [r7, #24]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	69ba      	ldr	r2, [r7, #24]
 8007638:	429a      	cmp	r2, r3
 800763a:	bf34      	ite	cc
 800763c:	2301      	movcc	r3, #1
 800763e:	2300      	movcs	r3, #0
 8007640:	b2db      	uxtb	r3, r3
 8007642:	461a      	mov	r2, r3
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	4413      	add	r3, r2
 8007648:	613b      	str	r3, [r7, #16]
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	677b      	str	r3, [r7, #116]	@ 0x74
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	1d1a      	adds	r2, r3, #4
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	69ba      	ldr	r2, [r7, #24]
 8007656:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	b29b      	uxth	r3, r3
 800765e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	0c1b      	lsrs	r3, r3, #16
 8007666:	623b      	str	r3, [r7, #32]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	3304      	adds	r3, #4
 800766c:	60bb      	str	r3, [r7, #8]
 800766e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007670:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007672:	fb02 f303 	mul.w	r3, r2, r3
 8007676:	61fb      	str	r3, [r7, #28]
 8007678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800767c:	fb02 f303 	mul.w	r3, r2, r3
 8007680:	61bb      	str	r3, [r7, #24]
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007686:	fb02 f303 	mul.w	r3, r2, r3
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	6a3b      	ldr	r3, [r7, #32]
 800768e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007690:	fb02 f303 	mul.w	r3, r2, r3
 8007694:	613b      	str	r3, [r7, #16]
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	0c1b      	lsrs	r3, r3, #16
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	4413      	add	r3, r2
 800769e:	613b      	str	r3, [r7, #16]
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	0c1b      	lsrs	r3, r3, #16
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	4413      	add	r3, r2
 80076a8:	613b      	str	r3, [r7, #16]
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	041b      	lsls	r3, r3, #16
 80076ae:	61fb      	str	r3, [r7, #28]
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	041b      	lsls	r3, r3, #16
 80076b4:	617b      	str	r3, [r7, #20]
 80076b6:	69ba      	ldr	r2, [r7, #24]
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	4413      	add	r3, r2
 80076bc:	61bb      	str	r3, [r7, #24]
 80076be:	69ba      	ldr	r2, [r7, #24]
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	bf34      	ite	cc
 80076c6:	2301      	movcc	r3, #1
 80076c8:	2300      	movcs	r3, #0
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	461a      	mov	r2, r3
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	4413      	add	r3, r2
 80076d2:	613b      	str	r3, [r7, #16]
 80076d4:	69ba      	ldr	r2, [r7, #24]
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	4413      	add	r3, r2
 80076da:	61bb      	str	r3, [r7, #24]
 80076dc:	69ba      	ldr	r2, [r7, #24]
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	bf34      	ite	cc
 80076e4:	2301      	movcc	r3, #1
 80076e6:	2300      	movcs	r3, #0
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	461a      	mov	r2, r3
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	4413      	add	r3, r2
 80076f0:	613b      	str	r3, [r7, #16]
 80076f2:	69ba      	ldr	r2, [r7, #24]
 80076f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076f6:	4413      	add	r3, r2
 80076f8:	61bb      	str	r3, [r7, #24]
 80076fa:	69ba      	ldr	r2, [r7, #24]
 80076fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076fe:	429a      	cmp	r2, r3
 8007700:	bf34      	ite	cc
 8007702:	2301      	movcc	r3, #1
 8007704:	2300      	movcs	r3, #0
 8007706:	b2db      	uxtb	r3, r3
 8007708:	461a      	mov	r2, r3
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	4413      	add	r3, r2
 800770e:	613b      	str	r3, [r7, #16]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	69ba      	ldr	r2, [r7, #24]
 8007716:	4413      	add	r3, r2
 8007718:	61bb      	str	r3, [r7, #24]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	429a      	cmp	r2, r3
 8007722:	bf34      	ite	cc
 8007724:	2301      	movcc	r3, #1
 8007726:	2300      	movcs	r3, #0
 8007728:	b2db      	uxtb	r3, r3
 800772a:	461a      	mov	r2, r3
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	4413      	add	r3, r2
 8007730:	613b      	str	r3, [r7, #16]
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	677b      	str	r3, [r7, #116]	@ 0x74
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	1d1a      	adds	r2, r3, #4
 800773a:	607a      	str	r2, [r7, #4]
 800773c:	69ba      	ldr	r2, [r7, #24]
 800773e:	601a      	str	r2, [r3, #0]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	b29b      	uxth	r3, r3
 8007746:	627b      	str	r3, [r7, #36]	@ 0x24
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	0c1b      	lsrs	r3, r3, #16
 800774e:	623b      	str	r3, [r7, #32]
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	3304      	adds	r3, #4
 8007754:	60bb      	str	r3, [r7, #8]
 8007756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007758:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800775a:	fb02 f303 	mul.w	r3, r2, r3
 800775e:	61fb      	str	r3, [r7, #28]
 8007760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007762:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007764:	fb02 f303 	mul.w	r3, r2, r3
 8007768:	61bb      	str	r3, [r7, #24]
 800776a:	6a3b      	ldr	r3, [r7, #32]
 800776c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800776e:	fb02 f303 	mul.w	r3, r2, r3
 8007772:	617b      	str	r3, [r7, #20]
 8007774:	6a3b      	ldr	r3, [r7, #32]
 8007776:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007778:	fb02 f303 	mul.w	r3, r2, r3
 800777c:	613b      	str	r3, [r7, #16]
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	0c1b      	lsrs	r3, r3, #16
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	4413      	add	r3, r2
 8007786:	613b      	str	r3, [r7, #16]
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	0c1b      	lsrs	r3, r3, #16
 800778c:	693a      	ldr	r2, [r7, #16]
 800778e:	4413      	add	r3, r2
 8007790:	613b      	str	r3, [r7, #16]
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	041b      	lsls	r3, r3, #16
 8007796:	61fb      	str	r3, [r7, #28]
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	041b      	lsls	r3, r3, #16
 800779c:	617b      	str	r3, [r7, #20]
 800779e:	69ba      	ldr	r2, [r7, #24]
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	4413      	add	r3, r2
 80077a4:	61bb      	str	r3, [r7, #24]
 80077a6:	69ba      	ldr	r2, [r7, #24]
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	bf34      	ite	cc
 80077ae:	2301      	movcc	r3, #1
 80077b0:	2300      	movcs	r3, #0
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	461a      	mov	r2, r3
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	4413      	add	r3, r2
 80077ba:	613b      	str	r3, [r7, #16]
 80077bc:	69ba      	ldr	r2, [r7, #24]
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	4413      	add	r3, r2
 80077c2:	61bb      	str	r3, [r7, #24]
 80077c4:	69ba      	ldr	r2, [r7, #24]
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	bf34      	ite	cc
 80077cc:	2301      	movcc	r3, #1
 80077ce:	2300      	movcs	r3, #0
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	461a      	mov	r2, r3
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	4413      	add	r3, r2
 80077d8:	613b      	str	r3, [r7, #16]
 80077da:	69ba      	ldr	r2, [r7, #24]
 80077dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077de:	4413      	add	r3, r2
 80077e0:	61bb      	str	r3, [r7, #24]
 80077e2:	69ba      	ldr	r2, [r7, #24]
 80077e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077e6:	429a      	cmp	r2, r3
 80077e8:	bf34      	ite	cc
 80077ea:	2301      	movcc	r3, #1
 80077ec:	2300      	movcs	r3, #0
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	461a      	mov	r2, r3
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	4413      	add	r3, r2
 80077f6:	613b      	str	r3, [r7, #16]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	4413      	add	r3, r2
 8007800:	61bb      	str	r3, [r7, #24]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	69ba      	ldr	r2, [r7, #24]
 8007808:	429a      	cmp	r2, r3
 800780a:	bf34      	ite	cc
 800780c:	2301      	movcc	r3, #1
 800780e:	2300      	movcs	r3, #0
 8007810:	b2db      	uxtb	r3, r3
 8007812:	461a      	mov	r2, r3
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	4413      	add	r3, r2
 8007818:	613b      	str	r3, [r7, #16]
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	677b      	str	r3, [r7, #116]	@ 0x74
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	1d1a      	adds	r2, r3, #4
 8007822:	607a      	str	r2, [r7, #4]
 8007824:	69ba      	ldr	r2, [r7, #24]
 8007826:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	b29b      	uxth	r3, r3
 800782e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	0c1b      	lsrs	r3, r3, #16
 8007836:	623b      	str	r3, [r7, #32]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	3304      	adds	r3, #4
 800783c:	60bb      	str	r3, [r7, #8]
 800783e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007840:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007842:	fb02 f303 	mul.w	r3, r2, r3
 8007846:	61fb      	str	r3, [r7, #28]
 8007848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800784c:	fb02 f303 	mul.w	r3, r2, r3
 8007850:	61bb      	str	r3, [r7, #24]
 8007852:	6a3b      	ldr	r3, [r7, #32]
 8007854:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007856:	fb02 f303 	mul.w	r3, r2, r3
 800785a:	617b      	str	r3, [r7, #20]
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007860:	fb02 f303 	mul.w	r3, r2, r3
 8007864:	613b      	str	r3, [r7, #16]
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	0c1b      	lsrs	r3, r3, #16
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	4413      	add	r3, r2
 800786e:	613b      	str	r3, [r7, #16]
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	0c1b      	lsrs	r3, r3, #16
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	4413      	add	r3, r2
 8007878:	613b      	str	r3, [r7, #16]
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	041b      	lsls	r3, r3, #16
 800787e:	61fb      	str	r3, [r7, #28]
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	041b      	lsls	r3, r3, #16
 8007884:	617b      	str	r3, [r7, #20]
 8007886:	69ba      	ldr	r2, [r7, #24]
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	4413      	add	r3, r2
 800788c:	61bb      	str	r3, [r7, #24]
 800788e:	69ba      	ldr	r2, [r7, #24]
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	429a      	cmp	r2, r3
 8007894:	bf34      	ite	cc
 8007896:	2301      	movcc	r3, #1
 8007898:	2300      	movcs	r3, #0
 800789a:	b2db      	uxtb	r3, r3
 800789c:	461a      	mov	r2, r3
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	4413      	add	r3, r2
 80078a2:	613b      	str	r3, [r7, #16]
 80078a4:	69ba      	ldr	r2, [r7, #24]
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	4413      	add	r3, r2
 80078aa:	61bb      	str	r3, [r7, #24]
 80078ac:	69ba      	ldr	r2, [r7, #24]
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	bf34      	ite	cc
 80078b4:	2301      	movcc	r3, #1
 80078b6:	2300      	movcs	r3, #0
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	461a      	mov	r2, r3
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	4413      	add	r3, r2
 80078c0:	613b      	str	r3, [r7, #16]
 80078c2:	69ba      	ldr	r2, [r7, #24]
 80078c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078c6:	4413      	add	r3, r2
 80078c8:	61bb      	str	r3, [r7, #24]
 80078ca:	69ba      	ldr	r2, [r7, #24]
 80078cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078ce:	429a      	cmp	r2, r3
 80078d0:	bf34      	ite	cc
 80078d2:	2301      	movcc	r3, #1
 80078d4:	2300      	movcs	r3, #0
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	461a      	mov	r2, r3
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	4413      	add	r3, r2
 80078de:	613b      	str	r3, [r7, #16]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	69ba      	ldr	r2, [r7, #24]
 80078e6:	4413      	add	r3, r2
 80078e8:	61bb      	str	r3, [r7, #24]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	69ba      	ldr	r2, [r7, #24]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	bf34      	ite	cc
 80078f4:	2301      	movcc	r3, #1
 80078f6:	2300      	movcs	r3, #0
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	461a      	mov	r2, r3
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	4413      	add	r3, r2
 8007900:	613b      	str	r3, [r7, #16]
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	677b      	str	r3, [r7, #116]	@ 0x74
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	1d1a      	adds	r2, r3, #4
 800790a:	607a      	str	r2, [r7, #4]
 800790c:	69ba      	ldr	r2, [r7, #24]
 800790e:	601a      	str	r2, [r3, #0]
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	b29b      	uxth	r3, r3
 8007916:	627b      	str	r3, [r7, #36]	@ 0x24
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	0c1b      	lsrs	r3, r3, #16
 800791e:	623b      	str	r3, [r7, #32]
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	3304      	adds	r3, #4
 8007924:	60bb      	str	r3, [r7, #8]
 8007926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007928:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800792a:	fb02 f303 	mul.w	r3, r2, r3
 800792e:	61fb      	str	r3, [r7, #28]
 8007930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007932:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007934:	fb02 f303 	mul.w	r3, r2, r3
 8007938:	61bb      	str	r3, [r7, #24]
 800793a:	6a3b      	ldr	r3, [r7, #32]
 800793c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800793e:	fb02 f303 	mul.w	r3, r2, r3
 8007942:	617b      	str	r3, [r7, #20]
 8007944:	6a3b      	ldr	r3, [r7, #32]
 8007946:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007948:	fb02 f303 	mul.w	r3, r2, r3
 800794c:	613b      	str	r3, [r7, #16]
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	0c1b      	lsrs	r3, r3, #16
 8007952:	693a      	ldr	r2, [r7, #16]
 8007954:	4413      	add	r3, r2
 8007956:	613b      	str	r3, [r7, #16]
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	0c1b      	lsrs	r3, r3, #16
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	4413      	add	r3, r2
 8007960:	613b      	str	r3, [r7, #16]
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	041b      	lsls	r3, r3, #16
 8007966:	61fb      	str	r3, [r7, #28]
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	041b      	lsls	r3, r3, #16
 800796c:	617b      	str	r3, [r7, #20]
 800796e:	69ba      	ldr	r2, [r7, #24]
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	4413      	add	r3, r2
 8007974:	61bb      	str	r3, [r7, #24]
 8007976:	69ba      	ldr	r2, [r7, #24]
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	429a      	cmp	r2, r3
 800797c:	bf34      	ite	cc
 800797e:	2301      	movcc	r3, #1
 8007980:	2300      	movcs	r3, #0
 8007982:	b2db      	uxtb	r3, r3
 8007984:	461a      	mov	r2, r3
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	4413      	add	r3, r2
 800798a:	613b      	str	r3, [r7, #16]
 800798c:	69ba      	ldr	r2, [r7, #24]
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	4413      	add	r3, r2
 8007992:	61bb      	str	r3, [r7, #24]
 8007994:	69ba      	ldr	r2, [r7, #24]
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	429a      	cmp	r2, r3
 800799a:	bf34      	ite	cc
 800799c:	2301      	movcc	r3, #1
 800799e:	2300      	movcs	r3, #0
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	461a      	mov	r2, r3
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	4413      	add	r3, r2
 80079a8:	613b      	str	r3, [r7, #16]
 80079aa:	69ba      	ldr	r2, [r7, #24]
 80079ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079ae:	4413      	add	r3, r2
 80079b0:	61bb      	str	r3, [r7, #24]
 80079b2:	69ba      	ldr	r2, [r7, #24]
 80079b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079b6:	429a      	cmp	r2, r3
 80079b8:	bf34      	ite	cc
 80079ba:	2301      	movcc	r3, #1
 80079bc:	2300      	movcs	r3, #0
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	461a      	mov	r2, r3
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	4413      	add	r3, r2
 80079c6:	613b      	str	r3, [r7, #16]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	4413      	add	r3, r2
 80079d0:	61bb      	str	r3, [r7, #24]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	69ba      	ldr	r2, [r7, #24]
 80079d8:	429a      	cmp	r2, r3
 80079da:	bf34      	ite	cc
 80079dc:	2301      	movcc	r3, #1
 80079de:	2300      	movcs	r3, #0
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	461a      	mov	r2, r3
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	4413      	add	r3, r2
 80079e8:	613b      	str	r3, [r7, #16]
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	677b      	str	r3, [r7, #116]	@ 0x74
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	1d1a      	adds	r2, r3, #4
 80079f2:	607a      	str	r2, [r7, #4]
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	601a      	str	r2, [r3, #0]

        MULADDC_CORE   MULADDC_CORE
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	0c1b      	lsrs	r3, r3, #16
 8007a06:	623b      	str	r3, [r7, #32]
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	60bb      	str	r3, [r7, #8]
 8007a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a12:	fb02 f303 	mul.w	r3, r2, r3
 8007a16:	61fb      	str	r3, [r7, #28]
 8007a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a1c:	fb02 f303 	mul.w	r3, r2, r3
 8007a20:	61bb      	str	r3, [r7, #24]
 8007a22:	6a3b      	ldr	r3, [r7, #32]
 8007a24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a26:	fb02 f303 	mul.w	r3, r2, r3
 8007a2a:	617b      	str	r3, [r7, #20]
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a30:	fb02 f303 	mul.w	r3, r2, r3
 8007a34:	613b      	str	r3, [r7, #16]
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	0c1b      	lsrs	r3, r3, #16
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	613b      	str	r3, [r7, #16]
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	0c1b      	lsrs	r3, r3, #16
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	4413      	add	r3, r2
 8007a48:	613b      	str	r3, [r7, #16]
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	041b      	lsls	r3, r3, #16
 8007a4e:	61fb      	str	r3, [r7, #28]
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	041b      	lsls	r3, r3, #16
 8007a54:	617b      	str	r3, [r7, #20]
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	61bb      	str	r3, [r7, #24]
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	bf34      	ite	cc
 8007a66:	2301      	movcc	r3, #1
 8007a68:	2300      	movcs	r3, #0
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	4413      	add	r3, r2
 8007a72:	613b      	str	r3, [r7, #16]
 8007a74:	69ba      	ldr	r2, [r7, #24]
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	4413      	add	r3, r2
 8007a7a:	61bb      	str	r3, [r7, #24]
 8007a7c:	69ba      	ldr	r2, [r7, #24]
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	bf34      	ite	cc
 8007a84:	2301      	movcc	r3, #1
 8007a86:	2300      	movcs	r3, #0
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	4413      	add	r3, r2
 8007a90:	613b      	str	r3, [r7, #16]
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a96:	4413      	add	r3, r2
 8007a98:	61bb      	str	r3, [r7, #24]
 8007a9a:	69ba      	ldr	r2, [r7, #24]
 8007a9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	bf34      	ite	cc
 8007aa2:	2301      	movcc	r3, #1
 8007aa4:	2300      	movcs	r3, #0
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	4413      	add	r3, r2
 8007aae:	613b      	str	r3, [r7, #16]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	69ba      	ldr	r2, [r7, #24]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	61bb      	str	r3, [r7, #24]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	69ba      	ldr	r2, [r7, #24]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	bf34      	ite	cc
 8007ac4:	2301      	movcc	r3, #1
 8007ac6:	2300      	movcs	r3, #0
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	461a      	mov	r2, r3
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	4413      	add	r3, r2
 8007ad0:	613b      	str	r3, [r7, #16]
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	677b      	str	r3, [r7, #116]	@ 0x74
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	1d1a      	adds	r2, r3, #4
 8007ada:	607a      	str	r2, [r7, #4]
 8007adc:	69ba      	ldr	r2, [r7, #24]
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	0c1b      	lsrs	r3, r3, #16
 8007aee:	623b      	str	r3, [r7, #32]
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	3304      	adds	r3, #4
 8007af4:	60bb      	str	r3, [r7, #8]
 8007af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007afa:	fb02 f303 	mul.w	r3, r2, r3
 8007afe:	61fb      	str	r3, [r7, #28]
 8007b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b04:	fb02 f303 	mul.w	r3, r2, r3
 8007b08:	61bb      	str	r3, [r7, #24]
 8007b0a:	6a3b      	ldr	r3, [r7, #32]
 8007b0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b0e:	fb02 f303 	mul.w	r3, r2, r3
 8007b12:	617b      	str	r3, [r7, #20]
 8007b14:	6a3b      	ldr	r3, [r7, #32]
 8007b16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b18:	fb02 f303 	mul.w	r3, r2, r3
 8007b1c:	613b      	str	r3, [r7, #16]
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	0c1b      	lsrs	r3, r3, #16
 8007b22:	693a      	ldr	r2, [r7, #16]
 8007b24:	4413      	add	r3, r2
 8007b26:	613b      	str	r3, [r7, #16]
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	0c1b      	lsrs	r3, r3, #16
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	4413      	add	r3, r2
 8007b30:	613b      	str	r3, [r7, #16]
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	041b      	lsls	r3, r3, #16
 8007b36:	61fb      	str	r3, [r7, #28]
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	041b      	lsls	r3, r3, #16
 8007b3c:	617b      	str	r3, [r7, #20]
 8007b3e:	69ba      	ldr	r2, [r7, #24]
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	4413      	add	r3, r2
 8007b44:	61bb      	str	r3, [r7, #24]
 8007b46:	69ba      	ldr	r2, [r7, #24]
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	bf34      	ite	cc
 8007b4e:	2301      	movcc	r3, #1
 8007b50:	2300      	movcs	r3, #0
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	461a      	mov	r2, r3
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	4413      	add	r3, r2
 8007b5a:	613b      	str	r3, [r7, #16]
 8007b5c:	69ba      	ldr	r2, [r7, #24]
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	4413      	add	r3, r2
 8007b62:	61bb      	str	r3, [r7, #24]
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	bf34      	ite	cc
 8007b6c:	2301      	movcc	r3, #1
 8007b6e:	2300      	movcs	r3, #0
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	461a      	mov	r2, r3
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	4413      	add	r3, r2
 8007b78:	613b      	str	r3, [r7, #16]
 8007b7a:	69ba      	ldr	r2, [r7, #24]
 8007b7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b7e:	4413      	add	r3, r2
 8007b80:	61bb      	str	r3, [r7, #24]
 8007b82:	69ba      	ldr	r2, [r7, #24]
 8007b84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b86:	429a      	cmp	r2, r3
 8007b88:	bf34      	ite	cc
 8007b8a:	2301      	movcc	r3, #1
 8007b8c:	2300      	movcs	r3, #0
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	461a      	mov	r2, r3
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	4413      	add	r3, r2
 8007b96:	613b      	str	r3, [r7, #16]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	69ba      	ldr	r2, [r7, #24]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	61bb      	str	r3, [r7, #24]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	69ba      	ldr	r2, [r7, #24]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	bf34      	ite	cc
 8007bac:	2301      	movcc	r3, #1
 8007bae:	2300      	movcs	r3, #0
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	613b      	str	r3, [r7, #16]
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	677b      	str	r3, [r7, #116]	@ 0x74
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	1d1a      	adds	r2, r3, #4
 8007bc2:	607a      	str	r2, [r7, #4]
 8007bc4:	69ba      	ldr	r2, [r7, #24]
 8007bc6:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	0c1b      	lsrs	r3, r3, #16
 8007bd6:	623b      	str	r3, [r7, #32]
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	3304      	adds	r3, #4
 8007bdc:	60bb      	str	r3, [r7, #8]
 8007bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007be2:	fb02 f303 	mul.w	r3, r2, r3
 8007be6:	61fb      	str	r3, [r7, #28]
 8007be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bec:	fb02 f303 	mul.w	r3, r2, r3
 8007bf0:	61bb      	str	r3, [r7, #24]
 8007bf2:	6a3b      	ldr	r3, [r7, #32]
 8007bf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bf6:	fb02 f303 	mul.w	r3, r2, r3
 8007bfa:	617b      	str	r3, [r7, #20]
 8007bfc:	6a3b      	ldr	r3, [r7, #32]
 8007bfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c00:	fb02 f303 	mul.w	r3, r2, r3
 8007c04:	613b      	str	r3, [r7, #16]
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	0c1b      	lsrs	r3, r3, #16
 8007c0a:	693a      	ldr	r2, [r7, #16]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	613b      	str	r3, [r7, #16]
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	0c1b      	lsrs	r3, r3, #16
 8007c14:	693a      	ldr	r2, [r7, #16]
 8007c16:	4413      	add	r3, r2
 8007c18:	613b      	str	r3, [r7, #16]
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	041b      	lsls	r3, r3, #16
 8007c1e:	61fb      	str	r3, [r7, #28]
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	041b      	lsls	r3, r3, #16
 8007c24:	617b      	str	r3, [r7, #20]
 8007c26:	69ba      	ldr	r2, [r7, #24]
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	61bb      	str	r3, [r7, #24]
 8007c2e:	69ba      	ldr	r2, [r7, #24]
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	bf34      	ite	cc
 8007c36:	2301      	movcc	r3, #1
 8007c38:	2300      	movcs	r3, #0
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	4413      	add	r3, r2
 8007c42:	613b      	str	r3, [r7, #16]
 8007c44:	69ba      	ldr	r2, [r7, #24]
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	4413      	add	r3, r2
 8007c4a:	61bb      	str	r3, [r7, #24]
 8007c4c:	69ba      	ldr	r2, [r7, #24]
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	bf34      	ite	cc
 8007c54:	2301      	movcc	r3, #1
 8007c56:	2300      	movcs	r3, #0
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	4413      	add	r3, r2
 8007c60:	613b      	str	r3, [r7, #16]
 8007c62:	69ba      	ldr	r2, [r7, #24]
 8007c64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c66:	4413      	add	r3, r2
 8007c68:	61bb      	str	r3, [r7, #24]
 8007c6a:	69ba      	ldr	r2, [r7, #24]
 8007c6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	bf34      	ite	cc
 8007c72:	2301      	movcc	r3, #1
 8007c74:	2300      	movcs	r3, #0
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	461a      	mov	r2, r3
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	613b      	str	r3, [r7, #16]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	69ba      	ldr	r2, [r7, #24]
 8007c86:	4413      	add	r3, r2
 8007c88:	61bb      	str	r3, [r7, #24]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	bf34      	ite	cc
 8007c94:	2301      	movcc	r3, #1
 8007c96:	2300      	movcs	r3, #0
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	613b      	str	r3, [r7, #16]
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	677b      	str	r3, [r7, #116]	@ 0x74
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	1d1a      	adds	r2, r3, #4
 8007caa:	607a      	str	r2, [r7, #4]
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	0c1b      	lsrs	r3, r3, #16
 8007cbe:	623b      	str	r3, [r7, #32]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	3304      	adds	r3, #4
 8007cc4:	60bb      	str	r3, [r7, #8]
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cca:	fb02 f303 	mul.w	r3, r2, r3
 8007cce:	61fb      	str	r3, [r7, #28]
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cd4:	fb02 f303 	mul.w	r3, r2, r3
 8007cd8:	61bb      	str	r3, [r7, #24]
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cde:	fb02 f303 	mul.w	r3, r2, r3
 8007ce2:	617b      	str	r3, [r7, #20]
 8007ce4:	6a3b      	ldr	r3, [r7, #32]
 8007ce6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ce8:	fb02 f303 	mul.w	r3, r2, r3
 8007cec:	613b      	str	r3, [r7, #16]
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	0c1b      	lsrs	r3, r3, #16
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	613b      	str	r3, [r7, #16]
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	0c1b      	lsrs	r3, r3, #16
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	4413      	add	r3, r2
 8007d00:	613b      	str	r3, [r7, #16]
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	041b      	lsls	r3, r3, #16
 8007d06:	61fb      	str	r3, [r7, #28]
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	041b      	lsls	r3, r3, #16
 8007d0c:	617b      	str	r3, [r7, #20]
 8007d0e:	69ba      	ldr	r2, [r7, #24]
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	4413      	add	r3, r2
 8007d14:	61bb      	str	r3, [r7, #24]
 8007d16:	69ba      	ldr	r2, [r7, #24]
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	bf34      	ite	cc
 8007d1e:	2301      	movcc	r3, #1
 8007d20:	2300      	movcs	r3, #0
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	461a      	mov	r2, r3
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	4413      	add	r3, r2
 8007d2a:	613b      	str	r3, [r7, #16]
 8007d2c:	69ba      	ldr	r2, [r7, #24]
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	4413      	add	r3, r2
 8007d32:	61bb      	str	r3, [r7, #24]
 8007d34:	69ba      	ldr	r2, [r7, #24]
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	bf34      	ite	cc
 8007d3c:	2301      	movcc	r3, #1
 8007d3e:	2300      	movcs	r3, #0
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	461a      	mov	r2, r3
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	4413      	add	r3, r2
 8007d48:	613b      	str	r3, [r7, #16]
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d4e:	4413      	add	r3, r2
 8007d50:	61bb      	str	r3, [r7, #24]
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d56:	429a      	cmp	r2, r3
 8007d58:	bf34      	ite	cc
 8007d5a:	2301      	movcc	r3, #1
 8007d5c:	2300      	movcs	r3, #0
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	461a      	mov	r2, r3
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	4413      	add	r3, r2
 8007d66:	613b      	str	r3, [r7, #16]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	69ba      	ldr	r2, [r7, #24]
 8007d6e:	4413      	add	r3, r2
 8007d70:	61bb      	str	r3, [r7, #24]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	69ba      	ldr	r2, [r7, #24]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	bf34      	ite	cc
 8007d7c:	2301      	movcc	r3, #1
 8007d7e:	2300      	movcs	r3, #0
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	461a      	mov	r2, r3
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	4413      	add	r3, r2
 8007d88:	613b      	str	r3, [r7, #16]
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	677b      	str	r3, [r7, #116]	@ 0x74
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	1d1a      	adds	r2, r3, #4
 8007d92:	607a      	str	r2, [r7, #4]
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	0c1b      	lsrs	r3, r3, #16
 8007da6:	623b      	str	r3, [r7, #32]
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	3304      	adds	r3, #4
 8007dac:	60bb      	str	r3, [r7, #8]
 8007dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007db2:	fb02 f303 	mul.w	r3, r2, r3
 8007db6:	61fb      	str	r3, [r7, #28]
 8007db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dbc:	fb02 f303 	mul.w	r3, r2, r3
 8007dc0:	61bb      	str	r3, [r7, #24]
 8007dc2:	6a3b      	ldr	r3, [r7, #32]
 8007dc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dc6:	fb02 f303 	mul.w	r3, r2, r3
 8007dca:	617b      	str	r3, [r7, #20]
 8007dcc:	6a3b      	ldr	r3, [r7, #32]
 8007dce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007dd0:	fb02 f303 	mul.w	r3, r2, r3
 8007dd4:	613b      	str	r3, [r7, #16]
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	0c1b      	lsrs	r3, r3, #16
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	4413      	add	r3, r2
 8007dde:	613b      	str	r3, [r7, #16]
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	0c1b      	lsrs	r3, r3, #16
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	4413      	add	r3, r2
 8007de8:	613b      	str	r3, [r7, #16]
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	041b      	lsls	r3, r3, #16
 8007dee:	61fb      	str	r3, [r7, #28]
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	041b      	lsls	r3, r3, #16
 8007df4:	617b      	str	r3, [r7, #20]
 8007df6:	69ba      	ldr	r2, [r7, #24]
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	61bb      	str	r3, [r7, #24]
 8007dfe:	69ba      	ldr	r2, [r7, #24]
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	bf34      	ite	cc
 8007e06:	2301      	movcc	r3, #1
 8007e08:	2300      	movcs	r3, #0
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	4413      	add	r3, r2
 8007e12:	613b      	str	r3, [r7, #16]
 8007e14:	69ba      	ldr	r2, [r7, #24]
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	4413      	add	r3, r2
 8007e1a:	61bb      	str	r3, [r7, #24]
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	bf34      	ite	cc
 8007e24:	2301      	movcc	r3, #1
 8007e26:	2300      	movcs	r3, #0
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	4413      	add	r3, r2
 8007e30:	613b      	str	r3, [r7, #16]
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e36:	4413      	add	r3, r2
 8007e38:	61bb      	str	r3, [r7, #24]
 8007e3a:	69ba      	ldr	r2, [r7, #24]
 8007e3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	bf34      	ite	cc
 8007e42:	2301      	movcc	r3, #1
 8007e44:	2300      	movcs	r3, #0
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	461a      	mov	r2, r3
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	613b      	str	r3, [r7, #16]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	69ba      	ldr	r2, [r7, #24]
 8007e56:	4413      	add	r3, r2
 8007e58:	61bb      	str	r3, [r7, #24]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	69ba      	ldr	r2, [r7, #24]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	bf34      	ite	cc
 8007e64:	2301      	movcc	r3, #1
 8007e66:	2300      	movcs	r3, #0
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	4413      	add	r3, r2
 8007e70:	613b      	str	r3, [r7, #16]
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	677b      	str	r3, [r7, #116]	@ 0x74
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	1d1a      	adds	r2, r3, #4
 8007e7a:	607a      	str	r2, [r7, #4]
 8007e7c:	69ba      	ldr	r2, [r7, #24]
 8007e7e:	601a      	str	r2, [r3, #0]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	0c1b      	lsrs	r3, r3, #16
 8007e8e:	623b      	str	r3, [r7, #32]
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	3304      	adds	r3, #4
 8007e94:	60bb      	str	r3, [r7, #8]
 8007e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e9a:	fb02 f303 	mul.w	r3, r2, r3
 8007e9e:	61fb      	str	r3, [r7, #28]
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ea4:	fb02 f303 	mul.w	r3, r2, r3
 8007ea8:	61bb      	str	r3, [r7, #24]
 8007eaa:	6a3b      	ldr	r3, [r7, #32]
 8007eac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007eae:	fb02 f303 	mul.w	r3, r2, r3
 8007eb2:	617b      	str	r3, [r7, #20]
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
 8007eb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007eb8:	fb02 f303 	mul.w	r3, r2, r3
 8007ebc:	613b      	str	r3, [r7, #16]
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	0c1b      	lsrs	r3, r3, #16
 8007ec2:	693a      	ldr	r2, [r7, #16]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	613b      	str	r3, [r7, #16]
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	0c1b      	lsrs	r3, r3, #16
 8007ecc:	693a      	ldr	r2, [r7, #16]
 8007ece:	4413      	add	r3, r2
 8007ed0:	613b      	str	r3, [r7, #16]
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	041b      	lsls	r3, r3, #16
 8007ed6:	61fb      	str	r3, [r7, #28]
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	041b      	lsls	r3, r3, #16
 8007edc:	617b      	str	r3, [r7, #20]
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	61bb      	str	r3, [r7, #24]
 8007ee6:	69ba      	ldr	r2, [r7, #24]
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	bf34      	ite	cc
 8007eee:	2301      	movcc	r3, #1
 8007ef0:	2300      	movcs	r3, #0
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	4413      	add	r3, r2
 8007efa:	613b      	str	r3, [r7, #16]
 8007efc:	69ba      	ldr	r2, [r7, #24]
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	4413      	add	r3, r2
 8007f02:	61bb      	str	r3, [r7, #24]
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	bf34      	ite	cc
 8007f0c:	2301      	movcc	r3, #1
 8007f0e:	2300      	movcs	r3, #0
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	461a      	mov	r2, r3
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	4413      	add	r3, r2
 8007f18:	613b      	str	r3, [r7, #16]
 8007f1a:	69ba      	ldr	r2, [r7, #24]
 8007f1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f1e:	4413      	add	r3, r2
 8007f20:	61bb      	str	r3, [r7, #24]
 8007f22:	69ba      	ldr	r2, [r7, #24]
 8007f24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f26:	429a      	cmp	r2, r3
 8007f28:	bf34      	ite	cc
 8007f2a:	2301      	movcc	r3, #1
 8007f2c:	2300      	movcs	r3, #0
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	461a      	mov	r2, r3
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	4413      	add	r3, r2
 8007f36:	613b      	str	r3, [r7, #16]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	4413      	add	r3, r2
 8007f40:	61bb      	str	r3, [r7, #24]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	bf34      	ite	cc
 8007f4c:	2301      	movcc	r3, #1
 8007f4e:	2300      	movcs	r3, #0
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	461a      	mov	r2, r3
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	4413      	add	r3, r2
 8007f58:	613b      	str	r3, [r7, #16]
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	677b      	str	r3, [r7, #116]	@ 0x74
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	1d1a      	adds	r2, r3, #4
 8007f62:	607a      	str	r2, [r7, #4]
 8007f64:	69ba      	ldr	r2, [r7, #24]
 8007f66:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	0c1b      	lsrs	r3, r3, #16
 8007f76:	623b      	str	r3, [r7, #32]
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	60bb      	str	r3, [r7, #8]
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007f82:	fb02 f303 	mul.w	r3, r2, r3
 8007f86:	61fb      	str	r3, [r7, #28]
 8007f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f8c:	fb02 f303 	mul.w	r3, r2, r3
 8007f90:	61bb      	str	r3, [r7, #24]
 8007f92:	6a3b      	ldr	r3, [r7, #32]
 8007f94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f96:	fb02 f303 	mul.w	r3, r2, r3
 8007f9a:	617b      	str	r3, [r7, #20]
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007fa0:	fb02 f303 	mul.w	r3, r2, r3
 8007fa4:	613b      	str	r3, [r7, #16]
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	0c1b      	lsrs	r3, r3, #16
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	4413      	add	r3, r2
 8007fae:	613b      	str	r3, [r7, #16]
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	0c1b      	lsrs	r3, r3, #16
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	613b      	str	r3, [r7, #16]
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	041b      	lsls	r3, r3, #16
 8007fbe:	61fb      	str	r3, [r7, #28]
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	041b      	lsls	r3, r3, #16
 8007fc4:	617b      	str	r3, [r7, #20]
 8007fc6:	69ba      	ldr	r2, [r7, #24]
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	4413      	add	r3, r2
 8007fcc:	61bb      	str	r3, [r7, #24]
 8007fce:	69ba      	ldr	r2, [r7, #24]
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	bf34      	ite	cc
 8007fd6:	2301      	movcc	r3, #1
 8007fd8:	2300      	movcs	r3, #0
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	461a      	mov	r2, r3
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	613b      	str	r3, [r7, #16]
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	4413      	add	r3, r2
 8007fea:	61bb      	str	r3, [r7, #24]
 8007fec:	69ba      	ldr	r2, [r7, #24]
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	bf34      	ite	cc
 8007ff4:	2301      	movcc	r3, #1
 8007ff6:	2300      	movcs	r3, #0
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	4413      	add	r3, r2
 8008000:	613b      	str	r3, [r7, #16]
 8008002:	69ba      	ldr	r2, [r7, #24]
 8008004:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008006:	4413      	add	r3, r2
 8008008:	61bb      	str	r3, [r7, #24]
 800800a:	69ba      	ldr	r2, [r7, #24]
 800800c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800800e:	429a      	cmp	r2, r3
 8008010:	bf34      	ite	cc
 8008012:	2301      	movcc	r3, #1
 8008014:	2300      	movcs	r3, #0
 8008016:	b2db      	uxtb	r3, r3
 8008018:	461a      	mov	r2, r3
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	4413      	add	r3, r2
 800801e:	613b      	str	r3, [r7, #16]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	69ba      	ldr	r2, [r7, #24]
 8008026:	4413      	add	r3, r2
 8008028:	61bb      	str	r3, [r7, #24]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	69ba      	ldr	r2, [r7, #24]
 8008030:	429a      	cmp	r2, r3
 8008032:	bf34      	ite	cc
 8008034:	2301      	movcc	r3, #1
 8008036:	2300      	movcs	r3, #0
 8008038:	b2db      	uxtb	r3, r3
 800803a:	461a      	mov	r2, r3
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	4413      	add	r3, r2
 8008040:	613b      	str	r3, [r7, #16]
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	677b      	str	r3, [r7, #116]	@ 0x74
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	1d1a      	adds	r2, r3, #4
 800804a:	607a      	str	r2, [r7, #4]
 800804c:	69ba      	ldr	r2, [r7, #24]
 800804e:	601a      	str	r2, [r3, #0]
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	b29b      	uxth	r3, r3
 8008056:	627b      	str	r3, [r7, #36]	@ 0x24
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	0c1b      	lsrs	r3, r3, #16
 800805e:	623b      	str	r3, [r7, #32]
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	3304      	adds	r3, #4
 8008064:	60bb      	str	r3, [r7, #8]
 8008066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008068:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800806a:	fb02 f303 	mul.w	r3, r2, r3
 800806e:	61fb      	str	r3, [r7, #28]
 8008070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008072:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008074:	fb02 f303 	mul.w	r3, r2, r3
 8008078:	61bb      	str	r3, [r7, #24]
 800807a:	6a3b      	ldr	r3, [r7, #32]
 800807c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800807e:	fb02 f303 	mul.w	r3, r2, r3
 8008082:	617b      	str	r3, [r7, #20]
 8008084:	6a3b      	ldr	r3, [r7, #32]
 8008086:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008088:	fb02 f303 	mul.w	r3, r2, r3
 800808c:	613b      	str	r3, [r7, #16]
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	0c1b      	lsrs	r3, r3, #16
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	4413      	add	r3, r2
 8008096:	613b      	str	r3, [r7, #16]
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	0c1b      	lsrs	r3, r3, #16
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	4413      	add	r3, r2
 80080a0:	613b      	str	r3, [r7, #16]
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	041b      	lsls	r3, r3, #16
 80080a6:	61fb      	str	r3, [r7, #28]
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	041b      	lsls	r3, r3, #16
 80080ac:	617b      	str	r3, [r7, #20]
 80080ae:	69ba      	ldr	r2, [r7, #24]
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	4413      	add	r3, r2
 80080b4:	61bb      	str	r3, [r7, #24]
 80080b6:	69ba      	ldr	r2, [r7, #24]
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	bf34      	ite	cc
 80080be:	2301      	movcc	r3, #1
 80080c0:	2300      	movcs	r3, #0
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	461a      	mov	r2, r3
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	4413      	add	r3, r2
 80080ca:	613b      	str	r3, [r7, #16]
 80080cc:	69ba      	ldr	r2, [r7, #24]
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	4413      	add	r3, r2
 80080d2:	61bb      	str	r3, [r7, #24]
 80080d4:	69ba      	ldr	r2, [r7, #24]
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	429a      	cmp	r2, r3
 80080da:	bf34      	ite	cc
 80080dc:	2301      	movcc	r3, #1
 80080de:	2300      	movcs	r3, #0
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	461a      	mov	r2, r3
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	4413      	add	r3, r2
 80080e8:	613b      	str	r3, [r7, #16]
 80080ea:	69ba      	ldr	r2, [r7, #24]
 80080ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80080ee:	4413      	add	r3, r2
 80080f0:	61bb      	str	r3, [r7, #24]
 80080f2:	69ba      	ldr	r2, [r7, #24]
 80080f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80080f6:	429a      	cmp	r2, r3
 80080f8:	bf34      	ite	cc
 80080fa:	2301      	movcc	r3, #1
 80080fc:	2300      	movcs	r3, #0
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	461a      	mov	r2, r3
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	4413      	add	r3, r2
 8008106:	613b      	str	r3, [r7, #16]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	69ba      	ldr	r2, [r7, #24]
 800810e:	4413      	add	r3, r2
 8008110:	61bb      	str	r3, [r7, #24]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	69ba      	ldr	r2, [r7, #24]
 8008118:	429a      	cmp	r2, r3
 800811a:	bf34      	ite	cc
 800811c:	2301      	movcc	r3, #1
 800811e:	2300      	movcs	r3, #0
 8008120:	b2db      	uxtb	r3, r3
 8008122:	461a      	mov	r2, r3
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	4413      	add	r3, r2
 8008128:	613b      	str	r3, [r7, #16]
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	677b      	str	r3, [r7, #116]	@ 0x74
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	1d1a      	adds	r2, r3, #4
 8008132:	607a      	str	r2, [r7, #4]
 8008134:	69ba      	ldr	r2, [r7, #24]
 8008136:	601a      	str	r2, [r3, #0]
    for( ; i >= 16; i -= 16 )
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	3b10      	subs	r3, #16
 800813c:	60fb      	str	r3, [r7, #12]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2b0f      	cmp	r3, #15
 8008142:	f63f a8b3 	bhi.w	80072ac <mpi_mul_hlp+0x1a>
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 8008146:	e3a8      	b.n	800889a <mpi_mul_hlp+0x1608>
    {
        MULADDC_INIT
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	b29b      	uxth	r3, r3
 800814c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	0c1b      	lsrs	r3, r3, #16
 8008152:	64bb      	str	r3, [r7, #72]	@ 0x48
        MULADDC_CORE   MULADDC_CORE
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	b29b      	uxth	r3, r3
 800815a:	647b      	str	r3, [r7, #68]	@ 0x44
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	0c1b      	lsrs	r3, r3, #16
 8008162:	643b      	str	r3, [r7, #64]	@ 0x40
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	3304      	adds	r3, #4
 8008168:	60bb      	str	r3, [r7, #8]
 800816a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800816c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800816e:	fb02 f303 	mul.w	r3, r2, r3
 8008172:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008174:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008176:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008178:	fb02 f303 	mul.w	r3, r2, r3
 800817c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800817e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008180:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008182:	fb02 f303 	mul.w	r3, r2, r3
 8008186:	637b      	str	r3, [r7, #52]	@ 0x34
 8008188:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800818a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800818c:	fb02 f303 	mul.w	r3, r2, r3
 8008190:	633b      	str	r3, [r7, #48]	@ 0x30
 8008192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008194:	0c1b      	lsrs	r3, r3, #16
 8008196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008198:	4413      	add	r3, r2
 800819a:	633b      	str	r3, [r7, #48]	@ 0x30
 800819c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800819e:	0c1b      	lsrs	r3, r3, #16
 80081a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081a2:	4413      	add	r3, r2
 80081a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80081a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081a8:	041b      	lsls	r3, r3, #16
 80081aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ae:	041b      	lsls	r3, r3, #16
 80081b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80081b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081b6:	4413      	add	r3, r2
 80081b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80081ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081be:	429a      	cmp	r2, r3
 80081c0:	bf34      	ite	cc
 80081c2:	2301      	movcc	r3, #1
 80081c4:	2300      	movcs	r3, #0
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	461a      	mov	r2, r3
 80081ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081cc:	4413      	add	r3, r2
 80081ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80081d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081d4:	4413      	add	r3, r2
 80081d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80081d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081dc:	429a      	cmp	r2, r3
 80081de:	bf34      	ite	cc
 80081e0:	2301      	movcc	r3, #1
 80081e2:	2300      	movcs	r3, #0
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	461a      	mov	r2, r3
 80081e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ea:	4413      	add	r3, r2
 80081ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80081ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80081f2:	4413      	add	r3, r2
 80081f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80081f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80081fa:	429a      	cmp	r2, r3
 80081fc:	bf34      	ite	cc
 80081fe:	2301      	movcc	r3, #1
 8008200:	2300      	movcs	r3, #0
 8008202:	b2db      	uxtb	r3, r3
 8008204:	461a      	mov	r2, r3
 8008206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008208:	4413      	add	r3, r2
 800820a:	633b      	str	r3, [r7, #48]	@ 0x30
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008212:	4413      	add	r3, r2
 8008214:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800821c:	429a      	cmp	r2, r3
 800821e:	bf34      	ite	cc
 8008220:	2301      	movcc	r3, #1
 8008222:	2300      	movcs	r3, #0
 8008224:	b2db      	uxtb	r3, r3
 8008226:	461a      	mov	r2, r3
 8008228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822a:	4413      	add	r3, r2
 800822c:	633b      	str	r3, [r7, #48]	@ 0x30
 800822e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008230:	677b      	str	r3, [r7, #116]	@ 0x74
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	1d1a      	adds	r2, r3, #4
 8008236:	607a      	str	r2, [r7, #4]
 8008238:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800823a:	601a      	str	r2, [r3, #0]
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	b29b      	uxth	r3, r3
 8008242:	647b      	str	r3, [r7, #68]	@ 0x44
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	0c1b      	lsrs	r3, r3, #16
 800824a:	643b      	str	r3, [r7, #64]	@ 0x40
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	3304      	adds	r3, #4
 8008250:	60bb      	str	r3, [r7, #8]
 8008252:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008254:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008256:	fb02 f303 	mul.w	r3, r2, r3
 800825a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800825c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800825e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008260:	fb02 f303 	mul.w	r3, r2, r3
 8008264:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008266:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008268:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800826a:	fb02 f303 	mul.w	r3, r2, r3
 800826e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008270:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008272:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008274:	fb02 f303 	mul.w	r3, r2, r3
 8008278:	633b      	str	r3, [r7, #48]	@ 0x30
 800827a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800827c:	0c1b      	lsrs	r3, r3, #16
 800827e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008280:	4413      	add	r3, r2
 8008282:	633b      	str	r3, [r7, #48]	@ 0x30
 8008284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008286:	0c1b      	lsrs	r3, r3, #16
 8008288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800828a:	4413      	add	r3, r2
 800828c:	633b      	str	r3, [r7, #48]	@ 0x30
 800828e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008290:	041b      	lsls	r3, r3, #16
 8008292:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008296:	041b      	lsls	r3, r3, #16
 8008298:	637b      	str	r3, [r7, #52]	@ 0x34
 800829a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800829c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800829e:	4413      	add	r3, r2
 80082a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80082a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80082a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082a6:	429a      	cmp	r2, r3
 80082a8:	bf34      	ite	cc
 80082aa:	2301      	movcc	r3, #1
 80082ac:	2300      	movcs	r3, #0
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	461a      	mov	r2, r3
 80082b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b4:	4413      	add	r3, r2
 80082b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80082b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80082ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082bc:	4413      	add	r3, r2
 80082be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80082c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80082c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082c4:	429a      	cmp	r2, r3
 80082c6:	bf34      	ite	cc
 80082c8:	2301      	movcc	r3, #1
 80082ca:	2300      	movcs	r3, #0
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	461a      	mov	r2, r3
 80082d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d2:	4413      	add	r3, r2
 80082d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80082d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80082d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082da:	4413      	add	r3, r2
 80082dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80082de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80082e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082e2:	429a      	cmp	r2, r3
 80082e4:	bf34      	ite	cc
 80082e6:	2301      	movcc	r3, #1
 80082e8:	2300      	movcs	r3, #0
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	461a      	mov	r2, r3
 80082ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f0:	4413      	add	r3, r2
 80082f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80082fa:	4413      	add	r3, r2
 80082fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008304:	429a      	cmp	r2, r3
 8008306:	bf34      	ite	cc
 8008308:	2301      	movcc	r3, #1
 800830a:	2300      	movcs	r3, #0
 800830c:	b2db      	uxtb	r3, r3
 800830e:	461a      	mov	r2, r3
 8008310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008312:	4413      	add	r3, r2
 8008314:	633b      	str	r3, [r7, #48]	@ 0x30
 8008316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008318:	677b      	str	r3, [r7, #116]	@ 0x74
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	1d1a      	adds	r2, r3, #4
 800831e:	607a      	str	r2, [r7, #4]
 8008320:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008322:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	b29b      	uxth	r3, r3
 800832a:	647b      	str	r3, [r7, #68]	@ 0x44
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	0c1b      	lsrs	r3, r3, #16
 8008332:	643b      	str	r3, [r7, #64]	@ 0x40
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	3304      	adds	r3, #4
 8008338:	60bb      	str	r3, [r7, #8]
 800833a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800833c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800833e:	fb02 f303 	mul.w	r3, r2, r3
 8008342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008346:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008348:	fb02 f303 	mul.w	r3, r2, r3
 800834c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800834e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008350:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008352:	fb02 f303 	mul.w	r3, r2, r3
 8008356:	637b      	str	r3, [r7, #52]	@ 0x34
 8008358:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800835a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800835c:	fb02 f303 	mul.w	r3, r2, r3
 8008360:	633b      	str	r3, [r7, #48]	@ 0x30
 8008362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008364:	0c1b      	lsrs	r3, r3, #16
 8008366:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008368:	4413      	add	r3, r2
 800836a:	633b      	str	r3, [r7, #48]	@ 0x30
 800836c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800836e:	0c1b      	lsrs	r3, r3, #16
 8008370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008372:	4413      	add	r3, r2
 8008374:	633b      	str	r3, [r7, #48]	@ 0x30
 8008376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008378:	041b      	lsls	r3, r3, #16
 800837a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800837c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800837e:	041b      	lsls	r3, r3, #16
 8008380:	637b      	str	r3, [r7, #52]	@ 0x34
 8008382:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008386:	4413      	add	r3, r2
 8008388:	63bb      	str	r3, [r7, #56]	@ 0x38
 800838a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800838c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800838e:	429a      	cmp	r2, r3
 8008390:	bf34      	ite	cc
 8008392:	2301      	movcc	r3, #1
 8008394:	2300      	movcs	r3, #0
 8008396:	b2db      	uxtb	r3, r3
 8008398:	461a      	mov	r2, r3
 800839a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800839c:	4413      	add	r3, r2
 800839e:	633b      	str	r3, [r7, #48]	@ 0x30
 80083a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80083a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083a4:	4413      	add	r3, r2
 80083a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80083a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80083aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ac:	429a      	cmp	r2, r3
 80083ae:	bf34      	ite	cc
 80083b0:	2301      	movcc	r3, #1
 80083b2:	2300      	movcs	r3, #0
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	461a      	mov	r2, r3
 80083b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ba:	4413      	add	r3, r2
 80083bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80083be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80083c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80083c2:	4413      	add	r3, r2
 80083c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80083c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80083c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80083ca:	429a      	cmp	r2, r3
 80083cc:	bf34      	ite	cc
 80083ce:	2301      	movcc	r3, #1
 80083d0:	2300      	movcs	r3, #0
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	461a      	mov	r2, r3
 80083d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d8:	4413      	add	r3, r2
 80083da:	633b      	str	r3, [r7, #48]	@ 0x30
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80083e2:	4413      	add	r3, r2
 80083e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80083ec:	429a      	cmp	r2, r3
 80083ee:	bf34      	ite	cc
 80083f0:	2301      	movcc	r3, #1
 80083f2:	2300      	movcs	r3, #0
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	461a      	mov	r2, r3
 80083f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083fa:	4413      	add	r3, r2
 80083fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80083fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008400:	677b      	str	r3, [r7, #116]	@ 0x74
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	1d1a      	adds	r2, r3, #4
 8008406:	607a      	str	r2, [r7, #4]
 8008408:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800840a:	601a      	str	r2, [r3, #0]
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	b29b      	uxth	r3, r3
 8008412:	647b      	str	r3, [r7, #68]	@ 0x44
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	0c1b      	lsrs	r3, r3, #16
 800841a:	643b      	str	r3, [r7, #64]	@ 0x40
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	3304      	adds	r3, #4
 8008420:	60bb      	str	r3, [r7, #8]
 8008422:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008424:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008426:	fb02 f303 	mul.w	r3, r2, r3
 800842a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800842c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800842e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008430:	fb02 f303 	mul.w	r3, r2, r3
 8008434:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008438:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800843a:	fb02 f303 	mul.w	r3, r2, r3
 800843e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008440:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008442:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008444:	fb02 f303 	mul.w	r3, r2, r3
 8008448:	633b      	str	r3, [r7, #48]	@ 0x30
 800844a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800844c:	0c1b      	lsrs	r3, r3, #16
 800844e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008450:	4413      	add	r3, r2
 8008452:	633b      	str	r3, [r7, #48]	@ 0x30
 8008454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008456:	0c1b      	lsrs	r3, r3, #16
 8008458:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800845a:	4413      	add	r3, r2
 800845c:	633b      	str	r3, [r7, #48]	@ 0x30
 800845e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008460:	041b      	lsls	r3, r3, #16
 8008462:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008466:	041b      	lsls	r3, r3, #16
 8008468:	637b      	str	r3, [r7, #52]	@ 0x34
 800846a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800846c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800846e:	4413      	add	r3, r2
 8008470:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008472:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008476:	429a      	cmp	r2, r3
 8008478:	bf34      	ite	cc
 800847a:	2301      	movcc	r3, #1
 800847c:	2300      	movcs	r3, #0
 800847e:	b2db      	uxtb	r3, r3
 8008480:	461a      	mov	r2, r3
 8008482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008484:	4413      	add	r3, r2
 8008486:	633b      	str	r3, [r7, #48]	@ 0x30
 8008488:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800848a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800848c:	4413      	add	r3, r2
 800848e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008490:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008494:	429a      	cmp	r2, r3
 8008496:	bf34      	ite	cc
 8008498:	2301      	movcc	r3, #1
 800849a:	2300      	movcs	r3, #0
 800849c:	b2db      	uxtb	r3, r3
 800849e:	461a      	mov	r2, r3
 80084a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a2:	4413      	add	r3, r2
 80084a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80084a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80084a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084aa:	4413      	add	r3, r2
 80084ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80084ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80084b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084b2:	429a      	cmp	r2, r3
 80084b4:	bf34      	ite	cc
 80084b6:	2301      	movcc	r3, #1
 80084b8:	2300      	movcs	r3, #0
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	461a      	mov	r2, r3
 80084be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c0:	4413      	add	r3, r2
 80084c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80084ca:	4413      	add	r3, r2
 80084cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80084d4:	429a      	cmp	r2, r3
 80084d6:	bf34      	ite	cc
 80084d8:	2301      	movcc	r3, #1
 80084da:	2300      	movcs	r3, #0
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	461a      	mov	r2, r3
 80084e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e2:	4413      	add	r3, r2
 80084e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80084e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e8:	677b      	str	r3, [r7, #116]	@ 0x74
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	1d1a      	adds	r2, r3, #4
 80084ee:	607a      	str	r2, [r7, #4]
 80084f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80084f2:	601a      	str	r2, [r3, #0]

        MULADDC_CORE   MULADDC_CORE
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	0c1b      	lsrs	r3, r3, #16
 8008502:	643b      	str	r3, [r7, #64]	@ 0x40
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	3304      	adds	r3, #4
 8008508:	60bb      	str	r3, [r7, #8]
 800850a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800850c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800850e:	fb02 f303 	mul.w	r3, r2, r3
 8008512:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008514:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008516:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008518:	fb02 f303 	mul.w	r3, r2, r3
 800851c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800851e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008520:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008522:	fb02 f303 	mul.w	r3, r2, r3
 8008526:	637b      	str	r3, [r7, #52]	@ 0x34
 8008528:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800852a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800852c:	fb02 f303 	mul.w	r3, r2, r3
 8008530:	633b      	str	r3, [r7, #48]	@ 0x30
 8008532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008534:	0c1b      	lsrs	r3, r3, #16
 8008536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008538:	4413      	add	r3, r2
 800853a:	633b      	str	r3, [r7, #48]	@ 0x30
 800853c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800853e:	0c1b      	lsrs	r3, r3, #16
 8008540:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008542:	4413      	add	r3, r2
 8008544:	633b      	str	r3, [r7, #48]	@ 0x30
 8008546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008548:	041b      	lsls	r3, r3, #16
 800854a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800854c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800854e:	041b      	lsls	r3, r3, #16
 8008550:	637b      	str	r3, [r7, #52]	@ 0x34
 8008552:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008556:	4413      	add	r3, r2
 8008558:	63bb      	str	r3, [r7, #56]	@ 0x38
 800855a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800855c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800855e:	429a      	cmp	r2, r3
 8008560:	bf34      	ite	cc
 8008562:	2301      	movcc	r3, #1
 8008564:	2300      	movcs	r3, #0
 8008566:	b2db      	uxtb	r3, r3
 8008568:	461a      	mov	r2, r3
 800856a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856c:	4413      	add	r3, r2
 800856e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008570:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008574:	4413      	add	r3, r2
 8008576:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008578:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800857a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800857c:	429a      	cmp	r2, r3
 800857e:	bf34      	ite	cc
 8008580:	2301      	movcc	r3, #1
 8008582:	2300      	movcs	r3, #0
 8008584:	b2db      	uxtb	r3, r3
 8008586:	461a      	mov	r2, r3
 8008588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800858a:	4413      	add	r3, r2
 800858c:	633b      	str	r3, [r7, #48]	@ 0x30
 800858e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008590:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008592:	4413      	add	r3, r2
 8008594:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008596:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008598:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800859a:	429a      	cmp	r2, r3
 800859c:	bf34      	ite	cc
 800859e:	2301      	movcc	r3, #1
 80085a0:	2300      	movcs	r3, #0
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	461a      	mov	r2, r3
 80085a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a8:	4413      	add	r3, r2
 80085aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80085b2:	4413      	add	r3, r2
 80085b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80085bc:	429a      	cmp	r2, r3
 80085be:	bf34      	ite	cc
 80085c0:	2301      	movcc	r3, #1
 80085c2:	2300      	movcs	r3, #0
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	461a      	mov	r2, r3
 80085c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ca:	4413      	add	r3, r2
 80085cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80085ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	1d1a      	adds	r2, r3, #4
 80085d6:	607a      	str	r2, [r7, #4]
 80085d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80085da:	601a      	str	r2, [r3, #0]
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	0c1b      	lsrs	r3, r3, #16
 80085ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	3304      	adds	r3, #4
 80085f0:	60bb      	str	r3, [r7, #8]
 80085f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085f6:	fb02 f303 	mul.w	r3, r2, r3
 80085fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008600:	fb02 f303 	mul.w	r3, r2, r3
 8008604:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008608:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800860a:	fb02 f303 	mul.w	r3, r2, r3
 800860e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008610:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008612:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008614:	fb02 f303 	mul.w	r3, r2, r3
 8008618:	633b      	str	r3, [r7, #48]	@ 0x30
 800861a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800861c:	0c1b      	lsrs	r3, r3, #16
 800861e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008620:	4413      	add	r3, r2
 8008622:	633b      	str	r3, [r7, #48]	@ 0x30
 8008624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008626:	0c1b      	lsrs	r3, r3, #16
 8008628:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800862a:	4413      	add	r3, r2
 800862c:	633b      	str	r3, [r7, #48]	@ 0x30
 800862e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008630:	041b      	lsls	r3, r3, #16
 8008632:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008636:	041b      	lsls	r3, r3, #16
 8008638:	637b      	str	r3, [r7, #52]	@ 0x34
 800863a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800863c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800863e:	4413      	add	r3, r2
 8008640:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008642:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008646:	429a      	cmp	r2, r3
 8008648:	bf34      	ite	cc
 800864a:	2301      	movcc	r3, #1
 800864c:	2300      	movcs	r3, #0
 800864e:	b2db      	uxtb	r3, r3
 8008650:	461a      	mov	r2, r3
 8008652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008654:	4413      	add	r3, r2
 8008656:	633b      	str	r3, [r7, #48]	@ 0x30
 8008658:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800865a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800865c:	4413      	add	r3, r2
 800865e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008660:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008664:	429a      	cmp	r2, r3
 8008666:	bf34      	ite	cc
 8008668:	2301      	movcc	r3, #1
 800866a:	2300      	movcs	r3, #0
 800866c:	b2db      	uxtb	r3, r3
 800866e:	461a      	mov	r2, r3
 8008670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008672:	4413      	add	r3, r2
 8008674:	633b      	str	r3, [r7, #48]	@ 0x30
 8008676:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008678:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800867a:	4413      	add	r3, r2
 800867c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800867e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008680:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008682:	429a      	cmp	r2, r3
 8008684:	bf34      	ite	cc
 8008686:	2301      	movcc	r3, #1
 8008688:	2300      	movcs	r3, #0
 800868a:	b2db      	uxtb	r3, r3
 800868c:	461a      	mov	r2, r3
 800868e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008690:	4413      	add	r3, r2
 8008692:	633b      	str	r3, [r7, #48]	@ 0x30
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800869a:	4413      	add	r3, r2
 800869c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80086a4:	429a      	cmp	r2, r3
 80086a6:	bf34      	ite	cc
 80086a8:	2301      	movcc	r3, #1
 80086aa:	2300      	movcs	r3, #0
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	461a      	mov	r2, r3
 80086b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b2:	4413      	add	r3, r2
 80086b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80086b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	1d1a      	adds	r2, r3, #4
 80086be:	607a      	str	r2, [r7, #4]
 80086c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80086c2:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	0c1b      	lsrs	r3, r3, #16
 80086d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	3304      	adds	r3, #4
 80086d8:	60bb      	str	r3, [r7, #8]
 80086da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086de:	fb02 f303 	mul.w	r3, r2, r3
 80086e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80086e8:	fb02 f303 	mul.w	r3, r2, r3
 80086ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80086ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80086f2:	fb02 f303 	mul.w	r3, r2, r3
 80086f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80086f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086fc:	fb02 f303 	mul.w	r3, r2, r3
 8008700:	633b      	str	r3, [r7, #48]	@ 0x30
 8008702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008704:	0c1b      	lsrs	r3, r3, #16
 8008706:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008708:	4413      	add	r3, r2
 800870a:	633b      	str	r3, [r7, #48]	@ 0x30
 800870c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800870e:	0c1b      	lsrs	r3, r3, #16
 8008710:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008712:	4413      	add	r3, r2
 8008714:	633b      	str	r3, [r7, #48]	@ 0x30
 8008716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008718:	041b      	lsls	r3, r3, #16
 800871a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800871c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800871e:	041b      	lsls	r3, r3, #16
 8008720:	637b      	str	r3, [r7, #52]	@ 0x34
 8008722:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008726:	4413      	add	r3, r2
 8008728:	63bb      	str	r3, [r7, #56]	@ 0x38
 800872a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800872c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800872e:	429a      	cmp	r2, r3
 8008730:	bf34      	ite	cc
 8008732:	2301      	movcc	r3, #1
 8008734:	2300      	movcs	r3, #0
 8008736:	b2db      	uxtb	r3, r3
 8008738:	461a      	mov	r2, r3
 800873a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800873c:	4413      	add	r3, r2
 800873e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008740:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008744:	4413      	add	r3, r2
 8008746:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008748:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800874a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800874c:	429a      	cmp	r2, r3
 800874e:	bf34      	ite	cc
 8008750:	2301      	movcc	r3, #1
 8008752:	2300      	movcs	r3, #0
 8008754:	b2db      	uxtb	r3, r3
 8008756:	461a      	mov	r2, r3
 8008758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875a:	4413      	add	r3, r2
 800875c:	633b      	str	r3, [r7, #48]	@ 0x30
 800875e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008760:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008762:	4413      	add	r3, r2
 8008764:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008766:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008768:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800876a:	429a      	cmp	r2, r3
 800876c:	bf34      	ite	cc
 800876e:	2301      	movcc	r3, #1
 8008770:	2300      	movcs	r3, #0
 8008772:	b2db      	uxtb	r3, r3
 8008774:	461a      	mov	r2, r3
 8008776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008778:	4413      	add	r3, r2
 800877a:	633b      	str	r3, [r7, #48]	@ 0x30
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008782:	4413      	add	r3, r2
 8008784:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800878c:	429a      	cmp	r2, r3
 800878e:	bf34      	ite	cc
 8008790:	2301      	movcc	r3, #1
 8008792:	2300      	movcs	r3, #0
 8008794:	b2db      	uxtb	r3, r3
 8008796:	461a      	mov	r2, r3
 8008798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879a:	4413      	add	r3, r2
 800879c:	633b      	str	r3, [r7, #48]	@ 0x30
 800879e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a0:	677b      	str	r3, [r7, #116]	@ 0x74
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	1d1a      	adds	r2, r3, #4
 80087a6:	607a      	str	r2, [r7, #4]
 80087a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087aa:	601a      	str	r2, [r3, #0]
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	0c1b      	lsrs	r3, r3, #16
 80087ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	3304      	adds	r3, #4
 80087c0:	60bb      	str	r3, [r7, #8]
 80087c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087c6:	fb02 f303 	mul.w	r3, r2, r3
 80087ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80087d0:	fb02 f303 	mul.w	r3, r2, r3
 80087d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80087d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80087da:	fb02 f303 	mul.w	r3, r2, r3
 80087de:	637b      	str	r3, [r7, #52]	@ 0x34
 80087e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087e4:	fb02 f303 	mul.w	r3, r2, r3
 80087e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80087ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087ec:	0c1b      	lsrs	r3, r3, #16
 80087ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087f0:	4413      	add	r3, r2
 80087f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80087f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087f6:	0c1b      	lsrs	r3, r3, #16
 80087f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087fa:	4413      	add	r3, r2
 80087fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80087fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008800:	041b      	lsls	r3, r3, #16
 8008802:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008806:	041b      	lsls	r3, r3, #16
 8008808:	637b      	str	r3, [r7, #52]	@ 0x34
 800880a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800880c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800880e:	4413      	add	r3, r2
 8008810:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008812:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008816:	429a      	cmp	r2, r3
 8008818:	bf34      	ite	cc
 800881a:	2301      	movcc	r3, #1
 800881c:	2300      	movcs	r3, #0
 800881e:	b2db      	uxtb	r3, r3
 8008820:	461a      	mov	r2, r3
 8008822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008824:	4413      	add	r3, r2
 8008826:	633b      	str	r3, [r7, #48]	@ 0x30
 8008828:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800882a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800882c:	4413      	add	r3, r2
 800882e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008830:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008834:	429a      	cmp	r2, r3
 8008836:	bf34      	ite	cc
 8008838:	2301      	movcc	r3, #1
 800883a:	2300      	movcs	r3, #0
 800883c:	b2db      	uxtb	r3, r3
 800883e:	461a      	mov	r2, r3
 8008840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008842:	4413      	add	r3, r2
 8008844:	633b      	str	r3, [r7, #48]	@ 0x30
 8008846:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008848:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800884a:	4413      	add	r3, r2
 800884c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800884e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008850:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008852:	429a      	cmp	r2, r3
 8008854:	bf34      	ite	cc
 8008856:	2301      	movcc	r3, #1
 8008858:	2300      	movcs	r3, #0
 800885a:	b2db      	uxtb	r3, r3
 800885c:	461a      	mov	r2, r3
 800885e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008860:	4413      	add	r3, r2
 8008862:	633b      	str	r3, [r7, #48]	@ 0x30
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800886a:	4413      	add	r3, r2
 800886c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008874:	429a      	cmp	r2, r3
 8008876:	bf34      	ite	cc
 8008878:	2301      	movcc	r3, #1
 800887a:	2300      	movcs	r3, #0
 800887c:	b2db      	uxtb	r3, r3
 800887e:	461a      	mov	r2, r3
 8008880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008882:	4413      	add	r3, r2
 8008884:	633b      	str	r3, [r7, #48]	@ 0x30
 8008886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008888:	677b      	str	r3, [r7, #116]	@ 0x74
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	1d1a      	adds	r2, r3, #4
 800888e:	607a      	str	r2, [r7, #4]
 8008890:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008892:	601a      	str	r2, [r3, #0]
    for( ; i >= 8; i -= 8 )
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	3b08      	subs	r3, #8
 8008898:	60fb      	str	r3, [r7, #12]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2b07      	cmp	r3, #7
 800889e:	f63f ac53 	bhi.w	8008148 <mpi_mul_hlp+0xeb6>
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 80088a2:	e07c      	b.n	800899e <mpi_mul_hlp+0x170c>
    {
        MULADDC_INIT
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	0c1b      	lsrs	r3, r3, #16
 80088ae:	66bb      	str	r3, [r7, #104]	@ 0x68
        MULADDC_CORE
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	0c1b      	lsrs	r3, r3, #16
 80088be:	663b      	str	r3, [r7, #96]	@ 0x60
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	3304      	adds	r3, #4
 80088c4:	60bb      	str	r3, [r7, #8]
 80088c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088c8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80088ca:	fb02 f303 	mul.w	r3, r2, r3
 80088ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088d2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80088d4:	fb02 f303 	mul.w	r3, r2, r3
 80088d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80088de:	fb02 f303 	mul.w	r3, r2, r3
 80088e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80088e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088e6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80088e8:	fb02 f303 	mul.w	r3, r2, r3
 80088ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80088ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088f0:	0c1b      	lsrs	r3, r3, #16
 80088f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80088f4:	4413      	add	r3, r2
 80088f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80088f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088fa:	0c1b      	lsrs	r3, r3, #16
 80088fc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80088fe:	4413      	add	r3, r2
 8008900:	653b      	str	r3, [r7, #80]	@ 0x50
 8008902:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008904:	041b      	lsls	r3, r3, #16
 8008906:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800890a:	041b      	lsls	r3, r3, #16
 800890c:	657b      	str	r3, [r7, #84]	@ 0x54
 800890e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008910:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008912:	4413      	add	r3, r2
 8008914:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008916:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008918:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800891a:	429a      	cmp	r2, r3
 800891c:	bf34      	ite	cc
 800891e:	2301      	movcc	r3, #1
 8008920:	2300      	movcs	r3, #0
 8008922:	b2db      	uxtb	r3, r3
 8008924:	461a      	mov	r2, r3
 8008926:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008928:	4413      	add	r3, r2
 800892a:	653b      	str	r3, [r7, #80]	@ 0x50
 800892c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800892e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008930:	4413      	add	r3, r2
 8008932:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008934:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008938:	429a      	cmp	r2, r3
 800893a:	bf34      	ite	cc
 800893c:	2301      	movcc	r3, #1
 800893e:	2300      	movcs	r3, #0
 8008940:	b2db      	uxtb	r3, r3
 8008942:	461a      	mov	r2, r3
 8008944:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008946:	4413      	add	r3, r2
 8008948:	653b      	str	r3, [r7, #80]	@ 0x50
 800894a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800894c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800894e:	4413      	add	r3, r2
 8008950:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008952:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008954:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008956:	429a      	cmp	r2, r3
 8008958:	bf34      	ite	cc
 800895a:	2301      	movcc	r3, #1
 800895c:	2300      	movcs	r3, #0
 800895e:	b2db      	uxtb	r3, r3
 8008960:	461a      	mov	r2, r3
 8008962:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008964:	4413      	add	r3, r2
 8008966:	653b      	str	r3, [r7, #80]	@ 0x50
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800896e:	4413      	add	r3, r2
 8008970:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008978:	429a      	cmp	r2, r3
 800897a:	bf34      	ite	cc
 800897c:	2301      	movcc	r3, #1
 800897e:	2300      	movcs	r3, #0
 8008980:	b2db      	uxtb	r3, r3
 8008982:	461a      	mov	r2, r3
 8008984:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008986:	4413      	add	r3, r2
 8008988:	653b      	str	r3, [r7, #80]	@ 0x50
 800898a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800898c:	677b      	str	r3, [r7, #116]	@ 0x74
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	1d1a      	adds	r2, r3, #4
 8008992:	607a      	str	r2, [r7, #4]
 8008994:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008996:	601a      	str	r2, [r3, #0]
    for( ; i > 0; i-- )
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	3b01      	subs	r3, #1
 800899c:	60fb      	str	r3, [r7, #12]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f47f af7f 	bne.w	80088a4 <mpi_mul_hlp+0x1612>
        MULADDC_STOP
    }
#endif /* MULADDC_HUIT */

    t++;
 80089a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80089a8:	3301      	adds	r3, #1
 80089aa:	673b      	str	r3, [r7, #112]	@ 0x70

    do {
        *d += c; c = ( *d < c ); d++;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80089b2:	441a      	add	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	601a      	str	r2, [r3, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80089be:	429a      	cmp	r2, r3
 80089c0:	bf8c      	ite	hi
 80089c2:	2301      	movhi	r3, #1
 80089c4:	2300      	movls	r3, #0
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	677b      	str	r3, [r7, #116]	@ 0x74
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	3304      	adds	r3, #4
 80089ce:	607b      	str	r3, [r7, #4]
    }
    while( c != 0 );
 80089d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1ea      	bne.n	80089ac <mpi_mul_hlp+0x171a>
}
 80089d6:	bf00      	nop
 80089d8:	bf00      	nop
 80089da:	377c      	adds	r7, #124	@ 0x7c
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <mbedtls_mpi_mul_mpi>:

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b08e      	sub	sp, #56	@ 0x38
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	607a      	str	r2, [r7, #4]
    mbedtls_mpi TA, TB;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
 80089f0:	f107 0320 	add.w	r3, r7, #32
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fd fa10 	bl	8005e1a <mbedtls_mpi_init>
 80089fa:	f107 0314 	add.w	r3, r7, #20
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fd fa0b 	bl	8005e1a <mbedtls_mpi_init>

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d10c      	bne.n	8008a26 <mbedtls_mpi_mul_mpi+0x42>
 8008a0c:	f107 0320 	add.w	r3, r7, #32
 8008a10:	68b9      	ldr	r1, [r7, #8]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7fd fae3 	bl	8005fde <mbedtls_mpi_copy>
 8008a18:	6378      	str	r0, [r7, #52]	@ 0x34
 8008a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d17a      	bne.n	8008b16 <mbedtls_mpi_mul_mpi+0x132>
 8008a20:	f107 0320 	add.w	r3, r7, #32
 8008a24:	60bb      	str	r3, [r7, #8]
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d10c      	bne.n	8008a48 <mbedtls_mpi_mul_mpi+0x64>
 8008a2e:	f107 0314 	add.w	r3, r7, #20
 8008a32:	6879      	ldr	r1, [r7, #4]
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7fd fad2 	bl	8005fde <mbedtls_mpi_copy>
 8008a3a:	6378      	str	r0, [r7, #52]	@ 0x34
 8008a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d169      	bne.n	8008b16 <mbedtls_mpi_mul_mpi+0x132>
 8008a42:	f107 0314 	add.w	r3, r7, #20
 8008a46:	607b      	str	r3, [r7, #4]

    for( i = A->n; i > 0; i-- )
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a4e:	e00d      	b.n	8008a6c <mbedtls_mpi_mul_mpi+0x88>
        if( A->p[i - 1] != 0 )
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	689a      	ldr	r2, [r3, #8]
 8008a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d106      	bne.n	8008a74 <mbedtls_mpi_mul_mpi+0x90>
    for( i = A->n; i > 0; i-- )
 8008a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1ee      	bne.n	8008a50 <mbedtls_mpi_mul_mpi+0x6c>
 8008a72:	e000      	b.n	8008a76 <mbedtls_mpi_mul_mpi+0x92>
            break;
 8008a74:	bf00      	nop

    for( j = B->n; j > 0; j-- )
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a7c:	e00d      	b.n	8008a9a <mbedtls_mpi_mul_mpi+0xb6>
        if( B->p[j - 1] != 0 )
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	689a      	ldr	r2, [r3, #8]
 8008a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d106      	bne.n	8008aa2 <mbedtls_mpi_mul_mpi+0xbe>
    for( j = B->n; j > 0; j-- )
 8008a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a96:	3b01      	subs	r3, #1
 8008a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1ee      	bne.n	8008a7e <mbedtls_mpi_mul_mpi+0x9a>
 8008aa0:	e000      	b.n	8008aa4 <mbedtls_mpi_mul_mpi+0xc0>
            break;
 8008aa2:	bf00      	nop

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 8008aa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa8:	4413      	add	r3, r2
 8008aaa:	4619      	mov	r1, r3
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f7fd f9ed 	bl	8005e8c <mbedtls_mpi_grow>
 8008ab2:	6378      	str	r0, [r7, #52]	@ 0x34
 8008ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d12d      	bne.n	8008b16 <mbedtls_mpi_mul_mpi+0x132>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8008aba:	2100      	movs	r1, #0
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f7fd fbed 	bl	800629c <mbedtls_mpi_lset>
 8008ac2:	6378      	str	r0, [r7, #52]	@ 0x34
 8008ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d125      	bne.n	8008b16 <mbedtls_mpi_mul_mpi+0x132>

    for( ; j > 0; j-- )
 8008aca:	e019      	b.n	8008b00 <mbedtls_mpi_mul_mpi+0x11c>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	6899      	ldr	r1, [r3, #8]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	689a      	ldr	r2, [r3, #8]
 8008ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008ada:	3b01      	subs	r3, #1
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	18d0      	adds	r0, r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	689a      	ldr	r2, [r3, #8]
 8008ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008aea:	3b01      	subs	r3, #1
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4602      	mov	r2, r0
 8008af4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008af6:	f7fe fbcc 	bl	8007292 <mpi_mul_hlp>
    for( ; j > 0; j-- )
 8008afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008afc:	3b01      	subs	r3, #1
 8008afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1e2      	bne.n	8008acc <mbedtls_mpi_mul_mpi+0xe8>

    X->s = A->s * B->s;
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	6812      	ldr	r2, [r2, #0]
 8008b0e:	fb03 f202 	mul.w	r2, r3, r2
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	601a      	str	r2, [r3, #0]

cleanup:

    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 8008b16:	f107 0314 	add.w	r3, r7, #20
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7fd f990 	bl	8005e40 <mbedtls_mpi_free>
 8008b20:	f107 0320 	add.w	r3, r7, #32
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7fd f98b 	bl	8005e40 <mbedtls_mpi_free>

    return( ret );
 8008b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3738      	adds	r7, #56	@ 0x38
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <mbedtls_mpi_mul_int>:

/*
 * Baseline multiplication: X = A * b
 */
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b088      	sub	sp, #32
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    _B.s = 1;
 8008b40:	2301      	movs	r3, #1
 8008b42:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 8008b44:	2301      	movs	r3, #1
 8008b46:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 8008b48:	f107 0310 	add.w	r3, r7, #16
 8008b4c:	61fb      	str	r3, [r7, #28]
    p[0] = b;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	613b      	str	r3, [r7, #16]

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 8008b52:	f107 0314 	add.w	r3, r7, #20
 8008b56:	461a      	mov	r2, r3
 8008b58:	68b9      	ldr	r1, [r7, #8]
 8008b5a:	68f8      	ldr	r0, [r7, #12]
 8008b5c:	f7ff ff42 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 8008b60:	4603      	mov	r3, r0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3720      	adds	r7, #32
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <mbedtls_int_div_int>:
 * Unsigned integer divide - double mbedtls_mpi_uint dividend, u1/u0, and
 * mbedtls_mpi_uint divisor, d
 */
static mbedtls_mpi_uint mbedtls_int_div_int( mbedtls_mpi_uint u1,
            mbedtls_mpi_uint u0, mbedtls_mpi_uint d, mbedtls_mpi_uint *r )
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b090      	sub	sp, #64	@ 0x40
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	60f8      	str	r0, [r7, #12]
 8008b72:	60b9      	str	r1, [r7, #8]
 8008b74:	607a      	str	r2, [r7, #4]
 8008b76:	603b      	str	r3, [r7, #0]
#if defined(MBEDTLS_HAVE_UDBL)
    mbedtls_t_udbl dividend, quotient;
#else
    const mbedtls_mpi_uint radix = (mbedtls_mpi_uint) 1 << biH;
 8008b78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008b7c:	633b      	str	r3, [r7, #48]	@ 0x30
    const mbedtls_mpi_uint uint_halfword_mask = ( (mbedtls_mpi_uint) 1 << biH ) - 1;
 8008b7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d003      	beq.n	8008b92 <mbedtls_int_div_int+0x28>
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d309      	bcc.n	8008ba6 <mbedtls_int_div_int+0x3c>
    {
        if (r != NULL) *r = ~0;
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d003      	beq.n	8008ba0 <mbedtls_int_div_int+0x36>
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b9e:	601a      	str	r2, [r3, #0]

        return ( ~0 );
 8008ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ba4:	e0a7      	b.n	8008cf6 <mbedtls_int_div_int+0x18c>
     */

    /*
     * Normalize the divisor, d, and dividend, u0, u1
     */
    s = mbedtls_clz( d );
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f7fd fc4d 	bl	8006446 <mbedtls_clz>
 8008bac:	62b8      	str	r0, [r7, #40]	@ 0x28
    d = d << s;
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb6:	607b      	str	r3, [r7, #4]

    u1 = u1 << s;
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc0:	60fb      	str	r3, [r7, #12]
    u1 |= ( u0 >> ( biL - s ) ) & ( -(mbedtls_mpi_sint)s >> ( biL - 1 ) );
 8008bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc4:	f1c3 0320 	rsb	r3, r3, #32
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	fa22 f303 	lsr.w	r3, r2, r3
 8008bce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008bd0:	4252      	negs	r2, r2
 8008bd2:	17d2      	asrs	r2, r2, #31
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	60fb      	str	r3, [r7, #12]
    u0 =  u0 << s;
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be0:	fa02 f303 	lsl.w	r3, r2, r3
 8008be4:	60bb      	str	r3, [r7, #8]

    d1 = d >> biH;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	0c1b      	lsrs	r3, r3, #16
 8008bea:	627b      	str	r3, [r7, #36]	@ 0x24
    d0 = d & uint_halfword_mask;
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	623b      	str	r3, [r7, #32]

    u0_msw = u0 >> biH;
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	0c1b      	lsrs	r3, r3, #16
 8008bf8:	61fb      	str	r3, [r7, #28]
    u0_lsw = u0 & uint_halfword_mask;
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bfe:	4013      	ands	r3, r2
 8008c00:	61bb      	str	r3, [r7, #24]

    /*
     * Find the first quotient and remainder
     */
    q1 = u1 / d1;
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
    r0 = u1 - d1 * q1;
 8008c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c10:	fb02 f303 	mul.w	r3, r2, r3
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	1ad3      	subs	r3, r2, r3
 8008c18:	637b      	str	r3, [r7, #52]	@ 0x34

    while( q1 >= radix || ( q1 * d0 > radix * r0 + u0_msw ) )
 8008c1a:	e00a      	b.n	8008c32 <mbedtls_int_div_int+0xc8>
    {
        q1 -= 1;
 8008c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	63bb      	str	r3, [r7, #56]	@ 0x38
        r0 += d1;
 8008c22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c26:	4413      	add	r3, r2
 8008c28:	637b      	str	r3, [r7, #52]	@ 0x34

        if ( r0 >= radix ) break;
 8008c2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d210      	bcs.n	8008c54 <mbedtls_int_div_int+0xea>
    while( q1 >= radix || ( q1 * d0 > radix * r0 + u0_msw ) )
 8008c32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d2f0      	bcs.n	8008c1c <mbedtls_int_div_int+0xb2>
 8008c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c3c:	6a3a      	ldr	r2, [r7, #32]
 8008c3e:	fb03 f202 	mul.w	r2, r3, r2
 8008c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c44:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008c46:	fb03 f101 	mul.w	r1, r3, r1
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	440b      	add	r3, r1
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d8e4      	bhi.n	8008c1c <mbedtls_int_div_int+0xb2>
 8008c52:	e000      	b.n	8008c56 <mbedtls_int_div_int+0xec>
        if ( r0 >= radix ) break;
 8008c54:	bf00      	nop
    }

    rAX = ( u1 * radix ) + ( u0_msw - q1 * d );
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c5a:	fb03 f202 	mul.w	r2, r3, r2
 8008c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c60:	6879      	ldr	r1, [r7, #4]
 8008c62:	fb01 f303 	mul.w	r3, r1, r3
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	69fa      	ldr	r2, [r7, #28]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	617b      	str	r3, [r7, #20]
    q0 = rAX / d1;
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
    r0 = rAX - q0 * d1;
 8008c78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c7c:	fb02 f303 	mul.w	r3, r2, r3
 8008c80:	697a      	ldr	r2, [r7, #20]
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	637b      	str	r3, [r7, #52]	@ 0x34

    while( q0 >= radix || ( q0 * d0 > radix * r0 + u0_lsw ) )
 8008c86:	e00a      	b.n	8008c9e <mbedtls_int_div_int+0x134>
    {
        q0 -= 1;
 8008c88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        r0 += d1;
 8008c8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c92:	4413      	add	r3, r2
 8008c94:	637b      	str	r3, [r7, #52]	@ 0x34

        if ( r0 >= radix ) break;
 8008c96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d210      	bcs.n	8008cc0 <mbedtls_int_div_int+0x156>
    while( q0 >= radix || ( q0 * d0 > radix * r0 + u0_lsw ) )
 8008c9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d2f0      	bcs.n	8008c88 <mbedtls_int_div_int+0x11e>
 8008ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ca8:	6a3a      	ldr	r2, [r7, #32]
 8008caa:	fb03 f202 	mul.w	r2, r3, r2
 8008cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008cb2:	fb03 f101 	mul.w	r1, r3, r1
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	440b      	add	r3, r1
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d8e4      	bhi.n	8008c88 <mbedtls_int_div_int+0x11e>
 8008cbe:	e000      	b.n	8008cc2 <mbedtls_int_div_int+0x158>
        if ( r0 >= radix ) break;
 8008cc0:	bf00      	nop
    }

    if (r != NULL)
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00e      	beq.n	8008ce6 <mbedtls_int_div_int+0x17c>
        *r = ( rAX * radix + u0_lsw - q0 * d ) >> s;
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ccc:	fb03 f202 	mul.w	r2, r3, r2
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	441a      	add	r2, r3
 8008cd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cd6:	6879      	ldr	r1, [r7, #4]
 8008cd8:	fb01 f303 	mul.w	r3, r1, r3
 8008cdc:	1ad2      	subs	r2, r2, r3
 8008cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce0:	40da      	lsrs	r2, r3
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	601a      	str	r2, [r3, #0]

    quotient = q1 * radix + q0;
 8008ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cea:	fb02 f303 	mul.w	r3, r2, r3
 8008cee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008cf0:	4413      	add	r3, r2
 8008cf2:	613b      	str	r3, [r7, #16]

    return quotient;
 8008cf4:	693b      	ldr	r3, [r7, #16]
#endif
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3740      	adds	r7, #64	@ 0x40
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <mbedtls_mpi_div_mpi>:
/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A,
                         const mbedtls_mpi *B )
{
 8008cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d00:	b099      	sub	sp, #100	@ 0x64
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	60f8      	str	r0, [r7, #12]
 8008d06:	60b9      	str	r1, [r7, #8]
 8008d08:	607a      	str	r2, [r7, #4]
 8008d0a:	603b      	str	r3, [r7, #0]
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	6838      	ldr	r0, [r7, #0]
 8008d10:	f7fe f864 	bl	8006ddc <mbedtls_mpi_cmp_int>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d102      	bne.n	8008d20 <mbedtls_mpi_div_mpi+0x22>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 8008d1a:	f06f 030b 	mvn.w	r3, #11
 8008d1e:	e28a      	b.n	8009236 <mbedtls_mpi_div_mpi+0x538>

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 8008d20:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7fd f878 	bl	8005e1a <mbedtls_mpi_init>
 8008d2a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7fd f873 	bl	8005e1a <mbedtls_mpi_init>
 8008d34:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7fd f86e 	bl	8005e1a <mbedtls_mpi_init>
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );
 8008d3e:	f107 031c 	add.w	r3, r7, #28
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7fd f869 	bl	8005e1a <mbedtls_mpi_init>
 8008d48:	f107 0310 	add.w	r3, r7, #16
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7fd f864 	bl	8005e1a <mbedtls_mpi_init>

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 8008d52:	6839      	ldr	r1, [r7, #0]
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f7fd ff24 	bl	8006ba2 <mbedtls_mpi_cmp_abs>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	da19      	bge.n	8008d94 <mbedtls_mpi_div_mpi+0x96>
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d008      	beq.n	8008d78 <mbedtls_mpi_div_mpi+0x7a>
 8008d66:	2100      	movs	r1, #0
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f7fd fa97 	bl	800629c <mbedtls_mpi_lset>
 8008d6e:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8008d70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f040 8245 	bne.w	8009202 <mbedtls_mpi_div_mpi+0x504>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d008      	beq.n	8008d90 <mbedtls_mpi_div_mpi+0x92>
 8008d7e:	6879      	ldr	r1, [r7, #4]
 8008d80:	68b8      	ldr	r0, [r7, #8]
 8008d82:	f7fd f92c 	bl	8005fde <mbedtls_mpi_copy>
 8008d86:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8008d88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f040 8239 	bne.w	8009202 <mbedtls_mpi_div_mpi+0x504>
        return( 0 );
 8008d90:	2300      	movs	r3, #0
 8008d92:	e250      	b.n	8009236 <mbedtls_mpi_div_mpi+0x538>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 8008d94:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008d98:	6879      	ldr	r1, [r7, #4]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7fd f91f 	bl	8005fde <mbedtls_mpi_copy>
 8008da0:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8008da2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f040 822c 	bne.w	8009202 <mbedtls_mpi_div_mpi+0x504>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 8008daa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7fd f914 	bl	8005fde <mbedtls_mpi_copy>
 8008db6:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8008db8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f040 8221 	bne.w	8009202 <mbedtls_mpi_div_mpi+0x504>
    X.s = Y.s = 1;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dc6:	643b      	str	r3, [r7, #64]	@ 0x40

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	1c9a      	adds	r2, r3, #2
 8008dce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008dd2:	4611      	mov	r1, r2
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7fd f859 	bl	8005e8c <mbedtls_mpi_grow>
 8008dda:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8008ddc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f040 820f 	bne.w	8009202 <mbedtls_mpi_div_mpi+0x504>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 8008de4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008de8:	2100      	movs	r1, #0
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7fd fa56 	bl	800629c <mbedtls_mpi_lset>
 8008df0:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8008df2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f040 8204 	bne.w	8009202 <mbedtls_mpi_div_mpi+0x504>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 8008dfa:	f107 031c 	add.w	r3, r7, #28
 8008dfe:	2102      	movs	r1, #2
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7fd f843 	bl	8005e8c <mbedtls_mpi_grow>
 8008e06:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8008e08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	f040 81f9 	bne.w	8009202 <mbedtls_mpi_div_mpi+0x504>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 8008e10:	f107 0310 	add.w	r3, r7, #16
 8008e14:	2103      	movs	r1, #3
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fd f838 	bl	8005e8c <mbedtls_mpi_grow>
 8008e1c:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8008e1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f040 81ee 	bne.w	8009202 <mbedtls_mpi_div_mpi+0x504>

    k = mbedtls_mpi_bitlen( &Y ) % biL;
 8008e26:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fd fb2c 	bl	8006488 <mbedtls_mpi_bitlen>
 8008e30:	4603      	mov	r3, r0
 8008e32:	f003 031f 	and.w	r3, r3, #31
 8008e36:	657b      	str	r3, [r7, #84]	@ 0x54
    if( k < biL - 1 )
 8008e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e3a:	2b1e      	cmp	r3, #30
 8008e3c:	d819      	bhi.n	8008e72 <mbedtls_mpi_div_mpi+0x174>
    {
        k = biL - 1 - k;
 8008e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e40:	f1c3 031f 	rsb	r3, r3, #31
 8008e44:	657b      	str	r3, [r7, #84]	@ 0x54
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 8008e46:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008e4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7fd fd6b 	bl	8006928 <mbedtls_mpi_shift_l>
 8008e52:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8008e54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	f040 81d3 	bne.w	8009202 <mbedtls_mpi_div_mpi+0x504>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 8008e5c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008e60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fd fd60 	bl	8006928 <mbedtls_mpi_shift_l>
 8008e68:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8008e6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d002      	beq.n	8008e76 <mbedtls_mpi_div_mpi+0x178>
 8008e70:	e1c7      	b.n	8009202 <mbedtls_mpi_div_mpi+0x504>
    }
    else k = 0;
 8008e72:	2300      	movs	r3, #0
 8008e74:	657b      	str	r3, [r7, #84]	@ 0x54

    n = X.n - 1;
 8008e76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	653b      	str	r3, [r7, #80]	@ 0x50
    t = Y.n - 1;
 8008e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 8008e82:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008e84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e86:	1ad3      	subs	r3, r2, r3
 8008e88:	015a      	lsls	r2, r3, #5
 8008e8a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008e8e:	4611      	mov	r1, r2
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7fd fd49 	bl	8006928 <mbedtls_mpi_shift_l>
 8008e96:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8008e98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	f040 81b1 	bne.w	8009202 <mbedtls_mpi_div_mpi+0x504>

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 8008ea0:	e016      	b.n	8008ed0 <mbedtls_mpi_div_mpi+0x1d2>
    {
        Z.p[n - t]++;
 8008ea2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ea4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008ea6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ea8:	1acb      	subs	r3, r1, r3
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	4413      	add	r3, r2
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	3201      	adds	r2, #1
 8008eb2:	601a      	str	r2, [r3, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 8008eb4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8008eb8:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8008ebc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7fe f95a 	bl	800717a <mbedtls_mpi_sub_mpi>
 8008ec6:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8008ec8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f040 8199 	bne.w	8009202 <mbedtls_mpi_div_mpi+0x504>
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 8008ed0:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8008ed4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008ed8:	4611      	mov	r1, r2
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fd fee3 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	dadd      	bge.n	8008ea2 <mbedtls_mpi_div_mpi+0x1a4>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 8008ee6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008ee8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008eea:	1ad3      	subs	r3, r2, r3
 8008eec:	015a      	lsls	r2, r3, #5
 8008eee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fd fdb9 	bl	8006a6c <mbedtls_mpi_shift_r>
 8008efa:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8008efc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f040 817f 	bne.w	8009202 <mbedtls_mpi_div_mpi+0x504>

    for( i = n; i > t ; i-- )
 8008f04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f08:	e13b      	b.n	8009182 <mbedtls_mpi_div_mpi+0x484>
    {
        if( X.p[i] >= Y.p[t] )
 8008f0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	440b      	add	r3, r1
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d30c      	bcc.n	8008f3c <mbedtls_mpi_div_mpi+0x23e>
            Z.p[i - t - 1] = ~0;
 8008f22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f24:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008f26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f28:	1acb      	subs	r3, r1, r3
 8008f2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	4413      	add	r3, r2
 8008f34:	f04f 32ff 	mov.w	r2, #4294967295
 8008f38:	601a      	str	r2, [r3, #0]
 8008f3a:	e021      	b.n	8008f80 <mbedtls_mpi_div_mpi+0x282>
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 8008f3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	4413      	add	r3, r2
 8008f44:	6818      	ldr	r0, [r3, #0]
 8008f46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	4413      	add	r3, r2
 8008f54:	681d      	ldr	r5, [r3, #0]
                                                            Y.p[t], NULL);
 8008f56:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008f58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	4413      	add	r3, r2
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 8008f5e:	681e      	ldr	r6, [r3, #0]
 8008f60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f62:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008f64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f66:	1acb      	subs	r3, r1, r3
 8008f68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	18d4      	adds	r4, r2, r3
 8008f72:	2300      	movs	r3, #0
 8008f74:	4632      	mov	r2, r6
 8008f76:	4629      	mov	r1, r5
 8008f78:	f7ff fdf7 	bl	8008b6a <mbedtls_int_div_int>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	6023      	str	r3, [r4, #0]
        }

        Z.p[i - t - 1]++;
 8008f80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f82:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008f84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f86:	1acb      	subs	r3, r1, r3
 8008f88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4413      	add	r3, r2
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	3201      	adds	r2, #1
 8008f96:	601a      	str	r2, [r3, #0]
        do
        {
            Z.p[i - t - 1]--;
 8008f98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f9a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008f9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f9e:	1acb      	subs	r3, r1, r3
 8008fa0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008fa4:	3b01      	subs	r3, #1
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	4413      	add	r3, r2
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	3a01      	subs	r2, #1
 8008fae:	601a      	str	r2, [r3, #0]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 8008fb0:	f107 031c 	add.w	r3, r7, #28
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7fd f970 	bl	800629c <mbedtls_mpi_lset>
 8008fbc:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8008fbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	f040 811e 	bne.w	8009202 <mbedtls_mpi_div_mpi+0x504>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 8008fc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d008      	beq.n	8008fde <mbedtls_mpi_div_mpi+0x2e0>
 8008fcc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008fce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	4413      	add	r3, r2
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	e000      	b.n	8008fe0 <mbedtls_mpi_div_mpi+0x2e2>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fe2:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
 8008fe4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008fe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	441a      	add	r2, r3
 8008fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fee:	3304      	adds	r3, #4
 8008ff0:	6812      	ldr	r2, [r2, #0]
 8008ff2:	601a      	str	r2, [r3, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 8008ff4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ff6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008ff8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ffa:	1acb      	subs	r3, r1, r3
 8008ffc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009000:	3b01      	subs	r3, #1
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	4413      	add	r3, r2
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	f107 011c 	add.w	r1, r7, #28
 800900c:	f107 031c 	add.w	r3, r7, #28
 8009010:	4618      	mov	r0, r3
 8009012:	f7ff fd8f 	bl	8008b34 <mbedtls_mpi_mul_int>
 8009016:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8009018:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800901a:	2b00      	cmp	r3, #0
 800901c:	f040 80f1 	bne.w	8009202 <mbedtls_mpi_div_mpi+0x504>

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 8009020:	f107 0310 	add.w	r3, r7, #16
 8009024:	2100      	movs	r1, #0
 8009026:	4618      	mov	r0, r3
 8009028:	f7fd f938 	bl	800629c <mbedtls_mpi_lset>
 800902c:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800902e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009030:	2b00      	cmp	r3, #0
 8009032:	f040 80e6 	bne.w	8009202 <mbedtls_mpi_div_mpi+0x504>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 8009036:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009038:	2b01      	cmp	r3, #1
 800903a:	d908      	bls.n	800904e <mbedtls_mpi_div_mpi+0x350>
 800903c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800903e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009040:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009044:	3b02      	subs	r3, #2
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	4413      	add	r3, r2
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	e000      	b.n	8009050 <mbedtls_mpi_div_mpi+0x352>
 800904e:	2300      	movs	r3, #0
 8009050:	69ba      	ldr	r2, [r7, #24]
 8009052:	6013      	str	r3, [r2, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 8009054:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009056:	2b00      	cmp	r3, #0
 8009058:	d008      	beq.n	800906c <mbedtls_mpi_div_mpi+0x36e>
 800905a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800905c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800905e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009062:	3b01      	subs	r3, #1
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	4413      	add	r3, r2
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	e000      	b.n	800906e <mbedtls_mpi_div_mpi+0x370>
 800906c:	2300      	movs	r3, #0
 800906e:	69ba      	ldr	r2, [r7, #24]
 8009070:	3204      	adds	r2, #4
 8009072:	6013      	str	r3, [r2, #0]
            T2.p[2] = X.p[i];
 8009074:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009076:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	441a      	add	r2, r3
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	3308      	adds	r3, #8
 8009080:	6812      	ldr	r2, [r2, #0]
 8009082:	601a      	str	r2, [r3, #0]
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 8009084:	f107 0210 	add.w	r2, r7, #16
 8009088:	f107 031c 	add.w	r3, r7, #28
 800908c:	4611      	mov	r1, r2
 800908e:	4618      	mov	r0, r3
 8009090:	f7fd fe09 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	f73f af7e 	bgt.w	8008f98 <mbedtls_mpi_div_mpi+0x29a>

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 800909c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800909e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80090a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090a2:	1acb      	subs	r3, r1, r3
 80090a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80090a8:	3b01      	subs	r3, #1
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	4413      	add	r3, r2
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80090b4:	f107 031c 	add.w	r3, r7, #28
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7ff fd3b 	bl	8008b34 <mbedtls_mpi_mul_int>
 80090be:	65f8      	str	r0, [r7, #92]	@ 0x5c
 80090c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f040 809d 	bne.w	8009202 <mbedtls_mpi_div_mpi+0x504>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 80090c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80090ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	3b01      	subs	r3, #1
 80090d0:	015a      	lsls	r2, r3, #5
 80090d2:	f107 031c 	add.w	r3, r7, #28
 80090d6:	4611      	mov	r1, r2
 80090d8:	4618      	mov	r0, r3
 80090da:	f7fd fc25 	bl	8006928 <mbedtls_mpi_shift_l>
 80090de:	65f8      	str	r0, [r7, #92]	@ 0x5c
 80090e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f040 808d 	bne.w	8009202 <mbedtls_mpi_div_mpi+0x504>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 80090e8:	f107 021c 	add.w	r2, r7, #28
 80090ec:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80090f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fe f840 	bl	800717a <mbedtls_mpi_sub_mpi>
 80090fa:	65f8      	str	r0, [r7, #92]	@ 0x5c
 80090fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d17f      	bne.n	8009202 <mbedtls_mpi_div_mpi+0x504>

        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 8009102:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8009106:	2100      	movs	r1, #0
 8009108:	4618      	mov	r0, r3
 800910a:	f7fd fe67 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	da33      	bge.n	800917c <mbedtls_mpi_div_mpi+0x47e>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 8009114:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8009118:	f107 031c 	add.w	r3, r7, #28
 800911c:	4611      	mov	r1, r2
 800911e:	4618      	mov	r0, r3
 8009120:	f7fc ff5d 	bl	8005fde <mbedtls_mpi_copy>
 8009124:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8009126:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009128:	2b00      	cmp	r3, #0
 800912a:	d16a      	bne.n	8009202 <mbedtls_mpi_div_mpi+0x504>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 800912c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800912e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	3b01      	subs	r3, #1
 8009134:	015a      	lsls	r2, r3, #5
 8009136:	f107 031c 	add.w	r3, r7, #28
 800913a:	4611      	mov	r1, r2
 800913c:	4618      	mov	r0, r3
 800913e:	f7fd fbf3 	bl	8006928 <mbedtls_mpi_shift_l>
 8009142:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8009144:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009146:	2b00      	cmp	r3, #0
 8009148:	d15b      	bne.n	8009202 <mbedtls_mpi_div_mpi+0x504>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 800914a:	f107 021c 	add.w	r2, r7, #28
 800914e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8009152:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8009156:	4618      	mov	r0, r3
 8009158:	f7fd ffcb 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800915c:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800915e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009160:	2b00      	cmp	r3, #0
 8009162:	d14e      	bne.n	8009202 <mbedtls_mpi_div_mpi+0x504>
            Z.p[i - t - 1]--;
 8009164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009166:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009168:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800916a:	1acb      	subs	r3, r1, r3
 800916c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009170:	3b01      	subs	r3, #1
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	4413      	add	r3, r2
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	3a01      	subs	r2, #1
 800917a:	601a      	str	r2, [r3, #0]
    for( i = n; i > t ; i-- )
 800917c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800917e:	3b01      	subs	r3, #1
 8009180:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009182:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009184:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009186:	429a      	cmp	r2, r3
 8009188:	f63f aebf 	bhi.w	8008f0a <mbedtls_mpi_div_mpi+0x20c>
        }
    }

    if( Q != NULL )
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d011      	beq.n	80091b6 <mbedtls_mpi_div_mpi+0x4b8>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 8009192:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009196:	4619      	mov	r1, r3
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f7fc ff20 	bl	8005fde <mbedtls_mpi_copy>
 800919e:	65f8      	str	r0, [r7, #92]	@ 0x5c
 80091a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d12d      	bne.n	8009202 <mbedtls_mpi_div_mpi+0x504>
        Q->s = A->s * B->s;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	683a      	ldr	r2, [r7, #0]
 80091ac:	6812      	ldr	r2, [r2, #0]
 80091ae:	fb03 f202 	mul.w	r2, r3, r2
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	601a      	str	r2, [r3, #0]
    }

    if( R != NULL )
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d021      	beq.n	8009200 <mbedtls_mpi_div_mpi+0x502>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 80091bc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80091c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fd fc52 	bl	8006a6c <mbedtls_mpi_shift_r>
 80091c8:	65f8      	str	r0, [r7, #92]	@ 0x5c
 80091ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d118      	bne.n	8009202 <mbedtls_mpi_div_mpi+0x504>
        X.s = A->s;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	643b      	str	r3, [r7, #64]	@ 0x40
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 80091d6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80091da:	4619      	mov	r1, r3
 80091dc:	68b8      	ldr	r0, [r7, #8]
 80091de:	f7fc fefe 	bl	8005fde <mbedtls_mpi_copy>
 80091e2:	65f8      	str	r0, [r7, #92]	@ 0x5c
 80091e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d10b      	bne.n	8009202 <mbedtls_mpi_div_mpi+0x504>

        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 80091ea:	2100      	movs	r1, #0
 80091ec:	68b8      	ldr	r0, [r7, #8]
 80091ee:	f7fd fdf5 	bl	8006ddc <mbedtls_mpi_cmp_int>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d103      	bne.n	8009200 <mbedtls_mpi_div_mpi+0x502>
            R->s = 1;
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	2201      	movs	r2, #1
 80091fc:	601a      	str	r2, [r3, #0]
 80091fe:	e000      	b.n	8009202 <mbedtls_mpi_div_mpi+0x504>
    }

cleanup:
 8009200:	bf00      	nop

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 8009202:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8009206:	4618      	mov	r0, r3
 8009208:	f7fc fe1a 	bl	8005e40 <mbedtls_mpi_free>
 800920c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009210:	4618      	mov	r0, r3
 8009212:	f7fc fe15 	bl	8005e40 <mbedtls_mpi_free>
 8009216:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800921a:	4618      	mov	r0, r3
 800921c:	f7fc fe10 	bl	8005e40 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 8009220:	f107 031c 	add.w	r3, r7, #28
 8009224:	4618      	mov	r0, r3
 8009226:	f7fc fe0b 	bl	8005e40 <mbedtls_mpi_free>
 800922a:	f107 0310 	add.w	r3, r7, #16
 800922e:	4618      	mov	r0, r3
 8009230:	f7fc fe06 	bl	8005e40 <mbedtls_mpi_free>

    return( ret );
 8009234:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8009236:	4618      	mov	r0, r3
 8009238:	3764      	adds	r7, #100	@ 0x64
 800923a:	46bd      	mov	sp, r7
 800923c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800923e <mbedtls_mpi_mod_mpi>:

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b086      	sub	sp, #24
 8009242:	af00      	add	r7, sp, #0
 8009244:	60f8      	str	r0, [r7, #12]
 8009246:	60b9      	str	r1, [r7, #8]
 8009248:	607a      	str	r2, [r7, #4]
    int ret;
    MPI_VALIDATE_RET( R != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 800924a:	2100      	movs	r1, #0
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f7fd fdc5 	bl	8006ddc <mbedtls_mpi_cmp_int>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	da02      	bge.n	800925e <mbedtls_mpi_mod_mpi+0x20>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 8009258:	f06f 0309 	mvn.w	r3, #9
 800925c:	e02d      	b.n	80092ba <mbedtls_mpi_mod_mpi+0x7c>

    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	68f9      	ldr	r1, [r7, #12]
 8009264:	2000      	movs	r0, #0
 8009266:	f7ff fd4a 	bl	8008cfe <mbedtls_mpi_div_mpi>
 800926a:	6178      	str	r0, [r7, #20]
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d122      	bne.n	80092b8 <mbedtls_mpi_mod_mpi+0x7a>

    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 8009272:	e008      	b.n	8009286 <mbedtls_mpi_mod_mpi+0x48>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	68f9      	ldr	r1, [r7, #12]
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f7fd ff3a 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800927e:	6178      	str	r0, [r7, #20]
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d118      	bne.n	80092b8 <mbedtls_mpi_mod_mpi+0x7a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 8009286:	2100      	movs	r1, #0
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f7fd fda7 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	dbef      	blt.n	8009274 <mbedtls_mpi_mod_mpi+0x36>

    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 8009294:	e008      	b.n	80092a8 <mbedtls_mpi_mod_mpi+0x6a>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	68f9      	ldr	r1, [r7, #12]
 800929a:	68f8      	ldr	r0, [r7, #12]
 800929c:	f7fd ff6d 	bl	800717a <mbedtls_mpi_sub_mpi>
 80092a0:	6178      	str	r0, [r7, #20]
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d107      	bne.n	80092b8 <mbedtls_mpi_mod_mpi+0x7a>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 80092a8:	6879      	ldr	r1, [r7, #4]
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f7fd fcfb 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	daef      	bge.n	8009296 <mbedtls_mpi_mod_mpi+0x58>

cleanup:
 80092b6:	bf00      	nop

    return( ret );
 80092b8:	697b      	ldr	r3, [r7, #20]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3718      	adds	r7, #24
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b090      	sub	sp, #64	@ 0x40
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	60f8      	str	r0, [r7, #12]
 80092ca:	60b9      	str	r1, [r7, #8]
 80092cc:	607a      	str	r2, [r7, #4]

    MPI_VALIDATE_RET( G != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
 80092ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fc fda1 	bl	8005e1a <mbedtls_mpi_init>
 80092d8:	f107 031c 	add.w	r3, r7, #28
 80092dc:	4618      	mov	r0, r3
 80092de:	f7fc fd9c 	bl	8005e1a <mbedtls_mpi_init>
 80092e2:	f107 0310 	add.w	r3, r7, #16
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fc fd97 	bl	8005e1a <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 80092ec:	f107 031c 	add.w	r3, r7, #28
 80092f0:	68b9      	ldr	r1, [r7, #8]
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7fc fe73 	bl	8005fde <mbedtls_mpi_copy>
 80092f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80092fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f040 80ae 	bne.w	800945e <mbedtls_mpi_gcd+0x19c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 8009302:	f107 0310 	add.w	r3, r7, #16
 8009306:	6879      	ldr	r1, [r7, #4]
 8009308:	4618      	mov	r0, r3
 800930a:	f7fc fe68 	bl	8005fde <mbedtls_mpi_copy>
 800930e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8009310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009312:	2b00      	cmp	r3, #0
 8009314:	f040 80a3 	bne.w	800945e <mbedtls_mpi_gcd+0x19c>

    lz = mbedtls_mpi_lsb( &TA );
 8009318:	f107 031c 	add.w	r3, r7, #28
 800931c:	4618      	mov	r0, r3
 800931e:	f7fd f85f 	bl	80063e0 <mbedtls_mpi_lsb>
 8009322:	63b8      	str	r0, [r7, #56]	@ 0x38
    lzt = mbedtls_mpi_lsb( &TB );
 8009324:	f107 0310 	add.w	r3, r7, #16
 8009328:	4618      	mov	r0, r3
 800932a:	f7fd f859 	bl	80063e0 <mbedtls_mpi_lsb>
 800932e:	6378      	str	r0, [r7, #52]	@ 0x34

    if( lzt < lz )
 8009330:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009334:	429a      	cmp	r2, r3
 8009336:	d201      	bcs.n	800933c <mbedtls_mpi_gcd+0x7a>
        lz = lzt;
 8009338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800933a:	63bb      	str	r3, [r7, #56]	@ 0x38

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 800933c:	f107 031c 	add.w	r3, r7, #28
 8009340:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009342:	4618      	mov	r0, r3
 8009344:	f7fd fb92 	bl	8006a6c <mbedtls_mpi_shift_r>
 8009348:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800934a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800934c:	2b00      	cmp	r3, #0
 800934e:	f040 8086 	bne.w	800945e <mbedtls_mpi_gcd+0x19c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 8009352:	f107 0310 	add.w	r3, r7, #16
 8009356:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009358:	4618      	mov	r0, r3
 800935a:	f7fd fb87 	bl	8006a6c <mbedtls_mpi_shift_r>
 800935e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8009360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009362:	2b00      	cmp	r3, #0
 8009364:	d17b      	bne.n	800945e <mbedtls_mpi_gcd+0x19c>

    TA.s = TB.s = 1;
 8009366:	2301      	movs	r3, #1
 8009368:	613b      	str	r3, [r7, #16]
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	61fb      	str	r3, [r7, #28]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 800936e:	e059      	b.n	8009424 <mbedtls_mpi_gcd+0x162>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 8009370:	f107 031c 	add.w	r3, r7, #28
 8009374:	4618      	mov	r0, r3
 8009376:	f7fd f833 	bl	80063e0 <mbedtls_mpi_lsb>
 800937a:	4602      	mov	r2, r0
 800937c:	f107 031c 	add.w	r3, r7, #28
 8009380:	4611      	mov	r1, r2
 8009382:	4618      	mov	r0, r3
 8009384:	f7fd fb72 	bl	8006a6c <mbedtls_mpi_shift_r>
 8009388:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800938a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800938c:	2b00      	cmp	r3, #0
 800938e:	d166      	bne.n	800945e <mbedtls_mpi_gcd+0x19c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 8009390:	f107 0310 	add.w	r3, r7, #16
 8009394:	4618      	mov	r0, r3
 8009396:	f7fd f823 	bl	80063e0 <mbedtls_mpi_lsb>
 800939a:	4602      	mov	r2, r0
 800939c:	f107 0310 	add.w	r3, r7, #16
 80093a0:	4611      	mov	r1, r2
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7fd fb62 	bl	8006a6c <mbedtls_mpi_shift_r>
 80093a8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80093aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d156      	bne.n	800945e <mbedtls_mpi_gcd+0x19c>

        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 80093b0:	f107 0210 	add.w	r2, r7, #16
 80093b4:	f107 031c 	add.w	r3, r7, #28
 80093b8:	4611      	mov	r1, r2
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fd fc73 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	db17      	blt.n	80093f6 <mbedtls_mpi_gcd+0x134>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 80093c6:	f107 0210 	add.w	r2, r7, #16
 80093ca:	f107 011c 	add.w	r1, r7, #28
 80093ce:	f107 031c 	add.w	r3, r7, #28
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7fd fe2d 	bl	8007032 <mbedtls_mpi_sub_abs>
 80093d8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80093da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d13e      	bne.n	800945e <mbedtls_mpi_gcd+0x19c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 80093e0:	f107 031c 	add.w	r3, r7, #28
 80093e4:	2101      	movs	r1, #1
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fd fb40 	bl	8006a6c <mbedtls_mpi_shift_r>
 80093ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80093ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d017      	beq.n	8009424 <mbedtls_mpi_gcd+0x162>
 80093f4:	e033      	b.n	800945e <mbedtls_mpi_gcd+0x19c>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 80093f6:	f107 021c 	add.w	r2, r7, #28
 80093fa:	f107 0110 	add.w	r1, r7, #16
 80093fe:	f107 0310 	add.w	r3, r7, #16
 8009402:	4618      	mov	r0, r3
 8009404:	f7fd fe15 	bl	8007032 <mbedtls_mpi_sub_abs>
 8009408:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800940a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800940c:	2b00      	cmp	r3, #0
 800940e:	d126      	bne.n	800945e <mbedtls_mpi_gcd+0x19c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 8009410:	f107 0310 	add.w	r3, r7, #16
 8009414:	2101      	movs	r1, #1
 8009416:	4618      	mov	r0, r3
 8009418:	f7fd fb28 	bl	8006a6c <mbedtls_mpi_shift_r>
 800941c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800941e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009420:	2b00      	cmp	r3, #0
 8009422:	d11c      	bne.n	800945e <mbedtls_mpi_gcd+0x19c>
    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 8009424:	f107 031c 	add.w	r3, r7, #28
 8009428:	2100      	movs	r1, #0
 800942a:	4618      	mov	r0, r3
 800942c:	f7fd fcd6 	bl	8006ddc <mbedtls_mpi_cmp_int>
 8009430:	4603      	mov	r3, r0
 8009432:	2b00      	cmp	r3, #0
 8009434:	d19c      	bne.n	8009370 <mbedtls_mpi_gcd+0xae>
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 8009436:	f107 0310 	add.w	r3, r7, #16
 800943a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800943c:	4618      	mov	r0, r3
 800943e:	f7fd fa73 	bl	8006928 <mbedtls_mpi_shift_l>
 8009442:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8009444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009446:	2b00      	cmp	r3, #0
 8009448:	d109      	bne.n	800945e <mbedtls_mpi_gcd+0x19c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 800944a:	f107 0310 	add.w	r3, r7, #16
 800944e:	4619      	mov	r1, r3
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f7fc fdc4 	bl	8005fde <mbedtls_mpi_copy>
 8009456:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8009458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800945a:	2b00      	cmp	r3, #0

cleanup:
 800945c:	bf00      	nop

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 800945e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009462:	4618      	mov	r0, r3
 8009464:	f7fc fcec 	bl	8005e40 <mbedtls_mpi_free>
 8009468:	f107 031c 	add.w	r3, r7, #28
 800946c:	4618      	mov	r0, r3
 800946e:	f7fc fce7 	bl	8005e40 <mbedtls_mpi_free>
 8009472:	f107 0310 	add.w	r3, r7, #16
 8009476:	4618      	mov	r0, r3
 8009478:	f7fc fce2 	bl	8005e40 <mbedtls_mpi_free>

    return( ret );
 800947c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800947e:	4618      	mov	r0, r3
 8009480:	3740      	adds	r7, #64	@ 0x40
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b088      	sub	sp, #32
 800948a:	af00      	add	r7, sp, #0
 800948c:	60f8      	str	r0, [r7, #12]
 800948e:	60b9      	str	r1, [r7, #8]
 8009490:	607a      	str	r2, [r7, #4]
 8009492:	603b      	str	r3, [r7, #0]
    int ret;
    size_t const limbs = CHARS_TO_LIMBS( size );
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	089b      	lsrs	r3, r3, #2
 8009498:	68ba      	ldr	r2, [r7, #8]
 800949a:	f002 0203 	and.w	r2, r2, #3
 800949e:	2a00      	cmp	r2, #0
 80094a0:	bf14      	ite	ne
 80094a2:	2201      	movne	r2, #1
 80094a4:	2200      	moveq	r2, #0
 80094a6:	b2d2      	uxtb	r2, r2
 80094a8:	4413      	add	r3, r2
 80094aa:	61bb      	str	r3, [r7, #24]
    size_t const overhead = ( limbs * ciL ) - size;
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	009a      	lsls	r2, r3, #2
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	617b      	str	r3, [r7, #20]

    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	69ba      	ldr	r2, [r7, #24]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d00d      	beq.n	80094dc <mbedtls_mpi_fill_random+0x56>
    {
        mbedtls_mpi_free( X );
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f7fc fcbd 	bl	8005e40 <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f7fc fca7 	bl	8005e1a <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 80094cc:	69b9      	ldr	r1, [r7, #24]
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f7fc fcdc 	bl	8005e8c <mbedtls_mpi_grow>
 80094d4:	61f8      	str	r0, [r7, #28]
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d117      	bne.n	800950c <mbedtls_mpi_fill_random+0x86>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 80094dc:	2100      	movs	r1, #0
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	f7fc fedc 	bl	800629c <mbedtls_mpi_lset>
 80094e4:	61f8      	str	r0, [r7, #28]
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10f      	bne.n	800950c <mbedtls_mpi_fill_random+0x86>

    Xp = (unsigned char*) X->p;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	613b      	str	r3, [r7, #16]
    f_rng( p_rng, Xp + overhead, size );
 80094f2:	693a      	ldr	r2, [r7, #16]
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	18d1      	adds	r1, r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	68ba      	ldr	r2, [r7, #8]
 80094fc:	6838      	ldr	r0, [r7, #0]
 80094fe:	4798      	blx	r3

    mpi_bigendian_to_host( X->p, limbs );
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	69b9      	ldr	r1, [r7, #24]
 8009506:	4618      	mov	r0, r3
 8009508:	f7fd f92a 	bl	8006760 <mpi_bigendian_to_host>

cleanup:
    return( ret );
 800950c:	69fb      	ldr	r3, [r7, #28]
}
 800950e:	4618      	mov	r0, r3
 8009510:	3720      	adds	r7, #32
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b0a0      	sub	sp, #128	@ 0x80
 800951a:	af00      	add	r7, sp, #0
 800951c:	60f8      	str	r0, [r7, #12]
 800951e:	60b9      	str	r1, [r7, #8]
 8009520:	607a      	str	r2, [r7, #4]
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 8009522:	2101      	movs	r1, #1
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f7fd fc59 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	dc02      	bgt.n	8009536 <mbedtls_mpi_inv_mod+0x20>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8009530:	f06f 0303 	mvn.w	r3, #3
 8009534:	e209      	b.n	800994a <mbedtls_mpi_inv_mod+0x434>

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
 8009536:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800953a:	4618      	mov	r0, r3
 800953c:	f7fc fc6d 	bl	8005e1a <mbedtls_mpi_init>
 8009540:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009544:	4618      	mov	r0, r3
 8009546:	f7fc fc68 	bl	8005e1a <mbedtls_mpi_init>
 800954a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800954e:	4618      	mov	r0, r3
 8009550:	f7fc fc63 	bl	8005e1a <mbedtls_mpi_init>
 8009554:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8009558:	4618      	mov	r0, r3
 800955a:	f7fc fc5e 	bl	8005e1a <mbedtls_mpi_init>
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
 800955e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8009562:	4618      	mov	r0, r3
 8009564:	f7fc fc59 	bl	8005e1a <mbedtls_mpi_init>
 8009568:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800956c:	4618      	mov	r0, r3
 800956e:	f7fc fc54 	bl	8005e1a <mbedtls_mpi_init>
 8009572:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009576:	4618      	mov	r0, r3
 8009578:	f7fc fc4f 	bl	8005e1a <mbedtls_mpi_init>
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );
 800957c:	f107 031c 	add.w	r3, r7, #28
 8009580:	4618      	mov	r0, r3
 8009582:	f7fc fc4a 	bl	8005e1a <mbedtls_mpi_init>
 8009586:	f107 0310 	add.w	r3, r7, #16
 800958a:	4618      	mov	r0, r3
 800958c:	f7fc fc45 	bl	8005e1a <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 8009590:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	68b9      	ldr	r1, [r7, #8]
 8009598:	4618      	mov	r0, r3
 800959a:	f7ff fe92 	bl	80092c2 <mbedtls_mpi_gcd>
 800959e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80095a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f040 81a3 	bne.w	80098ee <mbedtls_mpi_inv_mod+0x3d8>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 80095a8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80095ac:	2101      	movs	r1, #1
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7fd fc14 	bl	8006ddc <mbedtls_mpi_cmp_int>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d003      	beq.n	80095c2 <mbedtls_mpi_inv_mod+0xac>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 80095ba:	f06f 030d 	mvn.w	r3, #13
 80095be:	67fb      	str	r3, [r7, #124]	@ 0x7c
        goto cleanup;
 80095c0:	e195      	b.n	80098ee <mbedtls_mpi_inv_mod+0x3d8>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 80095c2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	68b9      	ldr	r1, [r7, #8]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7ff fe37 	bl	800923e <mbedtls_mpi_mod_mpi>
 80095d0:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80095d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f040 818a 	bne.w	80098ee <mbedtls_mpi_inv_mod+0x3d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 80095da:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80095de:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80095e2:	4611      	mov	r1, r2
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7fc fcfa 	bl	8005fde <mbedtls_mpi_copy>
 80095ea:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80095ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f040 817d 	bne.w	80098ee <mbedtls_mpi_inv_mod+0x3d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 80095f4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80095f8:	6879      	ldr	r1, [r7, #4]
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fc fcef 	bl	8005fde <mbedtls_mpi_copy>
 8009600:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8009602:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009604:	2b00      	cmp	r3, #0
 8009606:	f040 8172 	bne.w	80098ee <mbedtls_mpi_inv_mod+0x3d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 800960a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800960e:	6879      	ldr	r1, [r7, #4]
 8009610:	4618      	mov	r0, r3
 8009612:	f7fc fce4 	bl	8005fde <mbedtls_mpi_copy>
 8009616:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8009618:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800961a:	2b00      	cmp	r3, #0
 800961c:	f040 8167 	bne.w	80098ee <mbedtls_mpi_inv_mod+0x3d8>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 8009620:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8009624:	2101      	movs	r1, #1
 8009626:	4618      	mov	r0, r3
 8009628:	f7fc fe38 	bl	800629c <mbedtls_mpi_lset>
 800962c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800962e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009630:	2b00      	cmp	r3, #0
 8009632:	f040 815c 	bne.w	80098ee <mbedtls_mpi_inv_mod+0x3d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 8009636:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800963a:	2100      	movs	r1, #0
 800963c:	4618      	mov	r0, r3
 800963e:	f7fc fe2d 	bl	800629c <mbedtls_mpi_lset>
 8009642:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8009644:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009646:	2b00      	cmp	r3, #0
 8009648:	f040 8151 	bne.w	80098ee <mbedtls_mpi_inv_mod+0x3d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 800964c:	f107 031c 	add.w	r3, r7, #28
 8009650:	2100      	movs	r1, #0
 8009652:	4618      	mov	r0, r3
 8009654:	f7fc fe22 	bl	800629c <mbedtls_mpi_lset>
 8009658:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800965a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800965c:	2b00      	cmp	r3, #0
 800965e:	f040 8146 	bne.w	80098ee <mbedtls_mpi_inv_mod+0x3d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 8009662:	f107 0310 	add.w	r3, r7, #16
 8009666:	2101      	movs	r1, #1
 8009668:	4618      	mov	r0, r3
 800966a:	f7fc fe17 	bl	800629c <mbedtls_mpi_lset>
 800966e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8009670:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009672:	2b00      	cmp	r3, #0
 8009674:	f040 813b 	bne.w	80098ee <mbedtls_mpi_inv_mod+0x3d8>

    do
    {
        while( ( TU.p[0] & 1 ) == 0 )
 8009678:	e048      	b.n	800970c <mbedtls_mpi_inv_mod+0x1f6>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 800967a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800967e:	2101      	movs	r1, #1
 8009680:	4618      	mov	r0, r3
 8009682:	f7fd f9f3 	bl	8006a6c <mbedtls_mpi_shift_r>
 8009686:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8009688:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800968a:	2b00      	cmp	r3, #0
 800968c:	f040 812f 	bne.w	80098ee <mbedtls_mpi_inv_mod+0x3d8>

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 8009690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f003 0301 	and.w	r3, r3, #1
 8009698:	2b00      	cmp	r3, #0
 800969a:	d105      	bne.n	80096a8 <mbedtls_mpi_inv_mod+0x192>
 800969c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 0301 	and.w	r3, r3, #1
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d01b      	beq.n	80096e0 <mbedtls_mpi_inv_mod+0x1ca>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 80096a8:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80096ac:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80096b0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7fd fd1c 	bl	80070f2 <mbedtls_mpi_add_mpi>
 80096ba:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80096bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f040 8115 	bne.w	80098ee <mbedtls_mpi_inv_mod+0x3d8>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 80096c4:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80096c8:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80096cc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7fd fd52 	bl	800717a <mbedtls_mpi_sub_mpi>
 80096d6:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80096d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80096da:	2b00      	cmp	r3, #0
 80096dc:	f040 8107 	bne.w	80098ee <mbedtls_mpi_inv_mod+0x3d8>
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 80096e0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80096e4:	2101      	movs	r1, #1
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7fd f9c0 	bl	8006a6c <mbedtls_mpi_shift_r>
 80096ec:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80096ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f040 80fc 	bne.w	80098ee <mbedtls_mpi_inv_mod+0x3d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 80096f6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80096fa:	2101      	movs	r1, #1
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7fd f9b5 	bl	8006a6c <mbedtls_mpi_shift_r>
 8009702:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8009704:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009706:	2b00      	cmp	r3, #0
 8009708:	f040 80f1 	bne.w	80098ee <mbedtls_mpi_inv_mod+0x3d8>
        while( ( TU.p[0] & 1 ) == 0 )
 800970c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f003 0301 	and.w	r3, r3, #1
 8009714:	2b00      	cmp	r3, #0
 8009716:	d0b0      	beq.n	800967a <mbedtls_mpi_inv_mod+0x164>
        }

        while( ( TV.p[0] & 1 ) == 0 )
 8009718:	e048      	b.n	80097ac <mbedtls_mpi_inv_mod+0x296>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 800971a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800971e:	2101      	movs	r1, #1
 8009720:	4618      	mov	r0, r3
 8009722:	f7fd f9a3 	bl	8006a6c <mbedtls_mpi_shift_r>
 8009726:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8009728:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800972a:	2b00      	cmp	r3, #0
 800972c:	f040 80df 	bne.w	80098ee <mbedtls_mpi_inv_mod+0x3d8>

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 8009730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 0301 	and.w	r3, r3, #1
 8009738:	2b00      	cmp	r3, #0
 800973a:	d105      	bne.n	8009748 <mbedtls_mpi_inv_mod+0x232>
 800973c:	69bb      	ldr	r3, [r7, #24]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 0301 	and.w	r3, r3, #1
 8009744:	2b00      	cmp	r3, #0
 8009746:	d01b      	beq.n	8009780 <mbedtls_mpi_inv_mod+0x26a>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 8009748:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800974c:	f107 011c 	add.w	r1, r7, #28
 8009750:	f107 031c 	add.w	r3, r7, #28
 8009754:	4618      	mov	r0, r3
 8009756:	f7fd fccc 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800975a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800975c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800975e:	2b00      	cmp	r3, #0
 8009760:	f040 80c5 	bne.w	80098ee <mbedtls_mpi_inv_mod+0x3d8>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 8009764:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8009768:	f107 0110 	add.w	r1, r7, #16
 800976c:	f107 0310 	add.w	r3, r7, #16
 8009770:	4618      	mov	r0, r3
 8009772:	f7fd fd02 	bl	800717a <mbedtls_mpi_sub_mpi>
 8009776:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8009778:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800977a:	2b00      	cmp	r3, #0
 800977c:	f040 80b7 	bne.w	80098ee <mbedtls_mpi_inv_mod+0x3d8>
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 8009780:	f107 031c 	add.w	r3, r7, #28
 8009784:	2101      	movs	r1, #1
 8009786:	4618      	mov	r0, r3
 8009788:	f7fd f970 	bl	8006a6c <mbedtls_mpi_shift_r>
 800978c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800978e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009790:	2b00      	cmp	r3, #0
 8009792:	f040 80ac 	bne.w	80098ee <mbedtls_mpi_inv_mod+0x3d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 8009796:	f107 0310 	add.w	r3, r7, #16
 800979a:	2101      	movs	r1, #1
 800979c:	4618      	mov	r0, r3
 800979e:	f7fd f965 	bl	8006a6c <mbedtls_mpi_shift_r>
 80097a2:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80097a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f040 80a1 	bne.w	80098ee <mbedtls_mpi_inv_mod+0x3d8>
        while( ( TV.p[0] & 1 ) == 0 )
 80097ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 0301 	and.w	r3, r3, #1
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d0b0      	beq.n	800971a <mbedtls_mpi_inv_mod+0x204>
        }

        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 80097b8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80097bc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80097c0:	4611      	mov	r1, r2
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7fd fa6f 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	db28      	blt.n	8009820 <mbedtls_mpi_inv_mod+0x30a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 80097ce:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80097d2:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80097d6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fd fccd 	bl	800717a <mbedtls_mpi_sub_mpi>
 80097e0:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80097e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	f040 8082 	bne.w	80098ee <mbedtls_mpi_inv_mod+0x3d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 80097ea:	f107 021c 	add.w	r2, r7, #28
 80097ee:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80097f2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7fd fcbf 	bl	800717a <mbedtls_mpi_sub_mpi>
 80097fc:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80097fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009800:	2b00      	cmp	r3, #0
 8009802:	d174      	bne.n	80098ee <mbedtls_mpi_inv_mod+0x3d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 8009804:	f107 0210 	add.w	r2, r7, #16
 8009808:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800980c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8009810:	4618      	mov	r0, r3
 8009812:	f7fd fcb2 	bl	800717a <mbedtls_mpi_sub_mpi>
 8009816:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8009818:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800981a:	2b00      	cmp	r3, #0
 800981c:	d027      	beq.n	800986e <mbedtls_mpi_inv_mod+0x358>
 800981e:	e066      	b.n	80098ee <mbedtls_mpi_inv_mod+0x3d8>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 8009820:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8009824:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8009828:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800982c:	4618      	mov	r0, r3
 800982e:	f7fd fca4 	bl	800717a <mbedtls_mpi_sub_mpi>
 8009832:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8009834:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009836:	2b00      	cmp	r3, #0
 8009838:	d159      	bne.n	80098ee <mbedtls_mpi_inv_mod+0x3d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 800983a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800983e:	f107 011c 	add.w	r1, r7, #28
 8009842:	f107 031c 	add.w	r3, r7, #28
 8009846:	4618      	mov	r0, r3
 8009848:	f7fd fc97 	bl	800717a <mbedtls_mpi_sub_mpi>
 800984c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800984e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009850:	2b00      	cmp	r3, #0
 8009852:	d14c      	bne.n	80098ee <mbedtls_mpi_inv_mod+0x3d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 8009854:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8009858:	f107 0110 	add.w	r1, r7, #16
 800985c:	f107 0310 	add.w	r3, r7, #16
 8009860:	4618      	mov	r0, r3
 8009862:	f7fd fc8a 	bl	800717a <mbedtls_mpi_sub_mpi>
 8009866:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8009868:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800986a:	2b00      	cmp	r3, #0
 800986c:	d13f      	bne.n	80098ee <mbedtls_mpi_inv_mod+0x3d8>
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 800986e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009872:	2100      	movs	r1, #0
 8009874:	4618      	mov	r0, r3
 8009876:	f7fd fab1 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	f47f af45 	bne.w	800970c <mbedtls_mpi_inv_mod+0x1f6>

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 8009882:	e00b      	b.n	800989c <mbedtls_mpi_inv_mod+0x386>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 8009884:	f107 011c 	add.w	r1, r7, #28
 8009888:	f107 031c 	add.w	r3, r7, #28
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	4618      	mov	r0, r3
 8009890:	f7fd fc2f 	bl	80070f2 <mbedtls_mpi_add_mpi>
 8009894:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8009896:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009898:	2b00      	cmp	r3, #0
 800989a:	d128      	bne.n	80098ee <mbedtls_mpi_inv_mod+0x3d8>
    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 800989c:	f107 031c 	add.w	r3, r7, #28
 80098a0:	2100      	movs	r1, #0
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fd fa9a 	bl	8006ddc <mbedtls_mpi_cmp_int>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	dbea      	blt.n	8009884 <mbedtls_mpi_inv_mod+0x36e>

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 80098ae:	e00b      	b.n	80098c8 <mbedtls_mpi_inv_mod+0x3b2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 80098b0:	f107 011c 	add.w	r1, r7, #28
 80098b4:	f107 031c 	add.w	r3, r7, #28
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7fd fc5d 	bl	800717a <mbedtls_mpi_sub_mpi>
 80098c0:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80098c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d112      	bne.n	80098ee <mbedtls_mpi_inv_mod+0x3d8>
    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 80098c8:	f107 031c 	add.w	r3, r7, #28
 80098cc:	6879      	ldr	r1, [r7, #4]
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fd f9e9 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	daea      	bge.n	80098b0 <mbedtls_mpi_inv_mod+0x39a>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 80098da:	f107 031c 	add.w	r3, r7, #28
 80098de:	4619      	mov	r1, r3
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f7fc fb7c 	bl	8005fde <mbedtls_mpi_copy>
 80098e6:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80098e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80098ea:	2b00      	cmp	r3, #0

cleanup:
 80098ec:	bf00      	nop

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 80098ee:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7fc faa4 	bl	8005e40 <mbedtls_mpi_free>
 80098f8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7fc fa9f 	bl	8005e40 <mbedtls_mpi_free>
 8009902:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8009906:	4618      	mov	r0, r3
 8009908:	f7fc fa9a 	bl	8005e40 <mbedtls_mpi_free>
 800990c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8009910:	4618      	mov	r0, r3
 8009912:	f7fc fa95 	bl	8005e40 <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 8009916:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800991a:	4618      	mov	r0, r3
 800991c:	f7fc fa90 	bl	8005e40 <mbedtls_mpi_free>
 8009920:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009924:	4618      	mov	r0, r3
 8009926:	f7fc fa8b 	bl	8005e40 <mbedtls_mpi_free>
 800992a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800992e:	4618      	mov	r0, r3
 8009930:	f7fc fa86 	bl	8005e40 <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 8009934:	f107 031c 	add.w	r3, r7, #28
 8009938:	4618      	mov	r0, r3
 800993a:	f7fc fa81 	bl	8005e40 <mbedtls_mpi_free>
 800993e:	f107 0310 	add.w	r3, r7, #16
 8009942:	4618      	mov	r0, r3
 8009944:	f7fc fa7c 	bl	8005e40 <mbedtls_mpi_free>

    return( ret );
 8009948:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
}
 800994a:	4618      	mov	r0, r3
 800994c:	3780      	adds	r7, #128	@ 0x80
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <mbedtls_ctr_drbg_init>:

/*
 * CTR_DRBG context initialization
 */
void mbedtls_ctr_drbg_init( mbedtls_ctr_drbg_context *ctx )
{
 8009952:	b580      	push	{r7, lr}
 8009954:	b082      	sub	sp, #8
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 800995a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800995e:	2100      	movs	r1, #0
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f00d f929 	bl	8016bb8 <memset>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif
}
 8009966:	bf00      	nop
 8009968:	3708      	adds	r7, #8
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <mbedtls_ctr_drbg_seed_entropy_len>:
                   int (*f_entropy)(void *, unsigned char *, size_t),
                   void *p_entropy,
                   const unsigned char *custom,
                   size_t len,
                   size_t entropy_len )
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b08e      	sub	sp, #56	@ 0x38
 8009972:	af00      	add	r7, sp, #0
 8009974:	60f8      	str	r0, [r7, #12]
 8009976:	60b9      	str	r1, [r7, #8]
 8009978:	607a      	str	r2, [r7, #4]
 800997a:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];

    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 800997c:	f107 0314 	add.w	r3, r7, #20
 8009980:	2220      	movs	r2, #32
 8009982:	2100      	movs	r1, #0
 8009984:	4618      	mov	r0, r3
 8009986:	f00d f917 	bl	8016bb8 <memset>

    mbedtls_aes_init( &ctx->aes_ctx );
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	3320      	adds	r3, #32
 800998e:	4618      	mov	r0, r3
 8009990:	f7fa fc3e 	bl	8004210 <mbedtls_aes_init>

    ctx->f_entropy = f_entropy;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    ctx->p_entropy = p_entropy;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c

    ctx->entropy_len = entropy_len;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099a8:	619a      	str	r2, [r3, #24]
    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f242 7210 	movw	r2, #10000	@ 0x2710
 80099b0:	61da      	str	r2, [r3, #28]

    /*
     * Initialize with an empty key
     */
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	3320      	adds	r3, #32
 80099b6:	f107 0114 	add.w	r1, r7, #20
 80099ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80099be:	4618      	mov	r0, r3
 80099c0:	f7fa fc46 	bl	8004250 <mbedtls_aes_setkey_enc>
 80099c4:	6378      	str	r0, [r7, #52]	@ 0x34
 80099c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d001      	beq.n	80099d0 <mbedtls_ctr_drbg_seed_entropy_len+0x62>
    {
        return( ret );
 80099cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099ce:	e00b      	b.n	80099e8 <mbedtls_ctr_drbg_seed_entropy_len+0x7a>
    }

    if( ( ret = mbedtls_ctr_drbg_reseed( ctx, custom, len ) ) != 0 )
 80099d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80099d2:	6839      	ldr	r1, [r7, #0]
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f000 fa6d 	bl	8009eb4 <mbedtls_ctr_drbg_reseed>
 80099da:	6378      	str	r0, [r7, #52]	@ 0x34
 80099dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d001      	beq.n	80099e6 <mbedtls_ctr_drbg_seed_entropy_len+0x78>
    {
        return( ret );
 80099e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099e4:	e000      	b.n	80099e8 <mbedtls_ctr_drbg_seed_entropy_len+0x7a>
    }
    return( 0 );
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3738      	adds	r7, #56	@ 0x38
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <mbedtls_ctr_drbg_seed>:
int mbedtls_ctr_drbg_seed( mbedtls_ctr_drbg_context *ctx,
                   int (*f_entropy)(void *, unsigned char *, size_t),
                   void *p_entropy,
                   const unsigned char *custom,
                   size_t len )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b086      	sub	sp, #24
 80099f4:	af02      	add	r7, sp, #8
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	607a      	str	r2, [r7, #4]
 80099fc:	603b      	str	r3, [r7, #0]
    return( mbedtls_ctr_drbg_seed_entropy_len( ctx, f_entropy, p_entropy, custom, len,
 80099fe:	2330      	movs	r3, #48	@ 0x30
 8009a00:	9301      	str	r3, [sp, #4]
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	9300      	str	r3, [sp, #0]
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	68b9      	ldr	r1, [r7, #8]
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	f7ff ffae 	bl	800996e <mbedtls_ctr_drbg_seed_entropy_len>
 8009a12:	4603      	mov	r3, r0
                                       MBEDTLS_CTR_DRBG_ENTROPY_LEN ) );
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3710      	adds	r7, #16
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <mbedtls_ctr_drbg_free>:

void mbedtls_ctr_drbg_free( mbedtls_ctr_drbg_context *ctx )
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00a      	beq.n	8009a40 <mbedtls_ctr_drbg_free+0x24>
        return;

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
    mbedtls_aes_free( &ctx->aes_ctx );
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	3320      	adds	r3, #32
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7fa fbfc 	bl	800422c <mbedtls_aes_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ctr_drbg_context ) );
 8009a34:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f006 ff9f 	bl	801097c <mbedtls_platform_zeroize>
 8009a3e:	e000      	b.n	8009a42 <mbedtls_ctr_drbg_free+0x26>
        return;
 8009a40:	bf00      	nop
}
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <block_cipher_df>:
    ctx->reseed_interval = interval;
}

static int block_cipher_df( unsigned char *output,
                            const unsigned char *data, size_t data_len )
{
 8009a48:	b5b0      	push	{r4, r5, r7, lr}
 8009a4a:	f5ad 7d52 	sub.w	sp, sp, #840	@ 0x348
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8009a54:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8009a58:	6018      	str	r0, [r3, #0]
 8009a5a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8009a5e:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8009a62:	6019      	str	r1, [r3, #0]
 8009a64:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8009a68:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8009a6c:	601a      	str	r2, [r3, #0]
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];
    unsigned char chain[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    unsigned char *p, *iv;
    mbedtls_aes_context aes_ctx;
    int ret = 0;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340

    int i, j;
    size_t buf_len, use_len;

    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 8009a74:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8009a78:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8009a82:	d902      	bls.n	8009a8a <block_cipher_df+0x42>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 8009a84:	f06f 0337 	mvn.w	r3, #55	@ 0x37
 8009a88:	e191      	b.n	8009dae <block_cipher_df+0x366>

    memset( buf, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT + MBEDTLS_CTR_DRBG_BLOCKSIZE + 16 );
 8009a8a:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8009a8e:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8009a92:	2100      	movs	r1, #0
 8009a94:	4618      	mov	r0, r3
 8009a96:	f00d f88f 	bl	8016bb8 <memset>
    mbedtls_aes_init( &aes_ctx );
 8009a9a:	f107 0314 	add.w	r3, r7, #20
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7fa fbb6 	bl	8004210 <mbedtls_aes_init>
     * IV = Counter (in 32-bits) padded to 16 with zeroes
     * S = Length input string (in 32-bits) || Length of output (in 32-bits) ||
     *     data || 0x80
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */
    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;
 8009aa4:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8009aa8:	3310      	adds	r3, #16
 8009aaa:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
    *p++ = ( data_len >> 24 ) & 0xff;
 8009aae:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8009ab2:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	0e19      	lsrs	r1, r3, #24
 8009aba:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8009abe:	1c5a      	adds	r2, r3, #1
 8009ac0:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 8009ac4:	b2ca      	uxtb	r2, r1
 8009ac6:	701a      	strb	r2, [r3, #0]
    *p++ = ( data_len >> 16 ) & 0xff;
 8009ac8:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8009acc:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	0c19      	lsrs	r1, r3, #16
 8009ad4:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8009ad8:	1c5a      	adds	r2, r3, #1
 8009ada:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 8009ade:	b2ca      	uxtb	r2, r1
 8009ae0:	701a      	strb	r2, [r3, #0]
    *p++ = ( data_len >> 8  ) & 0xff;
 8009ae2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8009ae6:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	0a19      	lsrs	r1, r3, #8
 8009aee:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8009af2:	1c5a      	adds	r2, r3, #1
 8009af4:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 8009af8:	b2ca      	uxtb	r2, r1
 8009afa:	701a      	strb	r2, [r3, #0]
    *p++ = ( data_len       ) & 0xff;
 8009afc:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8009b00:	1c5a      	adds	r2, r3, #1
 8009b02:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 8009b06:	f507 7252 	add.w	r2, r7, #840	@ 0x348
 8009b0a:	f5a2 7251 	sub.w	r2, r2, #836	@ 0x344
 8009b0e:	6812      	ldr	r2, [r2, #0]
 8009b10:	b2d2      	uxtb	r2, r2
 8009b12:	701a      	strb	r2, [r3, #0]
    p += 3;
 8009b14:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8009b18:	3303      	adds	r3, #3
 8009b1a:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
 8009b1e:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8009b22:	1c5a      	adds	r2, r3, #1
 8009b24:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 8009b28:	2230      	movs	r2, #48	@ 0x30
 8009b2a:	701a      	strb	r2, [r3, #0]
    memcpy( p, data, data_len );
 8009b2c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8009b30:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8009b34:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8009b38:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8009b3c:	6812      	ldr	r2, [r2, #0]
 8009b3e:	6819      	ldr	r1, [r3, #0]
 8009b40:	f8d7 0344 	ldr.w	r0, [r7, #836]	@ 0x344
 8009b44:	f00d f915 	bl	8016d72 <memcpy>
    p[data_len] = 0x80;
 8009b48:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8009b4c:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8009b50:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4413      	add	r3, r2
 8009b58:	2280      	movs	r2, #128	@ 0x80
 8009b5a:	701a      	strb	r2, [r3, #0]

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;
 8009b5c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8009b60:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	3319      	adds	r3, #25
 8009b68:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330

    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8009b72:	e010      	b.n	8009b96 <block_cipher_df+0x14e>
        key[i] = i;
 8009b74:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8009b78:	b2d9      	uxtb	r1, r3
 8009b7a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8009b7e:	f5a3 7203 	sub.w	r2, r3, #524	@ 0x20c
 8009b82:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8009b86:	4413      	add	r3, r2
 8009b88:	460a      	mov	r2, r1
 8009b8a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 8009b8c:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8009b90:	3301      	adds	r3, #1
 8009b92:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8009b96:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8009b9a:	2b1f      	cmp	r3, #31
 8009b9c:	ddea      	ble.n	8009b74 <block_cipher_df+0x12c>

    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 8009b9e:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8009ba2:	f107 0314 	add.w	r3, r7, #20
 8009ba6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7fa fb50 	bl	8004250 <mbedtls_aes_setkey_enc>
 8009bb0:	f8c7 0340 	str.w	r0, [r7, #832]	@ 0x340
 8009bb4:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f040 80c5 	bne.w	8009d48 <block_cipher_df+0x300>
    }

    /*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8009bc4:	e078      	b.n	8009cb8 <block_cipher_df+0x270>
    {
        p = buf;
 8009bc6:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8009bca:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 8009bce:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8009bd2:	2210      	movs	r2, #16
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f00c ffee 	bl	8016bb8 <memset>
        use_len = buf_len;
 8009bdc:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8009be0:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334

        while( use_len > 0 )
 8009be4:	e043      	b.n	8009c6e <block_cipher_df+0x226>
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 8009be6:	2300      	movs	r3, #0
 8009be8:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8009bec:	e01d      	b.n	8009c2a <block_cipher_df+0x1e2>
                chain[i] ^= p[i];
 8009bee:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8009bf2:	f5a3 7207 	sub.w	r2, r3, #540	@ 0x21c
 8009bf6:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8009bfa:	4413      	add	r3, r2
 8009bfc:	781a      	ldrb	r2, [r3, #0]
 8009bfe:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8009c02:	f8d7 1344 	ldr.w	r1, [r7, #836]	@ 0x344
 8009c06:	440b      	add	r3, r1
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	4053      	eors	r3, r2
 8009c0c:	b2d9      	uxtb	r1, r3
 8009c0e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8009c12:	f5a3 7207 	sub.w	r2, r3, #540	@ 0x21c
 8009c16:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8009c1a:	4413      	add	r3, r2
 8009c1c:	460a      	mov	r2, r1
 8009c1e:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 8009c20:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8009c24:	3301      	adds	r3, #1
 8009c26:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8009c2a:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8009c2e:	2b0f      	cmp	r3, #15
 8009c30:	dddd      	ble.n	8009bee <block_cipher_df+0x1a6>
            p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 8009c32:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8009c36:	3310      	adds	r3, #16
 8009c38:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
                       MBEDTLS_CTR_DRBG_BLOCKSIZE : use_len;
 8009c3c:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8009c40:	2b10      	cmp	r3, #16
 8009c42:	bf28      	it	cs
 8009c44:	2310      	movcs	r3, #16
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
 8009c46:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8009c4a:	1ad3      	subs	r3, r2, r3
 8009c4c:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334

            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, chain, chain ) ) != 0 )
 8009c50:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8009c54:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 8009c58:	f107 0014 	add.w	r0, r7, #20
 8009c5c:	2101      	movs	r1, #1
 8009c5e:	f7fb fa91 	bl	8005184 <mbedtls_aes_crypt_ecb>
 8009c62:	f8c7 0340 	str.w	r0, [r7, #832]	@ 0x340
 8009c66:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d16e      	bne.n	8009d4c <block_cipher_df+0x304>
        while( use_len > 0 )
 8009c6e:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1b7      	bne.n	8009be6 <block_cipher_df+0x19e>
            {
                goto exit;
            }
        }

        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 8009c76:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8009c7a:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 8009c7e:	441a      	add	r2, r3
 8009c80:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8009c84:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8009c88:	4614      	mov	r4, r2
 8009c8a:	461d      	mov	r5, r3
 8009c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c8e:	6020      	str	r0, [r4, #0]
 8009c90:	6061      	str	r1, [r4, #4]
 8009c92:	60a2      	str	r2, [r4, #8]
 8009c94:	60e3      	str	r3, [r4, #12]

        /*
         * Update IV
         */
        buf[3]++;
 8009c96:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8009c9a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8009c9e:	78db      	ldrb	r3, [r3, #3]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	b2da      	uxtb	r2, r3
 8009ca4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8009ca8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8009cac:	70da      	strb	r2, [r3, #3]
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8009cae:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8009cb2:	3310      	adds	r3, #16
 8009cb4:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8009cb8:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8009cbc:	2b2f      	cmp	r3, #47	@ 0x2f
 8009cbe:	dd82      	ble.n	8009bc6 <block_cipher_df+0x17e>
    }

    /*
     * Do final encryption with reduced data
     */
    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 8009cc0:	f507 71ae 	add.w	r1, r7, #348	@ 0x15c
 8009cc4:	f107 0314 	add.w	r3, r7, #20
 8009cc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7fa fabf 	bl	8004250 <mbedtls_aes_setkey_enc>
 8009cd2:	f8c7 0340 	str.w	r0, [r7, #832]	@ 0x340
 8009cd6:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d138      	bne.n	8009d50 <block_cipher_df+0x308>
    {
        goto exit;
    }
    iv = tmp + MBEDTLS_CTR_DRBG_KEYSIZE;
 8009cde:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8009ce2:	3320      	adds	r3, #32
 8009ce4:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
    p = output;
 8009ce8:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8009cec:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8009cfc:	e01f      	b.n	8009d3e <block_cipher_df+0x2f6>
    {
        if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, iv, iv ) ) != 0 )
 8009cfe:	f107 0014 	add.w	r0, r7, #20
 8009d02:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8009d06:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 8009d0a:	2101      	movs	r1, #1
 8009d0c:	f7fb fa3a 	bl	8005184 <mbedtls_aes_crypt_ecb>
 8009d10:	f8c7 0340 	str.w	r0, [r7, #832]	@ 0x340
 8009d14:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d11b      	bne.n	8009d54 <block_cipher_df+0x30c>
        {
            goto exit;
        }
        memcpy( p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 8009d1c:	2210      	movs	r2, #16
 8009d1e:	f8d7 132c 	ldr.w	r1, [r7, #812]	@ 0x32c
 8009d22:	f8d7 0344 	ldr.w	r0, [r7, #836]	@ 0x344
 8009d26:	f00d f824 	bl	8016d72 <memcpy>
        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 8009d2a:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8009d2e:	3310      	adds	r3, #16
 8009d30:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8009d34:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8009d38:	3310      	adds	r3, #16
 8009d3a:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8009d3e:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8009d42:	2b2f      	cmp	r3, #47	@ 0x2f
 8009d44:	dddb      	ble.n	8009cfe <block_cipher_df+0x2b6>
    }
exit:
 8009d46:	e006      	b.n	8009d56 <block_cipher_df+0x30e>
        goto exit;
 8009d48:	bf00      	nop
 8009d4a:	e004      	b.n	8009d56 <block_cipher_df+0x30e>
                goto exit;
 8009d4c:	bf00      	nop
 8009d4e:	e002      	b.n	8009d56 <block_cipher_df+0x30e>
        goto exit;
 8009d50:	bf00      	nop
 8009d52:	e000      	b.n	8009d56 <block_cipher_df+0x30e>
            goto exit;
 8009d54:	bf00      	nop
    mbedtls_aes_free( &aes_ctx );
 8009d56:	f107 0314 	add.w	r3, r7, #20
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7fa fa66 	bl	800422c <mbedtls_aes_free>
    /*
    * tidy up the stack
    */
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 8009d60:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8009d64:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f006 fe07 	bl	801097c <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8009d6e:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8009d72:	2130      	movs	r1, #48	@ 0x30
 8009d74:	4618      	mov	r0, r3
 8009d76:	f006 fe01 	bl	801097c <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( key, sizeof( key ) );
 8009d7a:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 8009d7e:	2120      	movs	r1, #32
 8009d80:	4618      	mov	r0, r3
 8009d82:	f006 fdfb 	bl	801097c <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( chain, sizeof( chain ) );
 8009d86:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8009d8a:	2110      	movs	r1, #16
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f006 fdf5 	bl	801097c <mbedtls_platform_zeroize>
    if( 0 != ret )
 8009d92:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d007      	beq.n	8009daa <block_cipher_df+0x362>
    {
        /*
        * wipe partial seed from memory
        */
        mbedtls_platform_zeroize( output, MBEDTLS_CTR_DRBG_SEEDLEN );
 8009d9a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8009d9e:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8009da2:	2130      	movs	r1, #48	@ 0x30
 8009da4:	6818      	ldr	r0, [r3, #0]
 8009da6:	f006 fde9 	bl	801097c <mbedtls_platform_zeroize>
    }

    return( ret );
 8009daa:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	f507 7752 	add.w	r7, r7, #840	@ 0x348
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bdb0      	pop	{r4, r5, r7, pc}

08009db8 <ctr_drbg_update_internal>:
 *   ctx->aes_ctx = Key
 *   ctx->counter = V
 */
static int ctr_drbg_update_internal( mbedtls_ctr_drbg_context *ctx,
                              const unsigned char data[MBEDTLS_CTR_DRBG_SEEDLEN] )
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b092      	sub	sp, #72	@ 0x48
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = tmp;
 8009dc2:	f107 0308 	add.w	r3, r7, #8
 8009dc6:	647b      	str	r3, [r7, #68]	@ 0x44
    int i, j;
    int ret = 0;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	63bb      	str	r3, [r7, #56]	@ 0x38

    memset( tmp, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 8009dcc:	f107 0308 	add.w	r3, r7, #8
 8009dd0:	2230      	movs	r2, #48	@ 0x30
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f00c feef 	bl	8016bb8 <memset>

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8009dda:	2300      	movs	r3, #0
 8009ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009dde:	e028      	b.n	8009e32 <ctr_drbg_update_internal+0x7a>
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 8009de0:	2310      	movs	r3, #16
 8009de2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009de4:	e00e      	b.n	8009e04 <ctr_drbg_update_internal+0x4c>
            if( ++ctx->counter[i - 1] != 0 )
 8009de6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009de8:	3b01      	subs	r3, #1
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	5cd2      	ldrb	r2, [r2, r3]
 8009dee:	3201      	adds	r2, #1
 8009df0:	b2d1      	uxtb	r1, r2
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	54d1      	strb	r1, [r2, r3]
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	5cd3      	ldrb	r3, [r2, r3]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d106      	bne.n	8009e0c <ctr_drbg_update_internal+0x54>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 8009dfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e00:	3b01      	subs	r3, #1
 8009e02:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	dced      	bgt.n	8009de6 <ctr_drbg_update_internal+0x2e>
 8009e0a:	e000      	b.n	8009e0e <ctr_drbg_update_internal+0x56>
                break;
 8009e0c:	bf00      	nop

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p ) ) != 0 )
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f103 0020 	add.w	r0, r3, #32
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e18:	2101      	movs	r1, #1
 8009e1a:	f7fb f9b3 	bl	8005184 <mbedtls_aes_crypt_ecb>
 8009e1e:	63b8      	str	r0, [r7, #56]	@ 0x38
 8009e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d138      	bne.n	8009e98 <ctr_drbg_update_internal+0xe0>
            goto exit;

        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 8009e26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e28:	3310      	adds	r3, #16
 8009e2a:	647b      	str	r3, [r7, #68]	@ 0x44
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8009e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e2e:	3310      	adds	r3, #16
 8009e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e34:	2b2f      	cmp	r3, #47	@ 0x2f
 8009e36:	ddd3      	ble.n	8009de0 <ctr_drbg_update_internal+0x28>
    }

    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 8009e38:	2300      	movs	r3, #0
 8009e3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e3c:	e013      	b.n	8009e66 <ctr_drbg_update_internal+0xae>
        tmp[i] ^= data[i];
 8009e3e:	f107 0208 	add.w	r2, r7, #8
 8009e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e44:	4413      	add	r3, r2
 8009e46:	781a      	ldrb	r2, [r3, #0]
 8009e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e4a:	6839      	ldr	r1, [r7, #0]
 8009e4c:	440b      	add	r3, r1
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	4053      	eors	r3, r2
 8009e52:	b2d9      	uxtb	r1, r3
 8009e54:	f107 0208 	add.w	r2, r7, #8
 8009e58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e5a:	4413      	add	r3, r2
 8009e5c:	460a      	mov	r2, r1
 8009e5e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 8009e60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e62:	3301      	adds	r3, #1
 8009e64:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e68:	2b2f      	cmp	r3, #47	@ 0x2f
 8009e6a:	dde8      	ble.n	8009e3e <ctr_drbg_update_internal+0x86>

    /*
     * Update key and counter
     */
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	3320      	adds	r3, #32
 8009e70:	f107 0108 	add.w	r1, r7, #8
 8009e74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7fa f9e9 	bl	8004250 <mbedtls_aes_setkey_enc>
 8009e7e:	63b8      	str	r0, [r7, #56]	@ 0x38
 8009e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d10a      	bne.n	8009e9c <ctr_drbg_update_internal+0xe4>
        goto exit;
    memcpy( ctx->counter, tmp + MBEDTLS_CTR_DRBG_KEYSIZE, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f107 0308 	add.w	r3, r7, #8
 8009e8c:	3320      	adds	r3, #32
 8009e8e:	2210      	movs	r2, #16
 8009e90:	4619      	mov	r1, r3
 8009e92:	f00c ff6e 	bl	8016d72 <memcpy>
 8009e96:	e002      	b.n	8009e9e <ctr_drbg_update_internal+0xe6>
            goto exit;
 8009e98:	bf00      	nop
 8009e9a:	e000      	b.n	8009e9e <ctr_drbg_update_internal+0xe6>
        goto exit;
 8009e9c:	bf00      	nop

exit:
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8009e9e:	f107 0308 	add.w	r3, r7, #8
 8009ea2:	2130      	movs	r1, #48	@ 0x30
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f006 fd69 	bl	801097c <mbedtls_platform_zeroize>
    return( ret );
 8009eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3748      	adds	r7, #72	@ 0x48
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <mbedtls_ctr_drbg_reseed>:
 * and with output
 *   ctx contains new_working_state
 */
int mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,
                     const unsigned char *additional, size_t len )
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b0e6      	sub	sp, #408	@ 0x198
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8009ebe:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8009ec2:	6018      	str	r0, [r3, #0]
 8009ec4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8009ec8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8009ecc:	6019      	str	r1, [r3, #0]
 8009ece:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8009ed2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8009ed6:	601a      	str	r2, [r3, #0]
    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];
    size_t seedlen = 0;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    int ret;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 8009ede:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8009ee2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	699b      	ldr	r3, [r3, #24]
 8009eea:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8009eee:	d80e      	bhi.n	8009f0e <mbedtls_ctr_drbg_reseed+0x5a>
        len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len )
 8009ef0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8009ef4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	699b      	ldr	r3, [r3, #24]
 8009efc:	f5c3 73c0 	rsb	r3, r3, #384	@ 0x180
    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 8009f00:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 8009f04:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 8009f08:	6812      	ldr	r2, [r2, #0]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d902      	bls.n	8009f14 <mbedtls_ctr_drbg_reseed+0x60>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 8009f0e:	f06f 0337 	mvn.w	r3, #55	@ 0x37
 8009f12:	e08b      	b.n	800a02c <mbedtls_ctr_drbg_reseed+0x178>

    memset( seed, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT );
 8009f14:	f107 0310 	add.w	r3, r7, #16
 8009f18:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8009f1c:	2100      	movs	r1, #0
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f00c fe4a 	bl	8016bb8 <memset>

    /*
     * Gather entropy_len bytes of entropy to seed state
     */
    if( 0 != ctx->f_entropy( ctx->p_entropy, seed,
 8009f24:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8009f28:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8009f32:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 8009f36:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
 8009f3a:	6812      	ldr	r2, [r2, #0]
 8009f3c:	f8d2 013c 	ldr.w	r0, [r2, #316]	@ 0x13c
 8009f40:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 8009f44:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
 8009f48:	6812      	ldr	r2, [r2, #0]
 8009f4a:	6992      	ldr	r2, [r2, #24]
 8009f4c:	f107 0110 	add.w	r1, r7, #16
 8009f50:	4798      	blx	r3
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d002      	beq.n	8009f5e <mbedtls_ctr_drbg_reseed+0xaa>
                             ctx->entropy_len ) )
    {
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
 8009f58:	f06f 0333 	mvn.w	r3, #51	@ 0x33
 8009f5c:	e066      	b.n	800a02c <mbedtls_ctr_drbg_reseed+0x178>
    }

    seedlen += ctx->entropy_len;
 8009f5e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8009f62:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	699b      	ldr	r3, [r3, #24]
 8009f6a:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8009f6e:	4413      	add	r3, r2
 8009f70:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194

    /*
     * Add additional data
     */
    if( additional && len )
 8009f74:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8009f78:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d021      	beq.n	8009fc6 <mbedtls_ctr_drbg_reseed+0x112>
 8009f82:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8009f86:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d01a      	beq.n	8009fc6 <mbedtls_ctr_drbg_reseed+0x112>
    {
        memcpy( seed + seedlen, additional, len );
 8009f90:	f107 0210 	add.w	r2, r7, #16
 8009f94:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8009f98:	18d0      	adds	r0, r2, r3
 8009f9a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8009f9e:	f5a3 72ca 	sub.w	r2, r3, #404	@ 0x194
 8009fa2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8009fa6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8009faa:	6812      	ldr	r2, [r2, #0]
 8009fac:	6819      	ldr	r1, [r3, #0]
 8009fae:	f00c fee0 	bl	8016d72 <memcpy>
        seedlen += len;
 8009fb2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8009fb6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8009fba:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    }

    /*
     * Reduce to 384 bits
     */
    if( ( ret = block_cipher_df( seed, seed, seedlen ) ) != 0 )
 8009fc6:	f107 0110 	add.w	r1, r7, #16
 8009fca:	f107 0310 	add.w	r3, r7, #16
 8009fce:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7ff fd38 	bl	8009a48 <block_cipher_df>
 8009fd8:	f8c7 0190 	str.w	r0, [r7, #400]	@ 0x190
 8009fdc:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d117      	bne.n	800a014 <mbedtls_ctr_drbg_reseed+0x160>
        goto exit;

    /*
     * Update state
     */
    if( ( ret = ctr_drbg_update_internal( ctx, seed ) ) != 0 )
 8009fe4:	f107 0210 	add.w	r2, r7, #16
 8009fe8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8009fec:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8009ff0:	4611      	mov	r1, r2
 8009ff2:	6818      	ldr	r0, [r3, #0]
 8009ff4:	f7ff fee0 	bl	8009db8 <ctr_drbg_update_internal>
 8009ff8:	f8c7 0190 	str.w	r0, [r7, #400]	@ 0x190
 8009ffc:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800a000:	2b00      	cmp	r3, #0
 800a002:	d109      	bne.n	800a018 <mbedtls_ctr_drbg_reseed+0x164>
        goto exit;
    ctx->reseed_counter = 1;
 800a004:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800a008:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2201      	movs	r2, #1
 800a010:	611a      	str	r2, [r3, #16]
 800a012:	e002      	b.n	800a01a <mbedtls_ctr_drbg_reseed+0x166>
        goto exit;
 800a014:	bf00      	nop
 800a016:	e000      	b.n	800a01a <mbedtls_ctr_drbg_reseed+0x166>
        goto exit;
 800a018:	bf00      	nop

exit:
    mbedtls_platform_zeroize( seed, sizeof( seed ) );
 800a01a:	f107 0310 	add.w	r3, r7, #16
 800a01e:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800a022:	4618      	mov	r0, r3
 800a024:	f006 fcaa 	bl	801097c <mbedtls_platform_zeroize>
    return( ret );
 800a028:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	f507 77cc 	add.w	r7, r7, #408	@ 0x198
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <mbedtls_ctr_drbg_random_with_add>:
 *   ctx contains new_working_state
 */
int mbedtls_ctr_drbg_random_with_add( void *p_rng,
                              unsigned char *output, size_t output_len,
                              const unsigned char *additional, size_t add_len )
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b09a      	sub	sp, #104	@ 0x68
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	60f8      	str	r0, [r7, #12]
 800a03e:	60b9      	str	r1, [r7, #8]
 800a040:	607a      	str	r2, [r7, #4]
 800a042:	603b      	str	r3, [r7, #0]
    int ret = 0;
 800a044:	2300      	movs	r3, #0
 800a046:	65fb      	str	r3, [r7, #92]	@ 0x5c
    mbedtls_ctr_drbg_context *ctx = (mbedtls_ctr_drbg_context *) p_rng;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	65bb      	str	r3, [r7, #88]	@ 0x58
    unsigned char add_input[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = output;
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	667b      	str	r3, [r7, #100]	@ 0x64
    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    int i;
    size_t use_len;

    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a056:	d902      	bls.n	800a05e <mbedtls_ctr_drbg_random_with_add+0x28>
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );
 800a058:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800a05c:	e09c      	b.n	800a198 <mbedtls_ctr_drbg_random_with_add+0x162>

    if( add_len > MBEDTLS_CTR_DRBG_MAX_INPUT )
 800a05e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a060:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a064:	d902      	bls.n	800a06c <mbedtls_ctr_drbg_random_with_add+0x36>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 800a066:	f06f 0337 	mvn.w	r3, #55	@ 0x37
 800a06a:	e095      	b.n	800a198 <mbedtls_ctr_drbg_random_with_add+0x162>

    memset( add_input, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 800a06c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a070:	2230      	movs	r2, #48	@ 0x30
 800a072:	2100      	movs	r1, #0
 800a074:	4618      	mov	r0, r3
 800a076:	f00c fd9f 	bl	8016bb8 <memset>

    if( ctx->reseed_counter > ctx->reseed_interval ||
 800a07a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a07c:	691a      	ldr	r2, [r3, #16]
 800a07e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a080:	69db      	ldr	r3, [r3, #28]
 800a082:	429a      	cmp	r2, r3
 800a084:	dc03      	bgt.n	800a08e <mbedtls_ctr_drbg_random_with_add+0x58>
        ctx->prediction_resistance )
 800a086:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a088:	695b      	ldr	r3, [r3, #20]
    if( ctx->reseed_counter > ctx->reseed_interval ||
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d00c      	beq.n	800a0a8 <mbedtls_ctr_drbg_random_with_add+0x72>
    {
        if( ( ret = mbedtls_ctr_drbg_reseed( ctx, additional, add_len ) ) != 0 )
 800a08e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a090:	6839      	ldr	r1, [r7, #0]
 800a092:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a094:	f7ff ff0e 	bl	8009eb4 <mbedtls_ctr_drbg_reseed>
 800a098:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800a09a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d001      	beq.n	800a0a4 <mbedtls_ctr_drbg_random_with_add+0x6e>
        {
            return( ret );
 800a0a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a0a2:	e079      	b.n	800a198 <mbedtls_ctr_drbg_random_with_add+0x162>
        }
        add_len = 0;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	673b      	str	r3, [r7, #112]	@ 0x70
    }

    if( add_len > 0 )
 800a0a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d04d      	beq.n	800a14a <mbedtls_ctr_drbg_random_with_add+0x114>
    {
        if( ( ret = block_cipher_df( add_input, additional, add_len ) ) != 0 )
 800a0ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a0b2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a0b4:	6839      	ldr	r1, [r7, #0]
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7ff fcc6 	bl	8009a48 <block_cipher_df>
 800a0bc:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800a0be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d155      	bne.n	800a170 <mbedtls_ctr_drbg_random_with_add+0x13a>
            goto exit;
        if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 800a0c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a0cc:	f7ff fe74 	bl	8009db8 <ctr_drbg_update_internal>
 800a0d0:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800a0d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d14d      	bne.n	800a174 <mbedtls_ctr_drbg_random_with_add+0x13e>
            goto exit;
    }

    while( output_len > 0 )
 800a0d8:	e037      	b.n	800a14a <mbedtls_ctr_drbg_random_with_add+0x114>
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 800a0da:	2310      	movs	r3, #16
 800a0dc:	663b      	str	r3, [r7, #96]	@ 0x60
 800a0de:	e00e      	b.n	800a0fe <mbedtls_ctr_drbg_random_with_add+0xc8>
            if( ++ctx->counter[i - 1] != 0 )
 800a0e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a0e6:	5cd2      	ldrb	r2, [r2, r3]
 800a0e8:	3201      	adds	r2, #1
 800a0ea:	b2d1      	uxtb	r1, r2
 800a0ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a0ee:	54d1      	strb	r1, [r2, r3]
 800a0f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a0f2:	5cd3      	ldrb	r3, [r2, r3]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d106      	bne.n	800a106 <mbedtls_ctr_drbg_random_with_add+0xd0>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 800a0f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	663b      	str	r3, [r7, #96]	@ 0x60
 800a0fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a100:	2b00      	cmp	r3, #0
 800a102:	dced      	bgt.n	800a0e0 <mbedtls_ctr_drbg_random_with_add+0xaa>
 800a104:	e000      	b.n	800a108 <mbedtls_ctr_drbg_random_with_add+0xd2>
                break;
 800a106:	bf00      	nop

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, tmp ) ) != 0 )
 800a108:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a10a:	f103 0020 	add.w	r0, r3, #32
 800a10e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a110:	f107 0314 	add.w	r3, r7, #20
 800a114:	2101      	movs	r1, #1
 800a116:	f7fb f835 	bl	8005184 <mbedtls_aes_crypt_ecb>
 800a11a:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800a11c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d12a      	bne.n	800a178 <mbedtls_ctr_drbg_random_with_add+0x142>
            goto exit;

        use_len = ( output_len > MBEDTLS_CTR_DRBG_BLOCKSIZE ) ? MBEDTLS_CTR_DRBG_BLOCKSIZE :
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2b10      	cmp	r3, #16
 800a126:	bf28      	it	cs
 800a128:	2310      	movcs	r3, #16
 800a12a:	657b      	str	r3, [r7, #84]	@ 0x54
                                                       output_len;
        /*
         * Copy random block to destination
         */
        memcpy( p, tmp, use_len );
 800a12c:	f107 0314 	add.w	r3, r7, #20
 800a130:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a132:	4619      	mov	r1, r3
 800a134:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800a136:	f00c fe1c 	bl	8016d72 <memcpy>
        p += use_len;
 800a13a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a13c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a13e:	4413      	add	r3, r2
 800a140:	667b      	str	r3, [r7, #100]	@ 0x64
        output_len -= use_len;
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	607b      	str	r3, [r7, #4]
    while( output_len > 0 )
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d1c4      	bne.n	800a0da <mbedtls_ctr_drbg_random_with_add+0xa4>
    }

    if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 800a150:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a154:	4619      	mov	r1, r3
 800a156:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a158:	f7ff fe2e 	bl	8009db8 <ctr_drbg_update_internal>
 800a15c:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800a15e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a160:	2b00      	cmp	r3, #0
 800a162:	d10b      	bne.n	800a17c <mbedtls_ctr_drbg_random_with_add+0x146>
        goto exit;

    ctx->reseed_counter++;
 800a164:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a166:	691b      	ldr	r3, [r3, #16]
 800a168:	1c5a      	adds	r2, r3, #1
 800a16a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a16c:	611a      	str	r2, [r3, #16]
 800a16e:	e006      	b.n	800a17e <mbedtls_ctr_drbg_random_with_add+0x148>
            goto exit;
 800a170:	bf00      	nop
 800a172:	e004      	b.n	800a17e <mbedtls_ctr_drbg_random_with_add+0x148>
            goto exit;
 800a174:	bf00      	nop
 800a176:	e002      	b.n	800a17e <mbedtls_ctr_drbg_random_with_add+0x148>
            goto exit;
 800a178:	bf00      	nop
 800a17a:	e000      	b.n	800a17e <mbedtls_ctr_drbg_random_with_add+0x148>
        goto exit;
 800a17c:	bf00      	nop

exit:
    mbedtls_platform_zeroize( add_input, sizeof( add_input ) );
 800a17e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a182:	2130      	movs	r1, #48	@ 0x30
 800a184:	4618      	mov	r0, r3
 800a186:	f006 fbf9 	bl	801097c <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 800a18a:	f107 0314 	add.w	r3, r7, #20
 800a18e:	2110      	movs	r1, #16
 800a190:	4618      	mov	r0, r3
 800a192:	f006 fbf3 	bl	801097c <mbedtls_platform_zeroize>
    return( 0 );
 800a196:	2300      	movs	r3, #0
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3768      	adds	r7, #104	@ 0x68
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <mbedtls_ctr_drbg_random>:

int mbedtls_ctr_drbg_random( void *p_rng, unsigned char *output, size_t output_len )
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b088      	sub	sp, #32
 800a1a4:	af02      	add	r7, sp, #8
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]
    int ret;
    mbedtls_ctr_drbg_context *ctx = (mbedtls_ctr_drbg_context *) p_rng;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	617b      	str	r3, [r7, #20]
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    ret = mbedtls_ctr_drbg_random_with_add( ctx, output, output_len, NULL, 0 );
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	68b9      	ldr	r1, [r7, #8]
 800a1ba:	6978      	ldr	r0, [r7, #20]
 800a1bc:	f7ff ff3b 	bl	800a036 <mbedtls_ctr_drbg_random_with_add>
 800a1c0:	6138      	str	r0, [r7, #16]
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
 800a1c2:	693b      	ldr	r3, [r7, #16]
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3718      	adds	r7, #24
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <derive_mpi>:
 * Derive a suitable integer for group grp from a buffer of length len
 * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
 */
static int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,
                       const unsigned char *buf, size_t blen )
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b088      	sub	sp, #32
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	607a      	str	r2, [r7, #4]
 800a1d8:	603b      	str	r3, [r7, #0]
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1de:	3307      	adds	r3, #7
 800a1e0:	08db      	lsrs	r3, r3, #3
 800a1e2:	61bb      	str	r3, [r7, #24]
    size_t use_size = blen > n_size ? n_size : blen;
 800a1e4:	683a      	ldr	r2, [r7, #0]
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	bf28      	it	cs
 800a1ec:	4613      	movcs	r3, r2
 800a1ee:	617b      	str	r3, [r7, #20]

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
 800a1f0:	697a      	ldr	r2, [r7, #20]
 800a1f2:	6879      	ldr	r1, [r7, #4]
 800a1f4:	68b8      	ldr	r0, [r7, #8]
 800a1f6:	f7fc fae6 	bl	80067c6 <mbedtls_mpi_read_binary>
 800a1fa:	61f8      	str	r0, [r7, #28]
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d126      	bne.n	800a250 <derive_mpi+0x84>
    if( use_size * 8 > grp->nbits )
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	00da      	lsls	r2, r3, #3
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d90c      	bls.n	800a228 <derive_mpi+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	00da      	lsls	r2, r3, #3
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a216:	1ad3      	subs	r3, r2, r3
 800a218:	4619      	mov	r1, r3
 800a21a:	68b8      	ldr	r0, [r7, #8]
 800a21c:	f7fc fc26 	bl	8006a6c <mbedtls_mpi_shift_r>
 800a220:	61f8      	str	r0, [r7, #28]
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d113      	bne.n	800a250 <derive_mpi+0x84>

    /* While at it, reduce modulo N */
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	334c      	adds	r3, #76	@ 0x4c
 800a22c:	4619      	mov	r1, r3
 800a22e:	68b8      	ldr	r0, [r7, #8]
 800a230:	f7fc fd39 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	db09      	blt.n	800a24e <derive_mpi+0x82>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	334c      	adds	r3, #76	@ 0x4c
 800a23e:	461a      	mov	r2, r3
 800a240:	68b9      	ldr	r1, [r7, #8]
 800a242:	68b8      	ldr	r0, [r7, #8]
 800a244:	f7fc ff99 	bl	800717a <mbedtls_mpi_sub_mpi>
 800a248:	61f8      	str	r0, [r7, #28]
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	2b00      	cmp	r3, #0

cleanup:
 800a24e:	bf00      	nop
    return( ret );
 800a250:	69fb      	ldr	r3, [r7, #28]
}
 800a252:	4618      	mov	r0, r3
 800a254:	3720      	adds	r7, #32
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
	...

0800a25c <ecdsa_sign_restartable>:
static int ecdsa_sign_restartable( mbedtls_ecp_group *grp,
                mbedtls_mpi *r, mbedtls_mpi *s,
                const mbedtls_mpi *d, const unsigned char *buf, size_t blen,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
                mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b0a2      	sub	sp, #136	@ 0x88
 800a260:	af04      	add	r7, sp, #16
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	607a      	str	r2, [r7, #4]
 800a268:	603b      	str	r3, [r7, #0]
    int ret, key_tries, sign_tries;
    int *p_sign_tries = &sign_tries, *p_key_tries = &key_tries;
 800a26a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800a26e:	673b      	str	r3, [r7, #112]	@ 0x70
 800a270:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800a274:	66fb      	str	r3, [r7, #108]	@ 0x6c
    mbedtls_ecp_point R;
    mbedtls_mpi k, e, t;
    mbedtls_mpi *pk = &k, *pr = r;
 800a276:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a27a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	667b      	str	r3, [r7, #100]	@ 0x64

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a284:	2b00      	cmp	r3, #0
 800a286:	d101      	bne.n	800a28c <ecdsa_sign_restartable+0x30>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800a288:	4b80      	ldr	r3, [pc, #512]	@ (800a48c <ecdsa_sign_restartable+0x230>)
 800a28a:	e0fb      	b.n	800a484 <ecdsa_sign_restartable+0x228>

    /* Make sure d is in range 1..n-1 */
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 800a28c:	2101      	movs	r1, #1
 800a28e:	6838      	ldr	r0, [r7, #0]
 800a290:	f7fc fda4 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	db08      	blt.n	800a2ac <ecdsa_sign_restartable+0x50>
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	334c      	adds	r3, #76	@ 0x4c
 800a29e:	4619      	mov	r1, r3
 800a2a0:	6838      	ldr	r0, [r7, #0]
 800a2a2:	f7fc fd00 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	db01      	blt.n	800a2b0 <ecdsa_sign_restartable+0x54>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 800a2ac:	4b78      	ldr	r3, [pc, #480]	@ (800a490 <ecdsa_sign_restartable+0x234>)
 800a2ae:	e0e9      	b.n	800a484 <ecdsa_sign_restartable+0x228>

    mbedtls_ecp_point_init( &R );
 800a2b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f000 fbb9 	bl	800aa2c <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
 800a2ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7fb fdab 	bl	8005e1a <mbedtls_mpi_init>
 800a2c4:	f107 0320 	add.w	r3, r7, #32
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f7fb fda6 	bl	8005e1a <mbedtls_mpi_init>
 800a2ce:	f107 0314 	add.w	r3, r7, #20
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7fb fda1 	bl	8005e1a <mbedtls_mpi_init>
        if( rs_ctx->sig->state == ecdsa_sig_modn )
            goto modn;
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    *p_sign_tries = 0;
 800a2d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a2da:	2200      	movs	r2, #0
 800a2dc:	601a      	str	r2, [r3, #0]
    do
    {
        if( *p_sign_tries++ > 10 )
 800a2de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a2e0:	1d1a      	adds	r2, r3, #4
 800a2e2:	673a      	str	r2, [r7, #112]	@ 0x70
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2b0a      	cmp	r3, #10
 800a2e8:	dd02      	ble.n	800a2f0 <ecdsa_sign_restartable+0x94>
        {
            ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
 800a2ea:	4b6a      	ldr	r3, [pc, #424]	@ (800a494 <ecdsa_sign_restartable+0x238>)
 800a2ec:	677b      	str	r3, [r7, #116]	@ 0x74
            goto cleanup;
 800a2ee:	e0b4      	b.n	800a45a <ecdsa_sign_restartable+0x1fe>

        /*
         * Steps 1-3: generate a suitable ephemeral keypair
         * and set r = xR mod n
         */
        *p_key_tries = 0;
 800a2f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	601a      	str	r2, [r3, #0]
        do
        {
            if( *p_key_tries++ > 10 )
 800a2f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2f8:	1d1a      	adds	r2, r3, #4
 800a2fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b0a      	cmp	r3, #10
 800a300:	dd02      	ble.n	800a308 <ecdsa_sign_restartable+0xac>
            {
                ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
 800a302:	4b64      	ldr	r3, [pc, #400]	@ (800a494 <ecdsa_sign_restartable+0x238>)
 800a304:	677b      	str	r3, [r7, #116]	@ 0x74
                goto cleanup;
 800a306:	e0a8      	b.n	800a45a <ecdsa_sign_restartable+0x1fe>
            }

            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, pk, f_rng, p_rng ) );
 800a308:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a30c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a310:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f003 fac4 	bl	800d8a0 <mbedtls_ecp_gen_privkey>
 800a318:	6778      	str	r0, [r7, #116]	@ 0x74
 800a31a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f040 809c 	bne.w	800a45a <ecdsa_sign_restartable+0x1fe>
            if( rs_ctx != NULL && rs_ctx->sig != NULL )
                rs_ctx->sig->state = ecdsa_sig_mul;

mul:
#endif
            MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &R, pk, &grp->G,
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800a328:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800a32c:	2300      	movs	r3, #0
 800a32e:	9302      	str	r3, [sp, #8]
 800a330:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a334:	9301      	str	r3, [sp, #4]
 800a336:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a33a:	9300      	str	r3, [sp, #0]
 800a33c:	4613      	mov	r3, r2
 800a33e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f002 ffeb 	bl	800d31c <mbedtls_ecp_mul_restartable>
 800a346:	6778      	str	r0, [r7, #116]	@ 0x74
 800a348:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f040 8085 	bne.w	800a45a <ecdsa_sign_restartable+0x1fe>
                                                  f_rng, p_rng, ECDSA_RS_ECP ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pr, &R.X, &grp->N ) );
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800a356:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a35a:	4619      	mov	r1, r3
 800a35c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800a35e:	f7fe ff6e 	bl	800923e <mbedtls_mpi_mod_mpi>
 800a362:	6778      	str	r0, [r7, #116]	@ 0x74
 800a364:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a366:	2b00      	cmp	r3, #0
 800a368:	d177      	bne.n	800a45a <ecdsa_sign_restartable+0x1fe>
        }
        while( mbedtls_mpi_cmp_int( pr, 0 ) == 0 );
 800a36a:	2100      	movs	r1, #0
 800a36c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800a36e:	f7fc fd35 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d0be      	beq.n	800a2f6 <ecdsa_sign_restartable+0x9a>
        ECDSA_BUDGET( MBEDTLS_ECP_OPS_INV + 4 );

        /*
         * Step 5: derive MPI from hashed message
         */
        MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 800a378:	f107 0120 	add.w	r1, r7, #32
 800a37c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a380:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f7ff ff21 	bl	800a1cc <derive_mpi>
 800a38a:	6778      	str	r0, [r7, #116]	@ 0x74
 800a38c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d163      	bne.n	800a45a <ecdsa_sign_restartable+0x1fe>

        /*
         * Generate a random value to blind inv_mod in next step,
         * avoiding a potential timing leak.
         */
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, &t, f_rng, p_rng ) );
 800a392:	f107 0114 	add.w	r1, r7, #20
 800a396:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a39a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a39e:	68f8      	ldr	r0, [r7, #12]
 800a3a0:	f003 fa7e 	bl	800d8a0 <mbedtls_ecp_gen_privkey>
 800a3a4:	6778      	str	r0, [r7, #116]	@ 0x74
 800a3a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d156      	bne.n	800a45a <ecdsa_sign_restartable+0x1fe>

        /*
         * Step 6: compute s = (e + r * d) / k = t (e + rd) / (kt) mod n
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, pr, d ) );
 800a3ac:	683a      	ldr	r2, [r7, #0]
 800a3ae:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f7fe fb17 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800a3b6:	6778      	str	r0, [r7, #116]	@ 0x74
 800a3b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d14d      	bne.n	800a45a <ecdsa_sign_restartable+0x1fe>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &e, &e, s ) );
 800a3be:	f107 0120 	add.w	r1, r7, #32
 800a3c2:	f107 0320 	add.w	r3, r7, #32
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7fc fe92 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800a3ce:	6778      	str	r0, [r7, #116]	@ 0x74
 800a3d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d141      	bne.n	800a45a <ecdsa_sign_restartable+0x1fe>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &e, &e, &t ) );
 800a3d6:	f107 0214 	add.w	r2, r7, #20
 800a3da:	f107 0120 	add.w	r1, r7, #32
 800a3de:	f107 0320 	add.w	r3, r7, #32
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7fe fafe 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800a3e8:	6778      	str	r0, [r7, #116]	@ 0x74
 800a3ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d134      	bne.n	800a45a <ecdsa_sign_restartable+0x1fe>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pk, pk, &t ) );
 800a3f0:	f107 0314 	add.w	r3, r7, #20
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a3f8:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800a3fa:	f7fe faf3 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800a3fe:	6778      	str	r0, [r7, #116]	@ 0x74
 800a400:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a402:	2b00      	cmp	r3, #0
 800a404:	d129      	bne.n	800a45a <ecdsa_sign_restartable+0x1fe>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, pk, &grp->N ) );
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	334c      	adds	r3, #76	@ 0x4c
 800a40a:	461a      	mov	r2, r3
 800a40c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f7ff f881 	bl	8009516 <mbedtls_mpi_inv_mod>
 800a414:	6778      	str	r0, [r7, #116]	@ 0x74
 800a416:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d11e      	bne.n	800a45a <ecdsa_sign_restartable+0x1fe>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, s, &e ) );
 800a41c:	f107 0320 	add.w	r3, r7, #32
 800a420:	461a      	mov	r2, r3
 800a422:	6879      	ldr	r1, [r7, #4]
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f7fe fadd 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800a42a:	6778      	str	r0, [r7, #116]	@ 0x74
 800a42c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d113      	bne.n	800a45a <ecdsa_sign_restartable+0x1fe>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( s, s, &grp->N ) );
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	334c      	adds	r3, #76	@ 0x4c
 800a436:	461a      	mov	r2, r3
 800a438:	6879      	ldr	r1, [r7, #4]
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f7fe feff 	bl	800923e <mbedtls_mpi_mod_mpi>
 800a440:	6778      	str	r0, [r7, #116]	@ 0x74
 800a442:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a444:	2b00      	cmp	r3, #0
 800a446:	d108      	bne.n	800a45a <ecdsa_sign_restartable+0x1fe>
    }
    while( mbedtls_mpi_cmp_int( s, 0 ) == 0 );
 800a448:	2100      	movs	r1, #0
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f7fc fcc6 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	f43f af43 	beq.w	800a2de <ecdsa_sign_restartable+0x82>
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL && rs_ctx->sig != NULL )
        mbedtls_mpi_copy( r, pr );
#endif

cleanup:
 800a458:	bf00      	nop
    mbedtls_ecp_point_free( &R );
 800a45a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a45e:	4618      	mov	r0, r3
 800a460:	f000 fb4f 	bl	800ab02 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );
 800a464:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a468:	4618      	mov	r0, r3
 800a46a:	f7fb fce9 	bl	8005e40 <mbedtls_mpi_free>
 800a46e:	f107 0320 	add.w	r3, r7, #32
 800a472:	4618      	mov	r0, r3
 800a474:	f7fb fce4 	bl	8005e40 <mbedtls_mpi_free>
 800a478:	f107 0314 	add.w	r3, r7, #20
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7fb fcdf 	bl	8005e40 <mbedtls_mpi_free>

    ECDSA_RS_LEAVE( sig );

    return( ret );
 800a482:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 800a484:	4618      	mov	r0, r3
 800a486:	3778      	adds	r7, #120	@ 0x78
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	ffffb080 	.word	0xffffb080
 800a490:	ffffb380 	.word	0xffffb380
 800a494:	ffffb300 	.word	0xffffb300

0800a498 <ecdsa_verify_restartable>:
static int ecdsa_verify_restartable( mbedtls_ecp_group *grp,
                                     const unsigned char *buf, size_t blen,
                                     const mbedtls_ecp_point *Q,
                                     const mbedtls_mpi *r, const mbedtls_mpi *s,
                                     mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b0a0      	sub	sp, #128	@ 0x80
 800a49c:	af04      	add	r7, sp, #16
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	607a      	str	r2, [r7, #4]
 800a4a4:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi e, s_inv, u1, u2;
    mbedtls_ecp_point R;
    mbedtls_mpi *pu1 = &u1, *pu2 = &u2;
 800a4a6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a4aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a4ac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800a4b0:	667b      	str	r3, [r7, #100]	@ 0x64

    mbedtls_ecp_point_init( &R );
 800a4b2:	f107 0310 	add.w	r3, r7, #16
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f000 fab8 	bl	800aa2c <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv );
 800a4bc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7fb fcaa 	bl	8005e1a <mbedtls_mpi_init>
 800a4c6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7fb fca5 	bl	8005e1a <mbedtls_mpi_init>
    mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );
 800a4d0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7fb fca0 	bl	8005e1a <mbedtls_mpi_init>
 800a4da:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7fb fc9b 	bl	8005e1a <mbedtls_mpi_init>

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d101      	bne.n	800a4f0 <ecdsa_verify_restartable+0x58>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800a4ec:	4b60      	ldr	r3, [pc, #384]	@ (800a670 <ecdsa_verify_restartable+0x1d8>)
 800a4ee:	e0bb      	b.n	800a668 <ecdsa_verify_restartable+0x1d0>
#endif /* MBEDTLS_ECP_RESTARTABLE */

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 800a4f0:	2101      	movs	r1, #1
 800a4f2:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800a4f4:	f7fc fc72 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	db18      	blt.n	800a530 <ecdsa_verify_restartable+0x98>
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	334c      	adds	r3, #76	@ 0x4c
 800a502:	4619      	mov	r1, r3
 800a504:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800a506:	f7fc fbce 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	da0f      	bge.n	800a530 <ecdsa_verify_restartable+0x98>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 800a510:	2101      	movs	r1, #1
 800a512:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800a514:	f7fc fc62 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800a518:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	db08      	blt.n	800a530 <ecdsa_verify_restartable+0x98>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	334c      	adds	r3, #76	@ 0x4c
 800a522:	4619      	mov	r1, r3
 800a524:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800a526:	f7fc fbbe 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	db02      	blt.n	800a536 <ecdsa_verify_restartable+0x9e>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 800a530:	4b50      	ldr	r3, [pc, #320]	@ (800a674 <ecdsa_verify_restartable+0x1dc>)
 800a532:	66fb      	str	r3, [r7, #108]	@ 0x6c
        goto cleanup;
 800a534:	e07e      	b.n	800a634 <ecdsa_verify_restartable+0x19c>
    }

    /*
     * Step 3: derive MPI from hashed message
     */
    MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 800a536:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f7ff fe44 	bl	800a1cc <derive_mpi>
 800a544:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800a546:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d173      	bne.n	800a634 <ecdsa_verify_restartable+0x19c>
    /*
     * Step 4: u1 = e / s mod n, u2 = r / s mod n
     */
    ECDSA_BUDGET( MBEDTLS_ECP_OPS_CHK + MBEDTLS_ECP_OPS_INV + 2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800a552:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a556:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a558:	4618      	mov	r0, r3
 800a55a:	f7fe ffdc 	bl	8009516 <mbedtls_mpi_inv_mod>
 800a55e:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800a560:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a562:	2b00      	cmp	r3, #0
 800a564:	d166      	bne.n	800a634 <ecdsa_verify_restartable+0x19c>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu1, &e, &s_inv ) );
 800a566:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800a56a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a56e:	4619      	mov	r1, r3
 800a570:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800a572:	f7fe fa37 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800a576:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800a578:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d15a      	bne.n	800a634 <ecdsa_verify_restartable+0x19c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu1, pu1, &grp->N ) );
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	334c      	adds	r3, #76	@ 0x4c
 800a582:	461a      	mov	r2, r3
 800a584:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a586:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800a588:	f7fe fe59 	bl	800923e <mbedtls_mpi_mod_mpi>
 800a58c:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800a58e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a590:	2b00      	cmp	r3, #0
 800a592:	d14f      	bne.n	800a634 <ecdsa_verify_restartable+0x19c>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu2, r, &s_inv ) );
 800a594:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a598:	461a      	mov	r2, r3
 800a59a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a59c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800a59e:	f7fe fa21 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800a5a2:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800a5a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d144      	bne.n	800a634 <ecdsa_verify_restartable+0x19c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu2, pu2, &grp->N ) );
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	334c      	adds	r3, #76	@ 0x4c
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a5b2:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800a5b4:	f7fe fe43 	bl	800923e <mbedtls_mpi_mod_mpi>
 800a5b8:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800a5ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d139      	bne.n	800a634 <ecdsa_verify_restartable+0x19c>
muladd:
#endif
    /*
     * Step 5: R = u1 G + u2 Q
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_muladd_restartable( grp,
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800a5c6:	f107 0110 	add.w	r1, r7, #16
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	9302      	str	r3, [sp, #8]
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	9301      	str	r3, [sp, #4]
 800a5d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a5d4:	9300      	str	r3, [sp, #0]
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	f003 f86e 	bl	800d6bc <mbedtls_ecp_muladd_restartable>
 800a5e0:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800a5e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d125      	bne.n	800a634 <ecdsa_verify_restartable+0x19c>
                     &R, pu1, &grp->G, pu2, Q, ECDSA_RS_ECP ) );

    if( mbedtls_ecp_is_zero( &R ) )
 800a5e8:	f107 0310 	add.w	r3, r7, #16
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f000 fb6c 	bl	800acca <mbedtls_ecp_is_zero>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d002      	beq.n	800a5fe <ecdsa_verify_restartable+0x166>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 800a5f8:	4b1e      	ldr	r3, [pc, #120]	@ (800a674 <ecdsa_verify_restartable+0x1dc>)
 800a5fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
        goto cleanup;
 800a5fc:	e01a      	b.n	800a634 <ecdsa_verify_restartable+0x19c>

    /*
     * Step 6: convert xR to an integer (no-op)
     * Step 7: reduce xR mod n (gives v)
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800a604:	f107 0110 	add.w	r1, r7, #16
 800a608:	f107 0310 	add.w	r3, r7, #16
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7fe fe16 	bl	800923e <mbedtls_mpi_mod_mpi>
 800a612:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800a614:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a616:	2b00      	cmp	r3, #0
 800a618:	d10c      	bne.n	800a634 <ecdsa_verify_restartable+0x19c>

    /*
     * Step 8: check if v (that is, R.X) is equal to r
     */
    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )
 800a61a:	f107 0310 	add.w	r3, r7, #16
 800a61e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a620:	4618      	mov	r0, r3
 800a622:	f7fc fb40 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d002      	beq.n	800a632 <ecdsa_verify_restartable+0x19a>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 800a62c:	4b11      	ldr	r3, [pc, #68]	@ (800a674 <ecdsa_verify_restartable+0x1dc>)
 800a62e:	66fb      	str	r3, [r7, #108]	@ 0x6c
        goto cleanup;
 800a630:	e000      	b.n	800a634 <ecdsa_verify_restartable+0x19c>
    }

cleanup:
 800a632:	bf00      	nop
    mbedtls_ecp_point_free( &R );
 800a634:	f107 0310 	add.w	r3, r7, #16
 800a638:	4618      	mov	r0, r3
 800a63a:	f000 fa62 	bl	800ab02 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv );
 800a63e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a642:	4618      	mov	r0, r3
 800a644:	f7fb fbfc 	bl	8005e40 <mbedtls_mpi_free>
 800a648:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7fb fbf7 	bl	8005e40 <mbedtls_mpi_free>
    mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );
 800a652:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a656:	4618      	mov	r0, r3
 800a658:	f7fb fbf2 	bl	8005e40 <mbedtls_mpi_free>
 800a65c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800a660:	4618      	mov	r0, r3
 800a662:	f7fb fbed 	bl	8005e40 <mbedtls_mpi_free>

    ECDSA_RS_LEAVE( ver );

    return( ret );
 800a666:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3770      	adds	r7, #112	@ 0x70
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	ffffb080 	.word	0xffffb080
 800a674:	ffffb200 	.word	0xffffb200

0800a678 <ecdsa_signature_to_asn1>:
/*
 * Convert a signature (given by context) to ASN.1
 */
static int ecdsa_signature_to_asn1( const mbedtls_mpi *r, const mbedtls_mpi *s,
                                    unsigned char *sig, size_t *slen )
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b0a2      	sub	sp, #136	@ 0x88
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
 800a684:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char buf[MBEDTLS_ECDSA_MAX_LEN];
    unsigned char *p = buf + sizeof( buf );
 800a686:	f107 0314 	add.w	r3, r7, #20
 800a68a:	3369      	adds	r3, #105	@ 0x69
 800a68c:	613b      	str	r3, [r7, #16]
    size_t len = 0;
 800a68e:	2300      	movs	r3, #0
 800a690:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
 800a694:	f107 0114 	add.w	r1, r7, #20
 800a698:	f107 0310 	add.w	r3, r7, #16
 800a69c:	68ba      	ldr	r2, [r7, #8]
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7fb f807 	bl	80056b2 <mbedtls_asn1_write_mpi>
 800a6a4:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 800a6a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	da02      	bge.n	800a6b6 <ecdsa_signature_to_asn1+0x3e>
 800a6b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a6b4:	e05b      	b.n	800a76e <ecdsa_signature_to_asn1+0xf6>
 800a6b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a6ba:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a6be:	4413      	add	r3, r2
 800a6c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );
 800a6c4:	f107 0114 	add.w	r1, r7, #20
 800a6c8:	f107 0310 	add.w	r3, r7, #16
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fa ffef 	bl	80056b2 <mbedtls_asn1_write_mpi>
 800a6d4:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 800a6d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	da02      	bge.n	800a6e6 <ecdsa_signature_to_asn1+0x6e>
 800a6e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a6e4:	e043      	b.n	800a76e <ecdsa_signature_to_asn1+0xf6>
 800a6e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a6ea:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
 800a6f4:	f107 0114 	add.w	r1, r7, #20
 800a6f8:	f107 0310 	add.w	r3, r7, #16
 800a6fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a700:	4618      	mov	r0, r3
 800a702:	f7fa fea0 	bl	8005446 <mbedtls_asn1_write_len>
 800a706:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 800a70a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a70e:	2b00      	cmp	r3, #0
 800a710:	da02      	bge.n	800a718 <ecdsa_signature_to_asn1+0xa0>
 800a712:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a716:	e02a      	b.n	800a76e <ecdsa_signature_to_asn1+0xf6>
 800a718:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a71c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a720:	4413      	add	r3, r2
 800a722:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 800a726:	f107 0114 	add.w	r1, r7, #20
 800a72a:	f107 0310 	add.w	r3, r7, #16
 800a72e:	2230      	movs	r2, #48	@ 0x30
 800a730:	4618      	mov	r0, r3
 800a732:	f7fa ff70 	bl	8005616 <mbedtls_asn1_write_tag>
 800a736:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 800a73a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a73e:	2b00      	cmp	r3, #0
 800a740:	da02      	bge.n	800a748 <ecdsa_signature_to_asn1+0xd0>
 800a742:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a746:	e012      	b.n	800a76e <ecdsa_signature_to_asn1+0xf6>
 800a748:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a74c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a750:	4413      	add	r3, r2
 800a752:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                                       MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) );

    memcpy( sig, p, len );
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a75c:	4619      	mov	r1, r3
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f00c fb07 	bl	8016d72 <memcpy>
    *slen = len;
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a76a:	601a      	str	r2, [r3, #0]

    return( 0 );
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3788      	adds	r7, #136	@ 0x88
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <mbedtls_ecdsa_write_signature_restartable>:
                           const unsigned char *hash, size_t hlen,
                           unsigned char *sig, size_t *slen,
                           int (*f_rng)(void *, unsigned char *, size_t),
                           void *p_rng,
                           mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 800a776:	b590      	push	{r4, r7, lr}
 800a778:	b093      	sub	sp, #76	@ 0x4c
 800a77a:	af06      	add	r7, sp, #24
 800a77c:	60f8      	str	r0, [r7, #12]
 800a77e:	607a      	str	r2, [r7, #4]
 800a780:	603b      	str	r3, [r7, #0]
 800a782:	460b      	mov	r3, r1
 800a784:	72fb      	strb	r3, [r7, #11]
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );

    mbedtls_mpi_init( &r );
 800a786:	f107 0320 	add.w	r3, r7, #32
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7fb fb45 	bl	8005e1a <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 800a790:	f107 0314 	add.w	r3, r7, #20
 800a794:	4618      	mov	r0, r3
 800a796:	f7fb fb40 	bl	8005e1a <mbedtls_mpi_init>

#if defined(MBEDTLS_ECDSA_SIGN_ALT)
    MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign( &ctx->grp, &r, &s, &ctx->d,
                         hash, hlen, f_rng, p_rng ) );
#else
    MBEDTLS_MPI_CHK( ecdsa_sign_restartable( &ctx->grp, &r, &s, &ctx->d,
 800a79a:	68f8      	ldr	r0, [r7, #12]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f103 047c 	add.w	r4, r3, #124	@ 0x7c
 800a7a2:	f107 0214 	add.w	r2, r7, #20
 800a7a6:	f107 0120 	add.w	r1, r7, #32
 800a7aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7ac:	9304      	str	r3, [sp, #16]
 800a7ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7b0:	9303      	str	r3, [sp, #12]
 800a7b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7b4:	9302      	str	r3, [sp, #8]
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	9301      	str	r3, [sp, #4]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	9300      	str	r3, [sp, #0]
 800a7be:	4623      	mov	r3, r4
 800a7c0:	f7ff fd4c 	bl	800a25c <ecdsa_sign_restartable>
 800a7c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a7c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10b      	bne.n	800a7e4 <mbedtls_ecdsa_write_signature_restartable+0x6e>
                         hash, hlen, f_rng, p_rng, rs_ctx ) );
#endif /* MBEDTLS_ECDSA_SIGN_ALT */
#endif /* MBEDTLS_ECDSA_DETERMINISTIC */

    MBEDTLS_MPI_CHK( ecdsa_signature_to_asn1( &r, &s, sig, slen ) );
 800a7cc:	f107 0114 	add.w	r1, r7, #20
 800a7d0:	f107 0020 	add.w	r0, r7, #32
 800a7d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a7d8:	f7ff ff4e 	bl	800a678 <ecdsa_signature_to_asn1>
 800a7dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a7de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7e0:	2b00      	cmp	r3, #0

cleanup:
 800a7e2:	bf00      	nop
    mbedtls_mpi_free( &r );
 800a7e4:	f107 0320 	add.w	r3, r7, #32
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7fb fb29 	bl	8005e40 <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 800a7ee:	f107 0314 	add.w	r3, r7, #20
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7fb fb24 	bl	8005e40 <mbedtls_mpi_free>

    return( ret );
 800a7f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3734      	adds	r7, #52	@ 0x34
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd90      	pop	{r4, r7, pc}

0800a802 <mbedtls_ecdsa_write_signature>:
                                 mbedtls_md_type_t md_alg,
                                 const unsigned char *hash, size_t hlen,
                                 unsigned char *sig, size_t *slen,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 800a802:	b580      	push	{r7, lr}
 800a804:	b08a      	sub	sp, #40	@ 0x28
 800a806:	af06      	add	r7, sp, #24
 800a808:	60f8      	str	r0, [r7, #12]
 800a80a:	607a      	str	r2, [r7, #4]
 800a80c:	603b      	str	r3, [r7, #0]
 800a80e:	460b      	mov	r3, r1
 800a810:	72fb      	strb	r3, [r7, #11]
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );
    return( mbedtls_ecdsa_write_signature_restartable(
 800a812:	7af9      	ldrb	r1, [r7, #11]
 800a814:	2300      	movs	r3, #0
 800a816:	9304      	str	r3, [sp, #16]
 800a818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a81a:	9303      	str	r3, [sp, #12]
 800a81c:	6a3b      	ldr	r3, [r7, #32]
 800a81e:	9302      	str	r3, [sp, #8]
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	9301      	str	r3, [sp, #4]
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	68f8      	ldr	r0, [r7, #12]
 800a82e:	f7ff ffa2 	bl	800a776 <mbedtls_ecdsa_write_signature_restartable>
 800a832:	4603      	mov	r3, r0
                ctx, md_alg, hash, hlen, sig, slen, f_rng, p_rng, NULL ) );
}
 800a834:	4618      	mov	r0, r3
 800a836:	3710      	adds	r7, #16
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <mbedtls_ecdsa_read_signature>:
 * Read and check signature
 */
int mbedtls_ecdsa_read_signature( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen )
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b086      	sub	sp, #24
 800a840:	af02      	add	r7, sp, #8
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	607a      	str	r2, [r7, #4]
 800a848:	603b      	str	r3, [r7, #0]
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    return( mbedtls_ecdsa_read_signature_restartable(
 800a84a:	2300      	movs	r3, #0
 800a84c:	9301      	str	r3, [sp, #4]
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	9300      	str	r3, [sp, #0]
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	68b9      	ldr	r1, [r7, #8]
 800a858:	68f8      	ldr	r0, [r7, #12]
 800a85a:	f000 f805 	bl	800a868 <mbedtls_ecdsa_read_signature_restartable>
 800a85e:	4603      	mov	r3, r0
                ctx, hash, hlen, sig, slen, NULL ) );
}
 800a860:	4618      	mov	r0, r3
 800a862:	3710      	adds	r7, #16
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <mbedtls_ecdsa_read_signature_restartable>:
 */
int mbedtls_ecdsa_read_signature_restartable( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b092      	sub	sp, #72	@ 0x48
 800a86c:	af04      	add	r7, sp, #16
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	607a      	str	r2, [r7, #4]
 800a874:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char *p = (unsigned char *) sig;
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const unsigned char *end = sig + slen;
 800a87a:	683a      	ldr	r2, [r7, #0]
 800a87c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a87e:	4413      	add	r3, r2
 800a880:	633b      	str	r3, [r7, #48]	@ 0x30
    mbedtls_mpi r, s;
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );

    mbedtls_mpi_init( &r );
 800a882:	f107 031c 	add.w	r3, r7, #28
 800a886:	4618      	mov	r0, r3
 800a888:	f7fb fac7 	bl	8005e1a <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 800a88c:	f107 0310 	add.w	r3, r7, #16
 800a890:	4618      	mov	r0, r3
 800a892:	f7fb fac2 	bl	8005e1a <mbedtls_mpi_init>

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 800a896:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800a89a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800a89e:	2330      	movs	r3, #48	@ 0x30
 800a8a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a8a2:	f7fa fd4d 	bl	8005340 <mbedtls_asn1_get_tag>
 800a8a6:	6378      	str	r0, [r7, #52]	@ 0x34
 800a8a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d004      	beq.n	800a8b8 <mbedtls_ecdsa_read_signature_restartable+0x50>
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 800a8ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8b0:	f5a3 439f 	sub.w	r3, r3, #20352	@ 0x4f80
 800a8b4:	637b      	str	r3, [r7, #52]	@ 0x34
        goto cleanup;
 800a8b6:	e044      	b.n	800a942 <mbedtls_ecdsa_read_signature_restartable+0xda>
    }

    if( p + len != end )
 800a8b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8bc:	4413      	add	r3, r2
 800a8be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d002      	beq.n	800a8ca <mbedtls_ecdsa_read_signature_restartable+0x62>
    {
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
 800a8c4:	4b26      	ldr	r3, [pc, #152]	@ (800a960 <mbedtls_ecdsa_read_signature_restartable+0xf8>)
 800a8c6:	637b      	str	r3, [r7, #52]	@ 0x34
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
        goto cleanup;
 800a8c8:	e03b      	b.n	800a942 <mbedtls_ecdsa_read_signature_restartable+0xda>
    }

    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
 800a8ca:	f107 021c 	add.w	r2, r7, #28
 800a8ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a8d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7fa fd5c 	bl	8005392 <mbedtls_asn1_get_mpi>
 800a8da:	6378      	str	r0, [r7, #52]	@ 0x34
 800a8dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d10b      	bne.n	800a8fa <mbedtls_ecdsa_read_signature_restartable+0x92>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
 800a8e2:	f107 0210 	add.w	r2, r7, #16
 800a8e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a8ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7fa fd50 	bl	8005392 <mbedtls_asn1_get_mpi>
 800a8f2:	6378      	str	r0, [r7, #52]	@ 0x34
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
 800a8f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d004      	beq.n	800a904 <mbedtls_ecdsa_read_signature_restartable+0x9c>
    {
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 800a8fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8fc:	f5a3 439f 	sub.w	r3, r3, #20352	@ 0x4f80
 800a900:	637b      	str	r3, [r7, #52]	@ 0x34
        goto cleanup;
 800a902:	e01e      	b.n	800a942 <mbedtls_ecdsa_read_signature_restartable+0xda>
#if defined(MBEDTLS_ECDSA_VERIFY_ALT)
    if( ( ret = mbedtls_ecdsa_verify( &ctx->grp, hash, hlen,
                                      &ctx->Q, &r, &s ) ) != 0 )
        goto cleanup;
#else
    if( ( ret = ecdsa_verify_restartable( &ctx->grp, hash, hlen,
 800a904:	68f8      	ldr	r0, [r7, #12]
                              &ctx->Q, &r, &s, rs_ctx ) ) != 0 )
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f103 0288 	add.w	r2, r3, #136	@ 0x88
    if( ( ret = ecdsa_verify_restartable( &ctx->grp, hash, hlen,
 800a90c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a90e:	9302      	str	r3, [sp, #8]
 800a910:	f107 0310 	add.w	r3, r7, #16
 800a914:	9301      	str	r3, [sp, #4]
 800a916:	f107 031c 	add.w	r3, r7, #28
 800a91a:	9300      	str	r3, [sp, #0]
 800a91c:	4613      	mov	r3, r2
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	68b9      	ldr	r1, [r7, #8]
 800a922:	f7ff fdb9 	bl	800a498 <ecdsa_verify_restartable>
 800a926:	6378      	str	r0, [r7, #52]	@ 0x34
 800a928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d106      	bne.n	800a93c <mbedtls_ecdsa_read_signature_restartable+0xd4>
#endif /* MBEDTLS_ECDSA_VERIFY_ALT */

    /* At this point we know that the buffer starts with a valid signature.
     * Return 0 if the buffer just contains the signature, and a specific
     * error code if the valid signature is followed by more data. */
    if( p != end )
 800a92e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a932:	429a      	cmp	r2, r3
 800a934:	d004      	beq.n	800a940 <mbedtls_ecdsa_read_signature_restartable+0xd8>
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;
 800a936:	4b0b      	ldr	r3, [pc, #44]	@ (800a964 <mbedtls_ecdsa_read_signature_restartable+0xfc>)
 800a938:	637b      	str	r3, [r7, #52]	@ 0x34
 800a93a:	e002      	b.n	800a942 <mbedtls_ecdsa_read_signature_restartable+0xda>
        goto cleanup;
 800a93c:	bf00      	nop
 800a93e:	e000      	b.n	800a942 <mbedtls_ecdsa_read_signature_restartable+0xda>

cleanup:
 800a940:	bf00      	nop
    mbedtls_mpi_free( &r );
 800a942:	f107 031c 	add.w	r3, r7, #28
 800a946:	4618      	mov	r0, r3
 800a948:	f7fb fa7a 	bl	8005e40 <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 800a94c:	f107 0310 	add.w	r3, r7, #16
 800a950:	4618      	mov	r0, r3
 800a952:	f7fb fa75 	bl	8005e40 <mbedtls_mpi_free>

    return( ret );
 800a956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3738      	adds	r7, #56	@ 0x38
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	ffffb01a 	.word	0xffffb01a
 800a964:	ffffb400 	.word	0xffffb400

0800a968 <mbedtls_ecdsa_from_keypair>:

/*
 * Set context from an mbedtls_ecp_keypair
 */
int mbedtls_ecdsa_from_keypair( mbedtls_ecdsa_context *ctx, const mbedtls_ecp_keypair *key )
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
    int ret;
    ECDSA_VALIDATE_RET( ctx != NULL );
    ECDSA_VALIDATE_RET( key != NULL );

    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	683a      	ldr	r2, [r7, #0]
 800a976:	4611      	mov	r1, r2
 800a978:	4618      	mov	r0, r3
 800a97a:	f000 f970 	bl	800ac5e <mbedtls_ecp_group_copy>
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d119      	bne.n	800a9ba <mbedtls_ecdsa_from_keypair+0x52>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f103 027c 	add.w	r2, r3, #124	@ 0x7c
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	337c      	adds	r3, #124	@ 0x7c
 800a990:	4619      	mov	r1, r3
 800a992:	4610      	mov	r0, r2
 800a994:	f7fb fb23 	bl	8005fde <mbedtls_mpi_copy>
 800a998:	60f8      	str	r0, [r7, #12]
    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10c      	bne.n	800a9ba <mbedtls_ecdsa_from_keypair+0x52>
        ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 )
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	3388      	adds	r3, #136	@ 0x88
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	4610      	mov	r0, r2
 800a9ae:	f000 f928 	bl	800ac02 <mbedtls_ecp_copy>
 800a9b2:	60f8      	str	r0, [r7, #12]
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d002      	beq.n	800a9c0 <mbedtls_ecdsa_from_keypair+0x58>
    {
        mbedtls_ecdsa_free( ctx );
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 f810 	bl	800a9e0 <mbedtls_ecdsa_free>
    }

    return( ret );
 800a9c0:	68fb      	ldr	r3, [r7, #12]
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <mbedtls_ecdsa_init>:

/*
 * Initialize context
 */
void mbedtls_ecdsa_init( mbedtls_ecdsa_context *ctx )
{
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b082      	sub	sp, #8
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
    ECDSA_VALIDATE( ctx != NULL );

    mbedtls_ecp_keypair_init( ctx );
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 f87f 	bl	800aad6 <mbedtls_ecp_keypair_init>
}
 800a9d8:	bf00      	nop
 800a9da:	3708      	adds	r7, #8
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <mbedtls_ecdsa_free>:

/*
 * Free context
 */
void mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d003      	beq.n	800a9f6 <mbedtls_ecdsa_free+0x16>
        return;

    mbedtls_ecp_keypair_free( ctx );
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 f8ed 	bl	800abce <mbedtls_ecp_keypair_free>
 800a9f4:	e000      	b.n	800a9f8 <mbedtls_ecdsa_free+0x18>
        return;
 800a9f6:	bf00      	nop
}
 800a9f8:	3708      	adds	r7, #8
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <ecp_get_type>:

/*
 * Get the type of a curve
 */
static inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )
{
 800a9fe:	b480      	push	{r7}
 800aa00:	b083      	sub	sp, #12
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
    if( grp->G.X.p == NULL )
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d101      	bne.n	800aa12 <ecp_get_type+0x14>
        return( ECP_TYPE_NONE );
 800aa0e:	2300      	movs	r3, #0
 800aa10:	e006      	b.n	800aa20 <ecp_get_type+0x22>

    if( grp->G.Y.p == NULL )
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d101      	bne.n	800aa1e <ecp_get_type+0x20>
        return( ECP_TYPE_MONTGOMERY );
 800aa1a:	2302      	movs	r3, #2
 800aa1c:	e000      	b.n	800aa20 <ecp_get_type+0x22>
    else
        return( ECP_TYPE_SHORT_WEIERSTRASS );
 800aa1e:	2301      	movs	r3, #1
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <mbedtls_ecp_point_init>:

/*
 * Initialize (the components of) a point
 */
void mbedtls_ecp_point_init( mbedtls_ecp_point *pt )
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE( pt != NULL );

    mbedtls_mpi_init( &pt->X );
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7fb f9ef 	bl	8005e1a <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Y );
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	330c      	adds	r3, #12
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7fb f9ea 	bl	8005e1a <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Z );
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	3318      	adds	r3, #24
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7fb f9e5 	bl	8005e1a <mbedtls_mpi_init>
}
 800aa50:	bf00      	nop
 800aa52:	3708      	adds	r7, #8
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <mbedtls_ecp_group_init>:

/*
 * Initialize (the components of) a group
 */
void mbedtls_ecp_group_init( mbedtls_ecp_group *grp )
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE( grp != NULL );

    grp->id = MBEDTLS_ECP_DP_NONE;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	701a      	strb	r2, [r3, #0]
    mbedtls_mpi_init( &grp->P );
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	3304      	adds	r3, #4
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7fb f9d5 	bl	8005e1a <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->A );
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	3310      	adds	r3, #16
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7fb f9d0 	bl	8005e1a <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->B );
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	331c      	adds	r3, #28
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7fb f9cb 	bl	8005e1a <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &grp->G );
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	3328      	adds	r3, #40	@ 0x28
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7ff ffcf 	bl	800aa2c <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &grp->N );
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	334c      	adds	r3, #76	@ 0x4c
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7fb f9c1 	bl	8005e1a <mbedtls_mpi_init>
    grp->pbits = 0;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	659a      	str	r2, [r3, #88]	@ 0x58
    grp->nbits = 0;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	65da      	str	r2, [r3, #92]	@ 0x5c
    grp->h = 0;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	661a      	str	r2, [r3, #96]	@ 0x60
    grp->modp = NULL;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2200      	movs	r2, #0
 800aaae:	665a      	str	r2, [r3, #100]	@ 0x64
    grp->t_pre = NULL;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	669a      	str	r2, [r3, #104]	@ 0x68
    grp->t_post = NULL;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2200      	movs	r2, #0
 800aaba:	66da      	str	r2, [r3, #108]	@ 0x6c
    grp->t_data = NULL;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	671a      	str	r2, [r3, #112]	@ 0x70
    grp->T = NULL;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	675a      	str	r2, [r3, #116]	@ 0x74
    grp->T_size = 0;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	679a      	str	r2, [r3, #120]	@ 0x78
}
 800aace:	bf00      	nop
 800aad0:	3708      	adds	r7, #8
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <mbedtls_ecp_keypair_init>:

/*
 * Initialize (the components of) a key pair
 */
void mbedtls_ecp_keypair_init( mbedtls_ecp_keypair *key )
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b082      	sub	sp, #8
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE( key != NULL );

    mbedtls_ecp_group_init( &key->grp );
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7ff ffb9 	bl	800aa58 <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &key->d );
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	337c      	adds	r3, #124	@ 0x7c
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fb f995 	bl	8005e1a <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &key->Q );
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	3388      	adds	r3, #136	@ 0x88
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7ff ff99 	bl	800aa2c <mbedtls_ecp_point_init>
}
 800aafa:	bf00      	nop
 800aafc:	3708      	adds	r7, #8
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <mbedtls_ecp_point_free>:

/*
 * Unallocate (the components of) a point
 */
void mbedtls_ecp_point_free( mbedtls_ecp_point *pt )
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b082      	sub	sp, #8
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
    if( pt == NULL )
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00e      	beq.n	800ab2e <mbedtls_ecp_point_free+0x2c>
        return;

    mbedtls_mpi_free( &( pt->X ) );
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7fb f994 	bl	8005e40 <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Y ) );
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	330c      	adds	r3, #12
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7fb f98f 	bl	8005e40 <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Z ) );
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	3318      	adds	r3, #24
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7fb f98a 	bl	8005e40 <mbedtls_mpi_free>
 800ab2c:	e000      	b.n	800ab30 <mbedtls_ecp_point_free+0x2e>
        return;
 800ab2e:	bf00      	nop
}
 800ab30:	3708      	adds	r7, #8
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <mbedtls_ecp_group_free>:

/*
 * Unallocate (the components of) a group
 */
void mbedtls_ecp_group_free( mbedtls_ecp_group *grp )
{
 800ab36:	b580      	push	{r7, lr}
 800ab38:	b084      	sub	sp, #16
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
    size_t i;

    if( grp == NULL )
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d040      	beq.n	800abc6 <mbedtls_ecp_group_free+0x90>
        return;

    if( grp->h != 1 )
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d018      	beq.n	800ab7e <mbedtls_ecp_group_free+0x48>
    {
        mbedtls_mpi_free( &grp->P );
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	3304      	adds	r3, #4
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7fb f975 	bl	8005e40 <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->A );
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	3310      	adds	r3, #16
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7fb f970 	bl	8005e40 <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->B );
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	331c      	adds	r3, #28
 800ab64:	4618      	mov	r0, r3
 800ab66:	f7fb f96b 	bl	8005e40 <mbedtls_mpi_free>
        mbedtls_ecp_point_free( &grp->G );
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	3328      	adds	r3, #40	@ 0x28
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7ff ffc7 	bl	800ab02 <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	334c      	adds	r3, #76	@ 0x4c
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f7fb f961 	bl	8005e40 <mbedtls_mpi_free>
    }

    if( grp->T != NULL )
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d01a      	beq.n	800abbc <mbedtls_ecp_group_free+0x86>
    {
        for( i = 0; i < grp->T_size; i++ )
 800ab86:	2300      	movs	r3, #0
 800ab88:	60fb      	str	r3, [r7, #12]
 800ab8a:	e00d      	b.n	800aba8 <mbedtls_ecp_group_free+0x72>
            mbedtls_ecp_point_free( &grp->T[i] );
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6f59      	ldr	r1, [r3, #116]	@ 0x74
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	4613      	mov	r3, r2
 800ab94:	00db      	lsls	r3, r3, #3
 800ab96:	4413      	add	r3, r2
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	440b      	add	r3, r1
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7ff ffb0 	bl	800ab02 <mbedtls_ecp_point_free>
        for( i = 0; i < grp->T_size; i++ )
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	3301      	adds	r3, #1
 800aba6:	60fb      	str	r3, [r7, #12]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d3ec      	bcc.n	800ab8c <mbedtls_ecp_group_free+0x56>
        mbedtls_free( grp->T );
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abb6:	4618      	mov	r0, r3
 800abb8:	f00b fce0 	bl	801657c <free>
    }

    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
 800abbc:	217c      	movs	r1, #124	@ 0x7c
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f005 fedc 	bl	801097c <mbedtls_platform_zeroize>
 800abc4:	e000      	b.n	800abc8 <mbedtls_ecp_group_free+0x92>
        return;
 800abc6:	bf00      	nop
}
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <mbedtls_ecp_keypair_free>:

/*
 * Unallocate (the components of) a key pair
 */
void mbedtls_ecp_keypair_free( mbedtls_ecp_keypair *key )
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b082      	sub	sp, #8
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
    if( key == NULL )
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00e      	beq.n	800abfa <mbedtls_ecp_keypair_free+0x2c>
        return;

    mbedtls_ecp_group_free( &key->grp );
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	4618      	mov	r0, r3
 800abe0:	f7ff ffa9 	bl	800ab36 <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &key->d );
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	337c      	adds	r3, #124	@ 0x7c
 800abe8:	4618      	mov	r0, r3
 800abea:	f7fb f929 	bl	8005e40 <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &key->Q );
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	3388      	adds	r3, #136	@ 0x88
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7ff ff85 	bl	800ab02 <mbedtls_ecp_point_free>
 800abf8:	e000      	b.n	800abfc <mbedtls_ecp_keypair_free+0x2e>
        return;
 800abfa:	bf00      	nop
}
 800abfc:	3708      	adds	r7, #8
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <mbedtls_ecp_copy>:

/*
 * Copy the contents of a point
 */
int mbedtls_ecp_copy( mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b084      	sub	sp, #16
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
 800ac0a:	6039      	str	r1, [r7, #0]
    int ret;
    ECP_VALIDATE_RET( P != NULL );
    ECP_VALIDATE_RET( Q != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	683a      	ldr	r2, [r7, #0]
 800ac10:	4611      	mov	r1, r2
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7fb f9e3 	bl	8005fde <mbedtls_mpi_copy>
 800ac18:	60f8      	str	r0, [r7, #12]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d119      	bne.n	800ac54 <mbedtls_ecp_copy+0x52>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f103 020c 	add.w	r2, r3, #12
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	330c      	adds	r3, #12
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	4610      	mov	r0, r2
 800ac2e:	f7fb f9d6 	bl	8005fde <mbedtls_mpi_copy>
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d10c      	bne.n	800ac54 <mbedtls_ecp_copy+0x52>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f103 0218 	add.w	r2, r3, #24
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	3318      	adds	r3, #24
 800ac44:	4619      	mov	r1, r3
 800ac46:	4610      	mov	r0, r2
 800ac48:	f7fb f9c9 	bl	8005fde <mbedtls_mpi_copy>
 800ac4c:	60f8      	str	r0, [r7, #12]
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2b00      	cmp	r3, #0

cleanup:
 800ac52:	bf00      	nop
    return( ret );
 800ac54:	68fb      	ldr	r3, [r7, #12]
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <mbedtls_ecp_group_copy>:

/*
 * Copy the contents of a group object
 */
int mbedtls_ecp_group_copy( mbedtls_ecp_group *dst, const mbedtls_ecp_group *src )
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b082      	sub	sp, #8
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
 800ac66:	6039      	str	r1, [r7, #0]
    ECP_VALIDATE_RET( dst != NULL );
    ECP_VALIDATE_RET( src != NULL );

    return( mbedtls_ecp_group_load( dst, src->id ) );
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f003 f8de 	bl	800de30 <mbedtls_ecp_group_load>
 800ac74:	4603      	mov	r3, r0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <mbedtls_ecp_set_zero>:

/*
 * Set point to zero
 */
int mbedtls_ecp_set_zero( mbedtls_ecp_point *pt )
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b084      	sub	sp, #16
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
    int ret;
    ECP_VALIDATE_RET( pt != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2101      	movs	r1, #1
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7fb fb06 	bl	800629c <mbedtls_mpi_lset>
 800ac90:	60f8      	str	r0, [r7, #12]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d113      	bne.n	800acc0 <mbedtls_ecp_set_zero+0x42>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	330c      	adds	r3, #12
 800ac9c:	2101      	movs	r1, #1
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7fb fafc 	bl	800629c <mbedtls_mpi_lset>
 800aca4:	60f8      	str	r0, [r7, #12]
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d109      	bne.n	800acc0 <mbedtls_ecp_set_zero+0x42>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	3318      	adds	r3, #24
 800acb0:	2100      	movs	r1, #0
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7fb faf2 	bl	800629c <mbedtls_mpi_lset>
 800acb8:	60f8      	str	r0, [r7, #12]
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2b00      	cmp	r3, #0

cleanup:
 800acbe:	bf00      	nop
    return( ret );
 800acc0:	68fb      	ldr	r3, [r7, #12]
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3710      	adds	r7, #16
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}

0800acca <mbedtls_ecp_is_zero>:

/*
 * Tell if a point is zero
 */
int mbedtls_ecp_is_zero( mbedtls_ecp_point *pt )
{
 800acca:	b580      	push	{r7, lr}
 800accc:	b082      	sub	sp, #8
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE_RET( pt != NULL );

    return( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 );
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	3318      	adds	r3, #24
 800acd6:	2100      	movs	r1, #0
 800acd8:	4618      	mov	r0, r3
 800acda:	f7fc f87f 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800acde:	4603      	mov	r3, r0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	bf0c      	ite	eq
 800ace4:	2301      	moveq	r3, #1
 800ace6:	2300      	movne	r3, #0
 800ace8:	b2db      	uxtb	r3, r3
}
 800acea:	4618      	mov	r0, r3
 800acec:	3708      	adds	r7, #8
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
	...

0800acf4 <mbedtls_ecp_point_write_binary>:
 */
int mbedtls_ecp_point_write_binary( const mbedtls_ecp_group *grp,
                                    const mbedtls_ecp_point *P,
                                    int format, size_t *olen,
                                    unsigned char *buf, size_t buflen )
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b086      	sub	sp, #24
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	607a      	str	r2, [r7, #4]
 800ad00:	603b      	str	r3, [r7, #0]
    int ret = 0;
 800ad02:	2300      	movs	r3, #0
 800ad04:	617b      	str	r3, [r7, #20]
                      format == MBEDTLS_ECP_PF_COMPRESSED );

    /*
     * Common case: P == 0
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	3318      	adds	r3, #24
 800ad0a:	2100      	movs	r1, #0
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7fc f865 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d10c      	bne.n	800ad32 <mbedtls_ecp_point_write_binary+0x3e>
    {
        if( buflen < 1 )
 800ad18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d101      	bne.n	800ad22 <mbedtls_ecp_point_write_binary+0x2e>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
 800ad1e:	4b33      	ldr	r3, [pc, #204]	@ (800adec <mbedtls_ecp_point_write_binary+0xf8>)
 800ad20:	e05f      	b.n	800ade2 <mbedtls_ecp_point_write_binary+0xee>

        buf[0] = 0x00;
 800ad22:	6a3b      	ldr	r3, [r7, #32]
 800ad24:	2200      	movs	r2, #0
 800ad26:	701a      	strb	r2, [r3, #0]
        *olen = 1;
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	601a      	str	r2, [r3, #0]

        return( 0 );
 800ad2e:	2300      	movs	r3, #0
 800ad30:	e057      	b.n	800ade2 <mbedtls_ecp_point_write_binary+0xee>
    }

    plen = mbedtls_mpi_size( &grp->P );
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	3304      	adds	r3, #4
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7fb fbda 	bl	80064f0 <mbedtls_mpi_size>
 800ad3c:	6138      	str	r0, [r7, #16]

    if( format == MBEDTLS_ECP_PF_UNCOMPRESSED )
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d128      	bne.n	800ad96 <mbedtls_ecp_point_write_binary+0xa2>
    {
        *olen = 2 * plen + 1;
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	005b      	lsls	r3, r3, #1
 800ad48:	1c5a      	adds	r2, r3, #1
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	601a      	str	r2, [r3, #0]

        if( buflen < *olen )
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d201      	bcs.n	800ad5c <mbedtls_ecp_point_write_binary+0x68>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
 800ad58:	4b24      	ldr	r3, [pc, #144]	@ (800adec <mbedtls_ecp_point_write_binary+0xf8>)
 800ad5a:	e042      	b.n	800ade2 <mbedtls_ecp_point_write_binary+0xee>

        buf[0] = 0x04;
 800ad5c:	6a3b      	ldr	r3, [r7, #32]
 800ad5e:	2204      	movs	r2, #4
 800ad60:	701a      	strb	r2, [r3, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 800ad62:	68b8      	ldr	r0, [r7, #8]
 800ad64:	6a3b      	ldr	r3, [r7, #32]
 800ad66:	3301      	adds	r3, #1
 800ad68:	693a      	ldr	r2, [r7, #16]
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	f7fb fd78 	bl	8006860 <mbedtls_mpi_write_binary>
 800ad70:	6178      	str	r0, [r7, #20]
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d133      	bne.n	800ade0 <mbedtls_ecp_point_write_binary+0xec>
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->Y, buf + 1 + plen, plen ) );
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	f103 000c 	add.w	r0, r3, #12
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	3301      	adds	r3, #1
 800ad82:	6a3a      	ldr	r2, [r7, #32]
 800ad84:	4413      	add	r3, r2
 800ad86:	693a      	ldr	r2, [r7, #16]
 800ad88:	4619      	mov	r1, r3
 800ad8a:	f7fb fd69 	bl	8006860 <mbedtls_mpi_write_binary>
 800ad8e:	6178      	str	r0, [r7, #20]
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	e024      	b.n	800ade0 <mbedtls_ecp_point_write_binary+0xec>
    }
    else if( format == MBEDTLS_ECP_PF_COMPRESSED )
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d120      	bne.n	800adde <mbedtls_ecp_point_write_binary+0xea>
    {
        *olen = plen + 1;
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	1c5a      	adds	r2, r3, #1
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	601a      	str	r2, [r3, #0]

        if( buflen < *olen )
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adaa:	429a      	cmp	r2, r3
 800adac:	d201      	bcs.n	800adb2 <mbedtls_ecp_point_write_binary+0xbe>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
 800adae:	4b0f      	ldr	r3, [pc, #60]	@ (800adec <mbedtls_ecp_point_write_binary+0xf8>)
 800adb0:	e017      	b.n	800ade2 <mbedtls_ecp_point_write_binary+0xee>

        buf[0] = 0x02 + mbedtls_mpi_get_bit( &P->Y, 0 );
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	330c      	adds	r3, #12
 800adb6:	2100      	movs	r1, #0
 800adb8:	4618      	mov	r0, r3
 800adba:	f7fb fa9b 	bl	80062f4 <mbedtls_mpi_get_bit>
 800adbe:	4603      	mov	r3, r0
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	3302      	adds	r3, #2
 800adc4:	b2da      	uxtb	r2, r3
 800adc6:	6a3b      	ldr	r3, [r7, #32]
 800adc8:	701a      	strb	r2, [r3, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 800adca:	68b8      	ldr	r0, [r7, #8]
 800adcc:	6a3b      	ldr	r3, [r7, #32]
 800adce:	3301      	adds	r3, #1
 800add0:	693a      	ldr	r2, [r7, #16]
 800add2:	4619      	mov	r1, r3
 800add4:	f7fb fd44 	bl	8006860 <mbedtls_mpi_write_binary>
 800add8:	6178      	str	r0, [r7, #20]
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	2b00      	cmp	r3, #0
    }

cleanup:
 800adde:	bf00      	nop
    return( ret );
 800ade0:	697b      	ldr	r3, [r7, #20]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3718      	adds	r7, #24
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	ffffb100 	.word	0xffffb100

0800adf0 <ecp_modp>:
 * See the documentation of struct mbedtls_ecp_group.
 *
 * This function is in the critial loop for mbedtls_ecp_mul, so pay attention to perf.
 */
static int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
    int ret;

    if( grp->modp == NULL )
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d108      	bne.n	800ae14 <ecp_modp+0x24>
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	3304      	adds	r3, #4
 800ae06:	461a      	mov	r2, r3
 800ae08:	6879      	ldr	r1, [r7, #4]
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f7fe fa17 	bl	800923e <mbedtls_mpi_mod_mpi>
 800ae10:	4603      	mov	r3, r0
 800ae12:	e04b      	b.n	800aeac <ecp_modp+0xbc>

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	da06      	bge.n	800ae2a <ecp_modp+0x3a>
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f7fb ffdc 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d108      	bne.n	800ae3c <ecp_modp+0x4c>
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f7fb fb2c 	bl	8006488 <mbedtls_mpi_bitlen>
 800ae30:	4602      	mov	r2, r0
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae36:	005b      	lsls	r3, r3, #1
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d901      	bls.n	800ae40 <ecp_modp+0x50>
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800ae3c:	4b1d      	ldr	r3, [pc, #116]	@ (800aeb4 <ecp_modp+0xc4>)
 800ae3e:	e035      	b.n	800aeac <ecp_modp+0xbc>
    }

    MBEDTLS_MPI_CHK( grp->modp( N ) );
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	4798      	blx	r3
 800ae48:	60f8      	str	r0, [r7, #12]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d12c      	bne.n	800aeaa <ecp_modp+0xba>

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
 800ae50:	e00a      	b.n	800ae68 <ecp_modp+0x78>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	3304      	adds	r3, #4
 800ae56:	461a      	mov	r2, r3
 800ae58:	6879      	ldr	r1, [r7, #4]
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f7fc f949 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800ae60:	60f8      	str	r0, [r7, #12]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d120      	bne.n	800aeaa <ecp_modp+0xba>
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	da12      	bge.n	800ae96 <ecp_modp+0xa6>
 800ae70:	2100      	movs	r1, #0
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f7fb ffb2 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1e9      	bne.n	800ae52 <ecp_modp+0x62>

    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
 800ae7e:	e00a      	b.n	800ae96 <ecp_modp+0xa6>
        /* we known P, N and the result are positive */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	3304      	adds	r3, #4
 800ae84:	461a      	mov	r2, r3
 800ae86:	6879      	ldr	r1, [r7, #4]
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f7fc f8d2 	bl	8007032 <mbedtls_mpi_sub_abs>
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d109      	bne.n	800aeaa <ecp_modp+0xba>
    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	3304      	adds	r3, #4
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f7fb ff02 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	daeb      	bge.n	800ae80 <ecp_modp+0x90>

cleanup:
 800aea8:	bf00      	nop
    return( ret );
 800aeaa:	68fb      	ldr	r3, [r7, #12]
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3710      	adds	r7, #16
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}
 800aeb4:	ffffb080 	.word	0xffffb080

0800aeb8 <ecp_normalize_jac>:
/*
 * Normalize jacobian coordinates so that Z == 0 || Z == 1  (GECC 3.2.1)
 * Cost: 1N := 1I + 3M + 1S
 */
static int ecp_normalize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt )
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b08a      	sub	sp, #40	@ 0x28
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
    int ret;
    mbedtls_mpi Zi, ZZi;

    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	3318      	adds	r3, #24
 800aec6:	2100      	movs	r1, #0
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7fb ff87 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d101      	bne.n	800aed8 <ecp_normalize_jac+0x20>
        return( 0 );
 800aed4:	2300      	movs	r3, #0
 800aed6:	e087      	b.n	800afe8 <ecp_normalize_jac+0x130>
#if defined(MBEDTLS_ECP_NORMALIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_jac( grp, pt ) );
#endif /* MBEDTLS_ECP_NORMALIZE_JAC_ALT */

    mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 800aed8:	f107 0318 	add.w	r3, r7, #24
 800aedc:	4618      	mov	r0, r3
 800aede:	f7fa ff9c 	bl	8005e1a <mbedtls_mpi_init>
 800aee2:	f107 030c 	add.w	r3, r7, #12
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7fa ff97 	bl	8005e1a <mbedtls_mpi_init>

    /*
     * X = X / Z^2  mod p
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	f103 0118 	add.w	r1, r3, #24
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	1d1a      	adds	r2, r3, #4
 800aef6:	f107 0318 	add.w	r3, r7, #24
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7fe fb0b 	bl	8009516 <mbedtls_mpi_inv_mod>
 800af00:	6278      	str	r0, [r7, #36]	@ 0x24
 800af02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af04:	2b00      	cmp	r3, #0
 800af06:	d164      	bne.n	800afd2 <ecp_normalize_jac+0x11a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
 800af08:	f107 0218 	add.w	r2, r7, #24
 800af0c:	f107 0118 	add.w	r1, r7, #24
 800af10:	f107 030c 	add.w	r3, r7, #12
 800af14:	4618      	mov	r0, r3
 800af16:	f7fd fd65 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800af1a:	6278      	str	r0, [r7, #36]	@ 0x24
 800af1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d157      	bne.n	800afd2 <ecp_normalize_jac+0x11a>
 800af22:	f107 030c 	add.w	r3, r7, #12
 800af26:	6879      	ldr	r1, [r7, #4]
 800af28:	4618      	mov	r0, r3
 800af2a:	f7ff ff61 	bl	800adf0 <ecp_modp>
 800af2e:	6278      	str	r0, [r7, #36]	@ 0x24
 800af30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af32:	2b00      	cmp	r3, #0
 800af34:	d14d      	bne.n	800afd2 <ecp_normalize_jac+0x11a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	6839      	ldr	r1, [r7, #0]
 800af3a:	f107 020c 	add.w	r2, r7, #12
 800af3e:	4618      	mov	r0, r3
 800af40:	f7fd fd50 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800af44:	6278      	str	r0, [r7, #36]	@ 0x24
 800af46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d142      	bne.n	800afd2 <ecp_normalize_jac+0x11a>
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	6879      	ldr	r1, [r7, #4]
 800af50:	4618      	mov	r0, r3
 800af52:	f7ff ff4d 	bl	800adf0 <ecp_modp>
 800af56:	6278      	str	r0, [r7, #36]	@ 0x24
 800af58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d139      	bne.n	800afd2 <ecp_normalize_jac+0x11a>

    /*
     * Y = Y / Z^3  mod p
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	f103 000c 	add.w	r0, r3, #12
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	330c      	adds	r3, #12
 800af68:	f107 020c 	add.w	r2, r7, #12
 800af6c:	4619      	mov	r1, r3
 800af6e:	f7fd fd39 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800af72:	6278      	str	r0, [r7, #36]	@ 0x24
 800af74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af76:	2b00      	cmp	r3, #0
 800af78:	d12b      	bne.n	800afd2 <ecp_normalize_jac+0x11a>
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	330c      	adds	r3, #12
 800af7e:	6879      	ldr	r1, [r7, #4]
 800af80:	4618      	mov	r0, r3
 800af82:	f7ff ff35 	bl	800adf0 <ecp_modp>
 800af86:	6278      	str	r0, [r7, #36]	@ 0x24
 800af88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d121      	bne.n	800afd2 <ecp_normalize_jac+0x11a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	f103 000c 	add.w	r0, r3, #12
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	330c      	adds	r3, #12
 800af98:	f107 0218 	add.w	r2, r7, #24
 800af9c:	4619      	mov	r1, r3
 800af9e:	f7fd fd21 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800afa2:	6278      	str	r0, [r7, #36]	@ 0x24
 800afa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d113      	bne.n	800afd2 <ecp_normalize_jac+0x11a>
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	330c      	adds	r3, #12
 800afae:	6879      	ldr	r1, [r7, #4]
 800afb0:	4618      	mov	r0, r3
 800afb2:	f7ff ff1d 	bl	800adf0 <ecp_modp>
 800afb6:	6278      	str	r0, [r7, #36]	@ 0x24
 800afb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d109      	bne.n	800afd2 <ecp_normalize_jac+0x11a>

    /*
     * Z = 1
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	3318      	adds	r3, #24
 800afc2:	2101      	movs	r1, #1
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7fb f969 	bl	800629c <mbedtls_mpi_lset>
 800afca:	6278      	str	r0, [r7, #36]	@ 0x24
 800afcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afce:	2b00      	cmp	r3, #0

cleanup:
 800afd0:	bf00      	nop

    mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 800afd2:	f107 0318 	add.w	r3, r7, #24
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7fa ff32 	bl	8005e40 <mbedtls_mpi_free>
 800afdc:	f107 030c 	add.w	r3, r7, #12
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7fa ff2d 	bl	8005e40 <mbedtls_mpi_free>

    return( ret );
 800afe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3728      	adds	r7, #40	@ 0x28
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <ecp_normalize_jac_many>:
 *
 * Cost: 1N(t) := 1I + (6t - 3)M + 1S
 */
static int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,
                                   mbedtls_ecp_point *T[], size_t T_size )
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b090      	sub	sp, #64	@ 0x40
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	607a      	str	r2, [r7, #4]
    int ret;
    size_t i;
    mbedtls_mpi *c, u, Zi, ZZi;

    if( T_size < 2 )
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2b01      	cmp	r3, #1
 800b000:	d807      	bhi.n	800b012 <ecp_normalize_jac_many+0x22>
        return( ecp_normalize_jac( grp, *T ) );
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4619      	mov	r1, r3
 800b008:	68f8      	ldr	r0, [r7, #12]
 800b00a:	f7ff ff55 	bl	800aeb8 <ecp_normalize_jac>
 800b00e:	4603      	mov	r3, r0
 800b010:	e1b7      	b.n	800b382 <ecp_normalize_jac_many+0x392>
#if defined(MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_jac_many( grp, T, T_size ) );
#endif

    if( ( c = mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
 800b012:	210c      	movs	r1, #12
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f00b fa95 	bl	8016544 <calloc>
 800b01a:	4603      	mov	r3, r0
 800b01c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b01e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b020:	2b00      	cmp	r3, #0
 800b022:	d101      	bne.n	800b028 <ecp_normalize_jac_many+0x38>
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );
 800b024:	4b48      	ldr	r3, [pc, #288]	@ (800b148 <ecp_normalize_jac_many+0x158>)
 800b026:	e1ac      	b.n	800b382 <ecp_normalize_jac_many+0x392>

    for( i = 0; i < T_size; i++ )
 800b028:	2300      	movs	r3, #0
 800b02a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b02c:	e00d      	b.n	800b04a <ecp_normalize_jac_many+0x5a>
        mbedtls_mpi_init( &c[i] );
 800b02e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b030:	4613      	mov	r3, r2
 800b032:	005b      	lsls	r3, r3, #1
 800b034:	4413      	add	r3, r2
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	461a      	mov	r2, r3
 800b03a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b03c:	4413      	add	r3, r2
 800b03e:	4618      	mov	r0, r3
 800b040:	f7fa feeb 	bl	8005e1a <mbedtls_mpi_init>
    for( i = 0; i < T_size; i++ )
 800b044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b046:	3301      	adds	r3, #1
 800b048:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b04a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d3ed      	bcc.n	800b02e <ecp_normalize_jac_many+0x3e>

    mbedtls_mpi_init( &u ); mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 800b052:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b056:	4618      	mov	r0, r3
 800b058:	f7fa fedf 	bl	8005e1a <mbedtls_mpi_init>
 800b05c:	f107 031c 	add.w	r3, r7, #28
 800b060:	4618      	mov	r0, r3
 800b062:	f7fa feda 	bl	8005e1a <mbedtls_mpi_init>
 800b066:	f107 0310 	add.w	r3, r7, #16
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7fa fed5 	bl	8005e1a <mbedtls_mpi_init>

    /*
     * c[i] = Z_0 * ... * Z_i
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	3318      	adds	r3, #24
 800b076:	4619      	mov	r1, r3
 800b078:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b07a:	f7fa ffb0 	bl	8005fde <mbedtls_mpi_copy>
 800b07e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800b080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b082:	2b00      	cmp	r3, #0
 800b084:	f040 8155 	bne.w	800b332 <ecp_normalize_jac_many+0x342>
    for( i = 1; i < T_size; i++ )
 800b088:	2301      	movs	r3, #1
 800b08a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b08c:	e031      	b.n	800b0f2 <ecp_normalize_jac_many+0x102>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );
 800b08e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b090:	4613      	mov	r3, r2
 800b092:	005b      	lsls	r3, r3, #1
 800b094:	4413      	add	r3, r2
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	461a      	mov	r2, r3
 800b09a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b09c:	1898      	adds	r0, r3, r2
 800b09e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0a0:	4613      	mov	r3, r2
 800b0a2:	005b      	lsls	r3, r3, #1
 800b0a4:	4413      	add	r3, r2
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	3b0c      	subs	r3, #12
 800b0aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b0ac:	18d1      	adds	r1, r2, r3
 800b0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	68ba      	ldr	r2, [r7, #8]
 800b0b4:	4413      	add	r3, r2
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	3318      	adds	r3, #24
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	f7fd fc92 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800b0c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800b0c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	f040 8134 	bne.w	800b332 <ecp_normalize_jac_many+0x342>
        MOD_MUL( c[i] );
 800b0ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0cc:	4613      	mov	r3, r2
 800b0ce:	005b      	lsls	r3, r3, #1
 800b0d0:	4413      	add	r3, r2
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0d8:	4413      	add	r3, r2
 800b0da:	68f9      	ldr	r1, [r7, #12]
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7ff fe87 	bl	800adf0 <ecp_modp>
 800b0e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800b0e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	f040 8123 	bne.w	800b332 <ecp_normalize_jac_many+0x342>
    for( i = 1; i < T_size; i++ )
 800b0ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b0f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d3c9      	bcc.n	800b08e <ecp_normalize_jac_many+0x9e>
    }

    /*
     * u = 1 / (Z_0 * ... * Z_n) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[T_size-1], &grp->P ) );
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	005b      	lsls	r3, r3, #1
 800b100:	4413      	add	r3, r2
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	3b0c      	subs	r3, #12
 800b106:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b108:	18d1      	adds	r1, r2, r3
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	1d1a      	adds	r2, r3, #4
 800b10e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b112:	4618      	mov	r0, r3
 800b114:	f7fe f9ff 	bl	8009516 <mbedtls_mpi_inv_mod>
 800b118:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800b11a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	f040 8108 	bne.w	800b332 <ecp_normalize_jac_many+0x342>

    for( i = T_size - 1; ; i-- )
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	3b01      	subs	r3, #1
 800b126:	63bb      	str	r3, [r7, #56]	@ 0x38
    {
        /*
         * Zi = 1 / Z_i mod p
         * u = 1 / (Z_0 * ... * Z_i) mod P
         */
        if( i == 0 ) {
 800b128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d10e      	bne.n	800b14c <ecp_normalize_jac_many+0x15c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );
 800b12e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800b132:	f107 031c 	add.w	r3, r7, #28
 800b136:	4611      	mov	r1, r2
 800b138:	4618      	mov	r0, r3
 800b13a:	f7fa ff50 	bl	8005fde <mbedtls_mpi_copy>
 800b13e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800b140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b142:	2b00      	cmp	r3, #0
 800b144:	d03f      	beq.n	800b1c6 <ecp_normalize_jac_many+0x1d6>
 800b146:	e0f4      	b.n	800b332 <ecp_normalize_jac_many+0x342>
 800b148:	ffffb280 	.word	0xffffb280
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 800b14c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b14e:	4613      	mov	r3, r2
 800b150:	005b      	lsls	r3, r3, #1
 800b152:	4413      	add	r3, r2
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	3b0c      	subs	r3, #12
 800b158:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b15a:	441a      	add	r2, r3
 800b15c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800b160:	f107 031c 	add.w	r3, r7, #28
 800b164:	4618      	mov	r0, r3
 800b166:	f7fd fc3d 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800b16a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800b16c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b16e:	2b00      	cmp	r3, #0
 800b170:	f040 80df 	bne.w	800b332 <ecp_normalize_jac_many+0x342>
 800b174:	f107 031c 	add.w	r3, r7, #28
 800b178:	68f9      	ldr	r1, [r7, #12]
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7ff fe38 	bl	800adf0 <ecp_modp>
 800b180:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800b182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b184:	2b00      	cmp	r3, #0
 800b186:	f040 80d4 	bne.w	800b332 <ecp_normalize_jac_many+0x342>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
 800b18a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	68ba      	ldr	r2, [r7, #8]
 800b190:	4413      	add	r3, r2
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f103 0218 	add.w	r2, r3, #24
 800b198:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800b19c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7fd fc1f 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800b1a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800b1a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	f040 80c1 	bne.w	800b332 <ecp_normalize_jac_many+0x342>
 800b1b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b1b4:	68f9      	ldr	r1, [r7, #12]
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7ff fe1a 	bl	800adf0 <ecp_modp>
 800b1bc:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800b1be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f040 80b6 	bne.w	800b332 <ecp_normalize_jac_many+0x342>
        }

        /*
         * proceed as in normalize()
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 800b1c6:	f107 021c 	add.w	r2, r7, #28
 800b1ca:	f107 011c 	add.w	r1, r7, #28
 800b1ce:	f107 0310 	add.w	r3, r7, #16
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7fd fc06 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800b1d8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800b1da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f040 80a8 	bne.w	800b332 <ecp_normalize_jac_many+0x342>
 800b1e2:	f107 0310 	add.w	r3, r7, #16
 800b1e6:	68f9      	ldr	r1, [r7, #12]
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7ff fe01 	bl	800adf0 <ecp_modp>
 800b1ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800b1f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	f040 809d 	bne.w	800b332 <ecp_normalize_jac_many+0x342>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 800b1f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	68ba      	ldr	r2, [r7, #8]
 800b1fe:	4413      	add	r3, r2
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4618      	mov	r0, r3
 800b204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	68ba      	ldr	r2, [r7, #8]
 800b20a:	4413      	add	r3, r2
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4619      	mov	r1, r3
 800b210:	f107 0310 	add.w	r3, r7, #16
 800b214:	461a      	mov	r2, r3
 800b216:	f7fd fbe5 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800b21a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800b21c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b21e:	2b00      	cmp	r3, #0
 800b220:	f040 8087 	bne.w	800b332 <ecp_normalize_jac_many+0x342>
 800b224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	68ba      	ldr	r2, [r7, #8]
 800b22a:	4413      	add	r3, r2
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	68f9      	ldr	r1, [r7, #12]
 800b230:	4618      	mov	r0, r3
 800b232:	f7ff fddd 	bl	800adf0 <ecp_modp>
 800b236:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800b238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d179      	bne.n	800b332 <ecp_normalize_jac_many+0x342>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 800b23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	68ba      	ldr	r2, [r7, #8]
 800b244:	4413      	add	r3, r2
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f103 000c 	add.w	r0, r3, #12
 800b24c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	68ba      	ldr	r2, [r7, #8]
 800b252:	4413      	add	r3, r2
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	330c      	adds	r3, #12
 800b258:	f107 0210 	add.w	r2, r7, #16
 800b25c:	4619      	mov	r1, r3
 800b25e:	f7fd fbc1 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800b262:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800b264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b266:	2b00      	cmp	r3, #0
 800b268:	d163      	bne.n	800b332 <ecp_normalize_jac_many+0x342>
 800b26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b26c:	009b      	lsls	r3, r3, #2
 800b26e:	68ba      	ldr	r2, [r7, #8]
 800b270:	4413      	add	r3, r2
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	330c      	adds	r3, #12
 800b276:	68f9      	ldr	r1, [r7, #12]
 800b278:	4618      	mov	r0, r3
 800b27a:	f7ff fdb9 	bl	800adf0 <ecp_modp>
 800b27e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800b280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b282:	2b00      	cmp	r3, #0
 800b284:	d155      	bne.n	800b332 <ecp_normalize_jac_many+0x342>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 800b286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	68ba      	ldr	r2, [r7, #8]
 800b28c:	4413      	add	r3, r2
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f103 000c 	add.w	r0, r3, #12
 800b294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	68ba      	ldr	r2, [r7, #8]
 800b29a:	4413      	add	r3, r2
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	330c      	adds	r3, #12
 800b2a0:	f107 021c 	add.w	r2, r7, #28
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	f7fd fb9d 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800b2aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800b2ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d13f      	bne.n	800b332 <ecp_normalize_jac_many+0x342>
 800b2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	68ba      	ldr	r2, [r7, #8]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	330c      	adds	r3, #12
 800b2be:	68f9      	ldr	r1, [r7, #12]
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f7ff fd95 	bl	800adf0 <ecp_modp>
 800b2c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800b2c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d131      	bne.n	800b332 <ecp_normalize_jac_many+0x342>
         * Post-precessing: reclaim some memory by shrinking coordinates
         * - not storing Z (always 1)
         * - shrinking other coordinates, but still keeping the same number of
         *   limbs as P, as otherwise it will too likely be regrown too fast.
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
 800b2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	68ba      	ldr	r2, [r7, #8]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	461a      	mov	r2, r3
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	4619      	mov	r1, r3
 800b2e0:	4610      	mov	r0, r2
 800b2e2:	f7fa fe16 	bl	8005f12 <mbedtls_mpi_shrink>
 800b2e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800b2e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d121      	bne.n	800b332 <ecp_normalize_jac_many+0x342>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );
 800b2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	68ba      	ldr	r2, [r7, #8]
 800b2f4:	4413      	add	r3, r2
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f103 020c 	add.w	r2, r3, #12
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	4619      	mov	r1, r3
 800b302:	4610      	mov	r0, r2
 800b304:	f7fa fe05 	bl	8005f12 <mbedtls_mpi_shrink>
 800b308:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800b30a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d110      	bne.n	800b332 <ecp_normalize_jac_many+0x342>
        mbedtls_mpi_free( &T[i]->Z );
 800b310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b312:	009b      	lsls	r3, r3, #2
 800b314:	68ba      	ldr	r2, [r7, #8]
 800b316:	4413      	add	r3, r2
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	3318      	adds	r3, #24
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7fa fd8f 	bl	8005e40 <mbedtls_mpi_free>

        if( i == 0 )
 800b322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b324:	2b00      	cmp	r3, #0
 800b326:	d003      	beq.n	800b330 <ecp_normalize_jac_many+0x340>
    for( i = T_size - 1; ; i-- )
 800b328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b32a:	3b01      	subs	r3, #1
 800b32c:	63bb      	str	r3, [r7, #56]	@ 0x38
        if( i == 0 ) {
 800b32e:	e6fb      	b.n	800b128 <ecp_normalize_jac_many+0x138>
            break;
 800b330:	bf00      	nop
    }

cleanup:

    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 800b332:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b336:	4618      	mov	r0, r3
 800b338:	f7fa fd82 	bl	8005e40 <mbedtls_mpi_free>
 800b33c:	f107 031c 	add.w	r3, r7, #28
 800b340:	4618      	mov	r0, r3
 800b342:	f7fa fd7d 	bl	8005e40 <mbedtls_mpi_free>
 800b346:	f107 0310 	add.w	r3, r7, #16
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7fa fd78 	bl	8005e40 <mbedtls_mpi_free>
    for( i = 0; i < T_size; i++ )
 800b350:	2300      	movs	r3, #0
 800b352:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b354:	e00d      	b.n	800b372 <ecp_normalize_jac_many+0x382>
        mbedtls_mpi_free( &c[i] );
 800b356:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b358:	4613      	mov	r3, r2
 800b35a:	005b      	lsls	r3, r3, #1
 800b35c:	4413      	add	r3, r2
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	461a      	mov	r2, r3
 800b362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b364:	4413      	add	r3, r2
 800b366:	4618      	mov	r0, r3
 800b368:	f7fa fd6a 	bl	8005e40 <mbedtls_mpi_free>
    for( i = 0; i < T_size; i++ )
 800b36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b36e:	3301      	adds	r3, #1
 800b370:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b372:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	429a      	cmp	r2, r3
 800b378:	d3ed      	bcc.n	800b356 <ecp_normalize_jac_many+0x366>
    mbedtls_free( c );
 800b37a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b37c:	f00b f8fe 	bl	801657c <free>

    return( ret );
 800b380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b382:	4618      	mov	r0, r3
 800b384:	3740      	adds	r7, #64	@ 0x40
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop

0800b38c <ecp_safe_invert_jac>:
 * "inv" must be 0 (don't invert) or 1 (invert) or the result will be invalid
 */
static int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,
                            mbedtls_ecp_point *Q,
                            unsigned char inv )
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b08a      	sub	sp, #40	@ 0x28
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	4613      	mov	r3, r2
 800b398:	71fb      	strb	r3, [r7, #7]
    int ret;
    unsigned char nonzero;
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );
 800b39a:	f107 0314 	add.w	r3, r7, #20
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7fa fd3b 	bl	8005e1a <mbedtls_mpi_init>

    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	1d19      	adds	r1, r3, #4
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	f103 020c 	add.w	r2, r3, #12
 800b3ae:	f107 0314 	add.w	r3, r7, #20
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7fb fee1 	bl	800717a <mbedtls_mpi_sub_mpi>
 800b3b8:	6278      	str	r0, [r7, #36]	@ 0x24
 800b3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d11e      	bne.n	800b3fe <ecp_safe_invert_jac+0x72>
    nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	330c      	adds	r3, #12
 800b3c4:	2100      	movs	r1, #0
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f7fb fd08 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	bf14      	ite	ne
 800b3d2:	2301      	movne	r3, #1
 800b3d4:	2300      	moveq	r3, #0
 800b3d6:	b2db      	uxtb	r3, r3
 800b3d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	f103 000c 	add.w	r0, r3, #12
 800b3e2:	79fa      	ldrb	r2, [r7, #7]
 800b3e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b3e8:	4013      	ands	r3, r2
 800b3ea:	b2da      	uxtb	r2, r3
 800b3ec:	f107 0314 	add.w	r3, r7, #20
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	f7fa fe50 	bl	8006096 <mbedtls_mpi_safe_cond_assign>
 800b3f6:	6278      	str	r0, [r7, #36]	@ 0x24
 800b3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3fa:	2b00      	cmp	r3, #0

cleanup:
 800b3fc:	bf00      	nop
    mbedtls_mpi_free( &mQY );
 800b3fe:	f107 0314 	add.w	r3, r7, #20
 800b402:	4618      	mov	r0, r3
 800b404:	f7fa fd1c 	bl	8005e40 <mbedtls_mpi_free>

    return( ret );
 800b408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3728      	adds	r7, #40	@ 0x28
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <ecp_double_jac>:
 *             4M + 4S          (A == -3)
 *             3M + 6S + 1a     otherwise
 */
static int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                           const mbedtls_ecp_point *P )
{
 800b412:	b580      	push	{r7, lr}
 800b414:	b092      	sub	sp, #72	@ 0x48
 800b416:	af00      	add	r7, sp, #0
 800b418:	60f8      	str	r0, [r7, #12]
 800b41a:	60b9      	str	r1, [r7, #8]
 800b41c:	607a      	str	r2, [r7, #4]
#if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_double_jac( grp, R, P ) );
#endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */

    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
 800b41e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800b422:	4618      	mov	r0, r3
 800b424:	f7fa fcf9 	bl	8005e1a <mbedtls_mpi_init>
 800b428:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b42c:	4618      	mov	r0, r3
 800b42e:	f7fa fcf4 	bl	8005e1a <mbedtls_mpi_init>
 800b432:	f107 0320 	add.w	r3, r7, #32
 800b436:	4618      	mov	r0, r3
 800b438:	f7fa fcef 	bl	8005e1a <mbedtls_mpi_init>
 800b43c:	f107 0314 	add.w	r3, r7, #20
 800b440:	4618      	mov	r0, r3
 800b442:	f7fa fcea 	bl	8005e1a <mbedtls_mpi_init>

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	699b      	ldr	r3, [r3, #24]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	f040 80ab 	bne.w	800b5a6 <ecp_double_jac+0x194>
    {
        /* M = 3(X + Z^2)(X - Z^2) */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f103 0118 	add.w	r1, r3, #24
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f103 0218 	add.w	r2, r3, #24
 800b45c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b460:	4618      	mov	r0, r3
 800b462:	f7fd fabf 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800b466:	6478      	str	r0, [r7, #68]	@ 0x44
 800b468:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	f040 8346 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b470:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b474:	68f9      	ldr	r1, [r7, #12]
 800b476:	4618      	mov	r0, r3
 800b478:	f7ff fcba 	bl	800adf0 <ecp_modp>
 800b47c:	6478      	str	r0, [r7, #68]	@ 0x44
 800b47e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b480:	2b00      	cmp	r3, #0
 800b482:	f040 833b 	bne.w	800bafc <ecp_double_jac+0x6ea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 800b486:	6879      	ldr	r1, [r7, #4]
 800b488:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800b48c:	f107 0320 	add.w	r3, r7, #32
 800b490:	4618      	mov	r0, r3
 800b492:	f7fb fe2e 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800b496:	6478      	str	r0, [r7, #68]	@ 0x44
 800b498:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	f040 832e 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b4a0:	e00d      	b.n	800b4be <ecp_double_jac+0xac>
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	1d1a      	adds	r2, r3, #4
 800b4a6:	f107 0120 	add.w	r1, r7, #32
 800b4aa:	f107 0320 	add.w	r3, r7, #32
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7fb fdbf 	bl	8007032 <mbedtls_mpi_sub_abs>
 800b4b4:	6478      	str	r0, [r7, #68]	@ 0x44
 800b4b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	f040 831f 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	1d1a      	adds	r2, r3, #4
 800b4c2:	f107 0320 	add.w	r3, r7, #32
 800b4c6:	4611      	mov	r1, r2
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7fb fbec 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	dae6      	bge.n	800b4a2 <ecp_double_jac+0x90>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
 800b4d4:	6879      	ldr	r1, [r7, #4]
 800b4d6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800b4da:	f107 0314 	add.w	r3, r7, #20
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7fb fe4b 	bl	800717a <mbedtls_mpi_sub_mpi>
 800b4e4:	6478      	str	r0, [r7, #68]	@ 0x44
 800b4e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	f040 8307 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b4ee:	e00d      	b.n	800b50c <ecp_double_jac+0xfa>
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	1d1a      	adds	r2, r3, #4
 800b4f4:	f107 0114 	add.w	r1, r7, #20
 800b4f8:	f107 0314 	add.w	r3, r7, #20
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7fb fdf8 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800b502:	6478      	str	r0, [r7, #68]	@ 0x44
 800b504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b506:	2b00      	cmp	r3, #0
 800b508:	f040 82f8 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	da08      	bge.n	800b524 <ecp_double_jac+0x112>
 800b512:	f107 0314 	add.w	r3, r7, #20
 800b516:	2100      	movs	r1, #0
 800b518:	4618      	mov	r0, r3
 800b51a:	f7fb fc5f 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800b51e:	4603      	mov	r3, r0
 800b520:	2b00      	cmp	r3, #0
 800b522:	d1e5      	bne.n	800b4f0 <ecp_double_jac+0xde>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
 800b524:	f107 0214 	add.w	r2, r7, #20
 800b528:	f107 0120 	add.w	r1, r7, #32
 800b52c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b530:	4618      	mov	r0, r3
 800b532:	f7fd fa57 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800b536:	6478      	str	r0, [r7, #68]	@ 0x44
 800b538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	f040 82de 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b540:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b544:	68f9      	ldr	r1, [r7, #12]
 800b546:	4618      	mov	r0, r3
 800b548:	f7ff fc52 	bl	800adf0 <ecp_modp>
 800b54c:	6478      	str	r0, [r7, #68]	@ 0x44
 800b54e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b550:	2b00      	cmp	r3, #0
 800b552:	f040 82d3 	bne.w	800bafc <ecp_double_jac+0x6ea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 800b556:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800b55a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800b55e:	2203      	movs	r2, #3
 800b560:	4618      	mov	r0, r3
 800b562:	f7fd fae7 	bl	8008b34 <mbedtls_mpi_mul_int>
 800b566:	6478      	str	r0, [r7, #68]	@ 0x44
 800b568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	f040 82c6 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b570:	e00d      	b.n	800b58e <ecp_double_jac+0x17c>
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	1d1a      	adds	r2, r3, #4
 800b576:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800b57a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800b57e:	4618      	mov	r0, r3
 800b580:	f7fb fd57 	bl	8007032 <mbedtls_mpi_sub_abs>
 800b584:	6478      	str	r0, [r7, #68]	@ 0x44
 800b586:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f040 82b7 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	1d1a      	adds	r2, r3, #4
 800b592:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800b596:	4611      	mov	r1, r2
 800b598:	4618      	mov	r0, r3
 800b59a:	f7fb fb84 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	dae6      	bge.n	800b572 <ecp_double_jac+0x160>
 800b5a4:	e0bc      	b.n	800b720 <ecp_double_jac+0x30e>
    }
    else
    {
        /* M = 3.X^2 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
 800b5a6:	6879      	ldr	r1, [r7, #4]
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7fd fa18 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800b5b4:	6478      	str	r0, [r7, #68]	@ 0x44
 800b5b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f040 829f 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b5be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b5c2:	68f9      	ldr	r1, [r7, #12]
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f7ff fc13 	bl	800adf0 <ecp_modp>
 800b5ca:	6478      	str	r0, [r7, #68]	@ 0x44
 800b5cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f040 8294 	bne.w	800bafc <ecp_double_jac+0x6ea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 800b5d4:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800b5d8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800b5dc:	2203      	movs	r2, #3
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7fd faa8 	bl	8008b34 <mbedtls_mpi_mul_int>
 800b5e4:	6478      	str	r0, [r7, #68]	@ 0x44
 800b5e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	f040 8287 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b5ee:	e00d      	b.n	800b60c <ecp_double_jac+0x1fa>
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	1d1a      	adds	r2, r3, #4
 800b5f4:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800b5f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7fb fd18 	bl	8007032 <mbedtls_mpi_sub_abs>
 800b602:	6478      	str	r0, [r7, #68]	@ 0x44
 800b604:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b606:	2b00      	cmp	r3, #0
 800b608:	f040 8278 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	1d1a      	adds	r2, r3, #4
 800b610:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800b614:	4611      	mov	r1, r2
 800b616:	4618      	mov	r0, r3
 800b618:	f7fb fb45 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800b61c:	4603      	mov	r3, r0
 800b61e:	2b00      	cmp	r3, #0
 800b620:	dae6      	bge.n	800b5f0 <ecp_double_jac+0x1de>

        /* Optimize away for "koblitz" curves with A = 0 */
        if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	3310      	adds	r3, #16
 800b626:	2100      	movs	r1, #0
 800b628:	4618      	mov	r0, r3
 800b62a:	f7fb fbd7 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800b62e:	4603      	mov	r3, r0
 800b630:	2b00      	cmp	r3, #0
 800b632:	d075      	beq.n	800b720 <ecp_double_jac+0x30e>
        {
            /* M += A.Z^4 */
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f103 0118 	add.w	r1, r3, #24
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f103 0218 	add.w	r2, r3, #24
 800b640:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b644:	4618      	mov	r0, r3
 800b646:	f7fd f9cd 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800b64a:	6478      	str	r0, [r7, #68]	@ 0x44
 800b64c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b64e:	2b00      	cmp	r3, #0
 800b650:	f040 8254 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b654:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b658:	68f9      	ldr	r1, [r7, #12]
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7ff fbc8 	bl	800adf0 <ecp_modp>
 800b660:	6478      	str	r0, [r7, #68]	@ 0x44
 800b662:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b664:	2b00      	cmp	r3, #0
 800b666:	f040 8249 	bne.w	800bafc <ecp_double_jac+0x6ea>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 800b66a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800b66e:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800b672:	f107 0320 	add.w	r3, r7, #32
 800b676:	4618      	mov	r0, r3
 800b678:	f7fd f9b4 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800b67c:	6478      	str	r0, [r7, #68]	@ 0x44
 800b67e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b680:	2b00      	cmp	r3, #0
 800b682:	f040 823b 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b686:	f107 0320 	add.w	r3, r7, #32
 800b68a:	68f9      	ldr	r1, [r7, #12]
 800b68c:	4618      	mov	r0, r3
 800b68e:	f7ff fbaf 	bl	800adf0 <ecp_modp>
 800b692:	6478      	str	r0, [r7, #68]	@ 0x44
 800b694:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b696:	2b00      	cmp	r3, #0
 800b698:	f040 8230 	bne.w	800bafc <ecp_double_jac+0x6ea>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f103 0210 	add.w	r2, r3, #16
 800b6a2:	f107 0120 	add.w	r1, r7, #32
 800b6a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7fd f99a 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800b6b0:	6478      	str	r0, [r7, #68]	@ 0x44
 800b6b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	f040 8221 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b6ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b6be:	68f9      	ldr	r1, [r7, #12]
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f7ff fb95 	bl	800adf0 <ecp_modp>
 800b6c6:	6478      	str	r0, [r7, #68]	@ 0x44
 800b6c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	f040 8216 	bne.w	800bafc <ecp_double_jac+0x6ea>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
 800b6d0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800b6d4:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800b6d8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f7fb fd08 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800b6e2:	6478      	str	r0, [r7, #68]	@ 0x44
 800b6e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	f040 8208 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b6ec:	e00d      	b.n	800b70a <ecp_double_jac+0x2f8>
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	1d1a      	adds	r2, r3, #4
 800b6f2:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800b6f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7fb fc99 	bl	8007032 <mbedtls_mpi_sub_abs>
 800b700:	6478      	str	r0, [r7, #68]	@ 0x44
 800b702:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b704:	2b00      	cmp	r3, #0
 800b706:	f040 81f9 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	1d1a      	adds	r2, r3, #4
 800b70e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800b712:	4611      	mov	r1, r2
 800b714:	4618      	mov	r0, r3
 800b716:	f7fb fac6 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800b71a:	4603      	mov	r3, r0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	dae6      	bge.n	800b6ee <ecp_double_jac+0x2dc>
        }
    }

    /* S = 4.X.Y^2 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f103 010c 	add.w	r1, r3, #12
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f103 020c 	add.w	r2, r3, #12
 800b72c:	f107 0320 	add.w	r3, r7, #32
 800b730:	4618      	mov	r0, r3
 800b732:	f7fd f957 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800b736:	6478      	str	r0, [r7, #68]	@ 0x44
 800b738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	f040 81de 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b740:	f107 0320 	add.w	r3, r7, #32
 800b744:	68f9      	ldr	r1, [r7, #12]
 800b746:	4618      	mov	r0, r3
 800b748:	f7ff fb52 	bl	800adf0 <ecp_modp>
 800b74c:	6478      	str	r0, [r7, #68]	@ 0x44
 800b74e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b750:	2b00      	cmp	r3, #0
 800b752:	f040 81d3 	bne.w	800bafc <ecp_double_jac+0x6ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 800b756:	f107 0320 	add.w	r3, r7, #32
 800b75a:	2101      	movs	r1, #1
 800b75c:	4618      	mov	r0, r3
 800b75e:	f7fb f8e3 	bl	8006928 <mbedtls_mpi_shift_l>
 800b762:	6478      	str	r0, [r7, #68]	@ 0x44
 800b764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b766:	2b00      	cmp	r3, #0
 800b768:	f040 81c8 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b76c:	e00d      	b.n	800b78a <ecp_double_jac+0x378>
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	1d1a      	adds	r2, r3, #4
 800b772:	f107 0120 	add.w	r1, r7, #32
 800b776:	f107 0320 	add.w	r3, r7, #32
 800b77a:	4618      	mov	r0, r3
 800b77c:	f7fb fc59 	bl	8007032 <mbedtls_mpi_sub_abs>
 800b780:	6478      	str	r0, [r7, #68]	@ 0x44
 800b782:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b784:	2b00      	cmp	r3, #0
 800b786:	f040 81b9 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	1d1a      	adds	r2, r3, #4
 800b78e:	f107 0320 	add.w	r3, r7, #32
 800b792:	4611      	mov	r1, r2
 800b794:	4618      	mov	r0, r3
 800b796:	f7fb fa86 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800b79a:	4603      	mov	r3, r0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	dae6      	bge.n	800b76e <ecp_double_jac+0x35c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
 800b7a0:	6879      	ldr	r1, [r7, #4]
 800b7a2:	f107 0220 	add.w	r2, r7, #32
 800b7a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7fd f91a 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800b7b0:	6478      	str	r0, [r7, #68]	@ 0x44
 800b7b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	f040 81a1 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b7ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b7be:	68f9      	ldr	r1, [r7, #12]
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7ff fb15 	bl	800adf0 <ecp_modp>
 800b7c6:	6478      	str	r0, [r7, #68]	@ 0x44
 800b7c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	f040 8196 	bne.w	800bafc <ecp_double_jac+0x6ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 800b7d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b7d4:	2101      	movs	r1, #1
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7fb f8a6 	bl	8006928 <mbedtls_mpi_shift_l>
 800b7dc:	6478      	str	r0, [r7, #68]	@ 0x44
 800b7de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f040 818b 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b7e6:	e00d      	b.n	800b804 <ecp_double_jac+0x3f2>
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	1d1a      	adds	r2, r3, #4
 800b7ec:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800b7f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7fb fc1c 	bl	8007032 <mbedtls_mpi_sub_abs>
 800b7fa:	6478      	str	r0, [r7, #68]	@ 0x44
 800b7fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	f040 817c 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	1d1a      	adds	r2, r3, #4
 800b808:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b80c:	4611      	mov	r1, r2
 800b80e:	4618      	mov	r0, r3
 800b810:	f7fb fa49 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	dae6      	bge.n	800b7e8 <ecp_double_jac+0x3d6>

    /* U = 8.Y^4 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
 800b81a:	f107 0220 	add.w	r2, r7, #32
 800b81e:	f107 0120 	add.w	r1, r7, #32
 800b822:	f107 0314 	add.w	r3, r7, #20
 800b826:	4618      	mov	r0, r3
 800b828:	f7fd f8dc 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800b82c:	6478      	str	r0, [r7, #68]	@ 0x44
 800b82e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b830:	2b00      	cmp	r3, #0
 800b832:	f040 8163 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b836:	f107 0314 	add.w	r3, r7, #20
 800b83a:	68f9      	ldr	r1, [r7, #12]
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7ff fad7 	bl	800adf0 <ecp_modp>
 800b842:	6478      	str	r0, [r7, #68]	@ 0x44
 800b844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b846:	2b00      	cmp	r3, #0
 800b848:	f040 8158 	bne.w	800bafc <ecp_double_jac+0x6ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 800b84c:	f107 0314 	add.w	r3, r7, #20
 800b850:	2101      	movs	r1, #1
 800b852:	4618      	mov	r0, r3
 800b854:	f7fb f868 	bl	8006928 <mbedtls_mpi_shift_l>
 800b858:	6478      	str	r0, [r7, #68]	@ 0x44
 800b85a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	f040 814d 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b862:	e00d      	b.n	800b880 <ecp_double_jac+0x46e>
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	1d1a      	adds	r2, r3, #4
 800b868:	f107 0114 	add.w	r1, r7, #20
 800b86c:	f107 0314 	add.w	r3, r7, #20
 800b870:	4618      	mov	r0, r3
 800b872:	f7fb fbde 	bl	8007032 <mbedtls_mpi_sub_abs>
 800b876:	6478      	str	r0, [r7, #68]	@ 0x44
 800b878:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	f040 813e 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	1d1a      	adds	r2, r3, #4
 800b884:	f107 0314 	add.w	r3, r7, #20
 800b888:	4611      	mov	r1, r2
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7fb fa0b 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800b890:	4603      	mov	r3, r0
 800b892:	2b00      	cmp	r3, #0
 800b894:	dae6      	bge.n	800b864 <ecp_double_jac+0x452>

    /* T = M^2 - 2.S */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
 800b896:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800b89a:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800b89e:	f107 0320 	add.w	r3, r7, #32
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7fd f89e 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800b8a8:	6478      	str	r0, [r7, #68]	@ 0x44
 800b8aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	f040 8125 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b8b2:	f107 0320 	add.w	r3, r7, #32
 800b8b6:	68f9      	ldr	r1, [r7, #12]
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7ff fa99 	bl	800adf0 <ecp_modp>
 800b8be:	6478      	str	r0, [r7, #68]	@ 0x44
 800b8c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	f040 811a 	bne.w	800bafc <ecp_double_jac+0x6ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 800b8c8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800b8cc:	f107 0120 	add.w	r1, r7, #32
 800b8d0:	f107 0320 	add.w	r3, r7, #32
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7fb fc50 	bl	800717a <mbedtls_mpi_sub_mpi>
 800b8da:	6478      	str	r0, [r7, #68]	@ 0x44
 800b8dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	f040 810c 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b8e4:	e00d      	b.n	800b902 <ecp_double_jac+0x4f0>
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	1d1a      	adds	r2, r3, #4
 800b8ea:	f107 0120 	add.w	r1, r7, #32
 800b8ee:	f107 0320 	add.w	r3, r7, #32
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fb fbfd 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800b8f8:	6478      	str	r0, [r7, #68]	@ 0x44
 800b8fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f040 80fd 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b902:	6a3b      	ldr	r3, [r7, #32]
 800b904:	2b00      	cmp	r3, #0
 800b906:	da08      	bge.n	800b91a <ecp_double_jac+0x508>
 800b908:	f107 0320 	add.w	r3, r7, #32
 800b90c:	2100      	movs	r1, #0
 800b90e:	4618      	mov	r0, r3
 800b910:	f7fb fa64 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d1e5      	bne.n	800b8e6 <ecp_double_jac+0x4d4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 800b91a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800b91e:	f107 0120 	add.w	r1, r7, #32
 800b922:	f107 0320 	add.w	r3, r7, #32
 800b926:	4618      	mov	r0, r3
 800b928:	f7fb fc27 	bl	800717a <mbedtls_mpi_sub_mpi>
 800b92c:	6478      	str	r0, [r7, #68]	@ 0x44
 800b92e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b930:	2b00      	cmp	r3, #0
 800b932:	f040 80e3 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b936:	e00d      	b.n	800b954 <ecp_double_jac+0x542>
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	1d1a      	adds	r2, r3, #4
 800b93c:	f107 0120 	add.w	r1, r7, #32
 800b940:	f107 0320 	add.w	r3, r7, #32
 800b944:	4618      	mov	r0, r3
 800b946:	f7fb fbd4 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800b94a:	6478      	str	r0, [r7, #68]	@ 0x44
 800b94c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b94e:	2b00      	cmp	r3, #0
 800b950:	f040 80d4 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b954:	6a3b      	ldr	r3, [r7, #32]
 800b956:	2b00      	cmp	r3, #0
 800b958:	da08      	bge.n	800b96c <ecp_double_jac+0x55a>
 800b95a:	f107 0320 	add.w	r3, r7, #32
 800b95e:	2100      	movs	r1, #0
 800b960:	4618      	mov	r0, r3
 800b962:	f7fb fa3b 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800b966:	4603      	mov	r3, r0
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d1e5      	bne.n	800b938 <ecp_double_jac+0x526>

    /* S = M(S - T) - U */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
 800b96c:	f107 0220 	add.w	r2, r7, #32
 800b970:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800b974:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b978:	4618      	mov	r0, r3
 800b97a:	f7fb fbfe 	bl	800717a <mbedtls_mpi_sub_mpi>
 800b97e:	6478      	str	r0, [r7, #68]	@ 0x44
 800b980:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b982:	2b00      	cmp	r3, #0
 800b984:	f040 80ba 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b988:	e00d      	b.n	800b9a6 <ecp_double_jac+0x594>
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	1d1a      	adds	r2, r3, #4
 800b98e:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800b992:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b996:	4618      	mov	r0, r3
 800b998:	f7fb fbab 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800b99c:	6478      	str	r0, [r7, #68]	@ 0x44
 800b99e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f040 80ab 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b9a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	da08      	bge.n	800b9be <ecp_double_jac+0x5ac>
 800b9ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7fb fa12 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d1e5      	bne.n	800b98a <ecp_double_jac+0x578>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
 800b9be:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800b9c2:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800b9c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f7fd f80a 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800b9d0:	6478      	str	r0, [r7, #68]	@ 0x44
 800b9d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	f040 8091 	bne.w	800bafc <ecp_double_jac+0x6ea>
 800b9da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b9de:	68f9      	ldr	r1, [r7, #12]
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f7ff fa05 	bl	800adf0 <ecp_modp>
 800b9e6:	6478      	str	r0, [r7, #68]	@ 0x44
 800b9e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	f040 8086 	bne.w	800bafc <ecp_double_jac+0x6ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 800b9f0:	f107 0214 	add.w	r2, r7, #20
 800b9f4:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800b9f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f7fb fbbc 	bl	800717a <mbedtls_mpi_sub_mpi>
 800ba02:	6478      	str	r0, [r7, #68]	@ 0x44
 800ba04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d178      	bne.n	800bafc <ecp_double_jac+0x6ea>
 800ba0a:	e00c      	b.n	800ba26 <ecp_double_jac+0x614>
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	1d1a      	adds	r2, r3, #4
 800ba10:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800ba14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f7fb fb6a 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800ba1e:	6478      	str	r0, [r7, #68]	@ 0x44
 800ba20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d16a      	bne.n	800bafc <ecp_double_jac+0x6ea>
 800ba26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	da08      	bge.n	800ba3e <ecp_double_jac+0x62c>
 800ba2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ba30:	2100      	movs	r1, #0
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7fb f9d2 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d1e6      	bne.n	800ba0c <ecp_double_jac+0x5fa>

    /* U = 2.Y.Z */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f103 010c 	add.w	r1, r3, #12
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f103 0218 	add.w	r2, r3, #24
 800ba4a:	f107 0314 	add.w	r3, r7, #20
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7fc ffc8 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800ba54:	6478      	str	r0, [r7, #68]	@ 0x44
 800ba56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d14f      	bne.n	800bafc <ecp_double_jac+0x6ea>
 800ba5c:	f107 0314 	add.w	r3, r7, #20
 800ba60:	68f9      	ldr	r1, [r7, #12]
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7ff f9c4 	bl	800adf0 <ecp_modp>
 800ba68:	6478      	str	r0, [r7, #68]	@ 0x44
 800ba6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d145      	bne.n	800bafc <ecp_double_jac+0x6ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 800ba70:	f107 0314 	add.w	r3, r7, #20
 800ba74:	2101      	movs	r1, #1
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7fa ff56 	bl	8006928 <mbedtls_mpi_shift_l>
 800ba7c:	6478      	str	r0, [r7, #68]	@ 0x44
 800ba7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d13b      	bne.n	800bafc <ecp_double_jac+0x6ea>
 800ba84:	e00c      	b.n	800baa0 <ecp_double_jac+0x68e>
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	1d1a      	adds	r2, r3, #4
 800ba8a:	f107 0114 	add.w	r1, r7, #20
 800ba8e:	f107 0314 	add.w	r3, r7, #20
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7fb facd 	bl	8007032 <mbedtls_mpi_sub_abs>
 800ba98:	6478      	str	r0, [r7, #68]	@ 0x44
 800ba9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d12d      	bne.n	800bafc <ecp_double_jac+0x6ea>
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	1d1a      	adds	r2, r3, #4
 800baa4:	f107 0314 	add.w	r3, r7, #20
 800baa8:	4611      	mov	r1, r2
 800baaa:	4618      	mov	r0, r3
 800baac:	f7fb f8fb 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	dae7      	bge.n	800ba86 <ecp_double_jac+0x674>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	f107 0220 	add.w	r2, r7, #32
 800babc:	4611      	mov	r1, r2
 800babe:	4618      	mov	r0, r3
 800bac0:	f7fa fa8d 	bl	8005fde <mbedtls_mpi_copy>
 800bac4:	6478      	str	r0, [r7, #68]	@ 0x44
 800bac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d117      	bne.n	800bafc <ecp_double_jac+0x6ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	330c      	adds	r3, #12
 800bad0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800bad4:	4611      	mov	r1, r2
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7fa fa81 	bl	8005fde <mbedtls_mpi_copy>
 800badc:	6478      	str	r0, [r7, #68]	@ 0x44
 800bade:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10b      	bne.n	800bafc <ecp_double_jac+0x6ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	3318      	adds	r3, #24
 800bae8:	f107 0214 	add.w	r2, r7, #20
 800baec:	4611      	mov	r1, r2
 800baee:	4618      	mov	r0, r3
 800baf0:	f7fa fa75 	bl	8005fde <mbedtls_mpi_copy>
 800baf4:	6478      	str	r0, [r7, #68]	@ 0x44
 800baf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800baf8:	2b00      	cmp	r3, #0

cleanup:
 800bafa:	bf00      	nop
    mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );
 800bafc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7fa f99d 	bl	8005e40 <mbedtls_mpi_free>
 800bb06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7fa f998 	bl	8005e40 <mbedtls_mpi_free>
 800bb10:	f107 0320 	add.w	r3, r7, #32
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7fa f993 	bl	8005e40 <mbedtls_mpi_free>
 800bb1a:	f107 0314 	add.w	r3, r7, #20
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7fa f98e 	bl	8005e40 <mbedtls_mpi_free>

    return( ret );
 800bb24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3748      	adds	r7, #72	@ 0x48
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
	...

0800bb30 <ecp_add_mixed>:
 *
 * Cost: 1A := 8M + 3S
 */
static int ecp_add_mixed( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                          const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b09a      	sub	sp, #104	@ 0x68
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	60b9      	str	r1, [r7, #8]
 800bb3a:	607a      	str	r2, [r7, #4]
 800bb3c:	603b      	str	r3, [r7, #0]
#endif /* MBEDTLS_ECP_ADD_MIXED_ALT */

    /*
     * Trivial cases: P == 0 or Q == 0 (case 1)
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	3318      	adds	r3, #24
 800bb42:	2100      	movs	r1, #0
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7fb f949 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d105      	bne.n	800bb5c <ecp_add_mixed+0x2c>
        return( mbedtls_ecp_copy( R, Q ) );
 800bb50:	6839      	ldr	r1, [r7, #0]
 800bb52:	68b8      	ldr	r0, [r7, #8]
 800bb54:	f7ff f855 	bl	800ac02 <mbedtls_ecp_copy>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	e2d9      	b.n	800c110 <ecp_add_mixed+0x5e0>

    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	6a1b      	ldr	r3, [r3, #32]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d00e      	beq.n	800bb82 <ecp_add_mixed+0x52>
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	3318      	adds	r3, #24
 800bb68:	2100      	movs	r1, #0
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7fb f936 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d105      	bne.n	800bb82 <ecp_add_mixed+0x52>
        return( mbedtls_ecp_copy( R, P ) );
 800bb76:	6879      	ldr	r1, [r7, #4]
 800bb78:	68b8      	ldr	r0, [r7, #8]
 800bb7a:	f7ff f842 	bl	800ac02 <mbedtls_ecp_copy>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	e2c6      	b.n	800c110 <ecp_add_mixed+0x5e0>

    /*
     * Make sure Q coordinates are normalized
     */
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	6a1b      	ldr	r3, [r3, #32]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d00a      	beq.n	800bba0 <ecp_add_mixed+0x70>
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	3318      	adds	r3, #24
 800bb8e:	2101      	movs	r1, #1
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fb f923 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800bb96:	4603      	mov	r3, r0
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d001      	beq.n	800bba0 <ecp_add_mixed+0x70>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800bb9c:	4bb6      	ldr	r3, [pc, #728]	@ (800be78 <ecp_add_mixed+0x348>)
 800bb9e:	e2b7      	b.n	800c110 <ecp_add_mixed+0x5e0>

    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );
 800bba0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7fa f938 	bl	8005e1a <mbedtls_mpi_init>
 800bbaa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7fa f933 	bl	8005e1a <mbedtls_mpi_init>
 800bbb4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f7fa f92e 	bl	8005e1a <mbedtls_mpi_init>
 800bbbe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7fa f929 	bl	8005e1a <mbedtls_mpi_init>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 800bbc8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7fa f924 	bl	8005e1a <mbedtls_mpi_init>
 800bbd2:	f107 031c 	add.w	r3, r7, #28
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7fa f91f 	bl	8005e1a <mbedtls_mpi_init>
 800bbdc:	f107 0310 	add.w	r3, r7, #16
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7fa f91a 	bl	8005e1a <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f103 0118 	add.w	r1, r3, #24
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f103 0218 	add.w	r2, r3, #24
 800bbf2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7fc fef4 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800bbfc:	6678      	str	r0, [r7, #100]	@ 0x64
 800bbfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	f040 8261 	bne.w	800c0c8 <ecp_add_mixed+0x598>
 800bc06:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800bc0a:	68f9      	ldr	r1, [r7, #12]
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7ff f8ef 	bl	800adf0 <ecp_modp>
 800bc12:	6678      	str	r0, [r7, #100]	@ 0x64
 800bc14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	f040 8256 	bne.w	800c0c8 <ecp_add_mixed+0x598>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f103 0218 	add.w	r2, r3, #24
 800bc22:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800bc26:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7fc feda 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800bc30:	6678      	str	r0, [r7, #100]	@ 0x64
 800bc32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	f040 8247 	bne.w	800c0c8 <ecp_add_mixed+0x598>
 800bc3a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800bc3e:	68f9      	ldr	r1, [r7, #12]
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7ff f8d5 	bl	800adf0 <ecp_modp>
 800bc46:	6678      	str	r0, [r7, #100]	@ 0x64
 800bc48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	f040 823c 	bne.w	800c0c8 <ecp_add_mixed+0x598>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 800bc50:	683a      	ldr	r2, [r7, #0]
 800bc52:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800bc56:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fc fec2 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800bc60:	6678      	str	r0, [r7, #100]	@ 0x64
 800bc62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	f040 822f 	bne.w	800c0c8 <ecp_add_mixed+0x598>
 800bc6a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800bc6e:	68f9      	ldr	r1, [r7, #12]
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7ff f8bd 	bl	800adf0 <ecp_modp>
 800bc76:	6678      	str	r0, [r7, #100]	@ 0x64
 800bc78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	f040 8224 	bne.w	800c0c8 <ecp_add_mixed+0x598>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	f103 020c 	add.w	r2, r3, #12
 800bc86:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800bc8a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7fc fea8 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800bc94:	6678      	str	r0, [r7, #100]	@ 0x64
 800bc96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	f040 8215 	bne.w	800c0c8 <ecp_add_mixed+0x598>
 800bc9e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800bca2:	68f9      	ldr	r1, [r7, #12]
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7ff f8a3 	bl	800adf0 <ecp_modp>
 800bcaa:	6678      	str	r0, [r7, #100]	@ 0x64
 800bcac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	f040 820a 	bne.w	800c0c8 <ecp_add_mixed+0x598>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800bcba:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7fb fa5b 	bl	800717a <mbedtls_mpi_sub_mpi>
 800bcc4:	6678      	str	r0, [r7, #100]	@ 0x64
 800bcc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	f040 81fd 	bne.w	800c0c8 <ecp_add_mixed+0x598>
 800bcce:	e00d      	b.n	800bcec <ecp_add_mixed+0x1bc>
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	1d1a      	adds	r2, r3, #4
 800bcd4:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800bcd8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f7fb fa08 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800bce2:	6678      	str	r0, [r7, #100]	@ 0x64
 800bce4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	f040 81ee 	bne.w	800c0c8 <ecp_add_mixed+0x598>
 800bcec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	da08      	bge.n	800bd04 <ecp_add_mixed+0x1d4>
 800bcf2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800bcf6:	2100      	movs	r1, #0
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f7fb f86f 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d1e5      	bne.n	800bcd0 <ecp_add_mixed+0x1a0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f103 020c 	add.w	r2, r3, #12
 800bd0a:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800bd0e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7fb fa31 	bl	800717a <mbedtls_mpi_sub_mpi>
 800bd18:	6678      	str	r0, [r7, #100]	@ 0x64
 800bd1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	f040 81d3 	bne.w	800c0c8 <ecp_add_mixed+0x598>
 800bd22:	e00d      	b.n	800bd40 <ecp_add_mixed+0x210>
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	1d1a      	adds	r2, r3, #4
 800bd28:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800bd2c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7fb f9de 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800bd36:	6678      	str	r0, [r7, #100]	@ 0x64
 800bd38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f040 81c4 	bne.w	800c0c8 <ecp_add_mixed+0x598>
 800bd40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	da08      	bge.n	800bd58 <ecp_add_mixed+0x228>
 800bd46:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800bd4a:	2100      	movs	r1, #0
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f7fb f845 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800bd52:	4603      	mov	r3, r0
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d1e5      	bne.n	800bd24 <ecp_add_mixed+0x1f4>

    /* Special cases (2) and (3) */
    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
 800bd58:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800bd5c:	2100      	movs	r1, #0
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7fb f83c 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d114      	bne.n	800bd94 <ecp_add_mixed+0x264>
    {
        if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )
 800bd6a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800bd6e:	2100      	movs	r1, #0
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7fb f833 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d106      	bne.n	800bd8a <ecp_add_mixed+0x25a>
        {
            ret = ecp_double_jac( grp, R, P );
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	68b9      	ldr	r1, [r7, #8]
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	f7ff fb46 	bl	800b412 <ecp_double_jac>
 800bd86:	6678      	str	r0, [r7, #100]	@ 0x64
            goto cleanup;
 800bd88:	e19e      	b.n	800c0c8 <ecp_add_mixed+0x598>
        }
        else
        {
            ret = mbedtls_ecp_set_zero( R );
 800bd8a:	68b8      	ldr	r0, [r7, #8]
 800bd8c:	f7fe ff77 	bl	800ac7e <mbedtls_ecp_set_zero>
 800bd90:	6678      	str	r0, [r7, #100]	@ 0x64
            goto cleanup;
 800bd92:	e199      	b.n	800c0c8 <ecp_add_mixed+0x598>
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f103 0118 	add.w	r1, r3, #24
 800bd9a:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800bd9e:	f107 0310 	add.w	r3, r7, #16
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7fc fe1e 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800bda8:	6678      	str	r0, [r7, #100]	@ 0x64
 800bdaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	f040 818b 	bne.w	800c0c8 <ecp_add_mixed+0x598>
 800bdb2:	f107 0310 	add.w	r3, r7, #16
 800bdb6:	68f9      	ldr	r1, [r7, #12]
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f7ff f819 	bl	800adf0 <ecp_modp>
 800bdbe:	6678      	str	r0, [r7, #100]	@ 0x64
 800bdc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	f040 8180 	bne.w	800c0c8 <ecp_add_mixed+0x598>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 800bdc8:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800bdcc:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800bdd0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7fc fe05 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800bdda:	6678      	str	r0, [r7, #100]	@ 0x64
 800bddc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	f040 8172 	bne.w	800c0c8 <ecp_add_mixed+0x598>
 800bde4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800bde8:	68f9      	ldr	r1, [r7, #12]
 800bdea:	4618      	mov	r0, r3
 800bdec:	f7ff f800 	bl	800adf0 <ecp_modp>
 800bdf0:	6678      	str	r0, [r7, #100]	@ 0x64
 800bdf2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	f040 8167 	bne.w	800c0c8 <ecp_add_mixed+0x598>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 800bdfa:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800bdfe:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800be02:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800be06:	4618      	mov	r0, r3
 800be08:	f7fc fdec 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800be0c:	6678      	str	r0, [r7, #100]	@ 0x64
 800be0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be10:	2b00      	cmp	r3, #0
 800be12:	f040 8159 	bne.w	800c0c8 <ecp_add_mixed+0x598>
 800be16:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800be1a:	68f9      	ldr	r1, [r7, #12]
 800be1c:	4618      	mov	r0, r3
 800be1e:	f7fe ffe7 	bl	800adf0 <ecp_modp>
 800be22:	6678      	str	r0, [r7, #100]	@ 0x64
 800be24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be26:	2b00      	cmp	r3, #0
 800be28:	f040 814e 	bne.w	800c0c8 <ecp_add_mixed+0x598>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800be32:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800be36:	4618      	mov	r0, r3
 800be38:	f7fc fdd4 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800be3c:	6678      	str	r0, [r7, #100]	@ 0x64
 800be3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be40:	2b00      	cmp	r3, #0
 800be42:	f040 8141 	bne.w	800c0c8 <ecp_add_mixed+0x598>
 800be46:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800be4a:	68f9      	ldr	r1, [r7, #12]
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7fe ffcf 	bl	800adf0 <ecp_modp>
 800be52:	6678      	str	r0, [r7, #100]	@ 0x64
 800be54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be56:	2b00      	cmp	r3, #0
 800be58:	f040 8136 	bne.w	800c0c8 <ecp_add_mixed+0x598>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 800be5c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800be60:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800be64:	2202      	movs	r2, #2
 800be66:	4618      	mov	r0, r3
 800be68:	f7fc fe64 	bl	8008b34 <mbedtls_mpi_mul_int>
 800be6c:	6678      	str	r0, [r7, #100]	@ 0x64
 800be6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be70:	2b00      	cmp	r3, #0
 800be72:	f040 8129 	bne.w	800c0c8 <ecp_add_mixed+0x598>
 800be76:	e00f      	b.n	800be98 <ecp_add_mixed+0x368>
 800be78:	ffffb080 	.word	0xffffb080
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	1d1a      	adds	r2, r3, #4
 800be80:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800be84:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800be88:	4618      	mov	r0, r3
 800be8a:	f7fb f8d2 	bl	8007032 <mbedtls_mpi_sub_abs>
 800be8e:	6678      	str	r0, [r7, #100]	@ 0x64
 800be90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be92:	2b00      	cmp	r3, #0
 800be94:	f040 8118 	bne.w	800c0c8 <ecp_add_mixed+0x598>
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	1d1a      	adds	r2, r3, #4
 800be9c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800bea0:	4611      	mov	r1, r2
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7fa feff 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	dae6      	bge.n	800be7c <ecp_add_mixed+0x34c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
 800beae:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800beb2:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800beb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800beba:	4618      	mov	r0, r3
 800bebc:	f7fc fd92 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800bec0:	6678      	str	r0, [r7, #100]	@ 0x64
 800bec2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	f040 80ff 	bne.w	800c0c8 <ecp_add_mixed+0x598>
 800beca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800bece:	68f9      	ldr	r1, [r7, #12]
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7fe ff8d 	bl	800adf0 <ecp_modp>
 800bed6:	6678      	str	r0, [r7, #100]	@ 0x64
 800bed8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800beda:	2b00      	cmp	r3, #0
 800bedc:	f040 80f4 	bne.w	800c0c8 <ecp_add_mixed+0x598>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 800bee0:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800bee4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800bee8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800beec:	4618      	mov	r0, r3
 800beee:	f7fb f944 	bl	800717a <mbedtls_mpi_sub_mpi>
 800bef2:	6678      	str	r0, [r7, #100]	@ 0x64
 800bef4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f040 80e6 	bne.w	800c0c8 <ecp_add_mixed+0x598>
 800befc:	e00d      	b.n	800bf1a <ecp_add_mixed+0x3ea>
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	1d1a      	adds	r2, r3, #4
 800bf02:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800bf06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7fb f8f1 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800bf10:	6678      	str	r0, [r7, #100]	@ 0x64
 800bf12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	f040 80d7 	bne.w	800c0c8 <ecp_add_mixed+0x598>
 800bf1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	da08      	bge.n	800bf32 <ecp_add_mixed+0x402>
 800bf20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800bf24:	2100      	movs	r1, #0
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7fa ff58 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d1e5      	bne.n	800befe <ecp_add_mixed+0x3ce>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
 800bf32:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800bf36:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800bf3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7fb f91b 	bl	800717a <mbedtls_mpi_sub_mpi>
 800bf44:	6678      	str	r0, [r7, #100]	@ 0x64
 800bf46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	f040 80bd 	bne.w	800c0c8 <ecp_add_mixed+0x598>
 800bf4e:	e00d      	b.n	800bf6c <ecp_add_mixed+0x43c>
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	1d1a      	adds	r2, r3, #4
 800bf54:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800bf58:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f7fb f8c8 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800bf62:	6678      	str	r0, [r7, #100]	@ 0x64
 800bf64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	f040 80ae 	bne.w	800c0c8 <ecp_add_mixed+0x598>
 800bf6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	da08      	bge.n	800bf84 <ecp_add_mixed+0x454>
 800bf72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800bf76:	2100      	movs	r1, #0
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7fa ff2f 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d1e5      	bne.n	800bf50 <ecp_add_mixed+0x420>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
 800bf84:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800bf88:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800bf8c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7fb f8f2 	bl	800717a <mbedtls_mpi_sub_mpi>
 800bf96:	6678      	str	r0, [r7, #100]	@ 0x64
 800bf98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	f040 8094 	bne.w	800c0c8 <ecp_add_mixed+0x598>
 800bfa0:	e00d      	b.n	800bfbe <ecp_add_mixed+0x48e>
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	1d1a      	adds	r2, r3, #4
 800bfa6:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800bfaa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7fb f89f 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800bfb4:	6678      	str	r0, [r7, #100]	@ 0x64
 800bfb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f040 8085 	bne.w	800c0c8 <ecp_add_mixed+0x598>
 800bfbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	da08      	bge.n	800bfd6 <ecp_add_mixed+0x4a6>
 800bfc4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800bfc8:	2100      	movs	r1, #0
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7fa ff06 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d1e5      	bne.n	800bfa2 <ecp_add_mixed+0x472>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
 800bfd6:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800bfda:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800bfde:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7fc fcfe 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800bfe8:	6678      	str	r0, [r7, #100]	@ 0x64
 800bfea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d16b      	bne.n	800c0c8 <ecp_add_mixed+0x598>
 800bff0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800bff4:	68f9      	ldr	r1, [r7, #12]
 800bff6:	4618      	mov	r0, r3
 800bff8:	f7fe fefa 	bl	800adf0 <ecp_modp>
 800bffc:	6678      	str	r0, [r7, #100]	@ 0x64
 800bffe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c000:	2b00      	cmp	r3, #0
 800c002:	d161      	bne.n	800c0c8 <ecp_add_mixed+0x598>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f103 020c 	add.w	r2, r3, #12
 800c00a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800c00e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800c012:	4618      	mov	r0, r3
 800c014:	f7fc fce6 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800c018:	6678      	str	r0, [r7, #100]	@ 0x64
 800c01a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d153      	bne.n	800c0c8 <ecp_add_mixed+0x598>
 800c020:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800c024:	68f9      	ldr	r1, [r7, #12]
 800c026:	4618      	mov	r0, r3
 800c028:	f7fe fee2 	bl	800adf0 <ecp_modp>
 800c02c:	6678      	str	r0, [r7, #100]	@ 0x64
 800c02e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c030:	2b00      	cmp	r3, #0
 800c032:	d149      	bne.n	800c0c8 <ecp_add_mixed+0x598>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 800c034:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800c038:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800c03c:	f107 031c 	add.w	r3, r7, #28
 800c040:	4618      	mov	r0, r3
 800c042:	f7fb f89a 	bl	800717a <mbedtls_mpi_sub_mpi>
 800c046:	6678      	str	r0, [r7, #100]	@ 0x64
 800c048:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d13c      	bne.n	800c0c8 <ecp_add_mixed+0x598>
 800c04e:	e00c      	b.n	800c06a <ecp_add_mixed+0x53a>
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	1d1a      	adds	r2, r3, #4
 800c054:	f107 011c 	add.w	r1, r7, #28
 800c058:	f107 031c 	add.w	r3, r7, #28
 800c05c:	4618      	mov	r0, r3
 800c05e:	f7fb f848 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800c062:	6678      	str	r0, [r7, #100]	@ 0x64
 800c064:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c066:	2b00      	cmp	r3, #0
 800c068:	d12e      	bne.n	800c0c8 <ecp_add_mixed+0x598>
 800c06a:	69fb      	ldr	r3, [r7, #28]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	da08      	bge.n	800c082 <ecp_add_mixed+0x552>
 800c070:	f107 031c 	add.w	r3, r7, #28
 800c074:	2100      	movs	r1, #0
 800c076:	4618      	mov	r0, r3
 800c078:	f7fa feb0 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d1e6      	bne.n	800c050 <ecp_add_mixed+0x520>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800c088:	4611      	mov	r1, r2
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7f9 ffa7 	bl	8005fde <mbedtls_mpi_copy>
 800c090:	6678      	str	r0, [r7, #100]	@ 0x64
 800c092:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c094:	2b00      	cmp	r3, #0
 800c096:	d117      	bne.n	800c0c8 <ecp_add_mixed+0x598>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	330c      	adds	r3, #12
 800c09c:	f107 021c 	add.w	r2, r7, #28
 800c0a0:	4611      	mov	r1, r2
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7f9 ff9b 	bl	8005fde <mbedtls_mpi_copy>
 800c0a8:	6678      	str	r0, [r7, #100]	@ 0x64
 800c0aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d10b      	bne.n	800c0c8 <ecp_add_mixed+0x598>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	3318      	adds	r3, #24
 800c0b4:	f107 0210 	add.w	r2, r7, #16
 800c0b8:	4611      	mov	r1, r2
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7f9 ff8f 	bl	8005fde <mbedtls_mpi_copy>
 800c0c0:	6678      	str	r0, [r7, #100]	@ 0x64
 800c0c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c0c4:	2b00      	cmp	r3, #0

cleanup:
 800c0c6:	bf00      	nop

    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
 800c0c8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7f9 feb7 	bl	8005e40 <mbedtls_mpi_free>
 800c0d2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7f9 feb2 	bl	8005e40 <mbedtls_mpi_free>
 800c0dc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7f9 fead 	bl	8005e40 <mbedtls_mpi_free>
 800c0e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7f9 fea8 	bl	8005e40 <mbedtls_mpi_free>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 800c0f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7f9 fea3 	bl	8005e40 <mbedtls_mpi_free>
 800c0fa:	f107 031c 	add.w	r3, r7, #28
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7f9 fe9e 	bl	8005e40 <mbedtls_mpi_free>
 800c104:	f107 0310 	add.w	r3, r7, #16
 800c108:	4618      	mov	r0, r3
 800c10a:	f7f9 fe99 	bl	8005e40 <mbedtls_mpi_free>

    return( ret );
 800c10e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
}
 800c110:	4618      	mov	r0, r3
 800c112:	3768      	adds	r7, #104	@ 0x68
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}

0800c118 <ecp_randomize_jac>:
 *
 * This countermeasure was first suggested in [2].
 */
static int ecp_randomize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b08e      	sub	sp, #56	@ 0x38
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	607a      	str	r2, [r7, #4]
 800c124:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi l, ll;
    size_t p_size;
    int count = 0;
 800c126:	2300      	movs	r3, #0
 800c128:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_randomize_jac( grp, pt, f_rng, p_rng ) );
#endif /* MBEDTLS_ECP_RANDOMIZE_JAC_ALT */

    p_size = ( grp->pbits + 7 ) / 8;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c12e:	3307      	adds	r3, #7
 800c130:	08db      	lsrs	r3, r3, #3
 800c132:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 800c134:	f107 0320 	add.w	r3, r7, #32
 800c138:	4618      	mov	r0, r3
 800c13a:	f7f9 fe6e 	bl	8005e1a <mbedtls_mpi_init>
 800c13e:	f107 0314 	add.w	r3, r7, #20
 800c142:	4618      	mov	r0, r3
 800c144:	f7f9 fe69 	bl	8005e1a <mbedtls_mpi_init>

    /* Generate l such that 1 < l < p */
    do
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 800c148:	f107 0020 	add.w	r0, r7, #32
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c152:	f7fd f998 	bl	8009486 <mbedtls_mpi_fill_random>
 800c156:	6378      	str	r0, [r7, #52]	@ 0x34
 800c158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	f040 8099 	bne.w	800c292 <ecp_randomize_jac+0x17a>

        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 800c160:	e00a      	b.n	800c178 <ecp_randomize_jac+0x60>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 800c162:	f107 0320 	add.w	r3, r7, #32
 800c166:	2101      	movs	r1, #1
 800c168:	4618      	mov	r0, r3
 800c16a:	f7fa fc7f 	bl	8006a6c <mbedtls_mpi_shift_r>
 800c16e:	6378      	str	r0, [r7, #52]	@ 0x34
 800c170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c172:	2b00      	cmp	r3, #0
 800c174:	f040 808d 	bne.w	800c292 <ecp_randomize_jac+0x17a>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	1d1a      	adds	r2, r3, #4
 800c17c:	f107 0320 	add.w	r3, r7, #32
 800c180:	4611      	mov	r1, r2
 800c182:	4618      	mov	r0, r3
 800c184:	f7fa fd8f 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800c188:	4603      	mov	r3, r0
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	dae9      	bge.n	800c162 <ecp_randomize_jac+0x4a>

        if( count++ > 10 )
 800c18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c190:	1c5a      	adds	r2, r3, #1
 800c192:	633a      	str	r2, [r7, #48]	@ 0x30
 800c194:	2b0a      	cmp	r3, #10
 800c196:	dd01      	ble.n	800c19c <ecp_randomize_jac+0x84>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 800c198:	4b45      	ldr	r3, [pc, #276]	@ (800c2b0 <ecp_randomize_jac+0x198>)
 800c19a:	e085      	b.n	800c2a8 <ecp_randomize_jac+0x190>
    }
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
 800c19c:	f107 0320 	add.w	r3, r7, #32
 800c1a0:	2101      	movs	r1, #1
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f7fa fe1a 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	ddcc      	ble.n	800c148 <ecp_randomize_jac+0x30>

    /* Z = l * Z */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	f103 0018 	add.w	r0, r3, #24
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	3318      	adds	r3, #24
 800c1b8:	f107 0220 	add.w	r2, r7, #32
 800c1bc:	4619      	mov	r1, r3
 800c1be:	f7fc fc11 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800c1c2:	6378      	str	r0, [r7, #52]	@ 0x34
 800c1c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d163      	bne.n	800c292 <ecp_randomize_jac+0x17a>
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	3318      	adds	r3, #24
 800c1ce:	68f9      	ldr	r1, [r7, #12]
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7fe fe0d 	bl	800adf0 <ecp_modp>
 800c1d6:	6378      	str	r0, [r7, #52]	@ 0x34
 800c1d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d159      	bne.n	800c292 <ecp_randomize_jac+0x17a>

    /* X = l^2 * X */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 800c1de:	f107 0220 	add.w	r2, r7, #32
 800c1e2:	f107 0120 	add.w	r1, r7, #32
 800c1e6:	f107 0314 	add.w	r3, r7, #20
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7fc fbfa 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800c1f0:	6378      	str	r0, [r7, #52]	@ 0x34
 800c1f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d14c      	bne.n	800c292 <ecp_randomize_jac+0x17a>
 800c1f8:	f107 0314 	add.w	r3, r7, #20
 800c1fc:	68f9      	ldr	r1, [r7, #12]
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7fe fdf6 	bl	800adf0 <ecp_modp>
 800c204:	6378      	str	r0, [r7, #52]	@ 0x34
 800c206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d142      	bne.n	800c292 <ecp_randomize_jac+0x17a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	68b9      	ldr	r1, [r7, #8]
 800c210:	f107 0214 	add.w	r2, r7, #20
 800c214:	4618      	mov	r0, r3
 800c216:	f7fc fbe5 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800c21a:	6378      	str	r0, [r7, #52]	@ 0x34
 800c21c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d137      	bne.n	800c292 <ecp_randomize_jac+0x17a>
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	68f9      	ldr	r1, [r7, #12]
 800c226:	4618      	mov	r0, r3
 800c228:	f7fe fde2 	bl	800adf0 <ecp_modp>
 800c22c:	6378      	str	r0, [r7, #52]	@ 0x34
 800c22e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c230:	2b00      	cmp	r3, #0
 800c232:	d12e      	bne.n	800c292 <ecp_randomize_jac+0x17a>

    /* Y = l^3 * Y */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
 800c234:	f107 0220 	add.w	r2, r7, #32
 800c238:	f107 0114 	add.w	r1, r7, #20
 800c23c:	f107 0314 	add.w	r3, r7, #20
 800c240:	4618      	mov	r0, r3
 800c242:	f7fc fbcf 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800c246:	6378      	str	r0, [r7, #52]	@ 0x34
 800c248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d121      	bne.n	800c292 <ecp_randomize_jac+0x17a>
 800c24e:	f107 0314 	add.w	r3, r7, #20
 800c252:	68f9      	ldr	r1, [r7, #12]
 800c254:	4618      	mov	r0, r3
 800c256:	f7fe fdcb 	bl	800adf0 <ecp_modp>
 800c25a:	6378      	str	r0, [r7, #52]	@ 0x34
 800c25c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d117      	bne.n	800c292 <ecp_randomize_jac+0x17a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	f103 000c 	add.w	r0, r3, #12
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	330c      	adds	r3, #12
 800c26c:	f107 0214 	add.w	r2, r7, #20
 800c270:	4619      	mov	r1, r3
 800c272:	f7fc fbb7 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800c276:	6378      	str	r0, [r7, #52]	@ 0x34
 800c278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d109      	bne.n	800c292 <ecp_randomize_jac+0x17a>
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	330c      	adds	r3, #12
 800c282:	68f9      	ldr	r1, [r7, #12]
 800c284:	4618      	mov	r0, r3
 800c286:	f7fe fdb3 	bl	800adf0 <ecp_modp>
 800c28a:	6378      	str	r0, [r7, #52]	@ 0x34
 800c28c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c28e:	2b00      	cmp	r3, #0

cleanup:
 800c290:	bf00      	nop
    mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );
 800c292:	f107 0320 	add.w	r3, r7, #32
 800c296:	4618      	mov	r0, r3
 800c298:	f7f9 fdd2 	bl	8005e40 <mbedtls_mpi_free>
 800c29c:	f107 0314 	add.w	r3, r7, #20
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7f9 fdcd 	bl	8005e40 <mbedtls_mpi_free>

    return( ret );
 800c2a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3738      	adds	r7, #56	@ 0x38
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}
 800c2b0:	ffffb300 	.word	0xffffb300

0800c2b4 <ecp_comb_recode_core>:
 * - m is the MPI, expected to be odd and such that bitlength(m) <= w * d
 *   (the result will be incorrect if these assumptions are not satisfied)
 */
static void ecp_comb_recode_core( unsigned char x[], size_t d,
                                  unsigned char w, const mbedtls_mpi *m )
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b088      	sub	sp, #32
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	603b      	str	r3, [r7, #0]
 800c2c0:	4613      	mov	r3, r2
 800c2c2:	71fb      	strb	r3, [r7, #7]
    size_t i, j;
    unsigned char c, cc, adjust;

    memset( x, 0, d+1 );
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	2100      	movs	r1, #0
 800c2cc:	68f8      	ldr	r0, [r7, #12]
 800c2ce:	f00a fc73 	bl	8016bb8 <memset>

    /* First get the classical comb values (except for x_d = 0) */
    for( i = 0; i < d; i++ )
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	61fb      	str	r3, [r7, #28]
 800c2d6:	e027      	b.n	800c328 <ecp_comb_recode_core+0x74>
        for( j = 0; j < w; j++ )
 800c2d8:	2300      	movs	r3, #0
 800c2da:	61bb      	str	r3, [r7, #24]
 800c2dc:	e01d      	b.n	800c31a <ecp_comb_recode_core+0x66>
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	69ba      	ldr	r2, [r7, #24]
 800c2e2:	fb03 f202 	mul.w	r2, r3, r2
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	4413      	add	r3, r2
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	6838      	ldr	r0, [r7, #0]
 800c2ee:	f7fa f801 	bl	80062f4 <mbedtls_mpi_get_bit>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	69bb      	ldr	r3, [r7, #24]
 800c2f6:	fa02 f103 	lsl.w	r1, r2, r3
 800c2fa:	68fa      	ldr	r2, [r7, #12]
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	4413      	add	r3, r2
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	b25a      	sxtb	r2, r3
 800c304:	b24b      	sxtb	r3, r1
 800c306:	4313      	orrs	r3, r2
 800c308:	b259      	sxtb	r1, r3
 800c30a:	68fa      	ldr	r2, [r7, #12]
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	4413      	add	r3, r2
 800c310:	b2ca      	uxtb	r2, r1
 800c312:	701a      	strb	r2, [r3, #0]
        for( j = 0; j < w; j++ )
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	3301      	adds	r3, #1
 800c318:	61bb      	str	r3, [r7, #24]
 800c31a:	79fb      	ldrb	r3, [r7, #7]
 800c31c:	69ba      	ldr	r2, [r7, #24]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d3dd      	bcc.n	800c2de <ecp_comb_recode_core+0x2a>
    for( i = 0; i < d; i++ )
 800c322:	69fb      	ldr	r3, [r7, #28]
 800c324:	3301      	adds	r3, #1
 800c326:	61fb      	str	r3, [r7, #28]
 800c328:	69fa      	ldr	r2, [r7, #28]
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d3d3      	bcc.n	800c2d8 <ecp_comb_recode_core+0x24>

    /* Now make sure x_1 .. x_d are odd */
    c = 0;
 800c330:	2300      	movs	r3, #0
 800c332:	75fb      	strb	r3, [r7, #23]
    for( i = 1; i <= d; i++ )
 800c334:	2301      	movs	r3, #1
 800c336:	61fb      	str	r3, [r7, #28]
 800c338:	e05f      	b.n	800c3fa <ecp_comb_recode_core+0x146>
    {
        /* Add carry and update it */
        cc   = x[i] & c;
 800c33a:	68fa      	ldr	r2, [r7, #12]
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	4413      	add	r3, r2
 800c340:	781a      	ldrb	r2, [r3, #0]
 800c342:	7dfb      	ldrb	r3, [r7, #23]
 800c344:	4013      	ands	r3, r2
 800c346:	75bb      	strb	r3, [r7, #22]
        x[i] = x[i] ^ c;
 800c348:	68fa      	ldr	r2, [r7, #12]
 800c34a:	69fb      	ldr	r3, [r7, #28]
 800c34c:	4413      	add	r3, r2
 800c34e:	7819      	ldrb	r1, [r3, #0]
 800c350:	68fa      	ldr	r2, [r7, #12]
 800c352:	69fb      	ldr	r3, [r7, #28]
 800c354:	4413      	add	r3, r2
 800c356:	7dfa      	ldrb	r2, [r7, #23]
 800c358:	404a      	eors	r2, r1
 800c35a:	b2d2      	uxtb	r2, r2
 800c35c:	701a      	strb	r2, [r3, #0]
        c = cc;
 800c35e:	7dbb      	ldrb	r3, [r7, #22]
 800c360:	75fb      	strb	r3, [r7, #23]

        /* Adjust if needed, avoiding branches */
        adjust = 1 - ( x[i] & 0x01 );
 800c362:	68fa      	ldr	r2, [r7, #12]
 800c364:	69fb      	ldr	r3, [r7, #28]
 800c366:	4413      	add	r3, r2
 800c368:	781b      	ldrb	r3, [r3, #0]
 800c36a:	f003 0301 	and.w	r3, r3, #1
 800c36e:	2b00      	cmp	r3, #0
 800c370:	bf0c      	ite	eq
 800c372:	2301      	moveq	r3, #1
 800c374:	2300      	movne	r3, #0
 800c376:	b2db      	uxtb	r3, r3
 800c378:	757b      	strb	r3, [r7, #21]
        c   |= x[i] & ( x[i-1] * adjust );
 800c37a:	68fa      	ldr	r2, [r7, #12]
 800c37c:	69fb      	ldr	r3, [r7, #28]
 800c37e:	4413      	add	r3, r2
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	b25a      	sxtb	r2, r3
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	3b01      	subs	r3, #1
 800c388:	68f9      	ldr	r1, [r7, #12]
 800c38a:	440b      	add	r3, r1
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	7d79      	ldrb	r1, [r7, #21]
 800c390:	fb11 f303 	smulbb	r3, r1, r3
 800c394:	b2db      	uxtb	r3, r3
 800c396:	b25b      	sxtb	r3, r3
 800c398:	4013      	ands	r3, r2
 800c39a:	b25a      	sxtb	r2, r3
 800c39c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	b25b      	sxtb	r3, r3
 800c3a4:	75fb      	strb	r3, [r7, #23]
        x[i] = x[i] ^ ( x[i-1] * adjust );
 800c3a6:	68fa      	ldr	r2, [r7, #12]
 800c3a8:	69fb      	ldr	r3, [r7, #28]
 800c3aa:	4413      	add	r3, r2
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	b25a      	sxtb	r2, r3
 800c3b0:	69fb      	ldr	r3, [r7, #28]
 800c3b2:	3b01      	subs	r3, #1
 800c3b4:	68f9      	ldr	r1, [r7, #12]
 800c3b6:	440b      	add	r3, r1
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	7d79      	ldrb	r1, [r7, #21]
 800c3bc:	fb11 f303 	smulbb	r3, r1, r3
 800c3c0:	b2db      	uxtb	r3, r3
 800c3c2:	b25b      	sxtb	r3, r3
 800c3c4:	4053      	eors	r3, r2
 800c3c6:	b259      	sxtb	r1, r3
 800c3c8:	68fa      	ldr	r2, [r7, #12]
 800c3ca:	69fb      	ldr	r3, [r7, #28]
 800c3cc:	4413      	add	r3, r2
 800c3ce:	b2ca      	uxtb	r2, r1
 800c3d0:	701a      	strb	r2, [r3, #0]
        x[i-1] |= adjust << 7;
 800c3d2:	69fb      	ldr	r3, [r7, #28]
 800c3d4:	3b01      	subs	r3, #1
 800c3d6:	68fa      	ldr	r2, [r7, #12]
 800c3d8:	4413      	add	r3, r2
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	b25a      	sxtb	r2, r3
 800c3de:	7d7b      	ldrb	r3, [r7, #21]
 800c3e0:	01db      	lsls	r3, r3, #7
 800c3e2:	b25b      	sxtb	r3, r3
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	b259      	sxtb	r1, r3
 800c3e8:	69fb      	ldr	r3, [r7, #28]
 800c3ea:	3b01      	subs	r3, #1
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	4413      	add	r3, r2
 800c3f0:	b2ca      	uxtb	r2, r1
 800c3f2:	701a      	strb	r2, [r3, #0]
    for( i = 1; i <= d; i++ )
 800c3f4:	69fb      	ldr	r3, [r7, #28]
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	61fb      	str	r3, [r7, #28]
 800c3fa:	69fa      	ldr	r2, [r7, #28]
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d99b      	bls.n	800c33a <ecp_comb_recode_core+0x86>
    }
}
 800c402:	bf00      	nop
 800c404:	bf00      	nop
 800c406:	3720      	adds	r7, #32
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <ecp_precompute_comb>:
 */
static int ecp_precompute_comb( const mbedtls_ecp_group *grp,
                                mbedtls_ecp_point T[], const mbedtls_ecp_point *P,
                                unsigned char w, size_t d,
                                mbedtls_ecp_restart_ctx *rs_ctx )
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b08a      	sub	sp, #40	@ 0x28
 800c410:	af00      	add	r7, sp, #0
 800c412:	60f8      	str	r0, [r7, #12]
 800c414:	60b9      	str	r1, [r7, #8]
 800c416:	607a      	str	r2, [r7, #4]
 800c418:	70fb      	strb	r3, [r7, #3]
    int ret;
    unsigned char i;
    size_t j = 0;
 800c41a:	2300      	movs	r3, #0
 800c41c:	61fb      	str	r3, [r7, #28]
    const unsigned char T_size = 1U << ( w - 1 );
 800c41e:	78fb      	ldrb	r3, [r7, #3]
 800c420:	3b01      	subs	r3, #1
 800c422:	2201      	movs	r2, #1
 800c424:	fa02 f303 	lsl.w	r3, r2, r3
 800c428:	76fb      	strb	r3, [r7, #27]
#endif
    /*
     * Set T[0] = P and
     * T[2^{l-1}] = 2^{dl} P for l = 1 .. w-1 (this is not the final value)
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );
 800c42a:	6879      	ldr	r1, [r7, #4]
 800c42c:	68b8      	ldr	r0, [r7, #8]
 800c42e:	f7fe fbe8 	bl	800ac02 <mbedtls_ecp_copy>
 800c432:	6278      	str	r0, [r7, #36]	@ 0x24
 800c434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c436:	2b00      	cmp	r3, #0
 800c438:	f040 80d7 	bne.w	800c5ea <ecp_precompute_comb+0x1de>
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL && rs_ctx->rsm != NULL && rs_ctx->rsm->i != 0 )
        j = rs_ctx->rsm->i;
    else
#endif
        j = 0;
 800c43c:	2300      	movs	r3, #0
 800c43e:	61fb      	str	r3, [r7, #28]

    for( ; j < d * ( w - 1 ); j++ )
 800c440:	e03e      	b.n	800c4c0 <ecp_precompute_comb+0xb4>
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL );

        i = 1U << ( j / d );
 800c442:	69fa      	ldr	r2, [r7, #28]
 800c444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c446:	fbb2 f3f3 	udiv	r3, r2, r3
 800c44a:	2201      	movs	r2, #1
 800c44c:	fa02 f303 	lsl.w	r3, r2, r3
 800c450:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        cur = T + i;
 800c454:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800c458:	4613      	mov	r3, r2
 800c45a:	00db      	lsls	r3, r3, #3
 800c45c:	4413      	add	r3, r2
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	461a      	mov	r2, r3
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	4413      	add	r3, r2
 800c466:	617b      	str	r3, [r7, #20]

        if( j % d == 0 )
 800c468:	69fb      	ldr	r3, [r7, #28]
 800c46a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c46c:	fbb3 f2f2 	udiv	r2, r3, r2
 800c470:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c472:	fb01 f202 	mul.w	r2, r1, r2
 800c476:	1a9b      	subs	r3, r3, r2
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d114      	bne.n	800c4a6 <ecp_precompute_comb+0x9a>
            MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
 800c47c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c480:	085b      	lsrs	r3, r3, #1
 800c482:	b2db      	uxtb	r3, r3
 800c484:	461a      	mov	r2, r3
 800c486:	4613      	mov	r3, r2
 800c488:	00db      	lsls	r3, r3, #3
 800c48a:	4413      	add	r3, r2
 800c48c:	009b      	lsls	r3, r3, #2
 800c48e:	461a      	mov	r2, r3
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	4413      	add	r3, r2
 800c494:	4619      	mov	r1, r3
 800c496:	6978      	ldr	r0, [r7, #20]
 800c498:	f7fe fbb3 	bl	800ac02 <mbedtls_ecp_copy>
 800c49c:	6278      	str	r0, [r7, #36]	@ 0x24
 800c49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	f040 80a2 	bne.w	800c5ea <ecp_precompute_comb+0x1de>

        MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );
 800c4a6:	697a      	ldr	r2, [r7, #20]
 800c4a8:	6979      	ldr	r1, [r7, #20]
 800c4aa:	68f8      	ldr	r0, [r7, #12]
 800c4ac:	f7fe ffb1 	bl	800b412 <ecp_double_jac>
 800c4b0:	6278      	str	r0, [r7, #36]	@ 0x24
 800c4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	f040 8098 	bne.w	800c5ea <ecp_precompute_comb+0x1de>
    for( ; j < d * ( w - 1 ); j++ )
 800c4ba:	69fb      	ldr	r3, [r7, #28]
 800c4bc:	3301      	adds	r3, #1
 800c4be:	61fb      	str	r3, [r7, #28]
 800c4c0:	78fb      	ldrb	r3, [r7, #3]
 800c4c2:	3b01      	subs	r3, #1
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c8:	fb02 f303 	mul.w	r3, r2, r3
 800c4cc:	69fa      	ldr	r2, [r7, #28]
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	d3b7      	bcc.n	800c442 <ecp_precompute_comb+0x36>
#endif
    /*
     * Normalize current elements in T. As T has holes,
     * use an auxiliary array of pointers to elements in T.
     */
    j = 0;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	61fb      	str	r3, [r7, #28]
    for( i = 1; i < T_size; i <<= 1 )
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c4dc:	e015      	b.n	800c50a <ecp_precompute_comb+0xfe>
        TT[j++] = T + i;
 800c4de:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800c4e2:	4613      	mov	r3, r2
 800c4e4:	00db      	lsls	r3, r3, #3
 800c4e6:	4413      	add	r3, r2
 800c4e8:	009b      	lsls	r3, r3, #2
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	69fb      	ldr	r3, [r7, #28]
 800c4ee:	1c5a      	adds	r2, r3, #1
 800c4f0:	61fa      	str	r2, [r7, #28]
 800c4f2:	68ba      	ldr	r2, [r7, #8]
 800c4f4:	440a      	add	r2, r1
 800c4f6:	009b      	lsls	r3, r3, #2
 800c4f8:	3328      	adds	r3, #40	@ 0x28
 800c4fa:	443b      	add	r3, r7
 800c4fc:	f843 2c18 	str.w	r2, [r3, #-24]
    for( i = 1; i < T_size; i <<= 1 )
 800c500:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c504:	005b      	lsls	r3, r3, #1
 800c506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c50a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800c50e:	7efb      	ldrb	r3, [r7, #27]
 800c510:	429a      	cmp	r2, r3
 800c512:	d3e4      	bcc.n	800c4de <ecp_precompute_comb+0xd2>

    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV + 6 * j - 2 );

    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
 800c514:	f107 0310 	add.w	r3, r7, #16
 800c518:	69fa      	ldr	r2, [r7, #28]
 800c51a:	4619      	mov	r1, r3
 800c51c:	68f8      	ldr	r0, [r7, #12]
 800c51e:	f7fe fd67 	bl	800aff0 <ecp_normalize_jac_many>
 800c522:	6278      	str	r0, [r7, #36]	@ 0x24
 800c524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c526:	2b00      	cmp	r3, #0
 800c528:	d15f      	bne.n	800c5ea <ecp_precompute_comb+0x1de>
     * Compute the remaining ones using the minimal number of additions
     * Be careful to update T[2^l] only after using it!
     */
    MBEDTLS_ECP_BUDGET( ( T_size - 1 ) * MBEDTLS_ECP_OPS_ADD );

    for( i = 1; i < T_size; i <<= 1 )
 800c52a:	2301      	movs	r3, #1
 800c52c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c530:	e031      	b.n	800c596 <ecp_precompute_comb+0x18a>
    {
        j = i;
 800c532:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c536:	61fb      	str	r3, [r7, #28]
        while( j-- )
 800c538:	e023      	b.n	800c582 <ecp_precompute_comb+0x176>
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
 800c53a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800c53e:	69fb      	ldr	r3, [r7, #28]
 800c540:	441a      	add	r2, r3
 800c542:	4613      	mov	r3, r2
 800c544:	00db      	lsls	r3, r3, #3
 800c546:	4413      	add	r3, r2
 800c548:	009b      	lsls	r3, r3, #2
 800c54a:	461a      	mov	r2, r3
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	1899      	adds	r1, r3, r2
 800c550:	69fa      	ldr	r2, [r7, #28]
 800c552:	4613      	mov	r3, r2
 800c554:	00db      	lsls	r3, r3, #3
 800c556:	4413      	add	r3, r2
 800c558:	009b      	lsls	r3, r3, #2
 800c55a:	461a      	mov	r2, r3
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	1898      	adds	r0, r3, r2
 800c560:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800c564:	4613      	mov	r3, r2
 800c566:	00db      	lsls	r3, r3, #3
 800c568:	4413      	add	r3, r2
 800c56a:	009b      	lsls	r3, r3, #2
 800c56c:	461a      	mov	r2, r3
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	4413      	add	r3, r2
 800c572:	4602      	mov	r2, r0
 800c574:	68f8      	ldr	r0, [r7, #12]
 800c576:	f7ff fadb 	bl	800bb30 <ecp_add_mixed>
 800c57a:	6278      	str	r0, [r7, #36]	@ 0x24
 800c57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d133      	bne.n	800c5ea <ecp_precompute_comb+0x1de>
        while( j-- )
 800c582:	69fb      	ldr	r3, [r7, #28]
 800c584:	1e5a      	subs	r2, r3, #1
 800c586:	61fa      	str	r2, [r7, #28]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d1d6      	bne.n	800c53a <ecp_precompute_comb+0x12e>
    for( i = 1; i < T_size; i <<= 1 )
 800c58c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c590:	005b      	lsls	r3, r3, #1
 800c592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c596:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800c59a:	7efb      	ldrb	r3, [r7, #27]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d3c8      	bcc.n	800c532 <ecp_precompute_comb+0x126>
    /*
     * Normalize final elements in T. Even though there are no holes now, we
     * still need the auxiliary array for homogeneity with the previous
     * call. Also, skip T[0] which is already normalised, being a copy of P.
     */
    for( j = 0; j + 1 < T_size; j++ )
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	61fb      	str	r3, [r7, #28]
 800c5a4:	e011      	b.n	800c5ca <ecp_precompute_comb+0x1be>
        TT[j] = T + j + 1;
 800c5a6:	69fb      	ldr	r3, [r7, #28]
 800c5a8:	1c5a      	adds	r2, r3, #1
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	00db      	lsls	r3, r3, #3
 800c5ae:	4413      	add	r3, r2
 800c5b0:	009b      	lsls	r3, r3, #2
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	441a      	add	r2, r3
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	3328      	adds	r3, #40	@ 0x28
 800c5be:	443b      	add	r3, r7
 800c5c0:	f843 2c18 	str.w	r2, [r3, #-24]
    for( j = 0; j + 1 < T_size; j++ )
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	61fb      	str	r3, [r7, #28]
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	1c5a      	adds	r2, r3, #1
 800c5ce:	7efb      	ldrb	r3, [r7, #27]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d3e8      	bcc.n	800c5a6 <ecp_precompute_comb+0x19a>

    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV + 6 * j - 2 );

    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
 800c5d4:	f107 0310 	add.w	r3, r7, #16
 800c5d8:	69fa      	ldr	r2, [r7, #28]
 800c5da:	4619      	mov	r1, r3
 800c5dc:	68f8      	ldr	r0, [r7, #12]
 800c5de:	f7fe fd07 	bl	800aff0 <ecp_normalize_jac_many>
 800c5e2:	6278      	str	r0, [r7, #36]	@ 0x24
 800c5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e6:	2b00      	cmp	r3, #0

cleanup:
 800c5e8:	bf00      	nop
        if( rs_ctx->rsm->state == ecp_rsm_pre_dbl )
            rs_ctx->rsm->i = j;
    }
#endif

    return( ret );
 800c5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3728      	adds	r7, #40	@ 0x28
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <ecp_select_comb>:
 * See ecp_comb_recode_core() for background
 */
static int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                            const mbedtls_ecp_point T[], unsigned char T_size,
                            unsigned char i )
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b086      	sub	sp, #24
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	607a      	str	r2, [r7, #4]
 800c600:	70fb      	strb	r3, [r7, #3]
    int ret;
    unsigned char ii, j;

    /* Ignore the "sign" bit and scale down */
    ii =  ( i & 0x7Fu ) >> 1;
 800c602:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c606:	085b      	lsrs	r3, r3, #1
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c60e:	74bb      	strb	r3, [r7, #18]

    /* Read the whole table to thwart cache-based timing attacks */
    for( j = 0; j < T_size; j++ )
 800c610:	2300      	movs	r3, #0
 800c612:	74fb      	strb	r3, [r7, #19]
 800c614:	e035      	b.n	800c682 <ecp_select_comb+0x8e>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
 800c616:	68b8      	ldr	r0, [r7, #8]
 800c618:	7cfa      	ldrb	r2, [r7, #19]
 800c61a:	4613      	mov	r3, r2
 800c61c:	00db      	lsls	r3, r3, #3
 800c61e:	4413      	add	r3, r2
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	461a      	mov	r2, r3
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	4413      	add	r3, r2
 800c628:	4619      	mov	r1, r3
 800c62a:	7cfa      	ldrb	r2, [r7, #19]
 800c62c:	7cbb      	ldrb	r3, [r7, #18]
 800c62e:	429a      	cmp	r2, r3
 800c630:	bf0c      	ite	eq
 800c632:	2301      	moveq	r3, #1
 800c634:	2300      	movne	r3, #0
 800c636:	b2db      	uxtb	r3, r3
 800c638:	461a      	mov	r2, r3
 800c63a:	f7f9 fd2c 	bl	8006096 <mbedtls_mpi_safe_cond_assign>
 800c63e:	6178      	str	r0, [r7, #20]
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d12e      	bne.n	800c6a4 <ecp_select_comb+0xb0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	f103 000c 	add.w	r0, r3, #12
 800c64c:	7cfa      	ldrb	r2, [r7, #19]
 800c64e:	4613      	mov	r3, r2
 800c650:	00db      	lsls	r3, r3, #3
 800c652:	4413      	add	r3, r2
 800c654:	009b      	lsls	r3, r3, #2
 800c656:	461a      	mov	r2, r3
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4413      	add	r3, r2
 800c65c:	f103 010c 	add.w	r1, r3, #12
 800c660:	7cfa      	ldrb	r2, [r7, #19]
 800c662:	7cbb      	ldrb	r3, [r7, #18]
 800c664:	429a      	cmp	r2, r3
 800c666:	bf0c      	ite	eq
 800c668:	2301      	moveq	r3, #1
 800c66a:	2300      	movne	r3, #0
 800c66c:	b2db      	uxtb	r3, r3
 800c66e:	461a      	mov	r2, r3
 800c670:	f7f9 fd11 	bl	8006096 <mbedtls_mpi_safe_cond_assign>
 800c674:	6178      	str	r0, [r7, #20]
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d113      	bne.n	800c6a4 <ecp_select_comb+0xb0>
    for( j = 0; j < T_size; j++ )
 800c67c:	7cfb      	ldrb	r3, [r7, #19]
 800c67e:	3301      	adds	r3, #1
 800c680:	74fb      	strb	r3, [r7, #19]
 800c682:	7cfa      	ldrb	r2, [r7, #19]
 800c684:	78fb      	ldrb	r3, [r7, #3]
 800c686:	429a      	cmp	r2, r3
 800c688:	d3c5      	bcc.n	800c616 <ecp_select_comb+0x22>
    }

    /* Safely invert result if i is "negative" */
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
 800c68a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c68e:	09db      	lsrs	r3, r3, #7
 800c690:	b2db      	uxtb	r3, r3
 800c692:	461a      	mov	r2, r3
 800c694:	68b9      	ldr	r1, [r7, #8]
 800c696:	68f8      	ldr	r0, [r7, #12]
 800c698:	f7fe fe78 	bl	800b38c <ecp_safe_invert_jac>
 800c69c:	6178      	str	r0, [r7, #20]
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	2b00      	cmp	r3, #0

cleanup:
 800c6a2:	bf00      	nop
    return( ret );
 800c6a4:	697b      	ldr	r3, [r7, #20]
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3718      	adds	r7, #24
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}

0800c6ae <ecp_mul_comb_core>:
                              const mbedtls_ecp_point T[], unsigned char T_size,
                              const unsigned char x[], size_t d,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng,
                              mbedtls_ecp_restart_ctx *rs_ctx )
{
 800c6ae:	b580      	push	{r7, lr}
 800c6b0:	b092      	sub	sp, #72	@ 0x48
 800c6b2:	af02      	add	r7, sp, #8
 800c6b4:	60f8      	str	r0, [r7, #12]
 800c6b6:	60b9      	str	r1, [r7, #8]
 800c6b8:	607a      	str	r2, [r7, #4]
 800c6ba:	70fb      	strb	r3, [r7, #3]
    int ret;
    mbedtls_ecp_point Txi;
    size_t i;

    mbedtls_ecp_point_init( &Txi );
 800c6bc:	f107 0314 	add.w	r3, r7, #20
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f7fe f9b3 	bl	800aa2c <mbedtls_ecp_point_init>
    }
    else
#endif
    {
        /* Start with a non-zero point and randomize its coordinates */
        i = d;
 800c6c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6c8:	63bb      	str	r3, [r7, #56]	@ 0x38
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
 800c6ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c6cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ce:	4413      	add	r3, r2
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	78fa      	ldrb	r2, [r7, #3]
 800c6d4:	9300      	str	r3, [sp, #0]
 800c6d6:	4613      	mov	r3, r2
 800c6d8:	687a      	ldr	r2, [r7, #4]
 800c6da:	68b9      	ldr	r1, [r7, #8]
 800c6dc:	68f8      	ldr	r0, [r7, #12]
 800c6de:	f7ff ff89 	bl	800c5f4 <ecp_select_comb>
 800c6e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800c6e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d143      	bne.n	800c772 <ecp_mul_comb_core+0xc4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	3318      	adds	r3, #24
 800c6ee:	2101      	movs	r1, #1
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f7f9 fdd3 	bl	800629c <mbedtls_mpi_lset>
 800c6f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800c6f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d139      	bne.n	800c772 <ecp_mul_comb_core+0xc4>
        if( f_rng != 0 )
 800c6fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c700:	2b00      	cmp	r3, #0
 800c702:	d032      	beq.n	800c76a <ecp_mul_comb_core+0xbc>
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
 800c704:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c706:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c708:	68b9      	ldr	r1, [r7, #8]
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	f7ff fd04 	bl	800c118 <ecp_randomize_jac>
 800c710:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800c712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c714:	2b00      	cmp	r3, #0
 800c716:	d12c      	bne.n	800c772 <ecp_mul_comb_core+0xc4>
    }

    while( i != 0 )
 800c718:	e027      	b.n	800c76a <ecp_mul_comb_core+0xbc>
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL + MBEDTLS_ECP_OPS_ADD );
        --i;
 800c71a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c71c:	3b01      	subs	r3, #1
 800c71e:	63bb      	str	r3, [r7, #56]	@ 0x38

        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
 800c720:	68ba      	ldr	r2, [r7, #8]
 800c722:	68b9      	ldr	r1, [r7, #8]
 800c724:	68f8      	ldr	r0, [r7, #12]
 800c726:	f7fe fe74 	bl	800b412 <ecp_double_jac>
 800c72a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800c72c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d11f      	bne.n	800c772 <ecp_mul_comb_core+0xc4>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
 800c732:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c736:	4413      	add	r3, r2
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	78fa      	ldrb	r2, [r7, #3]
 800c73c:	f107 0114 	add.w	r1, r7, #20
 800c740:	9300      	str	r3, [sp, #0]
 800c742:	4613      	mov	r3, r2
 800c744:	687a      	ldr	r2, [r7, #4]
 800c746:	68f8      	ldr	r0, [r7, #12]
 800c748:	f7ff ff54 	bl	800c5f4 <ecp_select_comb>
 800c74c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800c74e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c750:	2b00      	cmp	r3, #0
 800c752:	d10e      	bne.n	800c772 <ecp_mul_comb_core+0xc4>
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
 800c754:	f107 0314 	add.w	r3, r7, #20
 800c758:	68ba      	ldr	r2, [r7, #8]
 800c75a:	68b9      	ldr	r1, [r7, #8]
 800c75c:	68f8      	ldr	r0, [r7, #12]
 800c75e:	f7ff f9e7 	bl	800bb30 <ecp_add_mixed>
 800c762:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800c764:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c766:	2b00      	cmp	r3, #0
 800c768:	d103      	bne.n	800c772 <ecp_mul_comb_core+0xc4>
    while( i != 0 )
 800c76a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d1d4      	bne.n	800c71a <ecp_mul_comb_core+0x6c>
    }

cleanup:
 800c770:	bf00      	nop

    mbedtls_ecp_point_free( &Txi );
 800c772:	f107 0314 	add.w	r3, r7, #20
 800c776:	4618      	mov	r0, r3
 800c778:	f7fe f9c3 	bl	800ab02 <mbedtls_ecp_point_free>
        rs_ctx->rsm->i = i;
        /* no need to save R, already pointing to rs_ctx->rsm->R */
    }
#endif

    return( ret );
 800c77c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3740      	adds	r7, #64	@ 0x40
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
	...

0800c788 <ecp_comb_recode_scalar>:
                                   const mbedtls_mpi *m,
                                   unsigned char k[COMB_MAX_D + 1],
                                   size_t d,
                                   unsigned char w,
                                   unsigned char *parity_trick )
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b08c      	sub	sp, #48	@ 0x30
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	60f8      	str	r0, [r7, #12]
 800c790:	60b9      	str	r1, [r7, #8]
 800c792:	607a      	str	r2, [r7, #4]
 800c794:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi M, mm;

    mbedtls_mpi_init( &M );
 800c796:	f107 0320 	add.w	r3, r7, #32
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7f9 fb3d 	bl	8005e1a <mbedtls_mpi_init>
    mbedtls_mpi_init( &mm );
 800c7a0:	f107 0314 	add.w	r3, r7, #20
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f7f9 fb38 	bl	8005e1a <mbedtls_mpi_init>

    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	334c      	adds	r3, #76	@ 0x4c
 800c7ae:	2100      	movs	r1, #0
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f7f9 fd9f 	bl	80062f4 <mbedtls_mpi_get_bit>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	d001      	beq.n	800c7c0 <ecp_comb_recode_scalar+0x38>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800c7bc:	4b24      	ldr	r3, [pc, #144]	@ (800c850 <ecp_comb_recode_scalar+0xc8>)
 800c7be:	e043      	b.n	800c848 <ecp_comb_recode_scalar+0xc0>

    /* do we need the parity trick? */
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
 800c7c0:	2100      	movs	r1, #0
 800c7c2:	68b8      	ldr	r0, [r7, #8]
 800c7c4:	f7f9 fd96 	bl	80062f4 <mbedtls_mpi_get_bit>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	bf0c      	ite	eq
 800c7ce:	2301      	moveq	r3, #1
 800c7d0:	2300      	movne	r3, #0
 800c7d2:	b2db      	uxtb	r3, r3
 800c7d4:	461a      	mov	r2, r3
 800c7d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7d8:	701a      	strb	r2, [r3, #0]

    /* execute parity fix in constant time */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 800c7da:	f107 0320 	add.w	r3, r7, #32
 800c7de:	68b9      	ldr	r1, [r7, #8]
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7f9 fbfc 	bl	8005fde <mbedtls_mpi_copy>
 800c7e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d121      	bne.n	800c832 <ecp_comb_recode_scalar+0xaa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 800c7f4:	f107 0314 	add.w	r3, r7, #20
 800c7f8:	68ba      	ldr	r2, [r7, #8]
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7fa fcbd 	bl	800717a <mbedtls_mpi_sub_mpi>
 800c800:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c804:	2b00      	cmp	r3, #0
 800c806:	d114      	bne.n	800c832 <ecp_comb_recode_scalar+0xaa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, *parity_trick ) );
 800c808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c80a:	781a      	ldrb	r2, [r3, #0]
 800c80c:	f107 0114 	add.w	r1, r7, #20
 800c810:	f107 0320 	add.w	r3, r7, #32
 800c814:	4618      	mov	r0, r3
 800c816:	f7f9 fc3e 	bl	8006096 <mbedtls_mpi_safe_cond_assign>
 800c81a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d107      	bne.n	800c832 <ecp_comb_recode_scalar+0xaa>

    /* actual scalar recoding */
    ecp_comb_recode_core( k, d, w, &M );
 800c822:	f107 0320 	add.w	r3, r7, #32
 800c826:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c82a:	6839      	ldr	r1, [r7, #0]
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f7ff fd41 	bl	800c2b4 <ecp_comb_recode_core>

cleanup:
    mbedtls_mpi_free( &mm );
 800c832:	f107 0314 	add.w	r3, r7, #20
 800c836:	4618      	mov	r0, r3
 800c838:	f7f9 fb02 	bl	8005e40 <mbedtls_mpi_free>
    mbedtls_mpi_free( &M );
 800c83c:	f107 0320 	add.w	r3, r7, #32
 800c840:	4618      	mov	r0, r3
 800c842:	f7f9 fafd 	bl	8005e40 <mbedtls_mpi_free>

    return( ret );
 800c846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3730      	adds	r7, #48	@ 0x30
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	ffffb080 	.word	0xffffb080

0800c854 <ecp_mul_comb_after_precomp>:
                                unsigned char w,
                                size_t d,
                                int (*f_rng)(void *, unsigned char *, size_t),
                                void *p_rng,
                                mbedtls_ecp_restart_ctx *rs_ctx )
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b0be      	sub	sp, #248	@ 0xf8
 800c858:	af06      	add	r7, sp, #24
 800c85a:	60f8      	str	r0, [r7, #12]
 800c85c:	60b9      	str	r1, [r7, #8]
 800c85e:	607a      	str	r2, [r7, #4]
 800c860:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char parity_trick;
    unsigned char k[COMB_MAX_D + 1];
    mbedtls_ecp_point *RR = R;
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
        if( rs_ctx->rsm->state == ecp_rsm_final_norm )
            goto final_norm;
    }
#endif

    MBEDTLS_MPI_CHK( ecp_comb_recode_scalar( grp, m, k, d, w,
 800c868:	f107 0214 	add.w	r2, r7, #20
 800c86c:	f107 03d7 	add.w	r3, r7, #215	@ 0xd7
 800c870:	9301      	str	r3, [sp, #4]
 800c872:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 800c876:	9300      	str	r3, [sp, #0]
 800c878:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c87c:	6879      	ldr	r1, [r7, #4]
 800c87e:	68f8      	ldr	r0, [r7, #12]
 800c880:	f7ff ff82 	bl	800c788 <ecp_comb_recode_scalar>
 800c884:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
 800c888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d136      	bne.n	800c8fe <ecp_mul_comb_after_precomp+0xaa>
                                            &parity_trick ) );
    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, RR, T, T_size, k, d,
 800c890:	f897 20e8 	ldrb.w	r2, [r7, #232]	@ 0xe8
 800c894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c898:	9304      	str	r3, [sp, #16]
 800c89a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c89e:	9303      	str	r3, [sp, #12]
 800c8a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c8a4:	9302      	str	r3, [sp, #8]
 800c8a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c8aa:	9301      	str	r3, [sp, #4]
 800c8ac:	f107 0314 	add.w	r3, r7, #20
 800c8b0:	9300      	str	r3, [sp, #0]
 800c8b2:	4613      	mov	r3, r2
 800c8b4:	683a      	ldr	r2, [r7, #0]
 800c8b6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800c8ba:	68f8      	ldr	r0, [r7, #12]
 800c8bc:	f7ff fef7 	bl	800c6ae <ecp_mul_comb_core>
 800c8c0:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
 800c8c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d118      	bne.n	800c8fe <ecp_mul_comb_after_precomp+0xaa>
                                        f_rng, p_rng, rs_ctx ) );
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, RR, parity_trick ) );
 800c8cc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800c8d6:	68f8      	ldr	r0, [r7, #12]
 800c8d8:	f7fe fd58 	bl	800b38c <ecp_safe_invert_jac>
 800c8dc:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
 800c8e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d10a      	bne.n	800c8fe <ecp_mul_comb_after_precomp+0xaa>
        rs_ctx->rsm->state = ecp_rsm_final_norm;

final_norm:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV );
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, RR ) );
 800c8e8:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800c8ec:	68f8      	ldr	r0, [r7, #12]
 800c8ee:	f7fe fae3 	bl	800aeb8 <ecp_normalize_jac>
 800c8f2:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
 800c8f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c8fa:	2b00      	cmp	r3, #0
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL && rs_ctx->rsm != NULL )
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, RR ) );
#endif

cleanup:
 800c8fc:	bf00      	nop
    return( ret );
 800c8fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
}
 800c902:	4618      	mov	r0, r3
 800c904:	37e0      	adds	r7, #224	@ 0xe0
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <ecp_pick_window_size>:
/*
 * Pick window size based on curve size and whether we optimize for base point
 */
static unsigned char ecp_pick_window_size( const mbedtls_ecp_group *grp,
                                           unsigned char p_eq_g )
{
 800c90a:	b480      	push	{r7}
 800c90c:	b085      	sub	sp, #20
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
 800c912:	460b      	mov	r3, r1
 800c914:	70fb      	strb	r3, [r7, #3]
    /*
     * Minimize the number of multiplications, that is minimize
     * 10 * d * w + 18 * 2^(w-1) + 11 * d + 7 * w, with d = ceil( nbits / w )
     * (see costs of the various parts, with 1S = 1M)
     */
    w = grp->nbits >= 384 ? 5 : 4;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c91a:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 800c91e:	d301      	bcc.n	800c924 <ecp_pick_window_size+0x1a>
 800c920:	2305      	movs	r3, #5
 800c922:	e000      	b.n	800c926 <ecp_pick_window_size+0x1c>
 800c924:	2304      	movs	r3, #4
 800c926:	73fb      	strb	r3, [r7, #15]
    /*
     * If P == G, pre-compute a bit more, since this may be re-used later.
     * Just adding one avoids upping the cost of the first mul too much,
     * and the memory cost too.
     */
    if( p_eq_g )
 800c928:	78fb      	ldrb	r3, [r7, #3]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d002      	beq.n	800c934 <ecp_pick_window_size+0x2a>
        w++;
 800c92e:	7bfb      	ldrb	r3, [r7, #15]
 800c930:	3301      	adds	r3, #1
 800c932:	73fb      	strb	r3, [r7, #15]

    /*
     * Make sure w is within bounds.
     * (The last test is useful only for very small curves in the test suite.)
     */
    if( w > MBEDTLS_ECP_WINDOW_SIZE )
 800c934:	7bfb      	ldrb	r3, [r7, #15]
 800c936:	2b02      	cmp	r3, #2
 800c938:	d901      	bls.n	800c93e <ecp_pick_window_size+0x34>
        w = MBEDTLS_ECP_WINDOW_SIZE;
 800c93a:	2302      	movs	r3, #2
 800c93c:	73fb      	strb	r3, [r7, #15]
    if( w >= grp->nbits )
 800c93e:	7bfa      	ldrb	r2, [r7, #15]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c944:	429a      	cmp	r2, r3
 800c946:	d301      	bcc.n	800c94c <ecp_pick_window_size+0x42>
        w = 2;
 800c948:	2302      	movs	r3, #2
 800c94a:	73fb      	strb	r3, [r7, #15]

    return( w );
 800c94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3714      	adds	r7, #20
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr
	...

0800c95c <ecp_mul_comb>:
static int ecp_mul_comb( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                         const mbedtls_mpi *m, const mbedtls_ecp_point *P,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng,
                         mbedtls_ecp_restart_ctx *rs_ctx )
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b090      	sub	sp, #64	@ 0x40
 800c960:	af06      	add	r7, sp, #24
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	607a      	str	r2, [r7, #4]
 800c968:	603b      	str	r3, [r7, #0]
    /* Is P the base point ? */
#if MBEDTLS_ECP_FIXED_POINT_OPTIM == 1
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
               mbedtls_mpi_cmp_mpi( &P->X, &grp->G.X ) == 0 );
#else
    p_eq_g = 0;
 800c96a:	2300      	movs	r3, #0
 800c96c:	76fb      	strb	r3, [r7, #27]
#endif

    /* Pick window size and deduce related sizes */
    w = ecp_pick_window_size( grp, p_eq_g );
 800c96e:	7efb      	ldrb	r3, [r7, #27]
 800c970:	4619      	mov	r1, r3
 800c972:	68f8      	ldr	r0, [r7, #12]
 800c974:	f7ff ffc9 	bl	800c90a <ecp_pick_window_size>
 800c978:	4603      	mov	r3, r0
 800c97a:	76bb      	strb	r3, [r7, #26]
    T_size = 1U << ( w - 1 );
 800c97c:	7ebb      	ldrb	r3, [r7, #26]
 800c97e:	3b01      	subs	r3, #1
 800c980:	2201      	movs	r2, #1
 800c982:	fa02 f303 	lsl.w	r3, r2, r3
 800c986:	767b      	strb	r3, [r7, #25]
    d = ( grp->nbits + w - 1 ) / w;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c98c:	7ebb      	ldrb	r3, [r7, #26]
 800c98e:	4413      	add	r3, r2
 800c990:	1e5a      	subs	r2, r3, #1
 800c992:	7ebb      	ldrb	r3, [r7, #26]
 800c994:	fbb2 f3f3 	udiv	r3, r2, r3
 800c998:	617b      	str	r3, [r7, #20]

    /* Pre-computed table: do we have it already for the base point? */
    if( p_eq_g && grp->T != NULL )
 800c99a:	7efb      	ldrb	r3, [r7, #27]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d00a      	beq.n	800c9b6 <ecp_mul_comb+0x5a>
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d006      	beq.n	800c9b6 <ecp_mul_comb+0x5a>
    {
        /* second pointer to the same table, will be deleted on exit */
        T = grp->T;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c9ac:	61fb      	str	r3, [r7, #28]
        T_ok = 1;
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c9b4:	e029      	b.n	800ca0a <ecp_mul_comb+0xae>
    }
    else
#endif
    /* Allocate table if we didn't have any */
    {
        T = mbedtls_calloc( T_size, sizeof( mbedtls_ecp_point ) );
 800c9b6:	7e7b      	ldrb	r3, [r7, #25]
 800c9b8:	2124      	movs	r1, #36	@ 0x24
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f009 fdc2 	bl	8016544 <calloc>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	61fb      	str	r3, [r7, #28]
        if( T == NULL )
 800c9c4:	69fb      	ldr	r3, [r7, #28]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d102      	bne.n	800c9d0 <ecp_mul_comb+0x74>
        {
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
 800c9ca:	4b42      	ldr	r3, [pc, #264]	@ (800cad4 <ecp_mul_comb+0x178>)
 800c9cc:	627b      	str	r3, [r7, #36]	@ 0x24
            goto cleanup;
 800c9ce:	e04e      	b.n	800ca6e <ecp_mul_comb+0x112>
        }

        for( i = 0; i < T_size; i++ )
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9d6:	e010      	b.n	800c9fa <ecp_mul_comb+0x9e>
            mbedtls_ecp_point_init( &T[i] );
 800c9d8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800c9dc:	4613      	mov	r3, r2
 800c9de:	00db      	lsls	r3, r3, #3
 800c9e0:	4413      	add	r3, r2
 800c9e2:	009b      	lsls	r3, r3, #2
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	69fb      	ldr	r3, [r7, #28]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f7fe f81e 	bl	800aa2c <mbedtls_ecp_point_init>
        for( i = 0; i < T_size; i++ )
 800c9f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9fa:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800c9fe:	7e7b      	ldrb	r3, [r7, #25]
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d3e9      	bcc.n	800c9d8 <ecp_mul_comb+0x7c>

        T_ok = 0;
 800ca04:	2300      	movs	r3, #0
 800ca06:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    }

    /* Compute table (or finish computing it) if not done already */
    if( !T_ok )
 800ca0a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d117      	bne.n	800ca42 <ecp_mul_comb+0xe6>
    {
        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d, rs_ctx ) );
 800ca12:	7eba      	ldrb	r2, [r7, #26]
 800ca14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca16:	9301      	str	r3, [sp, #4]
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	9300      	str	r3, [sp, #0]
 800ca1c:	4613      	mov	r3, r2
 800ca1e:	683a      	ldr	r2, [r7, #0]
 800ca20:	69f9      	ldr	r1, [r7, #28]
 800ca22:	68f8      	ldr	r0, [r7, #12]
 800ca24:	f7ff fcf2 	bl	800c40c <ecp_precompute_comb>
 800ca28:	6278      	str	r0, [r7, #36]	@ 0x24
 800ca2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d11e      	bne.n	800ca6e <ecp_mul_comb+0x112>

        if( p_eq_g )
 800ca30:	7efb      	ldrb	r3, [r7, #27]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d005      	beq.n	800ca42 <ecp_mul_comb+0xe6>
        {
            /* almost transfer ownership of T to the group, but keep a copy of
             * the pointer to use for calling the next function more easily */
            grp->T = T;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	69fa      	ldr	r2, [r7, #28]
 800ca3a:	675a      	str	r2, [r3, #116]	@ 0x74
            grp->T_size = T_size;
 800ca3c:	7e7a      	ldrb	r2, [r7, #25]
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	679a      	str	r2, [r3, #120]	@ 0x78
        }
    }

    /* Actual comb multiplication using precomputed points */
    MBEDTLS_MPI_CHK( ecp_mul_comb_after_precomp( grp, R, m,
 800ca42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca44:	9305      	str	r3, [sp, #20]
 800ca46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca48:	9304      	str	r3, [sp, #16]
 800ca4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca4c:	9303      	str	r3, [sp, #12]
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	9302      	str	r3, [sp, #8]
 800ca52:	7ebb      	ldrb	r3, [r7, #26]
 800ca54:	9301      	str	r3, [sp, #4]
 800ca56:	7e7b      	ldrb	r3, [r7, #25]
 800ca58:	9300      	str	r3, [sp, #0]
 800ca5a:	69fb      	ldr	r3, [r7, #28]
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	68b9      	ldr	r1, [r7, #8]
 800ca60:	68f8      	ldr	r0, [r7, #12]
 800ca62:	f7ff fef7 	bl	800c854 <ecp_mul_comb_after_precomp>
 800ca66:	6278      	str	r0, [r7, #36]	@ 0x24
 800ca68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca6a:	2b00      	cmp	r3, #0
                                                 T, T_size, w, d,
                                                 f_rng, p_rng, rs_ctx ) );

cleanup:
 800ca6c:	bf00      	nop

    /* does T belong to the group? */
    if( T == grp->T )
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca72:	69fa      	ldr	r2, [r7, #28]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d101      	bne.n	800ca7c <ecp_mul_comb+0x120>
        T = NULL;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	61fb      	str	r3, [r7, #28]
        T = NULL;
    }
#endif

    /* did T belong to us? then let's destroy it! */
    if( T != NULL )
 800ca7c:	69fb      	ldr	r3, [r7, #28]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d01c      	beq.n	800cabc <ecp_mul_comb+0x160>
    {
        for( i = 0; i < T_size; i++ )
 800ca82:	2300      	movs	r3, #0
 800ca84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca88:	e010      	b.n	800caac <ecp_mul_comb+0x150>
            mbedtls_ecp_point_free( &T[i] );
 800ca8a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800ca8e:	4613      	mov	r3, r2
 800ca90:	00db      	lsls	r3, r3, #3
 800ca92:	4413      	add	r3, r2
 800ca94:	009b      	lsls	r3, r3, #2
 800ca96:	461a      	mov	r2, r3
 800ca98:	69fb      	ldr	r3, [r7, #28]
 800ca9a:	4413      	add	r3, r2
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7fe f830 	bl	800ab02 <mbedtls_ecp_point_free>
        for( i = 0; i < T_size; i++ )
 800caa2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800caa6:	3301      	adds	r3, #1
 800caa8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800caac:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800cab0:	7e7b      	ldrb	r3, [r7, #25]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d3e9      	bcc.n	800ca8a <ecp_mul_comb+0x12e>
        mbedtls_free( T );
 800cab6:	69f8      	ldr	r0, [r7, #28]
 800cab8:	f009 fd60 	bl	801657c <free>
    /* don't free R while in progress in case R == P */
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( ret != MBEDTLS_ERR_ECP_IN_PROGRESS )
#endif
    /* prevent caller from using invalid value */
    if( ret != 0 )
 800cabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d002      	beq.n	800cac8 <ecp_mul_comb+0x16c>
        mbedtls_ecp_point_free( R );
 800cac2:	68b8      	ldr	r0, [r7, #8]
 800cac4:	f7fe f81d 	bl	800ab02 <mbedtls_ecp_point_free>

    ECP_RS_LEAVE( rsm );

    return( ret );
 800cac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3728      	adds	r7, #40	@ 0x28
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
 800cad2:	bf00      	nop
 800cad4:	ffffb280 	.word	0xffffb280

0800cad8 <ecp_normalize_mxz>:
/*
 * Normalize Montgomery x/z coordinates: X = X/Z, Z = 1
 * Cost: 1M + 1I
 */
static int ecp_normalize_mxz( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P )
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
#if defined(MBEDTLS_ECP_NORMALIZE_MXZ_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_mxz( grp, P ) );
#endif /* MBEDTLS_ECP_NORMALIZE_MXZ_ALT */

    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &P->Z, &P->Z, &grp->P ) );
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	f103 0018 	add.w	r0, r3, #24
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	f103 0118 	add.w	r1, r3, #24
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	3304      	adds	r3, #4
 800caf2:	461a      	mov	r2, r3
 800caf4:	f7fc fd0f 	bl	8009516 <mbedtls_mpi_inv_mod>
 800caf8:	60f8      	str	r0, [r7, #12]
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d11d      	bne.n	800cb3c <ecp_normalize_mxz+0x64>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &P->Z ) ); MOD_MUL( P->X );
 800cb00:	6838      	ldr	r0, [r7, #0]
 800cb02:	6839      	ldr	r1, [r7, #0]
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	3318      	adds	r3, #24
 800cb08:	461a      	mov	r2, r3
 800cb0a:	f7fb ff6b 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d112      	bne.n	800cb3c <ecp_normalize_mxz+0x64>
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	6879      	ldr	r1, [r7, #4]
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7fe f968 	bl	800adf0 <ecp_modp>
 800cb20:	60f8      	str	r0, [r7, #12]
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d109      	bne.n	800cb3c <ecp_normalize_mxz+0x64>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &P->Z, 1 ) );
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	3318      	adds	r3, #24
 800cb2c:	2101      	movs	r1, #1
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7f9 fbb4 	bl	800629c <mbedtls_mpi_lset>
 800cb34:	60f8      	str	r0, [r7, #12]
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	2b00      	cmp	r3, #0

cleanup:
 800cb3a:	bf00      	nop
    return( ret );
 800cb3c:	68fb      	ldr	r3, [r7, #12]
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3710      	adds	r7, #16
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
	...

0800cb48 <ecp_randomize_mxz>:
 * This countermeasure was first suggested in [2].
 * Cost: 2M
 */
static int ecp_randomize_mxz( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b08a      	sub	sp, #40	@ 0x28
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	607a      	str	r2, [r7, #4]
 800cb54:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi l;
    size_t p_size;
    int count = 0;
 800cb56:	2300      	movs	r3, #0
 800cb58:	623b      	str	r3, [r7, #32]
#if defined(MBEDTLS_ECP_RANDOMIZE_MXZ_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_randomize_mxz( grp, P, f_rng, p_rng );
#endif /* MBEDTLS_ECP_RANDOMIZE_MXZ_ALT */

    p_size = ( grp->pbits + 7 ) / 8;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb5e:	3307      	adds	r3, #7
 800cb60:	08db      	lsrs	r3, r3, #3
 800cb62:	61fb      	str	r3, [r7, #28]
    mbedtls_mpi_init( &l );
 800cb64:	f107 0310 	add.w	r3, r7, #16
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f7f9 f956 	bl	8005e1a <mbedtls_mpi_init>

    /* Generate l such that 1 < l < p */
    do
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 800cb6e:	f107 0010 	add.w	r0, r7, #16
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	687a      	ldr	r2, [r7, #4]
 800cb76:	69f9      	ldr	r1, [r7, #28]
 800cb78:	f7fc fc85 	bl	8009486 <mbedtls_mpi_fill_random>
 800cb7c:	6278      	str	r0, [r7, #36]	@ 0x24
 800cb7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d151      	bne.n	800cc28 <ecp_randomize_mxz+0xe0>

        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 800cb84:	e009      	b.n	800cb9a <ecp_randomize_mxz+0x52>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 800cb86:	f107 0310 	add.w	r3, r7, #16
 800cb8a:	2101      	movs	r1, #1
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7f9 ff6d 	bl	8006a6c <mbedtls_mpi_shift_r>
 800cb92:	6278      	str	r0, [r7, #36]	@ 0x24
 800cb94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d146      	bne.n	800cc28 <ecp_randomize_mxz+0xe0>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	1d1a      	adds	r2, r3, #4
 800cb9e:	f107 0310 	add.w	r3, r7, #16
 800cba2:	4611      	mov	r1, r2
 800cba4:	4618      	mov	r0, r3
 800cba6:	f7fa f87e 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	daea      	bge.n	800cb86 <ecp_randomize_mxz+0x3e>

        if( count++ > 10 )
 800cbb0:	6a3b      	ldr	r3, [r7, #32]
 800cbb2:	1c5a      	adds	r2, r3, #1
 800cbb4:	623a      	str	r2, [r7, #32]
 800cbb6:	2b0a      	cmp	r3, #10
 800cbb8:	dd01      	ble.n	800cbbe <ecp_randomize_mxz+0x76>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 800cbba:	4b20      	ldr	r3, [pc, #128]	@ (800cc3c <ecp_randomize_mxz+0xf4>)
 800cbbc:	e03a      	b.n	800cc34 <ecp_randomize_mxz+0xec>
    }
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
 800cbbe:	f107 0310 	add.w	r3, r7, #16
 800cbc2:	2101      	movs	r1, #1
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f7fa f909 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	ddce      	ble.n	800cb6e <ecp_randomize_mxz+0x26>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &l ) ); MOD_MUL( P->X );
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	68b9      	ldr	r1, [r7, #8]
 800cbd4:	f107 0210 	add.w	r2, r7, #16
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7fb ff03 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800cbde:	6278      	str	r0, [r7, #36]	@ 0x24
 800cbe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d120      	bne.n	800cc28 <ecp_randomize_mxz+0xe0>
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	68f9      	ldr	r1, [r7, #12]
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7fe f900 	bl	800adf0 <ecp_modp>
 800cbf0:	6278      	str	r0, [r7, #36]	@ 0x24
 800cbf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d117      	bne.n	800cc28 <ecp_randomize_mxz+0xe0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->Z, &P->Z, &l ) ); MOD_MUL( P->Z );
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	f103 0018 	add.w	r0, r3, #24
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	3318      	adds	r3, #24
 800cc02:	f107 0210 	add.w	r2, r7, #16
 800cc06:	4619      	mov	r1, r3
 800cc08:	f7fb feec 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800cc0c:	6278      	str	r0, [r7, #36]	@ 0x24
 800cc0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d109      	bne.n	800cc28 <ecp_randomize_mxz+0xe0>
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	3318      	adds	r3, #24
 800cc18:	68f9      	ldr	r1, [r7, #12]
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7fe f8e8 	bl	800adf0 <ecp_modp>
 800cc20:	6278      	str	r0, [r7, #36]	@ 0x24
 800cc22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc24:	2b00      	cmp	r3, #0

cleanup:
 800cc26:	bf00      	nop
    mbedtls_mpi_free( &l );
 800cc28:	f107 0310 	add.w	r3, r7, #16
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7f9 f907 	bl	8005e40 <mbedtls_mpi_free>

    return( ret );
 800cc32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3728      	adds	r7, #40	@ 0x28
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}
 800cc3c:	ffffb300 	.word	0xffffb300

0800cc40 <ecp_double_add_mxz>:
 */
static int ecp_double_add_mxz( const mbedtls_ecp_group *grp,
                               mbedtls_ecp_point *R, mbedtls_ecp_point *S,
                               const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q,
                               const mbedtls_mpi *d )
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b0a0      	sub	sp, #128	@ 0x80
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	60f8      	str	r0, [r7, #12]
 800cc48:	60b9      	str	r1, [r7, #8]
 800cc4a:	607a      	str	r2, [r7, #4]
 800cc4c:	603b      	str	r3, [r7, #0]
#if defined(MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_double_add_mxz( grp, R, S, P, Q, d ) );
#endif /* MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT */

    mbedtls_mpi_init( &A ); mbedtls_mpi_init( &AA ); mbedtls_mpi_init( &B );
 800cc4e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7f9 f8e1 	bl	8005e1a <mbedtls_mpi_init>
 800cc58:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f7f9 f8dc 	bl	8005e1a <mbedtls_mpi_init>
 800cc62:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7f9 f8d7 	bl	8005e1a <mbedtls_mpi_init>
    mbedtls_mpi_init( &BB ); mbedtls_mpi_init( &E ); mbedtls_mpi_init( &C );
 800cc6c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7f9 f8d2 	bl	8005e1a <mbedtls_mpi_init>
 800cc76:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f7f9 f8cd 	bl	8005e1a <mbedtls_mpi_init>
 800cc80:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800cc84:	4618      	mov	r0, r3
 800cc86:	f7f9 f8c8 	bl	8005e1a <mbedtls_mpi_init>
    mbedtls_mpi_init( &D ); mbedtls_mpi_init( &DA ); mbedtls_mpi_init( &CB );
 800cc8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7f9 f8c3 	bl	8005e1a <mbedtls_mpi_init>
 800cc94:	f107 031c 	add.w	r3, r7, #28
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7f9 f8be 	bl	8005e1a <mbedtls_mpi_init>
 800cc9e:	f107 0310 	add.w	r3, r7, #16
 800cca2:	4618      	mov	r0, r3
 800cca4:	f7f9 f8b9 	bl	8005e1a <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &A,    &P->X,   &P->Z ) ); MOD_ADD( A    );
 800cca8:	6839      	ldr	r1, [r7, #0]
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	f103 0218 	add.w	r2, r3, #24
 800ccb0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f7fa fa1c 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800ccba:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800ccbc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	f040 8221 	bne.w	800d106 <ecp_double_add_mxz+0x4c6>
 800ccc4:	e00d      	b.n	800cce2 <ecp_double_add_mxz+0xa2>
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	1d1a      	adds	r2, r3, #4
 800ccca:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800ccce:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7fa f9ad 	bl	8007032 <mbedtls_mpi_sub_abs>
 800ccd8:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800ccda:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	f040 8212 	bne.w	800d106 <ecp_double_add_mxz+0x4c6>
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	1d1a      	adds	r2, r3, #4
 800cce6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800ccea:	4611      	mov	r1, r2
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7f9 ffda 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	dae6      	bge.n	800ccc6 <ecp_double_add_mxz+0x86>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &AA,   &A,      &A    ) ); MOD_MUL( AA   );
 800ccf8:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800ccfc:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800cd00:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800cd04:	4618      	mov	r0, r3
 800cd06:	f7fb fe6d 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800cd0a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800cd0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	f040 81f9 	bne.w	800d106 <ecp_double_add_mxz+0x4c6>
 800cd14:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800cd18:	68f9      	ldr	r1, [r7, #12]
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f7fe f868 	bl	800adf0 <ecp_modp>
 800cd20:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800cd22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f040 81ee 	bne.w	800d106 <ecp_double_add_mxz+0x4c6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &B,    &P->X,   &P->Z ) ); MOD_SUB( B    );
 800cd2a:	6839      	ldr	r1, [r7, #0]
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	f103 0218 	add.w	r2, r3, #24
 800cd32:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7fa fa1f 	bl	800717a <mbedtls_mpi_sub_mpi>
 800cd3c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800cd3e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	f040 81e0 	bne.w	800d106 <ecp_double_add_mxz+0x4c6>
 800cd46:	e00d      	b.n	800cd64 <ecp_double_add_mxz+0x124>
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	1d1a      	adds	r2, r3, #4
 800cd4c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800cd50:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800cd54:	4618      	mov	r0, r3
 800cd56:	f7fa f9cc 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800cd5a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800cd5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	f040 81d1 	bne.w	800d106 <ecp_double_add_mxz+0x4c6>
 800cd64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	da08      	bge.n	800cd7c <ecp_double_add_mxz+0x13c>
 800cd6a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800cd6e:	2100      	movs	r1, #0
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7fa f833 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d1e5      	bne.n	800cd48 <ecp_double_add_mxz+0x108>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &BB,   &B,      &B    ) ); MOD_MUL( BB   );
 800cd7c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800cd80:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800cd84:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f7fb fe2b 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800cd8e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800cd90:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	f040 81b7 	bne.w	800d106 <ecp_double_add_mxz+0x4c6>
 800cd98:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800cd9c:	68f9      	ldr	r1, [r7, #12]
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7fe f826 	bl	800adf0 <ecp_modp>
 800cda4:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800cda6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	f040 81ac 	bne.w	800d106 <ecp_double_add_mxz+0x4c6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &E,    &AA,     &BB   ) ); MOD_SUB( E    );
 800cdae:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800cdb2:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 800cdb6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7fa f9dd 	bl	800717a <mbedtls_mpi_sub_mpi>
 800cdc0:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800cdc2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	f040 819e 	bne.w	800d106 <ecp_double_add_mxz+0x4c6>
 800cdca:	e00d      	b.n	800cde8 <ecp_double_add_mxz+0x1a8>
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	1d1a      	adds	r2, r3, #4
 800cdd0:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800cdd4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7fa f98a 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800cdde:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800cde0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	f040 818f 	bne.w	800d106 <ecp_double_add_mxz+0x4c6>
 800cde8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	da08      	bge.n	800ce00 <ecp_double_add_mxz+0x1c0>
 800cdee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800cdf2:	2100      	movs	r1, #0
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f7f9 fff1 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d1e5      	bne.n	800cdcc <ecp_double_add_mxz+0x18c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &C,    &Q->X,   &Q->Z ) ); MOD_ADD( C    );
 800ce00:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800ce04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ce08:	f103 0218 	add.w	r2, r3, #24
 800ce0c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7fa f96e 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800ce16:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800ce18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	f040 8173 	bne.w	800d106 <ecp_double_add_mxz+0x4c6>
 800ce20:	e00d      	b.n	800ce3e <ecp_double_add_mxz+0x1fe>
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	1d1a      	adds	r2, r3, #4
 800ce26:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800ce2a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7fa f8ff 	bl	8007032 <mbedtls_mpi_sub_abs>
 800ce34:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800ce36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	f040 8164 	bne.w	800d106 <ecp_double_add_mxz+0x4c6>
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	1d1a      	adds	r2, r3, #4
 800ce42:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800ce46:	4611      	mov	r1, r2
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f7f9 ff2c 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	dae6      	bge.n	800ce22 <ecp_double_add_mxz+0x1e2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &D,    &Q->X,   &Q->Z ) ); MOD_SUB( D    );
 800ce54:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800ce58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ce5c:	f103 0218 	add.w	r2, r3, #24
 800ce60:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ce64:	4618      	mov	r0, r3
 800ce66:	f7fa f988 	bl	800717a <mbedtls_mpi_sub_mpi>
 800ce6a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800ce6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	f040 8149 	bne.w	800d106 <ecp_double_add_mxz+0x4c6>
 800ce74:	e00d      	b.n	800ce92 <ecp_double_add_mxz+0x252>
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	1d1a      	adds	r2, r3, #4
 800ce7a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800ce7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ce82:	4618      	mov	r0, r3
 800ce84:	f7fa f935 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800ce88:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800ce8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	f040 813a 	bne.w	800d106 <ecp_double_add_mxz+0x4c6>
 800ce92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	da08      	bge.n	800ceaa <ecp_double_add_mxz+0x26a>
 800ce98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ce9c:	2100      	movs	r1, #0
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7f9 ff9c 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d1e5      	bne.n	800ce76 <ecp_double_add_mxz+0x236>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DA,   &D,      &A    ) ); MOD_MUL( DA   );
 800ceaa:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800ceae:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800ceb2:	f107 031c 	add.w	r3, r7, #28
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f7fb fd94 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800cebc:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800cebe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	f040 8120 	bne.w	800d106 <ecp_double_add_mxz+0x4c6>
 800cec6:	f107 031c 	add.w	r3, r7, #28
 800ceca:	68f9      	ldr	r1, [r7, #12]
 800cecc:	4618      	mov	r0, r3
 800cece:	f7fd ff8f 	bl	800adf0 <ecp_modp>
 800ced2:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800ced4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	f040 8115 	bne.w	800d106 <ecp_double_add_mxz+0x4c6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &CB,   &C,      &B    ) ); MOD_MUL( CB   );
 800cedc:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800cee0:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800cee4:	f107 0310 	add.w	r3, r7, #16
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7fb fd7b 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800ceee:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800cef0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	f040 8107 	bne.w	800d106 <ecp_double_add_mxz+0x4c6>
 800cef8:	f107 0310 	add.w	r3, r7, #16
 800cefc:	68f9      	ldr	r1, [r7, #12]
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7fd ff76 	bl	800adf0 <ecp_modp>
 800cf04:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800cf06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	f040 80fc 	bne.w	800d106 <ecp_double_add_mxz+0x4c6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &S->X, &DA,     &CB   ) ); MOD_MUL( S->X );
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f107 0210 	add.w	r2, r7, #16
 800cf14:	f107 011c 	add.w	r1, r7, #28
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7fa f8ea 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800cf1e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800cf20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	f040 80ef 	bne.w	800d106 <ecp_double_add_mxz+0x4c6>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	68f9      	ldr	r1, [r7, #12]
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7fd ff5f 	bl	800adf0 <ecp_modp>
 800cf32:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800cf34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	f040 80e5 	bne.w	800d106 <ecp_double_add_mxz+0x4c6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->X, &S->X,   &S->X ) ); MOD_MUL( S->X );
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6879      	ldr	r1, [r7, #4]
 800cf40:	687a      	ldr	r2, [r7, #4]
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7fb fd4e 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800cf48:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800cf4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	f040 80da 	bne.w	800d106 <ecp_double_add_mxz+0x4c6>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	68f9      	ldr	r1, [r7, #12]
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7fd ff4a 	bl	800adf0 <ecp_modp>
 800cf5c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800cf5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	f040 80d0 	bne.w	800d106 <ecp_double_add_mxz+0x4c6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S->Z, &DA,     &CB   ) ); MOD_SUB( S->Z );
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	3318      	adds	r3, #24
 800cf6a:	f107 0210 	add.w	r2, r7, #16
 800cf6e:	f107 011c 	add.w	r1, r7, #28
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7fa f901 	bl	800717a <mbedtls_mpi_sub_mpi>
 800cf78:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800cf7a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	f040 80c2 	bne.w	800d106 <ecp_double_add_mxz+0x4c6>
 800cf82:	e00f      	b.n	800cfa4 <ecp_double_add_mxz+0x364>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f103 0018 	add.w	r0, r3, #24
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f103 0118 	add.w	r1, r3, #24
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	3304      	adds	r3, #4
 800cf94:	461a      	mov	r2, r3
 800cf96:	f7fa f8ac 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800cf9a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800cf9c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	f040 80b1 	bne.w	800d106 <ecp_double_add_mxz+0x4c6>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	699b      	ldr	r3, [r3, #24]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	da08      	bge.n	800cfbe <ecp_double_add_mxz+0x37e>
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	3318      	adds	r3, #24
 800cfb0:	2100      	movs	r1, #0
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7f9 ff12 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d1e2      	bne.n	800cf84 <ecp_double_add_mxz+0x344>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, &S->Z,   &S->Z ) ); MOD_MUL( S->Z );
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f103 0018 	add.w	r0, r3, #24
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f103 0118 	add.w	r1, r3, #24
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	3318      	adds	r3, #24
 800cfce:	461a      	mov	r2, r3
 800cfd0:	f7fb fd08 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800cfd4:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800cfd6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	f040 8094 	bne.w	800d106 <ecp_double_add_mxz+0x4c6>
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	3318      	adds	r3, #24
 800cfe2:	68f9      	ldr	r1, [r7, #12]
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f7fd ff03 	bl	800adf0 <ecp_modp>
 800cfea:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800cfec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	f040 8089 	bne.w	800d106 <ecp_double_add_mxz+0x4c6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, d,       &S->Z ) ); MOD_MUL( S->Z );
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f103 0018 	add.w	r0, r3, #24
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	3318      	adds	r3, #24
 800cffe:	461a      	mov	r2, r3
 800d000:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800d004:	f7fb fcee 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800d008:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d00a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d17a      	bne.n	800d106 <ecp_double_add_mxz+0x4c6>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	3318      	adds	r3, #24
 800d014:	68f9      	ldr	r1, [r7, #12]
 800d016:	4618      	mov	r0, r3
 800d018:	f7fd feea 	bl	800adf0 <ecp_modp>
 800d01c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d01e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d020:	2b00      	cmp	r3, #0
 800d022:	d170      	bne.n	800d106 <ecp_double_add_mxz+0x4c6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->X, &AA,     &BB   ) ); MOD_MUL( R->X );
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800d02a:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 800d02e:	4618      	mov	r0, r3
 800d030:	f7fb fcd8 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800d034:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d036:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d164      	bne.n	800d106 <ecp_double_add_mxz+0x4c6>
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	68f9      	ldr	r1, [r7, #12]
 800d040:	4618      	mov	r0, r3
 800d042:	f7fd fed5 	bl	800adf0 <ecp_modp>
 800d046:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d048:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d15b      	bne.n	800d106 <ecp_double_add_mxz+0x4c6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &grp->A, &E    ) ); MOD_MUL( R->Z );
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	f103 0018 	add.w	r0, r3, #24
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	3310      	adds	r3, #16
 800d058:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800d05c:	4619      	mov	r1, r3
 800d05e:	f7fb fcc1 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800d062:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d064:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d066:	2b00      	cmp	r3, #0
 800d068:	d14d      	bne.n	800d106 <ecp_double_add_mxz+0x4c6>
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	3318      	adds	r3, #24
 800d06e:	68f9      	ldr	r1, [r7, #12]
 800d070:	4618      	mov	r0, r3
 800d072:	f7fd febd 	bl	800adf0 <ecp_modp>
 800d076:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d078:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d143      	bne.n	800d106 <ecp_double_add_mxz+0x4c6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &R->Z, &BB,     &R->Z ) ); MOD_ADD( R->Z );
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	f103 0018 	add.w	r0, r3, #24
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	f103 0218 	add.w	r2, r3, #24
 800d08a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d08e:	4619      	mov	r1, r3
 800d090:	f7fa f82f 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800d094:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d096:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d134      	bne.n	800d106 <ecp_double_add_mxz+0x4c6>
 800d09c:	e00e      	b.n	800d0bc <ecp_double_add_mxz+0x47c>
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	f103 0018 	add.w	r0, r3, #24
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	f103 0118 	add.w	r1, r3, #24
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	3304      	adds	r3, #4
 800d0ae:	461a      	mov	r2, r3
 800d0b0:	f7f9 ffbf 	bl	8007032 <mbedtls_mpi_sub_abs>
 800d0b4:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d0b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d124      	bne.n	800d106 <ecp_double_add_mxz+0x4c6>
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	f103 0218 	add.w	r2, r3, #24
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	3304      	adds	r3, #4
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	4610      	mov	r0, r2
 800d0ca:	f7f9 fdec 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	dae4      	bge.n	800d09e <ecp_double_add_mxz+0x45e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &E,      &R->Z ) ); MOD_MUL( R->Z );
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	f103 0018 	add.w	r0, r3, #24
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	f103 0218 	add.w	r2, r3, #24
 800d0e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d0e4:	4619      	mov	r1, r3
 800d0e6:	f7fb fc7d 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800d0ea:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d0ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d109      	bne.n	800d106 <ecp_double_add_mxz+0x4c6>
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	3318      	adds	r3, #24
 800d0f6:	68f9      	ldr	r1, [r7, #12]
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7fd fe79 	bl	800adf0 <ecp_modp>
 800d0fe:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d100:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d102:	2b00      	cmp	r3, #0

cleanup:
 800d104:	bf00      	nop
    mbedtls_mpi_free( &A ); mbedtls_mpi_free( &AA ); mbedtls_mpi_free( &B );
 800d106:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7f8 fe98 	bl	8005e40 <mbedtls_mpi_free>
 800d110:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800d114:	4618      	mov	r0, r3
 800d116:	f7f8 fe93 	bl	8005e40 <mbedtls_mpi_free>
 800d11a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800d11e:	4618      	mov	r0, r3
 800d120:	f7f8 fe8e 	bl	8005e40 <mbedtls_mpi_free>
    mbedtls_mpi_free( &BB ); mbedtls_mpi_free( &E ); mbedtls_mpi_free( &C );
 800d124:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d128:	4618      	mov	r0, r3
 800d12a:	f7f8 fe89 	bl	8005e40 <mbedtls_mpi_free>
 800d12e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d132:	4618      	mov	r0, r3
 800d134:	f7f8 fe84 	bl	8005e40 <mbedtls_mpi_free>
 800d138:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d13c:	4618      	mov	r0, r3
 800d13e:	f7f8 fe7f 	bl	8005e40 <mbedtls_mpi_free>
    mbedtls_mpi_free( &D ); mbedtls_mpi_free( &DA ); mbedtls_mpi_free( &CB );
 800d142:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d146:	4618      	mov	r0, r3
 800d148:	f7f8 fe7a 	bl	8005e40 <mbedtls_mpi_free>
 800d14c:	f107 031c 	add.w	r3, r7, #28
 800d150:	4618      	mov	r0, r3
 800d152:	f7f8 fe75 	bl	8005e40 <mbedtls_mpi_free>
 800d156:	f107 0310 	add.w	r3, r7, #16
 800d15a:	4618      	mov	r0, r3
 800d15c:	f7f8 fe70 	bl	8005e40 <mbedtls_mpi_free>

    return( ret );
 800d160:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
}
 800d162:	4618      	mov	r0, r3
 800d164:	3780      	adds	r7, #128	@ 0x80
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}

0800d16a <ecp_mul_mxz>:
 */
static int ecp_mul_mxz( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                        const mbedtls_mpi *m, const mbedtls_ecp_point *P,
                        int (*f_rng)(void *, unsigned char *, size_t),
                        void *p_rng )
{
 800d16a:	b580      	push	{r7, lr}
 800d16c:	b096      	sub	sp, #88	@ 0x58
 800d16e:	af02      	add	r7, sp, #8
 800d170:	60f8      	str	r0, [r7, #12]
 800d172:	60b9      	str	r1, [r7, #8]
 800d174:	607a      	str	r2, [r7, #4]
 800d176:	603b      	str	r3, [r7, #0]
    size_t i;
    unsigned char b;
    mbedtls_ecp_point RP;
    mbedtls_mpi PX;

    mbedtls_ecp_point_init( &RP ); mbedtls_mpi_init( &PX );
 800d178:	f107 0320 	add.w	r3, r7, #32
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7fd fc55 	bl	800aa2c <mbedtls_ecp_point_init>
 800d182:	f107 0314 	add.w	r3, r7, #20
 800d186:	4618      	mov	r0, r3
 800d188:	f7f8 fe47 	bl	8005e1a <mbedtls_mpi_init>

    /* Save PX and read from P before writing to R, in case P == R */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &PX, &P->X ) );
 800d18c:	683a      	ldr	r2, [r7, #0]
 800d18e:	f107 0314 	add.w	r3, r7, #20
 800d192:	4611      	mov	r1, r2
 800d194:	4618      	mov	r0, r3
 800d196:	f7f8 ff22 	bl	8005fde <mbedtls_mpi_copy>
 800d19a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800d19c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	f040 80ac 	bne.w	800d2fc <ecp_mul_mxz+0x192>
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &RP, P ) );
 800d1a4:	f107 0320 	add.w	r3, r7, #32
 800d1a8:	6839      	ldr	r1, [r7, #0]
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f7fd fd29 	bl	800ac02 <mbedtls_ecp_copy>
 800d1b0:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800d1b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	f040 80a1 	bne.w	800d2fc <ecp_mul_mxz+0x192>

    /* Set R to zero in modified x/z coordinates */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->X, 1 ) );
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	2101      	movs	r1, #1
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7f9 f86c 	bl	800629c <mbedtls_mpi_lset>
 800d1c4:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800d1c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	f040 8097 	bne.w	800d2fc <ecp_mul_mxz+0x192>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 0 ) );
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	3318      	adds	r3, #24
 800d1d2:	2100      	movs	r1, #0
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f7f9 f861 	bl	800629c <mbedtls_mpi_lset>
 800d1da:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800d1dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	f040 808c 	bne.w	800d2fc <ecp_mul_mxz+0x192>
    mbedtls_mpi_free( &R->Y );
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	330c      	adds	r3, #12
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7f8 fe29 	bl	8005e40 <mbedtls_mpi_free>

    /* RP.X might be sligtly larger than P, so reduce it */
    MOD_ADD( RP.X );
 800d1ee:	e00c      	b.n	800d20a <ecp_mul_mxz+0xa0>
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	1d1a      	adds	r2, r3, #4
 800d1f4:	f107 0120 	add.w	r1, r7, #32
 800d1f8:	f107 0320 	add.w	r3, r7, #32
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f7f9 ff18 	bl	8007032 <mbedtls_mpi_sub_abs>
 800d202:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800d204:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d206:	2b00      	cmp	r3, #0
 800d208:	d178      	bne.n	800d2fc <ecp_mul_mxz+0x192>
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	1d1a      	adds	r2, r3, #4
 800d20e:	f107 0320 	add.w	r3, r7, #32
 800d212:	4611      	mov	r1, r2
 800d214:	4618      	mov	r0, r3
 800d216:	f7f9 fd46 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800d21a:	4603      	mov	r3, r0
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	dae7      	bge.n	800d1f0 <ecp_mul_mxz+0x86>

    /* Randomize coordinates of the starting point */
    if( f_rng != NULL )
 800d220:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d222:	2b00      	cmp	r3, #0
 800d224:	d00a      	beq.n	800d23c <ecp_mul_mxz+0xd2>
        MBEDTLS_MPI_CHK( ecp_randomize_mxz( grp, &RP, f_rng, p_rng ) );
 800d226:	f107 0120 	add.w	r1, r7, #32
 800d22a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d22c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d22e:	68f8      	ldr	r0, [r7, #12]
 800d230:	f7ff fc8a 	bl	800cb48 <ecp_randomize_mxz>
 800d234:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800d236:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d15f      	bne.n	800d2fc <ecp_mul_mxz+0x192>

    /* Loop invariant: R = result so far, RP = R + P */
    i = mbedtls_mpi_bitlen( m ); /* one past the (zero-based) most significant bit */
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f7f9 f923 	bl	8006488 <mbedtls_mpi_bitlen>
 800d242:	64b8      	str	r0, [r7, #72]	@ 0x48
    while( i-- > 0 )
 800d244:	e04d      	b.n	800d2e2 <ecp_mul_mxz+0x178>
    {
        b = mbedtls_mpi_get_bit( m, i );
 800d246:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f7f9 f853 	bl	80062f4 <mbedtls_mpi_get_bit>
 800d24e:	4603      	mov	r3, r0
 800d250:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
         * which is:
         *  if (b) double_add( RP, R, RP, R )
         *  else   double_add( R, RP, R, RP )
         * but using safe conditional swaps to avoid leaks
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800d25a:	f107 0120 	add.w	r1, r7, #32
 800d25e:	4618      	mov	r0, r3
 800d260:	f7f8 ff8a 	bl	8006178 <mbedtls_mpi_safe_cond_swap>
 800d264:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800d266:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d147      	bne.n	800d2fc <ecp_mul_mxz+0x192>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	f103 0018 	add.w	r0, r3, #24
 800d272:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800d276:	f107 0320 	add.w	r3, r7, #32
 800d27a:	3318      	adds	r3, #24
 800d27c:	4619      	mov	r1, r3
 800d27e:	f7f8 ff7b 	bl	8006178 <mbedtls_mpi_safe_cond_swap>
 800d282:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800d284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d286:	2b00      	cmp	r3, #0
 800d288:	d138      	bne.n	800d2fc <ecp_mul_mxz+0x192>
        MBEDTLS_MPI_CHK( ecp_double_add_mxz( grp, R, &RP, R, &RP, &PX ) );
 800d28a:	f107 0220 	add.w	r2, r7, #32
 800d28e:	f107 0314 	add.w	r3, r7, #20
 800d292:	9301      	str	r3, [sp, #4]
 800d294:	f107 0320 	add.w	r3, r7, #32
 800d298:	9300      	str	r3, [sp, #0]
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	68b9      	ldr	r1, [r7, #8]
 800d29e:	68f8      	ldr	r0, [r7, #12]
 800d2a0:	f7ff fcce 	bl	800cc40 <ecp_double_add_mxz>
 800d2a4:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800d2a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d127      	bne.n	800d2fc <ecp_mul_mxz+0x192>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800d2b2:	f107 0120 	add.w	r1, r7, #32
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7f8 ff5e 	bl	8006178 <mbedtls_mpi_safe_cond_swap>
 800d2bc:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800d2be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d11b      	bne.n	800d2fc <ecp_mul_mxz+0x192>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	f103 0018 	add.w	r0, r3, #24
 800d2ca:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800d2ce:	f107 0320 	add.w	r3, r7, #32
 800d2d2:	3318      	adds	r3, #24
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	f7f8 ff4f 	bl	8006178 <mbedtls_mpi_safe_cond_swap>
 800d2da:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800d2dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d10c      	bne.n	800d2fc <ecp_mul_mxz+0x192>
    while( i-- > 0 )
 800d2e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d2e4:	1e5a      	subs	r2, r3, #1
 800d2e6:	64ba      	str	r2, [r7, #72]	@ 0x48
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d1ac      	bne.n	800d246 <ecp_mul_mxz+0xdc>
    }

    MBEDTLS_MPI_CHK( ecp_normalize_mxz( grp, R ) );
 800d2ec:	68b9      	ldr	r1, [r7, #8]
 800d2ee:	68f8      	ldr	r0, [r7, #12]
 800d2f0:	f7ff fbf2 	bl	800cad8 <ecp_normalize_mxz>
 800d2f4:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800d2f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2f8:	2b00      	cmp	r3, #0

cleanup:
 800d2fa:	bf00      	nop
    mbedtls_ecp_point_free( &RP ); mbedtls_mpi_free( &PX );
 800d2fc:	f107 0320 	add.w	r3, r7, #32
 800d300:	4618      	mov	r0, r3
 800d302:	f7fd fbfe 	bl	800ab02 <mbedtls_ecp_point_free>
 800d306:	f107 0314 	add.w	r3, r7, #20
 800d30a:	4618      	mov	r0, r3
 800d30c:	f7f8 fd98 	bl	8005e40 <mbedtls_mpi_free>

    return( ret );
 800d310:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800d312:	4618      	mov	r0, r3
 800d314:	3750      	adds	r7, #80	@ 0x50
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
	...

0800d31c <mbedtls_ecp_mul_restartable>:
 */
int mbedtls_ecp_mul_restartable( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b08a      	sub	sp, #40	@ 0x28
 800d320:	af04      	add	r7, sp, #16
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	607a      	str	r2, [r7, #4]
 800d328:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 800d32a:	4b21      	ldr	r3, [pc, #132]	@ (800d3b0 <mbedtls_ecp_mul_restartable+0x94>)
 800d32c:	617b      	str	r3, [r7, #20]
    {
        /* check_privkey is free */
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_CHK );

        /* Common sanity checks */
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
 800d32e:	6879      	ldr	r1, [r7, #4]
 800d330:	68f8      	ldr	r0, [r7, #12]
 800d332:	f000 fa5f 	bl	800d7f4 <mbedtls_ecp_check_privkey>
 800d336:	6178      	str	r0, [r7, #20]
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d133      	bne.n	800d3a6 <mbedtls_ecp_mul_restartable+0x8a>
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, P ) );
 800d33e:	6839      	ldr	r1, [r7, #0]
 800d340:	68f8      	ldr	r0, [r7, #12]
 800d342:	f000 fa25 	bl	800d790 <mbedtls_ecp_check_pubkey>
 800d346:	6178      	str	r0, [r7, #20]
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d12b      	bne.n	800d3a6 <mbedtls_ecp_mul_restartable+0x8a>
    }

    ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 800d34e:	4b18      	ldr	r3, [pc, #96]	@ (800d3b0 <mbedtls_ecp_mul_restartable+0x94>)
 800d350:	617b      	str	r3, [r7, #20]
#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
 800d352:	68f8      	ldr	r0, [r7, #12]
 800d354:	f7fd fb53 	bl	800a9fe <ecp_get_type>
 800d358:	4603      	mov	r3, r0
 800d35a:	2b02      	cmp	r3, #2
 800d35c:	d10d      	bne.n	800d37a <mbedtls_ecp_mul_restartable+0x5e>
        MBEDTLS_MPI_CHK( ecp_mul_mxz( grp, R, m, P, f_rng, p_rng ) );
 800d35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d360:	9301      	str	r3, [sp, #4]
 800d362:	6a3b      	ldr	r3, [r7, #32]
 800d364:	9300      	str	r3, [sp, #0]
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	687a      	ldr	r2, [r7, #4]
 800d36a:	68b9      	ldr	r1, [r7, #8]
 800d36c:	68f8      	ldr	r0, [r7, #12]
 800d36e:	f7ff fefc 	bl	800d16a <ecp_mul_mxz>
 800d372:	6178      	str	r0, [r7, #20]
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d115      	bne.n	800d3a6 <mbedtls_ecp_mul_restartable+0x8a>
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 800d37a:	68f8      	ldr	r0, [r7, #12]
 800d37c:	f7fd fb3f 	bl	800a9fe <ecp_get_type>
 800d380:	4603      	mov	r3, r0
 800d382:	2b01      	cmp	r3, #1
 800d384:	d10e      	bne.n	800d3a4 <mbedtls_ecp_mul_restartable+0x88>
        MBEDTLS_MPI_CHK( ecp_mul_comb( grp, R, m, P, f_rng, p_rng, rs_ctx ) );
 800d386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d388:	9302      	str	r3, [sp, #8]
 800d38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d38c:	9301      	str	r3, [sp, #4]
 800d38e:	6a3b      	ldr	r3, [r7, #32]
 800d390:	9300      	str	r3, [sp, #0]
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	68b9      	ldr	r1, [r7, #8]
 800d398:	68f8      	ldr	r0, [r7, #12]
 800d39a:	f7ff fadf 	bl	800c95c <ecp_mul_comb>
 800d39e:	6178      	str	r0, [r7, #20]
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	2b00      	cmp	r3, #0
#endif

cleanup:
 800d3a4:	bf00      	nop
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL )
        rs_ctx->depth--;
#endif

    return( ret );
 800d3a6:	697b      	ldr	r3, [r7, #20]
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3718      	adds	r7, #24
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	ffffb080 	.word	0xffffb080

0800d3b4 <mbedtls_ecp_mul>:
 * Multiplication R = m * P
 */
int mbedtls_ecp_mul( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b088      	sub	sp, #32
 800d3b8:	af04      	add	r7, sp, #16
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	60b9      	str	r1, [r7, #8]
 800d3be:	607a      	str	r2, [r7, #4]
 800d3c0:	603b      	str	r3, [r7, #0]
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( R   != NULL );
    ECP_VALIDATE_RET( m   != NULL );
    ECP_VALIDATE_RET( P   != NULL );
    return( mbedtls_ecp_mul_restartable( grp, R, m, P, f_rng, p_rng, NULL ) );
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	9302      	str	r3, [sp, #8]
 800d3c6:	69fb      	ldr	r3, [r7, #28]
 800d3c8:	9301      	str	r3, [sp, #4]
 800d3ca:	69bb      	ldr	r3, [r7, #24]
 800d3cc:	9300      	str	r3, [sp, #0]
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	68b9      	ldr	r1, [r7, #8]
 800d3d4:	68f8      	ldr	r0, [r7, #12]
 800d3d6:	f7ff ffa1 	bl	800d31c <mbedtls_ecp_mul_restartable>
 800d3da:	4603      	mov	r3, r0
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3710      	adds	r7, #16
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}

0800d3e4 <ecp_check_pubkey_sw>:
/*
 * Check that an affine point is valid as a public key,
 * short weierstrass curves (SEC1 3.2.3.1)
 */
static int ecp_check_pubkey_sw( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b08a      	sub	sp, #40	@ 0x28
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	6039      	str	r1, [r7, #0]
    int ret;
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	2100      	movs	r1, #0
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f7f9 fcf2 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	db1e      	blt.n	800d43c <ecp_check_pubkey_sw+0x58>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	330c      	adds	r3, #12
 800d402:	2100      	movs	r1, #0
 800d404:	4618      	mov	r0, r3
 800d406:	f7f9 fce9 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800d40a:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	db15      	blt.n	800d43c <ecp_check_pubkey_sw+0x58>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 800d410:	683a      	ldr	r2, [r7, #0]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	3304      	adds	r3, #4
 800d416:	4619      	mov	r1, r3
 800d418:	4610      	mov	r0, r2
 800d41a:	f7f9 fc44 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800d41e:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 800d420:	2b00      	cmp	r3, #0
 800d422:	da0b      	bge.n	800d43c <ecp_check_pubkey_sw+0x58>
        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	f103 020c 	add.w	r2, r3, #12
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	3304      	adds	r3, #4
 800d42e:	4619      	mov	r1, r3
 800d430:	4610      	mov	r0, r2
 800d432:	f7f9 fc38 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800d436:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 800d438:	2b00      	cmp	r3, #0
 800d43a:	db01      	blt.n	800d440 <ecp_check_pubkey_sw+0x5c>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 800d43c:	4b75      	ldr	r3, [pc, #468]	@ (800d614 <ecp_check_pubkey_sw+0x230>)
 800d43e:	e0e5      	b.n	800d60c <ecp_check_pubkey_sw+0x228>

    mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );
 800d440:	f107 0318 	add.w	r3, r7, #24
 800d444:	4618      	mov	r0, r3
 800d446:	f7f8 fce8 	bl	8005e1a <mbedtls_mpi_init>
 800d44a:	f107 030c 	add.w	r3, r7, #12
 800d44e:	4618      	mov	r0, r3
 800d450:	f7f8 fce3 	bl	8005e1a <mbedtls_mpi_init>

    /*
     * YY = Y^2
     * RHS = X (X^2 + A) + B = X^3 + A X + B
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	f103 010c 	add.w	r1, r3, #12
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	f103 020c 	add.w	r2, r3, #12
 800d460:	f107 0318 	add.w	r3, r7, #24
 800d464:	4618      	mov	r0, r3
 800d466:	f7fb fabd 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800d46a:	6278      	str	r0, [r7, #36]	@ 0x24
 800d46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d46e:	2b00      	cmp	r3, #0
 800d470:	f040 80c1 	bne.w	800d5f6 <ecp_check_pubkey_sw+0x212>
 800d474:	f107 0318 	add.w	r3, r7, #24
 800d478:	6879      	ldr	r1, [r7, #4]
 800d47a:	4618      	mov	r0, r3
 800d47c:	f7fd fcb8 	bl	800adf0 <ecp_modp>
 800d480:	6278      	str	r0, [r7, #36]	@ 0x24
 800d482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d484:	2b00      	cmp	r3, #0
 800d486:	f040 80b6 	bne.w	800d5f6 <ecp_check_pubkey_sw+0x212>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
 800d48a:	6839      	ldr	r1, [r7, #0]
 800d48c:	683a      	ldr	r2, [r7, #0]
 800d48e:	f107 030c 	add.w	r3, r7, #12
 800d492:	4618      	mov	r0, r3
 800d494:	f7fb faa6 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800d498:	6278      	str	r0, [r7, #36]	@ 0x24
 800d49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	f040 80aa 	bne.w	800d5f6 <ecp_check_pubkey_sw+0x212>
 800d4a2:	f107 030c 	add.w	r3, r7, #12
 800d4a6:	6879      	ldr	r1, [r7, #4]
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f7fd fca1 	bl	800adf0 <ecp_modp>
 800d4ae:	6278      	str	r0, [r7, #36]	@ 0x24
 800d4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	f040 809f 	bne.w	800d5f6 <ecp_check_pubkey_sw+0x212>

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	699b      	ldr	r3, [r3, #24]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d127      	bne.n	800d510 <ecp_check_pubkey_sw+0x12c>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
 800d4c0:	f107 010c 	add.w	r1, r7, #12
 800d4c4:	f107 030c 	add.w	r3, r7, #12
 800d4c8:	2203      	movs	r2, #3
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7f9 febd 	bl	800724a <mbedtls_mpi_sub_int>
 800d4d0:	6278      	str	r0, [r7, #36]	@ 0x24
 800d4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	f040 808e 	bne.w	800d5f6 <ecp_check_pubkey_sw+0x212>
 800d4da:	e00c      	b.n	800d4f6 <ecp_check_pubkey_sw+0x112>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	1d1a      	adds	r2, r3, #4
 800d4e0:	f107 010c 	add.w	r1, r7, #12
 800d4e4:	f107 030c 	add.w	r3, r7, #12
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7f9 fe02 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800d4ee:	6278      	str	r0, [r7, #36]	@ 0x24
 800d4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d17f      	bne.n	800d5f6 <ecp_check_pubkey_sw+0x212>
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	da30      	bge.n	800d55e <ecp_check_pubkey_sw+0x17a>
 800d4fc:	f107 030c 	add.w	r3, r7, #12
 800d500:	2100      	movs	r1, #0
 800d502:	4618      	mov	r0, r3
 800d504:	f7f9 fc6a 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800d508:	4603      	mov	r3, r0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d1e6      	bne.n	800d4dc <ecp_check_pubkey_sw+0xf8>
 800d50e:	e026      	b.n	800d55e <ecp_check_pubkey_sw+0x17a>
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f103 0210 	add.w	r2, r3, #16
 800d516:	f107 010c 	add.w	r1, r7, #12
 800d51a:	f107 030c 	add.w	r3, r7, #12
 800d51e:	4618      	mov	r0, r3
 800d520:	f7f9 fde7 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800d524:	6278      	str	r0, [r7, #36]	@ 0x24
 800d526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d164      	bne.n	800d5f6 <ecp_check_pubkey_sw+0x212>
 800d52c:	e00c      	b.n	800d548 <ecp_check_pubkey_sw+0x164>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	1d1a      	adds	r2, r3, #4
 800d532:	f107 010c 	add.w	r1, r7, #12
 800d536:	f107 030c 	add.w	r3, r7, #12
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7f9 fd79 	bl	8007032 <mbedtls_mpi_sub_abs>
 800d540:	6278      	str	r0, [r7, #36]	@ 0x24
 800d542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d544:	2b00      	cmp	r3, #0
 800d546:	d156      	bne.n	800d5f6 <ecp_check_pubkey_sw+0x212>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	1d1a      	adds	r2, r3, #4
 800d54c:	f107 030c 	add.w	r3, r7, #12
 800d550:	4611      	mov	r1, r2
 800d552:	4618      	mov	r0, r3
 800d554:	f7f9 fba7 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800d558:	4603      	mov	r3, r0
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	dae7      	bge.n	800d52e <ecp_check_pubkey_sw+0x14a>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
 800d55e:	683a      	ldr	r2, [r7, #0]
 800d560:	f107 010c 	add.w	r1, r7, #12
 800d564:	f107 030c 	add.w	r3, r7, #12
 800d568:	4618      	mov	r0, r3
 800d56a:	f7fb fa3b 	bl	80089e4 <mbedtls_mpi_mul_mpi>
 800d56e:	6278      	str	r0, [r7, #36]	@ 0x24
 800d570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d572:	2b00      	cmp	r3, #0
 800d574:	d13f      	bne.n	800d5f6 <ecp_check_pubkey_sw+0x212>
 800d576:	f107 030c 	add.w	r3, r7, #12
 800d57a:	6879      	ldr	r1, [r7, #4]
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7fd fc37 	bl	800adf0 <ecp_modp>
 800d582:	6278      	str	r0, [r7, #36]	@ 0x24
 800d584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d586:	2b00      	cmp	r3, #0
 800d588:	d135      	bne.n	800d5f6 <ecp_check_pubkey_sw+0x212>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f103 021c 	add.w	r2, r3, #28
 800d590:	f107 010c 	add.w	r1, r7, #12
 800d594:	f107 030c 	add.w	r3, r7, #12
 800d598:	4618      	mov	r0, r3
 800d59a:	f7f9 fdaa 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800d59e:	6278      	str	r0, [r7, #36]	@ 0x24
 800d5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d127      	bne.n	800d5f6 <ecp_check_pubkey_sw+0x212>
 800d5a6:	e00c      	b.n	800d5c2 <ecp_check_pubkey_sw+0x1de>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	1d1a      	adds	r2, r3, #4
 800d5ac:	f107 010c 	add.w	r1, r7, #12
 800d5b0:	f107 030c 	add.w	r3, r7, #12
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f7f9 fd3c 	bl	8007032 <mbedtls_mpi_sub_abs>
 800d5ba:	6278      	str	r0, [r7, #36]	@ 0x24
 800d5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d119      	bne.n	800d5f6 <ecp_check_pubkey_sw+0x212>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	1d1a      	adds	r2, r3, #4
 800d5c6:	f107 030c 	add.w	r3, r7, #12
 800d5ca:	4611      	mov	r1, r2
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f7f9 fb6a 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	dae7      	bge.n	800d5a8 <ecp_check_pubkey_sw+0x1c4>

    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
 800d5d8:	f107 020c 	add.w	r2, r7, #12
 800d5dc:	f107 0318 	add.w	r3, r7, #24
 800d5e0:	4611      	mov	r1, r2
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7f9 fb5f 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d002      	beq.n	800d5f4 <ecp_check_pubkey_sw+0x210>
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;
 800d5ee:	4b09      	ldr	r3, [pc, #36]	@ (800d614 <ecp_check_pubkey_sw+0x230>)
 800d5f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5f2:	e000      	b.n	800d5f6 <ecp_check_pubkey_sw+0x212>

cleanup:
 800d5f4:	bf00      	nop

    mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );
 800d5f6:	f107 0318 	add.w	r3, r7, #24
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f7f8 fc20 	bl	8005e40 <mbedtls_mpi_free>
 800d600:	f107 030c 	add.w	r3, r7, #12
 800d604:	4618      	mov	r0, r3
 800d606:	f7f8 fc1b 	bl	8005e40 <mbedtls_mpi_free>

    return( ret );
 800d60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3728      	adds	r7, #40	@ 0x28
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	ffffb380 	.word	0xffffb380

0800d618 <mbedtls_ecp_mul_shortcuts>:
static int mbedtls_ecp_mul_shortcuts( mbedtls_ecp_group *grp,
                                      mbedtls_ecp_point *R,
                                      const mbedtls_mpi *m,
                                      const mbedtls_ecp_point *P,
                                      mbedtls_ecp_restart_ctx *rs_ctx )
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b08a      	sub	sp, #40	@ 0x28
 800d61c:	af04      	add	r7, sp, #16
 800d61e:	60f8      	str	r0, [r7, #12]
 800d620:	60b9      	str	r1, [r7, #8]
 800d622:	607a      	str	r2, [r7, #4]
 800d624:	603b      	str	r3, [r7, #0]
    int ret;

    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
 800d626:	2101      	movs	r1, #1
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f7f9 fbd7 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800d62e:	4603      	mov	r3, r0
 800d630:	2b00      	cmp	r3, #0
 800d632:	d107      	bne.n	800d644 <mbedtls_ecp_mul_shortcuts+0x2c>
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 800d634:	6839      	ldr	r1, [r7, #0]
 800d636:	68b8      	ldr	r0, [r7, #8]
 800d638:	f7fd fae3 	bl	800ac02 <mbedtls_ecp_copy>
 800d63c:	6178      	str	r0, [r7, #20]
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	2b00      	cmp	r3, #0
 800d642:	e036      	b.n	800d6b2 <mbedtls_ecp_mul_shortcuts+0x9a>
    }
    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )
 800d644:	f04f 31ff 	mov.w	r1, #4294967295
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f7f9 fbc7 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800d64e:	4603      	mov	r3, r0
 800d650:	2b00      	cmp	r3, #0
 800d652:	d11e      	bne.n	800d692 <mbedtls_ecp_mul_shortcuts+0x7a>
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 800d654:	6839      	ldr	r1, [r7, #0]
 800d656:	68b8      	ldr	r0, [r7, #8]
 800d658:	f7fd fad3 	bl	800ac02 <mbedtls_ecp_copy>
 800d65c:	6178      	str	r0, [r7, #20]
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d126      	bne.n	800d6b2 <mbedtls_ecp_mul_shortcuts+0x9a>
        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	330c      	adds	r3, #12
 800d668:	2100      	movs	r1, #0
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7f9 fbb6 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800d670:	4603      	mov	r3, r0
 800d672:	2b00      	cmp	r3, #0
 800d674:	d01d      	beq.n	800d6b2 <mbedtls_ecp_mul_shortcuts+0x9a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	f103 000c 	add.w	r0, r3, #12
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	1d19      	adds	r1, r3, #4
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	330c      	adds	r3, #12
 800d684:	461a      	mov	r2, r3
 800d686:	f7f9 fd78 	bl	800717a <mbedtls_mpi_sub_mpi>
 800d68a:	6178      	str	r0, [r7, #20]
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	e00f      	b.n	800d6b2 <mbedtls_ecp_mul_shortcuts+0x9a>
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, R, m, P,
 800d692:	6a3b      	ldr	r3, [r7, #32]
 800d694:	9302      	str	r3, [sp, #8]
 800d696:	2300      	movs	r3, #0
 800d698:	9301      	str	r3, [sp, #4]
 800d69a:	2300      	movs	r3, #0
 800d69c:	9300      	str	r3, [sp, #0]
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	687a      	ldr	r2, [r7, #4]
 800d6a2:	68b9      	ldr	r1, [r7, #8]
 800d6a4:	68f8      	ldr	r0, [r7, #12]
 800d6a6:	f7ff fe39 	bl	800d31c <mbedtls_ecp_mul_restartable>
 800d6aa:	6178      	str	r0, [r7, #20]
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	2b00      	cmp	r3, #0
                                                      NULL, NULL, rs_ctx ) );
    }

cleanup:
 800d6b0:	bf00      	nop
    return( ret );
 800d6b2:	697b      	ldr	r3, [r7, #20]
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3718      	adds	r7, #24
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <mbedtls_ecp_muladd_restartable>:
int mbedtls_ecp_muladd_restartable(
             mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             const mbedtls_mpi *n, const mbedtls_ecp_point *Q,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b092      	sub	sp, #72	@ 0x48
 800d6c0:	af02      	add	r7, sp, #8
 800d6c2:	60f8      	str	r0, [r7, #12]
 800d6c4:	60b9      	str	r1, [r7, #8]
 800d6c6:	607a      	str	r2, [r7, #4]
 800d6c8:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_ecp_point mP;
    mbedtls_ecp_point *pmP = &mP;
 800d6ca:	f107 0310 	add.w	r3, r7, #16
 800d6ce:	63bb      	str	r3, [r7, #56]	@ 0x38
    mbedtls_ecp_point *pR = R;
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	637b      	str	r3, [r7, #52]	@ 0x34
    ECP_VALIDATE_RET( m   != NULL );
    ECP_VALIDATE_RET( P   != NULL );
    ECP_VALIDATE_RET( n   != NULL );
    ECP_VALIDATE_RET( Q   != NULL );

    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
 800d6d4:	68f8      	ldr	r0, [r7, #12]
 800d6d6:	f7fd f992 	bl	800a9fe <ecp_get_type>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b01      	cmp	r3, #1
 800d6de:	d001      	beq.n	800d6e4 <mbedtls_ecp_muladd_restartable+0x28>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 800d6e0:	4b1d      	ldr	r3, [pc, #116]	@ (800d758 <mbedtls_ecp_muladd_restartable+0x9c>)
 800d6e2:	e034      	b.n	800d74e <mbedtls_ecp_muladd_restartable+0x92>

    mbedtls_ecp_point_init( &mP );
 800d6e4:	f107 0310 	add.w	r3, r7, #16
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f7fd f99f 	bl	800aa2c <mbedtls_ecp_point_init>
        if( rs_ctx->ma->state == ecp_rsma_norm )
            goto norm;
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pmP, m, P, rs_ctx ) );
 800d6ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6f0:	9300      	str	r3, [sp, #0]
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d6f8:	68f8      	ldr	r0, [r7, #12]
 800d6fa:	f7ff ff8d 	bl	800d618 <mbedtls_ecp_mul_shortcuts>
 800d6fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d702:	2b00      	cmp	r3, #0
 800d704:	d11d      	bne.n	800d742 <mbedtls_ecp_muladd_restartable+0x86>
    if( rs_ctx != NULL && rs_ctx->ma != NULL )
        rs_ctx->ma->state = ecp_rsma_mul2;

mul2:
#endif
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pR,  n, Q, rs_ctx ) );
 800d706:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d708:	9300      	str	r3, [sp, #0]
 800d70a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d70c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d70e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d710:	68f8      	ldr	r0, [r7, #12]
 800d712:	f7ff ff81 	bl	800d618 <mbedtls_ecp_mul_shortcuts>
 800d716:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d111      	bne.n	800d742 <mbedtls_ecp_muladd_restartable+0x86>
        rs_ctx->ma->state = ecp_rsma_add;

add:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_ADD );
    MBEDTLS_MPI_CHK( ecp_add_mixed( grp, pR, pmP, pR ) );
 800d71e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d720:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d722:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d724:	68f8      	ldr	r0, [r7, #12]
 800d726:	f7fe fa03 	bl	800bb30 <ecp_add_mixed>
 800d72a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d72c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d107      	bne.n	800d742 <mbedtls_ecp_muladd_restartable+0x86>
        rs_ctx->ma->state = ecp_rsma_norm;

norm:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV );
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, pR ) );
 800d732:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d734:	68f8      	ldr	r0, [r7, #12]
 800d736:	f7fd fbbf 	bl	800aeb8 <ecp_normalize_jac>
 800d73a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d73c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d73e:	2b00      	cmp	r3, #0
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL && rs_ctx->ma != NULL )
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, pR ) );
#endif

cleanup:
 800d740:	bf00      	nop
#if defined(MBEDTLS_ECP_INTERNAL_ALT)
    if( is_grp_capable )
        mbedtls_internal_ecp_free( grp );
#endif /* MBEDTLS_ECP_INTERNAL_ALT */

    mbedtls_ecp_point_free( &mP );
 800d742:	f107 0310 	add.w	r3, r7, #16
 800d746:	4618      	mov	r0, r3
 800d748:	f7fd f9db 	bl	800ab02 <mbedtls_ecp_point_free>

    ECP_RS_LEAVE( ma );

    return( ret );
 800d74c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3740      	adds	r7, #64	@ 0x40
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	ffffb180 	.word	0xffffb180

0800d75c <ecp_check_pubkey_mx>:
#if defined(ECP_MONTGOMERY)
/*
 * Check validity of a public key for Montgomery curves with x-only schemes
 */
static int ecp_check_pubkey_mx( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b082      	sub	sp, #8
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	6039      	str	r1, [r7, #0]
    /* [Curve25519 p. 5] Just check X is the correct number of bytes */
    /* Allow any public value, if it's too big then we'll just reduce it mod p
     * (RFC 7748 sec. 5 para. 3). */
    if( mbedtls_mpi_size( &pt->X ) > ( grp->nbits + 7 ) / 8 )
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	4618      	mov	r0, r3
 800d76a:	f7f8 fec1 	bl	80064f0 <mbedtls_mpi_size>
 800d76e:	4602      	mov	r2, r0
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d774:	3307      	adds	r3, #7
 800d776:	08db      	lsrs	r3, r3, #3
 800d778:	429a      	cmp	r2, r3
 800d77a:	d901      	bls.n	800d780 <ecp_check_pubkey_mx+0x24>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 800d77c:	4b03      	ldr	r3, [pc, #12]	@ (800d78c <ecp_check_pubkey_mx+0x30>)
 800d77e:	e000      	b.n	800d782 <ecp_check_pubkey_mx+0x26>

    return( 0 );
 800d780:	2300      	movs	r3, #0
}
 800d782:	4618      	mov	r0, r3
 800d784:	3708      	adds	r7, #8
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	bf00      	nop
 800d78c:	ffffb380 	.word	0xffffb380

0800d790 <mbedtls_ecp_check_pubkey>:
/*
 * Check that a point is valid as a public key
 */
int mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp,
                              const mbedtls_ecp_point *pt )
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6039      	str	r1, [r7, #0]
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( pt  != NULL );

    /* Must use affine coordinates */
    if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	3318      	adds	r3, #24
 800d79e:	2101      	movs	r1, #1
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f7f9 fb1b 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d001      	beq.n	800d7b0 <mbedtls_ecp_check_pubkey+0x20>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 800d7ac:	4b0f      	ldr	r3, [pc, #60]	@ (800d7ec <mbedtls_ecp_check_pubkey+0x5c>)
 800d7ae:	e018      	b.n	800d7e2 <mbedtls_ecp_check_pubkey+0x52>

#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f7fd f924 	bl	800a9fe <ecp_get_type>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	2b02      	cmp	r3, #2
 800d7ba:	d105      	bne.n	800d7c8 <mbedtls_ecp_check_pubkey+0x38>
        return( ecp_check_pubkey_mx( grp, pt ) );
 800d7bc:	6839      	ldr	r1, [r7, #0]
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f7ff ffcc 	bl	800d75c <ecp_check_pubkey_mx>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	e00c      	b.n	800d7e2 <mbedtls_ecp_check_pubkey+0x52>
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f7fd f918 	bl	800a9fe <ecp_get_type>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d105      	bne.n	800d7e0 <mbedtls_ecp_check_pubkey+0x50>
        return( ecp_check_pubkey_sw( grp, pt ) );
 800d7d4:	6839      	ldr	r1, [r7, #0]
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f7ff fe04 	bl	800d3e4 <ecp_check_pubkey_sw>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	e000      	b.n	800d7e2 <mbedtls_ecp_check_pubkey+0x52>
#endif
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800d7e0:	4b03      	ldr	r3, [pc, #12]	@ (800d7f0 <mbedtls_ecp_check_pubkey+0x60>)
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3708      	adds	r7, #8
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	ffffb380 	.word	0xffffb380
 800d7f0:	ffffb080 	.word	0xffffb080

0800d7f4 <mbedtls_ecp_check_privkey>:
/*
 * Check that an mbedtls_mpi is valid as a private key
 */
int mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp,
                               const mbedtls_mpi *d )
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b082      	sub	sp, #8
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	6039      	str	r1, [r7, #0]
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( d   != NULL );

#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f7fd f8fd 	bl	800a9fe <ecp_get_type>
 800d804:	4603      	mov	r3, r0
 800d806:	2b02      	cmp	r3, #2
 800d808:	d127      	bne.n	800d85a <mbedtls_ecp_check_privkey+0x66>
    {
        /* see RFC 7748 sec. 5 para. 5 */
        if( mbedtls_mpi_get_bit( d, 0 ) != 0 ||
 800d80a:	2100      	movs	r1, #0
 800d80c:	6838      	ldr	r0, [r7, #0]
 800d80e:	f7f8 fd71 	bl	80062f4 <mbedtls_mpi_get_bit>
 800d812:	4603      	mov	r3, r0
 800d814:	2b00      	cmp	r3, #0
 800d816:	d10f      	bne.n	800d838 <mbedtls_ecp_check_privkey+0x44>
            mbedtls_mpi_get_bit( d, 1 ) != 0 ||
 800d818:	2101      	movs	r1, #1
 800d81a:	6838      	ldr	r0, [r7, #0]
 800d81c:	f7f8 fd6a 	bl	80062f4 <mbedtls_mpi_get_bit>
 800d820:	4603      	mov	r3, r0
        if( mbedtls_mpi_get_bit( d, 0 ) != 0 ||
 800d822:	2b00      	cmp	r3, #0
 800d824:	d108      	bne.n	800d838 <mbedtls_ecp_check_privkey+0x44>
            mbedtls_mpi_bitlen( d ) - 1 != grp->nbits ) /* mbedtls_mpi_bitlen is one-based! */
 800d826:	6838      	ldr	r0, [r7, #0]
 800d828:	f7f8 fe2e 	bl	8006488 <mbedtls_mpi_bitlen>
 800d82c:	4603      	mov	r3, r0
 800d82e:	1e5a      	subs	r2, r3, #1
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
            mbedtls_mpi_get_bit( d, 1 ) != 0 ||
 800d834:	429a      	cmp	r2, r3
 800d836:	d001      	beq.n	800d83c <mbedtls_ecp_check_privkey+0x48>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 800d838:	4b17      	ldr	r3, [pc, #92]	@ (800d898 <mbedtls_ecp_check_privkey+0xa4>)
 800d83a:	e029      	b.n	800d890 <mbedtls_ecp_check_privkey+0x9c>

        /* see [Curve25519] page 5 */
        if( grp->nbits == 254 && mbedtls_mpi_get_bit( d, 2 ) != 0 )
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d840:	2bfe      	cmp	r3, #254	@ 0xfe
 800d842:	d108      	bne.n	800d856 <mbedtls_ecp_check_privkey+0x62>
 800d844:	2102      	movs	r1, #2
 800d846:	6838      	ldr	r0, [r7, #0]
 800d848:	f7f8 fd54 	bl	80062f4 <mbedtls_mpi_get_bit>
 800d84c:	4603      	mov	r3, r0
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d001      	beq.n	800d856 <mbedtls_ecp_check_privkey+0x62>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 800d852:	4b11      	ldr	r3, [pc, #68]	@ (800d898 <mbedtls_ecp_check_privkey+0xa4>)
 800d854:	e01c      	b.n	800d890 <mbedtls_ecp_check_privkey+0x9c>

        return( 0 );
 800d856:	2300      	movs	r3, #0
 800d858:	e01a      	b.n	800d890 <mbedtls_ecp_check_privkey+0x9c>
    }
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f7fd f8cf 	bl	800a9fe <ecp_get_type>
 800d860:	4603      	mov	r3, r0
 800d862:	2b01      	cmp	r3, #1
 800d864:	d113      	bne.n	800d88e <mbedtls_ecp_check_privkey+0x9a>
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 800d866:	2101      	movs	r1, #1
 800d868:	6838      	ldr	r0, [r7, #0]
 800d86a:	f7f9 fab7 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800d86e:	4603      	mov	r3, r0
 800d870:	2b00      	cmp	r3, #0
 800d872:	db08      	blt.n	800d886 <mbedtls_ecp_check_privkey+0x92>
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	334c      	adds	r3, #76	@ 0x4c
 800d878:	4619      	mov	r1, r3
 800d87a:	6838      	ldr	r0, [r7, #0]
 800d87c:	f7f9 fa13 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800d880:	4603      	mov	r3, r0
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 800d882:	2b00      	cmp	r3, #0
 800d884:	db01      	blt.n	800d88a <mbedtls_ecp_check_privkey+0x96>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 800d886:	4b04      	ldr	r3, [pc, #16]	@ (800d898 <mbedtls_ecp_check_privkey+0xa4>)
 800d888:	e002      	b.n	800d890 <mbedtls_ecp_check_privkey+0x9c>
        else
            return( 0 );
 800d88a:	2300      	movs	r3, #0
 800d88c:	e000      	b.n	800d890 <mbedtls_ecp_check_privkey+0x9c>
    }
#endif /* ECP_SHORTWEIERSTRASS */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800d88e:	4b03      	ldr	r3, [pc, #12]	@ (800d89c <mbedtls_ecp_check_privkey+0xa8>)
}
 800d890:	4618      	mov	r0, r3
 800d892:	3708      	adds	r7, #8
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	ffffb380 	.word	0xffffb380
 800d89c:	ffffb080 	.word	0xffffb080

0800d8a0 <mbedtls_ecp_gen_privkey>:
 */
int mbedtls_ecp_gen_privkey( const mbedtls_ecp_group *grp,
                     mbedtls_mpi *d,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b088      	sub	sp, #32
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	60f8      	str	r0, [r7, #12]
 800d8a8:	60b9      	str	r1, [r7, #8]
 800d8aa:	607a      	str	r2, [r7, #4]
 800d8ac:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 800d8ae:	4b4e      	ldr	r3, [pc, #312]	@ (800d9e8 <mbedtls_ecp_gen_privkey+0x148>)
 800d8b0:	61fb      	str	r3, [r7, #28]

    ECP_VALIDATE_RET( grp   != NULL );
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    n_size = ( grp->nbits + 7 ) / 8;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d8b6:	3307      	adds	r3, #7
 800d8b8:	08db      	lsrs	r3, r3, #3
 800d8ba:	617b      	str	r3, [r7, #20]

#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
 800d8bc:	68f8      	ldr	r0, [r7, #12]
 800d8be:	f7fd f89e 	bl	800a9fe <ecp_get_type>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	2b02      	cmp	r3, #2
 800d8c6:	d151      	bne.n	800d96c <mbedtls_ecp_gen_privkey+0xcc>
    {
        /* [M225] page 5 */
        size_t b;

        do {
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	687a      	ldr	r2, [r7, #4]
 800d8cc:	6979      	ldr	r1, [r7, #20]
 800d8ce:	68b8      	ldr	r0, [r7, #8]
 800d8d0:	f7fb fdd9 	bl	8009486 <mbedtls_mpi_fill_random>
 800d8d4:	61f8      	str	r0, [r7, #28]
 800d8d6:	69fb      	ldr	r3, [r7, #28]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d17f      	bne.n	800d9dc <mbedtls_ecp_gen_privkey+0x13c>
        } while( mbedtls_mpi_bitlen( d ) == 0);
 800d8dc:	68b8      	ldr	r0, [r7, #8]
 800d8de:	f7f8 fdd3 	bl	8006488 <mbedtls_mpi_bitlen>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d0ef      	beq.n	800d8c8 <mbedtls_ecp_gen_privkey+0x28>

        /* Make sure the most significant bit is nbits */
        b = mbedtls_mpi_bitlen( d ) - 1; /* mbedtls_mpi_bitlen is one-based */
 800d8e8:	68b8      	ldr	r0, [r7, #8]
 800d8ea:	f7f8 fdcd 	bl	8006488 <mbedtls_mpi_bitlen>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	3b01      	subs	r3, #1
 800d8f2:	613b      	str	r3, [r7, #16]
        if( b > grp->nbits )
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d8f8:	693a      	ldr	r2, [r7, #16]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d90c      	bls.n	800d918 <mbedtls_ecp_gen_privkey+0x78>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, b - grp->nbits ) );
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d902:	693a      	ldr	r2, [r7, #16]
 800d904:	1ad3      	subs	r3, r2, r3
 800d906:	4619      	mov	r1, r3
 800d908:	68b8      	ldr	r0, [r7, #8]
 800d90a:	f7f9 f8af 	bl	8006a6c <mbedtls_mpi_shift_r>
 800d90e:	61f8      	str	r0, [r7, #28]
 800d910:	69fb      	ldr	r3, [r7, #28]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d00b      	beq.n	800d92e <mbedtls_ecp_gen_privkey+0x8e>
 800d916:	e061      	b.n	800d9dc <mbedtls_ecp_gen_privkey+0x13c>
        else
            MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, grp->nbits, 1 ) );
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d91c:	2201      	movs	r2, #1
 800d91e:	4619      	mov	r1, r3
 800d920:	68b8      	ldr	r0, [r7, #8]
 800d922:	f7f8 fd08 	bl	8006336 <mbedtls_mpi_set_bit>
 800d926:	61f8      	str	r0, [r7, #28]
 800d928:	69fb      	ldr	r3, [r7, #28]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d156      	bne.n	800d9dc <mbedtls_ecp_gen_privkey+0x13c>

        /* Make sure the last two bits are unset for Curve448, three bits for
           Curve25519 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 0, 0 ) );
 800d92e:	2200      	movs	r2, #0
 800d930:	2100      	movs	r1, #0
 800d932:	68b8      	ldr	r0, [r7, #8]
 800d934:	f7f8 fcff 	bl	8006336 <mbedtls_mpi_set_bit>
 800d938:	61f8      	str	r0, [r7, #28]
 800d93a:	69fb      	ldr	r3, [r7, #28]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d14d      	bne.n	800d9dc <mbedtls_ecp_gen_privkey+0x13c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 1, 0 ) );
 800d940:	2200      	movs	r2, #0
 800d942:	2101      	movs	r1, #1
 800d944:	68b8      	ldr	r0, [r7, #8]
 800d946:	f7f8 fcf6 	bl	8006336 <mbedtls_mpi_set_bit>
 800d94a:	61f8      	str	r0, [r7, #28]
 800d94c:	69fb      	ldr	r3, [r7, #28]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d144      	bne.n	800d9dc <mbedtls_ecp_gen_privkey+0x13c>
        if( grp->nbits == 254 )
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d956:	2bfe      	cmp	r3, #254	@ 0xfe
 800d958:	d108      	bne.n	800d96c <mbedtls_ecp_gen_privkey+0xcc>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 2, 0 ) );
 800d95a:	2200      	movs	r2, #0
 800d95c:	2102      	movs	r1, #2
 800d95e:	68b8      	ldr	r0, [r7, #8]
 800d960:	f7f8 fce9 	bl	8006336 <mbedtls_mpi_set_bit>
 800d964:	61f8      	str	r0, [r7, #28]
 800d966:	69fb      	ldr	r3, [r7, #28]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d137      	bne.n	800d9dc <mbedtls_ecp_gen_privkey+0x13c>
        }
    }
#endif /* ECP_MONTGOMERY */

#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 800d96c:	68f8      	ldr	r0, [r7, #12]
 800d96e:	f7fd f846 	bl	800a9fe <ecp_get_type>
 800d972:	4603      	mov	r3, r0
 800d974:	2b01      	cmp	r3, #1
 800d976:	d130      	bne.n	800d9da <mbedtls_ecp_gen_privkey+0x13a>
    {
        /* SEC1 3.2.1: Generate d such that 1 <= n < N */
        int count = 0;
 800d978:	2300      	movs	r3, #0
 800d97a:	61bb      	str	r3, [r7, #24]
         * - try until result is in the desired range.
         * This also avoids any biais, which is especially important for ECDSA.
         */
        do
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	687a      	ldr	r2, [r7, #4]
 800d980:	6979      	ldr	r1, [r7, #20]
 800d982:	68b8      	ldr	r0, [r7, #8]
 800d984:	f7fb fd7f 	bl	8009486 <mbedtls_mpi_fill_random>
 800d988:	61f8      	str	r0, [r7, #28]
 800d98a:	69fb      	ldr	r3, [r7, #28]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d125      	bne.n	800d9dc <mbedtls_ecp_gen_privkey+0x13c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	00da      	lsls	r2, r3, #3
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d998:	1ad3      	subs	r3, r2, r3
 800d99a:	4619      	mov	r1, r3
 800d99c:	68b8      	ldr	r0, [r7, #8]
 800d99e:	f7f9 f865 	bl	8006a6c <mbedtls_mpi_shift_r>
 800d9a2:	61f8      	str	r0, [r7, #28]
 800d9a4:	69fb      	ldr	r3, [r7, #28]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d118      	bne.n	800d9dc <mbedtls_ecp_gen_privkey+0x13c>
             *
             * For most curves, 1 try is enough with overwhelming probability,
             * since N starts with a lot of 1s in binary, but some curves
             * such as secp224k1 are actually very close to the worst case.
             */
            if( ++count > 30 )
 800d9aa:	69bb      	ldr	r3, [r7, #24]
 800d9ac:	3301      	adds	r3, #1
 800d9ae:	61bb      	str	r3, [r7, #24]
 800d9b0:	69bb      	ldr	r3, [r7, #24]
 800d9b2:	2b1e      	cmp	r3, #30
 800d9b4:	dd01      	ble.n	800d9ba <mbedtls_ecp_gen_privkey+0x11a>
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 800d9b6:	4b0d      	ldr	r3, [pc, #52]	@ (800d9ec <mbedtls_ecp_gen_privkey+0x14c>)
 800d9b8:	e011      	b.n	800d9de <mbedtls_ecp_gen_privkey+0x13e>
        }
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 800d9ba:	2101      	movs	r1, #1
 800d9bc:	68b8      	ldr	r0, [r7, #8]
 800d9be:	f7f9 fa0d 	bl	8006ddc <mbedtls_mpi_cmp_int>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	dbd9      	blt.n	800d97c <mbedtls_ecp_gen_privkey+0xdc>
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	334c      	adds	r3, #76	@ 0x4c
 800d9cc:	4619      	mov	r1, r3
 800d9ce:	68b8      	ldr	r0, [r7, #8]
 800d9d0:	f7f9 f969 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800d9d4:	4603      	mov	r3, r0
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	dad0      	bge.n	800d97c <mbedtls_ecp_gen_privkey+0xdc>
    }
#endif /* ECP_SHORTWEIERSTRASS */

cleanup:
 800d9da:	bf00      	nop
    return( ret );
 800d9dc:	69fb      	ldr	r3, [r7, #28]
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3720      	adds	r7, #32
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
 800d9e6:	bf00      	nop
 800d9e8:	ffffb080 	.word	0xffffb080
 800d9ec:	ffffb300 	.word	0xffffb300

0800d9f0 <mbedtls_ecp_gen_keypair_base>:
int mbedtls_ecp_gen_keypair_base( mbedtls_ecp_group *grp,
                     const mbedtls_ecp_point *G,
                     mbedtls_mpi *d, mbedtls_ecp_point *Q,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b088      	sub	sp, #32
 800d9f4:	af02      	add	r7, sp, #8
 800d9f6:	60f8      	str	r0, [r7, #12]
 800d9f8:	60b9      	str	r1, [r7, #8]
 800d9fa:	607a      	str	r2, [r7, #4]
 800d9fc:	603b      	str	r3, [r7, #0]
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( G     != NULL );
    ECP_VALIDATE_RET( Q     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, d, f_rng, p_rng ) );
 800d9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da00:	6a3a      	ldr	r2, [r7, #32]
 800da02:	6879      	ldr	r1, [r7, #4]
 800da04:	68f8      	ldr	r0, [r7, #12]
 800da06:	f7ff ff4b 	bl	800d8a0 <mbedtls_ecp_gen_privkey>
 800da0a:	6178      	str	r0, [r7, #20]
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d10d      	bne.n	800da2e <mbedtls_ecp_gen_keypair_base+0x3e>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( grp, Q, d, G, f_rng, p_rng ) );
 800da12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da14:	9301      	str	r3, [sp, #4]
 800da16:	6a3b      	ldr	r3, [r7, #32]
 800da18:	9300      	str	r3, [sp, #0]
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	687a      	ldr	r2, [r7, #4]
 800da1e:	6839      	ldr	r1, [r7, #0]
 800da20:	68f8      	ldr	r0, [r7, #12]
 800da22:	f7ff fcc7 	bl	800d3b4 <mbedtls_ecp_mul>
 800da26:	6178      	str	r0, [r7, #20]
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	2b00      	cmp	r3, #0

cleanup:
 800da2c:	bf00      	nop
    return( ret );
 800da2e:	697b      	ldr	r3, [r7, #20]
}
 800da30:	4618      	mov	r0, r3
 800da32:	3718      	adds	r7, #24
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}

0800da38 <mbedtls_ecp_gen_keypair>:
 */
int mbedtls_ecp_gen_keypair( mbedtls_ecp_group *grp,
                             mbedtls_mpi *d, mbedtls_ecp_point *Q,
                             int (*f_rng)(void *, unsigned char *, size_t),
                             void *p_rng )
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b086      	sub	sp, #24
 800da3c:	af02      	add	r7, sp, #8
 800da3e:	60f8      	str	r0, [r7, #12]
 800da40:	60b9      	str	r1, [r7, #8]
 800da42:	607a      	str	r2, [r7, #4]
 800da44:	603b      	str	r3, [r7, #0]
    ECP_VALIDATE_RET( grp   != NULL );
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( Q     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    return( mbedtls_ecp_gen_keypair_base( grp, &grp->G, d, Q, f_rng, p_rng ) );
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800da4c:	69bb      	ldr	r3, [r7, #24]
 800da4e:	9301      	str	r3, [sp, #4]
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	9300      	str	r3, [sp, #0]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	68ba      	ldr	r2, [r7, #8]
 800da58:	68f8      	ldr	r0, [r7, #12]
 800da5a:	f7ff ffc9 	bl	800d9f0 <mbedtls_ecp_gen_keypair_base>
 800da5e:	4603      	mov	r3, r0
}
 800da60:	4618      	mov	r0, r3
 800da62:	3710      	adds	r7, #16
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <mbedtls_ecp_gen_key>:
/*
 * Generate a keypair, prettier wrapper
 */
int mbedtls_ecp_gen_key( mbedtls_ecp_group_id grp_id, mbedtls_ecp_keypair *key,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b088      	sub	sp, #32
 800da6c:	af02      	add	r7, sp, #8
 800da6e:	60b9      	str	r1, [r7, #8]
 800da70:	607a      	str	r2, [r7, #4]
 800da72:	603b      	str	r3, [r7, #0]
 800da74:	4603      	mov	r3, r0
 800da76:	73fb      	strb	r3, [r7, #15]
    int ret;
    ECP_VALIDATE_RET( key   != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    if( ( ret = mbedtls_ecp_group_load( &key->grp, grp_id ) ) != 0 )
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	7bfa      	ldrb	r2, [r7, #15]
 800da7c:	4611      	mov	r1, r2
 800da7e:	4618      	mov	r0, r3
 800da80:	f000 f9d6 	bl	800de30 <mbedtls_ecp_group_load>
 800da84:	6178      	str	r0, [r7, #20]
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d001      	beq.n	800da90 <mbedtls_ecp_gen_key+0x28>
        return( ret );
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	e00c      	b.n	800daaa <mbedtls_ecp_gen_key+0x42>

    return( mbedtls_ecp_gen_keypair( &key->grp, &key->d, &key->Q, f_rng, p_rng ) );
 800da90:	68b8      	ldr	r0, [r7, #8]
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	f103 017c 	add.w	r1, r3, #124	@ 0x7c
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	9300      	str	r3, [sp, #0]
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f7ff ffc8 	bl	800da38 <mbedtls_ecp_gen_keypair>
 800daa8:	4603      	mov	r3, r0
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3718      	adds	r7, #24
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
	...

0800dab4 <mbedtls_ecp_check_pub_priv>:

/*
 * Check a public-private key pair
 */
int mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )
{
 800dab4:	b590      	push	{r4, r7, lr}
 800dab6:	b0af      	sub	sp, #188	@ 0xbc
 800dab8:	af02      	add	r7, sp, #8
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	6039      	str	r1, [r7, #0]
    mbedtls_ecp_point Q;
    mbedtls_ecp_group grp;
    ECP_VALIDATE_RET( pub != NULL );
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d029      	beq.n	800db1a <mbedtls_ecp_check_pub_priv+0x66>
        pub->grp.id != prv->grp.id ||
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	781a      	ldrb	r2, [r3, #0]
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	781b      	ldrb	r3, [r3, #0]
    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 800dace:	429a      	cmp	r2, r3
 800dad0:	d123      	bne.n	800db1a <mbedtls_ecp_check_pub_priv+0x66>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	3388      	adds	r3, #136	@ 0x88
 800dadc:	4619      	mov	r1, r3
 800dade:	4610      	mov	r0, r2
 800dae0:	f7f9 f8e1 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800dae4:	4603      	mov	r3, r0
        pub->grp.id != prv->grp.id ||
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d117      	bne.n	800db1a <mbedtls_ecp_check_pub_priv+0x66>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f103 0294 	add.w	r2, r3, #148	@ 0x94
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	3394      	adds	r3, #148	@ 0x94
 800daf4:	4619      	mov	r1, r3
 800daf6:	4610      	mov	r0, r2
 800daf8:	f7f9 f8d5 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800dafc:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d10b      	bne.n	800db1a <mbedtls_ecp_check_pub_priv+0x66>
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f103 02a0 	add.w	r2, r3, #160	@ 0xa0
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	33a0      	adds	r3, #160	@ 0xa0
 800db0c:	4619      	mov	r1, r3
 800db0e:	4610      	mov	r0, r2
 800db10:	f7f9 f8c9 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800db14:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 800db16:	2b00      	cmp	r3, #0
 800db18:	d001      	beq.n	800db1e <mbedtls_ecp_check_pub_priv+0x6a>
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800db1a:	4b31      	ldr	r3, [pc, #196]	@ (800dbe0 <mbedtls_ecp_check_pub_priv+0x12c>)
 800db1c:	e05c      	b.n	800dbd8 <mbedtls_ecp_check_pub_priv+0x124>
    }

    mbedtls_ecp_point_init( &Q );
 800db1e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800db22:	4618      	mov	r0, r3
 800db24:	f7fc ff82 	bl	800aa2c <mbedtls_ecp_point_init>
    mbedtls_ecp_group_init( &grp );
 800db28:	f107 030c 	add.w	r3, r7, #12
 800db2c:	4618      	mov	r0, r3
 800db2e:	f7fc ff93 	bl	800aa58 <mbedtls_ecp_group_init>

    /* mbedtls_ecp_mul() needs a non-const group... */
    mbedtls_ecp_group_copy( &grp, &prv->grp );
 800db32:	683a      	ldr	r2, [r7, #0]
 800db34:	f107 030c 	add.w	r3, r7, #12
 800db38:	4611      	mov	r1, r2
 800db3a:	4618      	mov	r0, r3
 800db3c:	f7fd f88f 	bl	800ac5e <mbedtls_ecp_group_copy>

    /* Also checks d is valid */
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	f103 027c 	add.w	r2, r3, #124	@ 0x7c
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	3328      	adds	r3, #40	@ 0x28
 800db4a:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800db4e:	f107 000c 	add.w	r0, r7, #12
 800db52:	2400      	movs	r4, #0
 800db54:	9401      	str	r4, [sp, #4]
 800db56:	2400      	movs	r4, #0
 800db58:	9400      	str	r4, [sp, #0]
 800db5a:	f7ff fc2b 	bl	800d3b4 <mbedtls_ecp_mul>
 800db5e:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800db62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db66:	2b00      	cmp	r3, #0
 800db68:	d12a      	bne.n	800dbc0 <mbedtls_ecp_check_pub_priv+0x10c>

    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800db70:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800db74:	4611      	mov	r1, r2
 800db76:	4618      	mov	r0, r3
 800db78:	f7f9 f895 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800db7c:	4603      	mov	r3, r0
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d119      	bne.n	800dbb6 <mbedtls_ecp_check_pub_priv+0x102>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	f103 0294 	add.w	r2, r3, #148	@ 0x94
 800db88:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800db8c:	330c      	adds	r3, #12
 800db8e:	4611      	mov	r1, r2
 800db90:	4618      	mov	r0, r3
 800db92:	f7f9 f888 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800db96:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d10c      	bne.n	800dbb6 <mbedtls_ecp_check_pub_priv+0x102>
        mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	f103 02a0 	add.w	r2, r3, #160	@ 0xa0
 800dba2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800dba6:	3318      	adds	r3, #24
 800dba8:	4611      	mov	r1, r2
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f7f9 f87b 	bl	8006ca6 <mbedtls_mpi_cmp_mpi>
 800dbb0:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d003      	beq.n	800dbbe <mbedtls_ecp_check_pub_priv+0x10a>
    {
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 800dbb6:	4b0a      	ldr	r3, [pc, #40]	@ (800dbe0 <mbedtls_ecp_check_pub_priv+0x12c>)
 800dbb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        goto cleanup;
 800dbbc:	e000      	b.n	800dbc0 <mbedtls_ecp_check_pub_priv+0x10c>
    }

cleanup:
 800dbbe:	bf00      	nop
    mbedtls_ecp_point_free( &Q );
 800dbc0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7fc ff9c 	bl	800ab02 <mbedtls_ecp_point_free>
    mbedtls_ecp_group_free( &grp );
 800dbca:	f107 030c 	add.w	r3, r7, #12
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7fc ffb1 	bl	800ab36 <mbedtls_ecp_group_free>

    return( ret );
 800dbd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	37b4      	adds	r7, #180	@ 0xb4
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd90      	pop	{r4, r7, pc}
 800dbe0:	ffffb080 	.word	0xffffb080

0800dbe4 <ecp_mpi_load>:
/*
 * Create an MPI from embedded constants
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b085      	sub	sp, #20
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	60b9      	str	r1, [r7, #8]
 800dbee:	607a      	str	r2, [r7, #4]
    X->s = 1;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	601a      	str	r2, [r3, #0]
    X->n = len / sizeof( mbedtls_mpi_uint );
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	089a      	lsrs	r2, r3, #2
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	605a      	str	r2, [r3, #4]
    X->p = (mbedtls_mpi_uint *) p;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	68ba      	ldr	r2, [r7, #8]
 800dc02:	609a      	str	r2, [r3, #8]
}
 800dc04:	bf00      	nop
 800dc06:	3714      	adds	r7, #20
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0e:	4770      	bx	lr

0800dc10 <ecp_mpi_set1>:

/*
 * Set an MPI to static value 1
 */
static inline void ecp_mpi_set1( mbedtls_mpi *X )
{
 800dc10:	b480      	push	{r7}
 800dc12:	b083      	sub	sp, #12
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
    static mbedtls_mpi_uint one[] = { 1 };
    X->s = 1;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	601a      	str	r2, [r3, #0]
    X->n = 1;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2201      	movs	r2, #1
 800dc22:	605a      	str	r2, [r3, #4]
    X->p = one;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	4a04      	ldr	r2, [pc, #16]	@ (800dc38 <ecp_mpi_set1+0x28>)
 800dc28:	609a      	str	r2, [r3, #8]
}
 800dc2a:	bf00      	nop
 800dc2c:	370c      	adds	r7, #12
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc34:	4770      	bx	lr
 800dc36:	bf00      	nop
 800dc38:	20000060 	.word	0x20000060

0800dc3c <ecp_group_load>:
                           const mbedtls_mpi_uint *a,  size_t alen,
                           const mbedtls_mpi_uint *b,  size_t blen,
                           const mbedtls_mpi_uint *gx, size_t gxlen,
                           const mbedtls_mpi_uint *gy, size_t gylen,
                           const mbedtls_mpi_uint *n,  size_t nlen)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b084      	sub	sp, #16
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	60b9      	str	r1, [r7, #8]
 800dc46:	607a      	str	r2, [r7, #4]
 800dc48:	603b      	str	r3, [r7, #0]
    ecp_mpi_load( &grp->P, p, plen );
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	3304      	adds	r3, #4
 800dc4e:	687a      	ldr	r2, [r7, #4]
 800dc50:	68b9      	ldr	r1, [r7, #8]
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7ff ffc6 	bl	800dbe4 <ecp_mpi_load>
    if( a != NULL )
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d006      	beq.n	800dc6c <ecp_group_load+0x30>
        ecp_mpi_load( &grp->A, a, alen );
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	3310      	adds	r3, #16
 800dc62:	69ba      	ldr	r2, [r7, #24]
 800dc64:	6839      	ldr	r1, [r7, #0]
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7ff ffbc 	bl	800dbe4 <ecp_mpi_load>
    ecp_mpi_load( &grp->B, b, blen );
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	331c      	adds	r3, #28
 800dc70:	6a3a      	ldr	r2, [r7, #32]
 800dc72:	69f9      	ldr	r1, [r7, #28]
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7ff ffb5 	bl	800dbe4 <ecp_mpi_load>
    ecp_mpi_load( &grp->N, n, nlen );
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	334c      	adds	r3, #76	@ 0x4c
 800dc7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc80:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800dc82:	4618      	mov	r0, r3
 800dc84:	f7ff ffae 	bl	800dbe4 <ecp_mpi_load>

    ecp_mpi_load( &grp->G.X, gx, gxlen );
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	3328      	adds	r3, #40	@ 0x28
 800dc8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dc8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dc90:	4618      	mov	r0, r3
 800dc92:	f7ff ffa7 	bl	800dbe4 <ecp_mpi_load>
    ecp_mpi_load( &grp->G.Y, gy, gylen );
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	3334      	adds	r3, #52	@ 0x34
 800dc9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7ff ffa0 	bl	800dbe4 <ecp_mpi_load>
    ecp_mpi_set1( &grp->G.Z );
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	3340      	adds	r3, #64	@ 0x40
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f7ff ffb1 	bl	800dc10 <ecp_mpi_set1>

    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	3304      	adds	r3, #4
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7f8 fbe8 	bl	8006488 <mbedtls_mpi_bitlen>
 800dcb8:	4602      	mov	r2, r0
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	659a      	str	r2, [r3, #88]	@ 0x58
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	334c      	adds	r3, #76	@ 0x4c
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7f8 fbe0 	bl	8006488 <mbedtls_mpi_bitlen>
 800dcc8:	4602      	mov	r2, r0
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	65da      	str	r2, [r3, #92]	@ 0x5c

    grp->h = 1;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	661a      	str	r2, [r3, #96]	@ 0x60

    return( 0 );
 800dcd4:	2300      	movs	r3, #0
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3710      	adds	r7, #16
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
	...

0800dce0 <ecp_use_curve448>:
#if defined(MBEDTLS_ECP_DP_CURVE448_ENABLED)
/*
 * Specialized function for creating the Curve448 group
 */
static int ecp_use_curve448( mbedtls_ecp_group *grp )
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b086      	sub	sp, #24
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
    mbedtls_mpi Ns;
    int ret;

    mbedtls_mpi_init( &Ns );
 800dce8:	f107 0308 	add.w	r3, r7, #8
 800dcec:	4618      	mov	r0, r3
 800dcee:	f7f8 f894 	bl	8005e1a <mbedtls_mpi_init>

    /* Actually ( A + 2 ) / 4 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->A, 16, "98AA" ) );
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	3310      	adds	r3, #16
 800dcf6:	4a4c      	ldr	r2, [pc, #304]	@ (800de28 <ecp_use_curve448+0x148>)
 800dcf8:	2110      	movs	r1, #16
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f7f8 fc40 	bl	8006580 <mbedtls_mpi_read_string>
 800dd00:	6178      	str	r0, [r7, #20]
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d17f      	bne.n	800de08 <ecp_use_curve448+0x128>

    /* P = 2^448 - 2^224 - 1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->P, 1 ) );
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	3304      	adds	r3, #4
 800dd0c:	2101      	movs	r1, #1
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7f8 fac4 	bl	800629c <mbedtls_mpi_lset>
 800dd14:	6178      	str	r0, [r7, #20]
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d175      	bne.n	800de08 <ecp_use_curve448+0x128>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 224 ) );
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	3304      	adds	r3, #4
 800dd20:	21e0      	movs	r1, #224	@ 0xe0
 800dd22:	4618      	mov	r0, r3
 800dd24:	f7f8 fe00 	bl	8006928 <mbedtls_mpi_shift_l>
 800dd28:	6178      	str	r0, [r7, #20]
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d16b      	bne.n	800de08 <ecp_use_curve448+0x128>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 1 ) );
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	1d18      	adds	r0, r3, #4
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	3304      	adds	r3, #4
 800dd38:	2201      	movs	r2, #1
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	f7f9 fa85 	bl	800724a <mbedtls_mpi_sub_int>
 800dd40:	6178      	str	r0, [r7, #20]
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d15f      	bne.n	800de08 <ecp_use_curve448+0x128>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 224 ) );
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	3304      	adds	r3, #4
 800dd4c:	21e0      	movs	r1, #224	@ 0xe0
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7f8 fdea 	bl	8006928 <mbedtls_mpi_shift_l>
 800dd54:	6178      	str	r0, [r7, #20]
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d155      	bne.n	800de08 <ecp_use_curve448+0x128>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 1 ) );
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	1d18      	adds	r0, r3, #4
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	3304      	adds	r3, #4
 800dd64:	2201      	movs	r2, #1
 800dd66:	4619      	mov	r1, r3
 800dd68:	f7f9 fa6f 	bl	800724a <mbedtls_mpi_sub_int>
 800dd6c:	6178      	str	r0, [r7, #20]
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d149      	bne.n	800de08 <ecp_use_curve448+0x128>
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	3304      	adds	r3, #4
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f7f8 fb85 	bl	8006488 <mbedtls_mpi_bitlen>
 800dd7e:	4602      	mov	r2, r0
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Y intentionally not set, since we use x/z coordinates.
     * This is used as a marker to identify Montgomery curves! */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.X, 5 ) );
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	3328      	adds	r3, #40	@ 0x28
 800dd88:	2105      	movs	r1, #5
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f7f8 fa86 	bl	800629c <mbedtls_mpi_lset>
 800dd90:	6178      	str	r0, [r7, #20]
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d137      	bne.n	800de08 <ecp_use_curve448+0x128>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.Z, 1 ) );
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	3340      	adds	r3, #64	@ 0x40
 800dd9c:	2101      	movs	r1, #1
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f7f8 fa7c 	bl	800629c <mbedtls_mpi_lset>
 800dda4:	6178      	str	r0, [r7, #20]
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d12d      	bne.n	800de08 <ecp_use_curve448+0x128>
    mbedtls_mpi_free( &grp->G.Y );
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	3334      	adds	r3, #52	@ 0x34
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f7f8 f845 	bl	8005e40 <mbedtls_mpi_free>

    /* N = 2^446 - 13818066809895115352007386748515426880336692474882178609894547503885 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( &grp->N, 446, 1 ) );
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	334c      	adds	r3, #76	@ 0x4c
 800ddba:	2201      	movs	r2, #1
 800ddbc:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7f8 fab8 	bl	8006336 <mbedtls_mpi_set_bit>
 800ddc6:	6178      	str	r0, [r7, #20]
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d11c      	bne.n	800de08 <ecp_use_curve448+0x128>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &Ns, 16,
 800ddce:	f107 0308 	add.w	r3, r7, #8
 800ddd2:	4a16      	ldr	r2, [pc, #88]	@ (800de2c <ecp_use_curve448+0x14c>)
 800ddd4:	2110      	movs	r1, #16
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f7f8 fbd2 	bl	8006580 <mbedtls_mpi_read_string>
 800dddc:	6178      	str	r0, [r7, #20]
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d111      	bne.n	800de08 <ecp_use_curve448+0x128>
                                              "8335DC163BB124B65129C96FDE933D8D723A70AADC873D6D54A7BB0D" ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &grp->N, &grp->N, &Ns ) );
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	334c      	adds	r3, #76	@ 0x4c
 800ddee:	f107 0208 	add.w	r2, r7, #8
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	f7f9 f9c1 	bl	800717a <mbedtls_mpi_sub_mpi>
 800ddf8:	6178      	str	r0, [r7, #20]
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d103      	bne.n	800de08 <ecp_use_curve448+0x128>

    /* Actually, the required msb for private keys */
    grp->nbits = 447;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f240 12bf 	movw	r2, #447	@ 0x1bf
 800de06:	65da      	str	r2, [r3, #92]	@ 0x5c

cleanup:
    mbedtls_mpi_free( &Ns );
 800de08:	f107 0308 	add.w	r3, r7, #8
 800de0c:	4618      	mov	r0, r3
 800de0e:	f7f8 f817 	bl	8005e40 <mbedtls_mpi_free>
    if( ret != 0 )
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d002      	beq.n	800de1e <ecp_use_curve448+0x13e>
        mbedtls_ecp_group_free( grp );
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f7fc fe8c 	bl	800ab36 <mbedtls_ecp_group_free>

    return( ret );
 800de1e:	697b      	ldr	r3, [r7, #20]
}
 800de20:	4618      	mov	r0, r3
 800de22:	3718      	adds	r7, #24
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}
 800de28:	080180f4 	.word	0x080180f4
 800de2c:	080180fc 	.word	0x080180fc

0800de30 <mbedtls_ecp_group_load>:

/*
 * Set a group using well-known domain parameters
 */
int mbedtls_ecp_group_load( mbedtls_ecp_group *grp, mbedtls_ecp_group_id id )
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b08c      	sub	sp, #48	@ 0x30
 800de34:	af0a      	add	r7, sp, #40	@ 0x28
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	460b      	mov	r3, r1
 800de3a:	70fb      	strb	r3, [r7, #3]
    ECP_VALIDATE_RET( grp != NULL );
    mbedtls_ecp_group_free( grp );
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f7fc fe7a 	bl	800ab36 <mbedtls_ecp_group_free>

    grp->id = id;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	78fa      	ldrb	r2, [r7, #3]
 800de46:	701a      	strb	r2, [r3, #0]

    switch( id )
 800de48:	78fb      	ldrb	r3, [r7, #3]
 800de4a:	2b0d      	cmp	r3, #13
 800de4c:	d040      	beq.n	800ded0 <mbedtls_ecp_group_load+0xa0>
 800de4e:	2b0d      	cmp	r3, #13
 800de50:	dc46      	bgt.n	800dee0 <mbedtls_ecp_group_load+0xb0>
 800de52:	2b03      	cmp	r3, #3
 800de54:	d002      	beq.n	800de5c <mbedtls_ecp_group_load+0x2c>
 800de56:	2b04      	cmp	r3, #4
 800de58:	d01d      	beq.n	800de96 <mbedtls_ecp_group_load+0x66>
 800de5a:	e041      	b.n	800dee0 <mbedtls_ecp_group_load+0xb0>
            return( LOAD_GROUP( secp224r1 ) );
#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP256R1:
            NIST_MODP( p256 );
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	4a24      	ldr	r2, [pc, #144]	@ (800def0 <mbedtls_ecp_group_load+0xc0>)
 800de60:	665a      	str	r2, [r3, #100]	@ 0x64
            return( LOAD_GROUP( secp256r1 ) );
 800de62:	2320      	movs	r3, #32
 800de64:	9308      	str	r3, [sp, #32]
 800de66:	4b23      	ldr	r3, [pc, #140]	@ (800def4 <mbedtls_ecp_group_load+0xc4>)
 800de68:	9307      	str	r3, [sp, #28]
 800de6a:	2320      	movs	r3, #32
 800de6c:	9306      	str	r3, [sp, #24]
 800de6e:	4b22      	ldr	r3, [pc, #136]	@ (800def8 <mbedtls_ecp_group_load+0xc8>)
 800de70:	9305      	str	r3, [sp, #20]
 800de72:	2320      	movs	r3, #32
 800de74:	9304      	str	r3, [sp, #16]
 800de76:	4b21      	ldr	r3, [pc, #132]	@ (800defc <mbedtls_ecp_group_load+0xcc>)
 800de78:	9303      	str	r3, [sp, #12]
 800de7a:	2320      	movs	r3, #32
 800de7c:	9302      	str	r3, [sp, #8]
 800de7e:	4b20      	ldr	r3, [pc, #128]	@ (800df00 <mbedtls_ecp_group_load+0xd0>)
 800de80:	9301      	str	r3, [sp, #4]
 800de82:	2300      	movs	r3, #0
 800de84:	9300      	str	r3, [sp, #0]
 800de86:	2300      	movs	r3, #0
 800de88:	2220      	movs	r2, #32
 800de8a:	491e      	ldr	r1, [pc, #120]	@ (800df04 <mbedtls_ecp_group_load+0xd4>)
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f7ff fed5 	bl	800dc3c <ecp_group_load>
 800de92:	4603      	mov	r3, r0
 800de94:	e028      	b.n	800dee8 <mbedtls_ecp_group_load+0xb8>
#endif /* MBEDTLS_ECP_DP_SECP256R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP384R1:
            NIST_MODP( p384 );
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	4a1b      	ldr	r2, [pc, #108]	@ (800df08 <mbedtls_ecp_group_load+0xd8>)
 800de9a:	665a      	str	r2, [r3, #100]	@ 0x64
            return( LOAD_GROUP( secp384r1 ) );
 800de9c:	2330      	movs	r3, #48	@ 0x30
 800de9e:	9308      	str	r3, [sp, #32]
 800dea0:	4b1a      	ldr	r3, [pc, #104]	@ (800df0c <mbedtls_ecp_group_load+0xdc>)
 800dea2:	9307      	str	r3, [sp, #28]
 800dea4:	2330      	movs	r3, #48	@ 0x30
 800dea6:	9306      	str	r3, [sp, #24]
 800dea8:	4b19      	ldr	r3, [pc, #100]	@ (800df10 <mbedtls_ecp_group_load+0xe0>)
 800deaa:	9305      	str	r3, [sp, #20]
 800deac:	2330      	movs	r3, #48	@ 0x30
 800deae:	9304      	str	r3, [sp, #16]
 800deb0:	4b18      	ldr	r3, [pc, #96]	@ (800df14 <mbedtls_ecp_group_load+0xe4>)
 800deb2:	9303      	str	r3, [sp, #12]
 800deb4:	2330      	movs	r3, #48	@ 0x30
 800deb6:	9302      	str	r3, [sp, #8]
 800deb8:	4b17      	ldr	r3, [pc, #92]	@ (800df18 <mbedtls_ecp_group_load+0xe8>)
 800deba:	9301      	str	r3, [sp, #4]
 800debc:	2300      	movs	r3, #0
 800debe:	9300      	str	r3, [sp, #0]
 800dec0:	2300      	movs	r3, #0
 800dec2:	2230      	movs	r2, #48	@ 0x30
 800dec4:	4915      	ldr	r1, [pc, #84]	@ (800df1c <mbedtls_ecp_group_load+0xec>)
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f7ff feb8 	bl	800dc3c <ecp_group_load>
 800decc:	4603      	mov	r3, r0
 800dece:	e00b      	b.n	800dee8 <mbedtls_ecp_group_load+0xb8>
            return( ecp_use_curve25519( grp ) );
#endif /* MBEDTLS_ECP_DP_CURVE25519_ENABLED */

#if defined(MBEDTLS_ECP_DP_CURVE448_ENABLED)
        case MBEDTLS_ECP_DP_CURVE448:
            grp->modp = ecp_mod_p448;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	4a13      	ldr	r2, [pc, #76]	@ (800df20 <mbedtls_ecp_group_load+0xf0>)
 800ded4:	665a      	str	r2, [r3, #100]	@ 0x64
            return( ecp_use_curve448( grp ) );
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f7ff ff02 	bl	800dce0 <ecp_use_curve448>
 800dedc:	4603      	mov	r3, r0
 800dede:	e003      	b.n	800dee8 <mbedtls_ecp_group_load+0xb8>
#endif /* MBEDTLS_ECP_DP_CURVE448_ENABLED */

        default:
            mbedtls_ecp_group_free( grp );
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f7fc fe28 	bl	800ab36 <mbedtls_ecp_group_free>
            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 800dee6:	4b0f      	ldr	r3, [pc, #60]	@ (800df24 <mbedtls_ecp_group_load+0xf4>)
    }
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3708      	adds	r7, #8
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}
 800def0:	0800e005 	.word	0x0800e005
 800def4:	0801af64 	.word	0x0801af64
 800def8:	0801af44 	.word	0x0801af44
 800defc:	0801af24 	.word	0x0801af24
 800df00:	0801af04 	.word	0x0801af04
 800df04:	0801aee4 	.word	0x0801aee4
 800df08:	0800e83b 	.word	0x0800e83b
 800df0c:	0801b044 	.word	0x0801b044
 800df10:	0801b014 	.word	0x0801b014
 800df14:	0801afe4 	.word	0x0801afe4
 800df18:	0801afb4 	.word	0x0801afb4
 800df1c:	0801af84 	.word	0x0801af84
 800df20:	0800f2ed 	.word	0x0800f2ed
 800df24:	ffffb180 	.word	0xffffb180

0800df28 <add32>:

/*
 * Helpers for addition and subtraction of chunks, with signed carry.
 */
static inline void add32( uint32_t *dst, uint32_t src, signed char *carry )
{
 800df28:	b480      	push	{r7}
 800df2a:	b085      	sub	sp, #20
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	60b9      	str	r1, [r7, #8]
 800df32:	607a      	str	r2, [r7, #4]
    *dst += src;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	681a      	ldr	r2, [r3, #0]
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	441a      	add	r2, r3
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	601a      	str	r2, [r3, #0]
    *carry += ( *dst < src );
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f993 3000 	ldrsb.w	r3, [r3]
 800df46:	b2db      	uxtb	r3, r3
 800df48:	68fa      	ldr	r2, [r7, #12]
 800df4a:	6812      	ldr	r2, [r2, #0]
 800df4c:	68b9      	ldr	r1, [r7, #8]
 800df4e:	4291      	cmp	r1, r2
 800df50:	bf8c      	ite	hi
 800df52:	2201      	movhi	r2, #1
 800df54:	2200      	movls	r2, #0
 800df56:	b2d2      	uxtb	r2, r2
 800df58:	4413      	add	r3, r2
 800df5a:	b2db      	uxtb	r3, r3
 800df5c:	b25a      	sxtb	r2, r3
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	701a      	strb	r2, [r3, #0]
}
 800df62:	bf00      	nop
 800df64:	3714      	adds	r7, #20
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr

0800df6e <sub32>:

static inline void sub32( uint32_t *dst, uint32_t src, signed char *carry )
{
 800df6e:	b480      	push	{r7}
 800df70:	b085      	sub	sp, #20
 800df72:	af00      	add	r7, sp, #0
 800df74:	60f8      	str	r0, [r7, #12]
 800df76:	60b9      	str	r1, [r7, #8]
 800df78:	607a      	str	r2, [r7, #4]
    *carry -= ( *dst < src );
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f993 3000 	ldrsb.w	r3, [r3]
 800df80:	b2db      	uxtb	r3, r3
 800df82:	68fa      	ldr	r2, [r7, #12]
 800df84:	6812      	ldr	r2, [r2, #0]
 800df86:	68b9      	ldr	r1, [r7, #8]
 800df88:	4291      	cmp	r1, r2
 800df8a:	bf8c      	ite	hi
 800df8c:	2201      	movhi	r2, #1
 800df8e:	2200      	movls	r2, #0
 800df90:	b2d2      	uxtb	r2, r2
 800df92:	1a9b      	subs	r3, r3, r2
 800df94:	b2db      	uxtb	r3, r3
 800df96:	b25a      	sxtb	r2, r3
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	701a      	strb	r2, [r3, #0]
    *dst -= src;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	681a      	ldr	r2, [r3, #0]
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	1ad2      	subs	r2, r2, r3
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	601a      	str	r2, [r3, #0]
}
 800dfa8:	bf00      	nop
 800dfaa:	3714      	adds	r7, #20
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr

0800dfb4 <fix_negative>:
/*
 * If the result is negative, we get it in the form
 * c * 2^(bits + 32) + N, with c negative and N positive shorter than 'bits'
 */
static inline int fix_negative( mbedtls_mpi *N, signed char c, mbedtls_mpi *C, size_t bits )
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b086      	sub	sp, #24
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	60f8      	str	r0, [r7, #12]
 800dfbc:	607a      	str	r2, [r7, #4]
 800dfbe:	603b      	str	r3, [r7, #0]
 800dfc0:	460b      	mov	r3, r1
 800dfc2:	72fb      	strb	r3, [r7, #11]
#else
    if( bits == 224 )
        C->p[ C->n - 1 ] = ((mbedtls_mpi_uint) -c) << 32;
    else
#endif
        C->p[ C->n - 1 ] = (mbedtls_mpi_uint) -c;
 800dfc4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800dfc8:	4259      	negs	r1, r3
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	689a      	ldr	r2, [r3, #8]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	685b      	ldr	r3, [r3, #4]
 800dfd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dfd6:	3b01      	subs	r3, #1
 800dfd8:	009b      	lsls	r3, r3, #2
 800dfda:	4413      	add	r3, r2
 800dfdc:	460a      	mov	r2, r1
 800dfde:	601a      	str	r2, [r3, #0]

    /* N = - ( C - N ) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );
 800dfe0:	68fa      	ldr	r2, [r7, #12]
 800dfe2:	6879      	ldr	r1, [r7, #4]
 800dfe4:	68f8      	ldr	r0, [r7, #12]
 800dfe6:	f7f9 f824 	bl	8007032 <mbedtls_mpi_sub_abs>
 800dfea:	6178      	str	r0, [r7, #20]
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d103      	bne.n	800dffa <fix_negative+0x46>
    N->s = -1;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	f04f 32ff 	mov.w	r2, #4294967295
 800dff8:	601a      	str	r2, [r3, #0]

cleanup:

    return( ret );
 800dffa:	697b      	ldr	r3, [r7, #20]
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3718      	adds	r7, #24
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}

0800e004 <ecp_mod_p256>:
#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
/*
 * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)
 */
static int ecp_mod_p256( mbedtls_mpi *N )
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b094      	sub	sp, #80	@ 0x50
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
    INIT( 256 );
 800e00c:	2300      	movs	r3, #0
 800e00e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e012:	2300      	movs	r3, #0
 800e014:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e016:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e01a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e01c:	2301      	movs	r3, #1
 800e01e:	633b      	str	r3, [r7, #48]	@ 0x30
 800e020:	2309      	movs	r3, #9
 800e022:	637b      	str	r3, [r7, #52]	@ 0x34
 800e024:	f107 030c 	add.w	r3, r7, #12
 800e028:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e02a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e02c:	009a      	lsls	r2, r3, #2
 800e02e:	f107 030c 	add.w	r3, r7, #12
 800e032:	2100      	movs	r1, #0
 800e034:	4618      	mov	r0, r3
 800e036:	f008 fdbf 	bl	8016bb8 <memset>
 800e03a:	2110      	movs	r1, #16
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f7f7 ff25 	bl	8005e8c <mbedtls_mpi_grow>
 800e042:	6478      	str	r0, [r7, #68]	@ 0x44
 800e044:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e046:	2b00      	cmp	r3, #0
 800e048:	f040 83f2 	bne.w	800e830 <ecp_mod_p256+0x82c>
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	689a      	ldr	r2, [r3, #8]
 800e050:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e052:	009b      	lsls	r3, r3, #2
 800e054:	4413      	add	r3, r2
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	63fb      	str	r3, [r7, #60]	@ 0x3c

    ADD(  8 ); ADD(  9 );
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	689b      	ldr	r3, [r3, #8]
 800e05e:	3320      	adds	r3, #32
 800e060:	6819      	ldr	r1, [r3, #0]
 800e062:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e066:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7ff ff5c 	bl	800df28 <add32>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	689b      	ldr	r3, [r3, #8]
 800e074:	3324      	adds	r3, #36	@ 0x24
 800e076:	6819      	ldr	r1, [r3, #0]
 800e078:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e07c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e080:	4618      	mov	r0, r3
 800e082:	f7ff ff51 	bl	800df28 <add32>
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	689b      	ldr	r3, [r3, #8]
 800e08a:	332c      	adds	r3, #44	@ 0x2c
 800e08c:	6819      	ldr	r1, [r3, #0]
 800e08e:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e092:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e096:	4618      	mov	r0, r3
 800e098:	f7ff ff69 	bl	800df6e <sub32>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	689b      	ldr	r3, [r3, #8]
 800e0a0:	3330      	adds	r3, #48	@ 0x30
 800e0a2:	6819      	ldr	r1, [r3, #0]
 800e0a4:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e0a8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f7ff ff5e 	bl	800df6e <sub32>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	689b      	ldr	r3, [r3, #8]
 800e0b6:	3334      	adds	r3, #52	@ 0x34
 800e0b8:	6819      	ldr	r1, [r3, #0]
 800e0ba:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e0be:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f7ff ff53 	bl	800df6e <sub32>
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	689b      	ldr	r3, [r3, #8]
 800e0cc:	3338      	adds	r3, #56	@ 0x38
 800e0ce:	6819      	ldr	r1, [r3, #0]
 800e0d0:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e0d4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f7ff ff48 	bl	800df6e <sub32>
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	689a      	ldr	r2, [r3, #8]
 800e0e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e0e4:	009b      	lsls	r3, r3, #2
 800e0e6:	4413      	add	r3, r2
 800e0e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e0ea:	601a      	str	r2, [r3, #0]
 800e0ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e0ee:	3301      	adds	r3, #1
 800e0f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	689a      	ldr	r2, [r3, #8]
 800e0f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e0f8:	009b      	lsls	r3, r3, #2
 800e0fa:	4413      	add	r3, r2
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e100:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800e104:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e108:	2300      	movs	r3, #0
 800e10a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e10e:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 800e112:	2b00      	cmp	r3, #0
 800e114:	da0b      	bge.n	800e12e <ecp_mod_p256+0x12a>
 800e116:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 800e11a:	425b      	negs	r3, r3
 800e11c:	4619      	mov	r1, r3
 800e11e:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e122:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e126:	4618      	mov	r0, r3
 800e128:	f7ff ff21 	bl	800df6e <sub32>
 800e12c:	e008      	b.n	800e140 <ecp_mod_p256+0x13c>
 800e12e:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 800e132:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e136:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7ff fef4 	bl	800df28 <add32>

    ADD(  9 ); ADD( 10 );
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	689b      	ldr	r3, [r3, #8]
 800e144:	3324      	adds	r3, #36	@ 0x24
 800e146:	6819      	ldr	r1, [r3, #0]
 800e148:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e14c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e150:	4618      	mov	r0, r3
 800e152:	f7ff fee9 	bl	800df28 <add32>
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	689b      	ldr	r3, [r3, #8]
 800e15a:	3328      	adds	r3, #40	@ 0x28
 800e15c:	6819      	ldr	r1, [r3, #0]
 800e15e:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e162:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e166:	4618      	mov	r0, r3
 800e168:	f7ff fede 	bl	800df28 <add32>
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	689b      	ldr	r3, [r3, #8]
 800e170:	3330      	adds	r3, #48	@ 0x30
 800e172:	6819      	ldr	r1, [r3, #0]
 800e174:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e178:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7ff fef6 	bl	800df6e <sub32>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	689b      	ldr	r3, [r3, #8]
 800e186:	3334      	adds	r3, #52	@ 0x34
 800e188:	6819      	ldr	r1, [r3, #0]
 800e18a:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e18e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e192:	4618      	mov	r0, r3
 800e194:	f7ff feeb 	bl	800df6e <sub32>
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	689b      	ldr	r3, [r3, #8]
 800e19c:	3338      	adds	r3, #56	@ 0x38
 800e19e:	6819      	ldr	r1, [r3, #0]
 800e1a0:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e1a4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f7ff fee0 	bl	800df6e <sub32>
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	689b      	ldr	r3, [r3, #8]
 800e1b2:	333c      	adds	r3, #60	@ 0x3c
 800e1b4:	6819      	ldr	r1, [r3, #0]
 800e1b6:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e1ba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f7ff fed5 	bl	800df6e <sub32>
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	689a      	ldr	r2, [r3, #8]
 800e1c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e1ca:	009b      	lsls	r3, r3, #2
 800e1cc:	4413      	add	r3, r2
 800e1ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e1d0:	601a      	str	r2, [r3, #0]
 800e1d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e1d4:	3301      	adds	r3, #1
 800e1d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	689a      	ldr	r2, [r3, #8]
 800e1dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e1de:	009b      	lsls	r3, r3, #2
 800e1e0:	4413      	add	r3, r2
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e1e6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800e1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e1f4:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	da0b      	bge.n	800e214 <ecp_mod_p256+0x210>
 800e1fc:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 800e200:	425b      	negs	r3, r3
 800e202:	4619      	mov	r1, r3
 800e204:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e208:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7ff feae 	bl	800df6e <sub32>
 800e212:	e008      	b.n	800e226 <ecp_mod_p256+0x222>
 800e214:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 800e218:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e21c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e220:	4618      	mov	r0, r3
 800e222:	f7ff fe81 	bl	800df28 <add32>

    ADD( 10 ); ADD( 11 );
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	689b      	ldr	r3, [r3, #8]
 800e22a:	3328      	adds	r3, #40	@ 0x28
 800e22c:	6819      	ldr	r1, [r3, #0]
 800e22e:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e232:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e236:	4618      	mov	r0, r3
 800e238:	f7ff fe76 	bl	800df28 <add32>
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	689b      	ldr	r3, [r3, #8]
 800e240:	332c      	adds	r3, #44	@ 0x2c
 800e242:	6819      	ldr	r1, [r3, #0]
 800e244:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e248:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e24c:	4618      	mov	r0, r3
 800e24e:	f7ff fe6b 	bl	800df28 <add32>
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	689b      	ldr	r3, [r3, #8]
 800e256:	3334      	adds	r3, #52	@ 0x34
 800e258:	6819      	ldr	r1, [r3, #0]
 800e25a:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e25e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e262:	4618      	mov	r0, r3
 800e264:	f7ff fe83 	bl	800df6e <sub32>
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	689b      	ldr	r3, [r3, #8]
 800e26c:	3338      	adds	r3, #56	@ 0x38
 800e26e:	6819      	ldr	r1, [r3, #0]
 800e270:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e274:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e278:	4618      	mov	r0, r3
 800e27a:	f7ff fe78 	bl	800df6e <sub32>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	689b      	ldr	r3, [r3, #8]
 800e282:	333c      	adds	r3, #60	@ 0x3c
 800e284:	6819      	ldr	r1, [r3, #0]
 800e286:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e28a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e28e:	4618      	mov	r0, r3
 800e290:	f7ff fe6d 	bl	800df6e <sub32>
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	689a      	ldr	r2, [r3, #8]
 800e298:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e29a:	009b      	lsls	r3, r3, #2
 800e29c:	4413      	add	r3, r2
 800e29e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e2a0:	601a      	str	r2, [r3, #0]
 800e2a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	689a      	ldr	r2, [r3, #8]
 800e2ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2ae:	009b      	lsls	r3, r3, #2
 800e2b0:	4413      	add	r3, r2
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e2b6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800e2ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e2be:	2300      	movs	r3, #0
 800e2c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e2c4:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	da0b      	bge.n	800e2e4 <ecp_mod_p256+0x2e0>
 800e2cc:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 800e2d0:	425b      	negs	r3, r3
 800e2d2:	4619      	mov	r1, r3
 800e2d4:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e2d8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f7ff fe46 	bl	800df6e <sub32>
 800e2e2:	e008      	b.n	800e2f6 <ecp_mod_p256+0x2f2>
 800e2e4:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 800e2e8:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e2ec:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f7ff fe19 	bl	800df28 <add32>

    ADD( 11 ); ADD( 11 ); ADD( 12 ); ADD( 12 ); ADD( 13 );
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	689b      	ldr	r3, [r3, #8]
 800e2fa:	332c      	adds	r3, #44	@ 0x2c
 800e2fc:	6819      	ldr	r1, [r3, #0]
 800e2fe:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e302:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e306:	4618      	mov	r0, r3
 800e308:	f7ff fe0e 	bl	800df28 <add32>
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	689b      	ldr	r3, [r3, #8]
 800e310:	332c      	adds	r3, #44	@ 0x2c
 800e312:	6819      	ldr	r1, [r3, #0]
 800e314:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e318:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7ff fe03 	bl	800df28 <add32>
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	689b      	ldr	r3, [r3, #8]
 800e326:	3330      	adds	r3, #48	@ 0x30
 800e328:	6819      	ldr	r1, [r3, #0]
 800e32a:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e32e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e332:	4618      	mov	r0, r3
 800e334:	f7ff fdf8 	bl	800df28 <add32>
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	689b      	ldr	r3, [r3, #8]
 800e33c:	3330      	adds	r3, #48	@ 0x30
 800e33e:	6819      	ldr	r1, [r3, #0]
 800e340:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e344:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e348:	4618      	mov	r0, r3
 800e34a:	f7ff fded 	bl	800df28 <add32>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	689b      	ldr	r3, [r3, #8]
 800e352:	3334      	adds	r3, #52	@ 0x34
 800e354:	6819      	ldr	r1, [r3, #0]
 800e356:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e35a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e35e:	4618      	mov	r0, r3
 800e360:	f7ff fde2 	bl	800df28 <add32>
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	689b      	ldr	r3, [r3, #8]
 800e368:	333c      	adds	r3, #60	@ 0x3c
 800e36a:	6819      	ldr	r1, [r3, #0]
 800e36c:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e370:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e374:	4618      	mov	r0, r3
 800e376:	f7ff fdfa 	bl	800df6e <sub32>
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	689b      	ldr	r3, [r3, #8]
 800e37e:	3320      	adds	r3, #32
 800e380:	6819      	ldr	r1, [r3, #0]
 800e382:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e386:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e38a:	4618      	mov	r0, r3
 800e38c:	f7ff fdef 	bl	800df6e <sub32>
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	689b      	ldr	r3, [r3, #8]
 800e394:	3324      	adds	r3, #36	@ 0x24
 800e396:	6819      	ldr	r1, [r3, #0]
 800e398:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e39c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7ff fde4 	bl	800df6e <sub32>
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	689a      	ldr	r2, [r3, #8]
 800e3aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3ac:	009b      	lsls	r3, r3, #2
 800e3ae:	4413      	add	r3, r2
 800e3b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e3b2:	601a      	str	r2, [r3, #0]
 800e3b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	689a      	ldr	r2, [r3, #8]
 800e3be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3c0:	009b      	lsls	r3, r3, #2
 800e3c2:	4413      	add	r3, r2
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e3c8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800e3cc:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e3d6:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	da0b      	bge.n	800e3f6 <ecp_mod_p256+0x3f2>
 800e3de:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 800e3e2:	425b      	negs	r3, r3
 800e3e4:	4619      	mov	r1, r3
 800e3e6:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e3ea:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f7ff fdbd 	bl	800df6e <sub32>
 800e3f4:	e008      	b.n	800e408 <ecp_mod_p256+0x404>
 800e3f6:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 800e3fa:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e3fe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e402:	4618      	mov	r0, r3
 800e404:	f7ff fd90 	bl	800df28 <add32>

    ADD( 12 ); ADD( 12 ); ADD( 13 ); ADD( 13 ); ADD( 14 );
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	689b      	ldr	r3, [r3, #8]
 800e40c:	3330      	adds	r3, #48	@ 0x30
 800e40e:	6819      	ldr	r1, [r3, #0]
 800e410:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e414:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e418:	4618      	mov	r0, r3
 800e41a:	f7ff fd85 	bl	800df28 <add32>
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	689b      	ldr	r3, [r3, #8]
 800e422:	3330      	adds	r3, #48	@ 0x30
 800e424:	6819      	ldr	r1, [r3, #0]
 800e426:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e42a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e42e:	4618      	mov	r0, r3
 800e430:	f7ff fd7a 	bl	800df28 <add32>
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	689b      	ldr	r3, [r3, #8]
 800e438:	3334      	adds	r3, #52	@ 0x34
 800e43a:	6819      	ldr	r1, [r3, #0]
 800e43c:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e440:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e444:	4618      	mov	r0, r3
 800e446:	f7ff fd6f 	bl	800df28 <add32>
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	689b      	ldr	r3, [r3, #8]
 800e44e:	3334      	adds	r3, #52	@ 0x34
 800e450:	6819      	ldr	r1, [r3, #0]
 800e452:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e456:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e45a:	4618      	mov	r0, r3
 800e45c:	f7ff fd64 	bl	800df28 <add32>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	689b      	ldr	r3, [r3, #8]
 800e464:	3338      	adds	r3, #56	@ 0x38
 800e466:	6819      	ldr	r1, [r3, #0]
 800e468:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e46c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e470:	4618      	mov	r0, r3
 800e472:	f7ff fd59 	bl	800df28 <add32>
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	689b      	ldr	r3, [r3, #8]
 800e47a:	3324      	adds	r3, #36	@ 0x24
 800e47c:	6819      	ldr	r1, [r3, #0]
 800e47e:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e482:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e486:	4618      	mov	r0, r3
 800e488:	f7ff fd71 	bl	800df6e <sub32>
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	689b      	ldr	r3, [r3, #8]
 800e490:	3328      	adds	r3, #40	@ 0x28
 800e492:	6819      	ldr	r1, [r3, #0]
 800e494:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e498:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e49c:	4618      	mov	r0, r3
 800e49e:	f7ff fd66 	bl	800df6e <sub32>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	689a      	ldr	r2, [r3, #8]
 800e4a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4a8:	009b      	lsls	r3, r3, #2
 800e4aa:	4413      	add	r3, r2
 800e4ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e4ae:	601a      	str	r2, [r3, #0]
 800e4b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4b2:	3301      	adds	r3, #1
 800e4b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	689a      	ldr	r2, [r3, #8]
 800e4ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4bc:	009b      	lsls	r3, r3, #2
 800e4be:	4413      	add	r3, r2
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e4c4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800e4c8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e4d2:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	da0b      	bge.n	800e4f2 <ecp_mod_p256+0x4ee>
 800e4da:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 800e4de:	425b      	negs	r3, r3
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e4e6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7ff fd3f 	bl	800df6e <sub32>
 800e4f0:	e008      	b.n	800e504 <ecp_mod_p256+0x500>
 800e4f2:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 800e4f6:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e4fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e4fe:	4618      	mov	r0, r3
 800e500:	f7ff fd12 	bl	800df28 <add32>

    ADD( 13 ); ADD( 13 ); ADD( 14 ); ADD( 14 ); ADD( 15 );
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	689b      	ldr	r3, [r3, #8]
 800e508:	3334      	adds	r3, #52	@ 0x34
 800e50a:	6819      	ldr	r1, [r3, #0]
 800e50c:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e510:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e514:	4618      	mov	r0, r3
 800e516:	f7ff fd07 	bl	800df28 <add32>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	689b      	ldr	r3, [r3, #8]
 800e51e:	3334      	adds	r3, #52	@ 0x34
 800e520:	6819      	ldr	r1, [r3, #0]
 800e522:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e526:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e52a:	4618      	mov	r0, r3
 800e52c:	f7ff fcfc 	bl	800df28 <add32>
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	689b      	ldr	r3, [r3, #8]
 800e534:	3338      	adds	r3, #56	@ 0x38
 800e536:	6819      	ldr	r1, [r3, #0]
 800e538:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e53c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e540:	4618      	mov	r0, r3
 800e542:	f7ff fcf1 	bl	800df28 <add32>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	689b      	ldr	r3, [r3, #8]
 800e54a:	3338      	adds	r3, #56	@ 0x38
 800e54c:	6819      	ldr	r1, [r3, #0]
 800e54e:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e552:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e556:	4618      	mov	r0, r3
 800e558:	f7ff fce6 	bl	800df28 <add32>
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	689b      	ldr	r3, [r3, #8]
 800e560:	333c      	adds	r3, #60	@ 0x3c
 800e562:	6819      	ldr	r1, [r3, #0]
 800e564:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e568:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e56c:	4618      	mov	r0, r3
 800e56e:	f7ff fcdb 	bl	800df28 <add32>
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	689b      	ldr	r3, [r3, #8]
 800e576:	3328      	adds	r3, #40	@ 0x28
 800e578:	6819      	ldr	r1, [r3, #0]
 800e57a:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e57e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e582:	4618      	mov	r0, r3
 800e584:	f7ff fcf3 	bl	800df6e <sub32>
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	689b      	ldr	r3, [r3, #8]
 800e58c:	332c      	adds	r3, #44	@ 0x2c
 800e58e:	6819      	ldr	r1, [r3, #0]
 800e590:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e594:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e598:	4618      	mov	r0, r3
 800e59a:	f7ff fce8 	bl	800df6e <sub32>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	689a      	ldr	r2, [r3, #8]
 800e5a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5a4:	009b      	lsls	r3, r3, #2
 800e5a6:	4413      	add	r3, r2
 800e5a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e5aa:	601a      	str	r2, [r3, #0]
 800e5ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5ae:	3301      	adds	r3, #1
 800e5b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	689a      	ldr	r2, [r3, #8]
 800e5b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5b8:	009b      	lsls	r3, r3, #2
 800e5ba:	4413      	add	r3, r2
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e5c0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800e5c4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e5ce:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	da0b      	bge.n	800e5ee <ecp_mod_p256+0x5ea>
 800e5d6:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 800e5da:	425b      	negs	r3, r3
 800e5dc:	4619      	mov	r1, r3
 800e5de:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e5e2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f7ff fcc1 	bl	800df6e <sub32>
 800e5ec:	e008      	b.n	800e600 <ecp_mod_p256+0x5fc>
 800e5ee:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 800e5f2:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e5f6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f7ff fc94 	bl	800df28 <add32>

    ADD( 14 ); ADD( 14 ); ADD( 15 ); ADD( 15 ); ADD( 14 ); ADD( 13 );
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	689b      	ldr	r3, [r3, #8]
 800e604:	3338      	adds	r3, #56	@ 0x38
 800e606:	6819      	ldr	r1, [r3, #0]
 800e608:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e60c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e610:	4618      	mov	r0, r3
 800e612:	f7ff fc89 	bl	800df28 <add32>
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	689b      	ldr	r3, [r3, #8]
 800e61a:	3338      	adds	r3, #56	@ 0x38
 800e61c:	6819      	ldr	r1, [r3, #0]
 800e61e:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e622:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e626:	4618      	mov	r0, r3
 800e628:	f7ff fc7e 	bl	800df28 <add32>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	689b      	ldr	r3, [r3, #8]
 800e630:	333c      	adds	r3, #60	@ 0x3c
 800e632:	6819      	ldr	r1, [r3, #0]
 800e634:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e638:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e63c:	4618      	mov	r0, r3
 800e63e:	f7ff fc73 	bl	800df28 <add32>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	689b      	ldr	r3, [r3, #8]
 800e646:	333c      	adds	r3, #60	@ 0x3c
 800e648:	6819      	ldr	r1, [r3, #0]
 800e64a:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e64e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e652:	4618      	mov	r0, r3
 800e654:	f7ff fc68 	bl	800df28 <add32>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	689b      	ldr	r3, [r3, #8]
 800e65c:	3338      	adds	r3, #56	@ 0x38
 800e65e:	6819      	ldr	r1, [r3, #0]
 800e660:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e664:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e668:	4618      	mov	r0, r3
 800e66a:	f7ff fc5d 	bl	800df28 <add32>
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	689b      	ldr	r3, [r3, #8]
 800e672:	3334      	adds	r3, #52	@ 0x34
 800e674:	6819      	ldr	r1, [r3, #0]
 800e676:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e67a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e67e:	4618      	mov	r0, r3
 800e680:	f7ff fc52 	bl	800df28 <add32>
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	689b      	ldr	r3, [r3, #8]
 800e688:	3320      	adds	r3, #32
 800e68a:	6819      	ldr	r1, [r3, #0]
 800e68c:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e690:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e694:	4618      	mov	r0, r3
 800e696:	f7ff fc6a 	bl	800df6e <sub32>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	689b      	ldr	r3, [r3, #8]
 800e69e:	3324      	adds	r3, #36	@ 0x24
 800e6a0:	6819      	ldr	r1, [r3, #0]
 800e6a2:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e6a6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7ff fc5f 	bl	800df6e <sub32>
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	689a      	ldr	r2, [r3, #8]
 800e6b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6b6:	009b      	lsls	r3, r3, #2
 800e6b8:	4413      	add	r3, r2
 800e6ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e6bc:	601a      	str	r2, [r3, #0]
 800e6be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	689a      	ldr	r2, [r3, #8]
 800e6c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6ca:	009b      	lsls	r3, r3, #2
 800e6cc:	4413      	add	r3, r2
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e6d2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800e6d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6da:	2300      	movs	r3, #0
 800e6dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e6e0:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	da0b      	bge.n	800e700 <ecp_mod_p256+0x6fc>
 800e6e8:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 800e6ec:	425b      	negs	r3, r3
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e6f4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f7ff fc38 	bl	800df6e <sub32>
 800e6fe:	e008      	b.n	800e712 <ecp_mod_p256+0x70e>
 800e700:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 800e704:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e708:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e70c:	4618      	mov	r0, r3
 800e70e:	f7ff fc0b 	bl	800df28 <add32>

    ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	689b      	ldr	r3, [r3, #8]
 800e716:	333c      	adds	r3, #60	@ 0x3c
 800e718:	6819      	ldr	r1, [r3, #0]
 800e71a:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e71e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e722:	4618      	mov	r0, r3
 800e724:	f7ff fc00 	bl	800df28 <add32>
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	689b      	ldr	r3, [r3, #8]
 800e72c:	333c      	adds	r3, #60	@ 0x3c
 800e72e:	6819      	ldr	r1, [r3, #0]
 800e730:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e734:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e738:	4618      	mov	r0, r3
 800e73a:	f7ff fbf5 	bl	800df28 <add32>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	689b      	ldr	r3, [r3, #8]
 800e742:	333c      	adds	r3, #60	@ 0x3c
 800e744:	6819      	ldr	r1, [r3, #0]
 800e746:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e74a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e74e:	4618      	mov	r0, r3
 800e750:	f7ff fbea 	bl	800df28 <add32>
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	689b      	ldr	r3, [r3, #8]
 800e758:	3320      	adds	r3, #32
 800e75a:	6819      	ldr	r1, [r3, #0]
 800e75c:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e760:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e764:	4618      	mov	r0, r3
 800e766:	f7ff fbdf 	bl	800df28 <add32>
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	689b      	ldr	r3, [r3, #8]
 800e76e:	3328      	adds	r3, #40	@ 0x28
 800e770:	6819      	ldr	r1, [r3, #0]
 800e772:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e776:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e77a:	4618      	mov	r0, r3
 800e77c:	f7ff fbf7 	bl	800df6e <sub32>
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	689b      	ldr	r3, [r3, #8]
 800e784:	332c      	adds	r3, #44	@ 0x2c
 800e786:	6819      	ldr	r1, [r3, #0]
 800e788:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e78c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e790:	4618      	mov	r0, r3
 800e792:	f7ff fbec 	bl	800df6e <sub32>
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	689b      	ldr	r3, [r3, #8]
 800e79a:	3330      	adds	r3, #48	@ 0x30
 800e79c:	6819      	ldr	r1, [r3, #0]
 800e79e:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e7a2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f7ff fbe1 	bl	800df6e <sub32>
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	689b      	ldr	r3, [r3, #8]
 800e7b0:	3334      	adds	r3, #52	@ 0x34
 800e7b2:	6819      	ldr	r1, [r3, #0]
 800e7b4:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800e7b8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e7bc:	4618      	mov	r0, r3
 800e7be:	f7ff fbd6 	bl	800df6e <sub32>
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	689a      	ldr	r2, [r3, #8]
 800e7c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7c8:	009b      	lsls	r3, r3, #2
 800e7ca:	4413      	add	r3, r2
 800e7cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e7ce:	601a      	str	r2, [r3, #0]
 800e7d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7d2:	3301      	adds	r3, #1
 800e7d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e7d6:	f997 3042 	ldrsb.w	r3, [r7, #66]	@ 0x42
 800e7da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e7de:	b25b      	sxtb	r3, r3
 800e7e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	689a      	ldr	r2, [r3, #8]
 800e7e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7e8:	009b      	lsls	r3, r3, #2
 800e7ea:	4413      	add	r3, r2
 800e7ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e7ee:	601a      	str	r2, [r3, #0]
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e7f4:	e006      	b.n	800e804 <ecp_mod_p256+0x800>
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	689a      	ldr	r2, [r3, #8]
 800e7fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7fc:	009b      	lsls	r3, r3, #2
 800e7fe:	4413      	add	r3, r2
 800e800:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e802:	601a      	str	r2, [r3, #0]
 800e804:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e806:	3301      	adds	r3, #1
 800e808:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e810:	429a      	cmp	r2, r3
 800e812:	d3f0      	bcc.n	800e7f6 <ecp_mod_p256+0x7f2>
 800e814:	f997 3042 	ldrsb.w	r3, [r7, #66]	@ 0x42
 800e818:	2b00      	cmp	r3, #0
 800e81a:	da08      	bge.n	800e82e <ecp_mod_p256+0x82a>
 800e81c:	f997 1042 	ldrsb.w	r1, [r7, #66]	@ 0x42
 800e820:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800e824:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e826:	6878      	ldr	r0, [r7, #4]
 800e828:	f7ff fbc4 	bl	800dfb4 <fix_negative>
 800e82c:	e000      	b.n	800e830 <ecp_mod_p256+0x82c>

cleanup:
 800e82e:	bf00      	nop
    return( ret );
 800e830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800e832:	4618      	mov	r0, r3
 800e834:	3750      	adds	r7, #80	@ 0x50
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}

0800e83a <ecp_mod_p384>:
#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)
/*
 * Fast quasi-reduction modulo p384 (FIPS 186-3 D.2.4)
 */
static int ecp_mod_p384( mbedtls_mpi *N )
{
 800e83a:	b580      	push	{r7, lr}
 800e83c:	b098      	sub	sp, #96	@ 0x60
 800e83e:	af00      	add	r7, sp, #0
 800e840:	6078      	str	r0, [r7, #4]
    INIT( 384 );
 800e842:	2300      	movs	r3, #0
 800e844:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800e848:	2300      	movs	r3, #0
 800e84a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e84c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800e850:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e852:	2301      	movs	r3, #1
 800e854:	643b      	str	r3, [r7, #64]	@ 0x40
 800e856:	230d      	movs	r3, #13
 800e858:	647b      	str	r3, [r7, #68]	@ 0x44
 800e85a:	f107 030c 	add.w	r3, r7, #12
 800e85e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e862:	009a      	lsls	r2, r3, #2
 800e864:	f107 030c 	add.w	r3, r7, #12
 800e868:	2100      	movs	r1, #0
 800e86a:	4618      	mov	r0, r3
 800e86c:	f008 f9a4 	bl	8016bb8 <memset>
 800e870:	2118      	movs	r1, #24
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f7f7 fb0a 	bl	8005e8c <mbedtls_mpi_grow>
 800e878:	6578      	str	r0, [r7, #84]	@ 0x54
 800e87a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	f040 852f 	bne.w	800f2e0 <ecp_mod_p384+0xaa6>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	689a      	ldr	r2, [r3, #8]
 800e886:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e888:	009b      	lsls	r3, r3, #2
 800e88a:	4413      	add	r3, r2
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    ADD( 12 ); ADD( 21 ); ADD( 20 );
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	689b      	ldr	r3, [r3, #8]
 800e894:	3330      	adds	r3, #48	@ 0x30
 800e896:	6819      	ldr	r1, [r3, #0]
 800e898:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800e89c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7ff fb41 	bl	800df28 <add32>
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	689b      	ldr	r3, [r3, #8]
 800e8aa:	3354      	adds	r3, #84	@ 0x54
 800e8ac:	6819      	ldr	r1, [r3, #0]
 800e8ae:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800e8b2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f7ff fb36 	bl	800df28 <add32>
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	689b      	ldr	r3, [r3, #8]
 800e8c0:	3350      	adds	r3, #80	@ 0x50
 800e8c2:	6819      	ldr	r1, [r3, #0]
 800e8c4:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800e8c8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f7ff fb2b 	bl	800df28 <add32>
    SUB( 23 );                                              NEXT; // A0
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	689b      	ldr	r3, [r3, #8]
 800e8d6:	335c      	adds	r3, #92	@ 0x5c
 800e8d8:	6819      	ldr	r1, [r3, #0]
 800e8da:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800e8de:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f7ff fb43 	bl	800df6e <sub32>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	689a      	ldr	r2, [r3, #8]
 800e8ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e8ee:	009b      	lsls	r3, r3, #2
 800e8f0:	4413      	add	r3, r2
 800e8f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e8f4:	601a      	str	r2, [r3, #0]
 800e8f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e8f8:	3301      	adds	r3, #1
 800e8fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	689a      	ldr	r2, [r3, #8]
 800e900:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e902:	009b      	lsls	r3, r3, #2
 800e904:	4413      	add	r3, r2
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e90a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800e90e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800e912:	2300      	movs	r3, #0
 800e914:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800e918:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	da0b      	bge.n	800e938 <ecp_mod_p384+0xfe>
 800e920:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800e924:	425b      	negs	r3, r3
 800e926:	4619      	mov	r1, r3
 800e928:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800e92c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800e930:	4618      	mov	r0, r3
 800e932:	f7ff fb1c 	bl	800df6e <sub32>
 800e936:	e008      	b.n	800e94a <ecp_mod_p384+0x110>
 800e938:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 800e93c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800e940:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800e944:	4618      	mov	r0, r3
 800e946:	f7ff faef 	bl	800df28 <add32>

    ADD( 13 ); ADD( 22 ); ADD( 23 );
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	689b      	ldr	r3, [r3, #8]
 800e94e:	3334      	adds	r3, #52	@ 0x34
 800e950:	6819      	ldr	r1, [r3, #0]
 800e952:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800e956:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7ff fae4 	bl	800df28 <add32>
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	689b      	ldr	r3, [r3, #8]
 800e964:	3358      	adds	r3, #88	@ 0x58
 800e966:	6819      	ldr	r1, [r3, #0]
 800e968:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800e96c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800e970:	4618      	mov	r0, r3
 800e972:	f7ff fad9 	bl	800df28 <add32>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	689b      	ldr	r3, [r3, #8]
 800e97a:	335c      	adds	r3, #92	@ 0x5c
 800e97c:	6819      	ldr	r1, [r3, #0]
 800e97e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800e982:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800e986:	4618      	mov	r0, r3
 800e988:	f7ff face 	bl	800df28 <add32>
    SUB( 12 ); SUB( 20 );                                   NEXT; // A2
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	689b      	ldr	r3, [r3, #8]
 800e990:	3330      	adds	r3, #48	@ 0x30
 800e992:	6819      	ldr	r1, [r3, #0]
 800e994:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800e998:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800e99c:	4618      	mov	r0, r3
 800e99e:	f7ff fae6 	bl	800df6e <sub32>
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	689b      	ldr	r3, [r3, #8]
 800e9a6:	3350      	adds	r3, #80	@ 0x50
 800e9a8:	6819      	ldr	r1, [r3, #0]
 800e9aa:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800e9ae:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7ff fadb 	bl	800df6e <sub32>
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	689a      	ldr	r2, [r3, #8]
 800e9bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e9be:	009b      	lsls	r3, r3, #2
 800e9c0:	4413      	add	r3, r2
 800e9c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e9c4:	601a      	str	r2, [r3, #0]
 800e9c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	689a      	ldr	r2, [r3, #8]
 800e9d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e9d2:	009b      	lsls	r3, r3, #2
 800e9d4:	4413      	add	r3, r2
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e9da:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800e9de:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800e9e8:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	da0b      	bge.n	800ea08 <ecp_mod_p384+0x1ce>
 800e9f0:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800e9f4:	425b      	negs	r3, r3
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800e9fc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ea00:	4618      	mov	r0, r3
 800ea02:	f7ff fab4 	bl	800df6e <sub32>
 800ea06:	e008      	b.n	800ea1a <ecp_mod_p384+0x1e0>
 800ea08:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 800ea0c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ea10:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ea14:	4618      	mov	r0, r3
 800ea16:	f7ff fa87 	bl	800df28 <add32>

    ADD( 14 ); ADD( 23 );
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	689b      	ldr	r3, [r3, #8]
 800ea1e:	3338      	adds	r3, #56	@ 0x38
 800ea20:	6819      	ldr	r1, [r3, #0]
 800ea22:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ea26:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7ff fa7c 	bl	800df28 <add32>
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	689b      	ldr	r3, [r3, #8]
 800ea34:	335c      	adds	r3, #92	@ 0x5c
 800ea36:	6819      	ldr	r1, [r3, #0]
 800ea38:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ea3c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ea40:	4618      	mov	r0, r3
 800ea42:	f7ff fa71 	bl	800df28 <add32>
    SUB( 13 ); SUB( 21 );                                   NEXT; // A2
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	689b      	ldr	r3, [r3, #8]
 800ea4a:	3334      	adds	r3, #52	@ 0x34
 800ea4c:	6819      	ldr	r1, [r3, #0]
 800ea4e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ea52:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ea56:	4618      	mov	r0, r3
 800ea58:	f7ff fa89 	bl	800df6e <sub32>
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	689b      	ldr	r3, [r3, #8]
 800ea60:	3354      	adds	r3, #84	@ 0x54
 800ea62:	6819      	ldr	r1, [r3, #0]
 800ea64:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ea68:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f7ff fa7e 	bl	800df6e <sub32>
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	689a      	ldr	r2, [r3, #8]
 800ea76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ea78:	009b      	lsls	r3, r3, #2
 800ea7a:	4413      	add	r3, r2
 800ea7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ea7e:	601a      	str	r2, [r3, #0]
 800ea80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ea82:	3301      	adds	r3, #1
 800ea84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	689a      	ldr	r2, [r3, #8]
 800ea8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ea8c:	009b      	lsls	r3, r3, #2
 800ea8e:	4413      	add	r3, r2
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea94:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800ea98:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800eaa2:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	da0b      	bge.n	800eac2 <ecp_mod_p384+0x288>
 800eaaa:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800eaae:	425b      	negs	r3, r3
 800eab0:	4619      	mov	r1, r3
 800eab2:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800eab6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7ff fa57 	bl	800df6e <sub32>
 800eac0:	e008      	b.n	800ead4 <ecp_mod_p384+0x29a>
 800eac2:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 800eac6:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800eaca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800eace:	4618      	mov	r0, r3
 800ead0:	f7ff fa2a 	bl	800df28 <add32>

    ADD( 15 ); ADD( 12 ); ADD( 20 ); ADD( 21 );
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	689b      	ldr	r3, [r3, #8]
 800ead8:	333c      	adds	r3, #60	@ 0x3c
 800eada:	6819      	ldr	r1, [r3, #0]
 800eadc:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800eae0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800eae4:	4618      	mov	r0, r3
 800eae6:	f7ff fa1f 	bl	800df28 <add32>
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	689b      	ldr	r3, [r3, #8]
 800eaee:	3330      	adds	r3, #48	@ 0x30
 800eaf0:	6819      	ldr	r1, [r3, #0]
 800eaf2:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800eaf6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7ff fa14 	bl	800df28 <add32>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	689b      	ldr	r3, [r3, #8]
 800eb04:	3350      	adds	r3, #80	@ 0x50
 800eb06:	6819      	ldr	r1, [r3, #0]
 800eb08:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800eb0c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800eb10:	4618      	mov	r0, r3
 800eb12:	f7ff fa09 	bl	800df28 <add32>
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	689b      	ldr	r3, [r3, #8]
 800eb1a:	3354      	adds	r3, #84	@ 0x54
 800eb1c:	6819      	ldr	r1, [r3, #0]
 800eb1e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800eb22:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7ff f9fe 	bl	800df28 <add32>
    SUB( 14 ); SUB( 22 ); SUB( 23 );                        NEXT; // A3
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	689b      	ldr	r3, [r3, #8]
 800eb30:	3338      	adds	r3, #56	@ 0x38
 800eb32:	6819      	ldr	r1, [r3, #0]
 800eb34:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800eb38:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f7ff fa16 	bl	800df6e <sub32>
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	689b      	ldr	r3, [r3, #8]
 800eb46:	3358      	adds	r3, #88	@ 0x58
 800eb48:	6819      	ldr	r1, [r3, #0]
 800eb4a:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800eb4e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800eb52:	4618      	mov	r0, r3
 800eb54:	f7ff fa0b 	bl	800df6e <sub32>
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	689b      	ldr	r3, [r3, #8]
 800eb5c:	335c      	adds	r3, #92	@ 0x5c
 800eb5e:	6819      	ldr	r1, [r3, #0]
 800eb60:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800eb64:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f7ff fa00 	bl	800df6e <sub32>
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	689a      	ldr	r2, [r3, #8]
 800eb72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eb74:	009b      	lsls	r3, r3, #2
 800eb76:	4413      	add	r3, r2
 800eb78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800eb7a:	601a      	str	r2, [r3, #0]
 800eb7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eb7e:	3301      	adds	r3, #1
 800eb80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	689a      	ldr	r2, [r3, #8]
 800eb86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eb88:	009b      	lsls	r3, r3, #2
 800eb8a:	4413      	add	r3, r2
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eb90:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800eb94:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800eb98:	2300      	movs	r3, #0
 800eb9a:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800eb9e:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	da0b      	bge.n	800ebbe <ecp_mod_p384+0x384>
 800eba6:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800ebaa:	425b      	negs	r3, r3
 800ebac:	4619      	mov	r1, r3
 800ebae:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ebb2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f7ff f9d9 	bl	800df6e <sub32>
 800ebbc:	e008      	b.n	800ebd0 <ecp_mod_p384+0x396>
 800ebbe:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 800ebc2:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ebc6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f7ff f9ac 	bl	800df28 <add32>

    ADD( 21 ); ADD( 21 ); ADD( 16 ); ADD( 13 ); ADD( 12 ); ADD( 20 ); ADD( 22 );
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	689b      	ldr	r3, [r3, #8]
 800ebd4:	3354      	adds	r3, #84	@ 0x54
 800ebd6:	6819      	ldr	r1, [r3, #0]
 800ebd8:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ebdc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f7ff f9a1 	bl	800df28 <add32>
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	689b      	ldr	r3, [r3, #8]
 800ebea:	3354      	adds	r3, #84	@ 0x54
 800ebec:	6819      	ldr	r1, [r3, #0]
 800ebee:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ebf2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f7ff f996 	bl	800df28 <add32>
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	689b      	ldr	r3, [r3, #8]
 800ec00:	3340      	adds	r3, #64	@ 0x40
 800ec02:	6819      	ldr	r1, [r3, #0]
 800ec04:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ec08:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f7ff f98b 	bl	800df28 <add32>
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	689b      	ldr	r3, [r3, #8]
 800ec16:	3334      	adds	r3, #52	@ 0x34
 800ec18:	6819      	ldr	r1, [r3, #0]
 800ec1a:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ec1e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7ff f980 	bl	800df28 <add32>
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	689b      	ldr	r3, [r3, #8]
 800ec2c:	3330      	adds	r3, #48	@ 0x30
 800ec2e:	6819      	ldr	r1, [r3, #0]
 800ec30:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ec34:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f7ff f975 	bl	800df28 <add32>
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	689b      	ldr	r3, [r3, #8]
 800ec42:	3350      	adds	r3, #80	@ 0x50
 800ec44:	6819      	ldr	r1, [r3, #0]
 800ec46:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ec4a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f7ff f96a 	bl	800df28 <add32>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	689b      	ldr	r3, [r3, #8]
 800ec58:	3358      	adds	r3, #88	@ 0x58
 800ec5a:	6819      	ldr	r1, [r3, #0]
 800ec5c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ec60:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ec64:	4618      	mov	r0, r3
 800ec66:	f7ff f95f 	bl	800df28 <add32>
    SUB( 15 ); SUB( 23 ); SUB( 23 );                        NEXT; // A4
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	689b      	ldr	r3, [r3, #8]
 800ec6e:	333c      	adds	r3, #60	@ 0x3c
 800ec70:	6819      	ldr	r1, [r3, #0]
 800ec72:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ec76:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f7ff f977 	bl	800df6e <sub32>
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	689b      	ldr	r3, [r3, #8]
 800ec84:	335c      	adds	r3, #92	@ 0x5c
 800ec86:	6819      	ldr	r1, [r3, #0]
 800ec88:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ec8c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ec90:	4618      	mov	r0, r3
 800ec92:	f7ff f96c 	bl	800df6e <sub32>
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	689b      	ldr	r3, [r3, #8]
 800ec9a:	335c      	adds	r3, #92	@ 0x5c
 800ec9c:	6819      	ldr	r1, [r3, #0]
 800ec9e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800eca2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7ff f961 	bl	800df6e <sub32>
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	689a      	ldr	r2, [r3, #8]
 800ecb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ecb2:	009b      	lsls	r3, r3, #2
 800ecb4:	4413      	add	r3, r2
 800ecb6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ecb8:	601a      	str	r2, [r3, #0]
 800ecba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ecbc:	3301      	adds	r3, #1
 800ecbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	689a      	ldr	r2, [r3, #8]
 800ecc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ecc6:	009b      	lsls	r3, r3, #2
 800ecc8:	4413      	add	r3, r2
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ecce:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800ecd2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800ecdc:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	da0b      	bge.n	800ecfc <ecp_mod_p384+0x4c2>
 800ece4:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800ece8:	425b      	negs	r3, r3
 800ecea:	4619      	mov	r1, r3
 800ecec:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ecf0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f7ff f93a 	bl	800df6e <sub32>
 800ecfa:	e008      	b.n	800ed0e <ecp_mod_p384+0x4d4>
 800ecfc:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 800ed00:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ed04:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f7ff f90d 	bl	800df28 <add32>

    ADD( 22 ); ADD( 22 ); ADD( 17 ); ADD( 14 ); ADD( 13 ); ADD( 21 ); ADD( 23 );
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	689b      	ldr	r3, [r3, #8]
 800ed12:	3358      	adds	r3, #88	@ 0x58
 800ed14:	6819      	ldr	r1, [r3, #0]
 800ed16:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ed1a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f7ff f902 	bl	800df28 <add32>
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	689b      	ldr	r3, [r3, #8]
 800ed28:	3358      	adds	r3, #88	@ 0x58
 800ed2a:	6819      	ldr	r1, [r3, #0]
 800ed2c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ed30:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ed34:	4618      	mov	r0, r3
 800ed36:	f7ff f8f7 	bl	800df28 <add32>
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	689b      	ldr	r3, [r3, #8]
 800ed3e:	3344      	adds	r3, #68	@ 0x44
 800ed40:	6819      	ldr	r1, [r3, #0]
 800ed42:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ed46:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7ff f8ec 	bl	800df28 <add32>
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	689b      	ldr	r3, [r3, #8]
 800ed54:	3338      	adds	r3, #56	@ 0x38
 800ed56:	6819      	ldr	r1, [r3, #0]
 800ed58:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ed5c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ed60:	4618      	mov	r0, r3
 800ed62:	f7ff f8e1 	bl	800df28 <add32>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	689b      	ldr	r3, [r3, #8]
 800ed6a:	3334      	adds	r3, #52	@ 0x34
 800ed6c:	6819      	ldr	r1, [r3, #0]
 800ed6e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ed72:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ed76:	4618      	mov	r0, r3
 800ed78:	f7ff f8d6 	bl	800df28 <add32>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	689b      	ldr	r3, [r3, #8]
 800ed80:	3354      	adds	r3, #84	@ 0x54
 800ed82:	6819      	ldr	r1, [r3, #0]
 800ed84:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ed88:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f7ff f8cb 	bl	800df28 <add32>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	689b      	ldr	r3, [r3, #8]
 800ed96:	335c      	adds	r3, #92	@ 0x5c
 800ed98:	6819      	ldr	r1, [r3, #0]
 800ed9a:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ed9e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800eda2:	4618      	mov	r0, r3
 800eda4:	f7ff f8c0 	bl	800df28 <add32>
    SUB( 16 );                                              NEXT; // A5
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	689b      	ldr	r3, [r3, #8]
 800edac:	3340      	adds	r3, #64	@ 0x40
 800edae:	6819      	ldr	r1, [r3, #0]
 800edb0:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800edb4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800edb8:	4618      	mov	r0, r3
 800edba:	f7ff f8d8 	bl	800df6e <sub32>
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	689a      	ldr	r2, [r3, #8]
 800edc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800edc4:	009b      	lsls	r3, r3, #2
 800edc6:	4413      	add	r3, r2
 800edc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800edca:	601a      	str	r2, [r3, #0]
 800edcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800edce:	3301      	adds	r3, #1
 800edd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	689a      	ldr	r2, [r3, #8]
 800edd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800edd8:	009b      	lsls	r3, r3, #2
 800edda:	4413      	add	r3, r2
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ede0:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800ede4:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800ede8:	2300      	movs	r3, #0
 800edea:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800edee:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	da0b      	bge.n	800ee0e <ecp_mod_p384+0x5d4>
 800edf6:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800edfa:	425b      	negs	r3, r3
 800edfc:	4619      	mov	r1, r3
 800edfe:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ee02:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7ff f8b1 	bl	800df6e <sub32>
 800ee0c:	e008      	b.n	800ee20 <ecp_mod_p384+0x5e6>
 800ee0e:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 800ee12:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ee16:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7ff f884 	bl	800df28 <add32>

    ADD( 23 ); ADD( 23 ); ADD( 18 ); ADD( 15 ); ADD( 14 ); ADD( 22 );
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	689b      	ldr	r3, [r3, #8]
 800ee24:	335c      	adds	r3, #92	@ 0x5c
 800ee26:	6819      	ldr	r1, [r3, #0]
 800ee28:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ee2c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ee30:	4618      	mov	r0, r3
 800ee32:	f7ff f879 	bl	800df28 <add32>
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	689b      	ldr	r3, [r3, #8]
 800ee3a:	335c      	adds	r3, #92	@ 0x5c
 800ee3c:	6819      	ldr	r1, [r3, #0]
 800ee3e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ee42:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7ff f86e 	bl	800df28 <add32>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	689b      	ldr	r3, [r3, #8]
 800ee50:	3348      	adds	r3, #72	@ 0x48
 800ee52:	6819      	ldr	r1, [r3, #0]
 800ee54:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ee58:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f7ff f863 	bl	800df28 <add32>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	689b      	ldr	r3, [r3, #8]
 800ee66:	333c      	adds	r3, #60	@ 0x3c
 800ee68:	6819      	ldr	r1, [r3, #0]
 800ee6a:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ee6e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ee72:	4618      	mov	r0, r3
 800ee74:	f7ff f858 	bl	800df28 <add32>
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	689b      	ldr	r3, [r3, #8]
 800ee7c:	3338      	adds	r3, #56	@ 0x38
 800ee7e:	6819      	ldr	r1, [r3, #0]
 800ee80:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ee84:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f7ff f84d 	bl	800df28 <add32>
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	689b      	ldr	r3, [r3, #8]
 800ee92:	3358      	adds	r3, #88	@ 0x58
 800ee94:	6819      	ldr	r1, [r3, #0]
 800ee96:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ee9a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f7ff f842 	bl	800df28 <add32>
    SUB( 17 );                                              NEXT; // A6
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	689b      	ldr	r3, [r3, #8]
 800eea8:	3344      	adds	r3, #68	@ 0x44
 800eeaa:	6819      	ldr	r1, [r3, #0]
 800eeac:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800eeb0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f7ff f85a 	bl	800df6e <sub32>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	689a      	ldr	r2, [r3, #8]
 800eebe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eec0:	009b      	lsls	r3, r3, #2
 800eec2:	4413      	add	r3, r2
 800eec4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800eec6:	601a      	str	r2, [r3, #0]
 800eec8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eeca:	3301      	adds	r3, #1
 800eecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	689a      	ldr	r2, [r3, #8]
 800eed2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eed4:	009b      	lsls	r3, r3, #2
 800eed6:	4413      	add	r3, r2
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eedc:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800eee0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800eee4:	2300      	movs	r3, #0
 800eee6:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800eeea:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	da0b      	bge.n	800ef0a <ecp_mod_p384+0x6d0>
 800eef2:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800eef6:	425b      	negs	r3, r3
 800eef8:	4619      	mov	r1, r3
 800eefa:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800eefe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ef02:	4618      	mov	r0, r3
 800ef04:	f7ff f833 	bl	800df6e <sub32>
 800ef08:	e008      	b.n	800ef1c <ecp_mod_p384+0x6e2>
 800ef0a:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 800ef0e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ef12:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7ff f806 	bl	800df28 <add32>

    ADD( 19 ); ADD( 16 ); ADD( 15 ); ADD( 23 );
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	689b      	ldr	r3, [r3, #8]
 800ef20:	334c      	adds	r3, #76	@ 0x4c
 800ef22:	6819      	ldr	r1, [r3, #0]
 800ef24:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ef28:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f7fe fffb 	bl	800df28 <add32>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	689b      	ldr	r3, [r3, #8]
 800ef36:	3340      	adds	r3, #64	@ 0x40
 800ef38:	6819      	ldr	r1, [r3, #0]
 800ef3a:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ef3e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7fe fff0 	bl	800df28 <add32>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	689b      	ldr	r3, [r3, #8]
 800ef4c:	333c      	adds	r3, #60	@ 0x3c
 800ef4e:	6819      	ldr	r1, [r3, #0]
 800ef50:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ef54:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f7fe ffe5 	bl	800df28 <add32>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	689b      	ldr	r3, [r3, #8]
 800ef62:	335c      	adds	r3, #92	@ 0x5c
 800ef64:	6819      	ldr	r1, [r3, #0]
 800ef66:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ef6a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7fe ffda 	bl	800df28 <add32>
    SUB( 18 );                                              NEXT; // A7
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	689b      	ldr	r3, [r3, #8]
 800ef78:	3348      	adds	r3, #72	@ 0x48
 800ef7a:	6819      	ldr	r1, [r3, #0]
 800ef7c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800ef80:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ef84:	4618      	mov	r0, r3
 800ef86:	f7fe fff2 	bl	800df6e <sub32>
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	689a      	ldr	r2, [r3, #8]
 800ef8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ef90:	009b      	lsls	r3, r3, #2
 800ef92:	4413      	add	r3, r2
 800ef94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ef96:	601a      	str	r2, [r3, #0]
 800ef98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ef9a:	3301      	adds	r3, #1
 800ef9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	689a      	ldr	r2, [r3, #8]
 800efa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800efa4:	009b      	lsls	r3, r3, #2
 800efa6:	4413      	add	r3, r2
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800efac:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800efb0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800efb4:	2300      	movs	r3, #0
 800efb6:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800efba:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	da0b      	bge.n	800efda <ecp_mod_p384+0x7a0>
 800efc2:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800efc6:	425b      	negs	r3, r3
 800efc8:	4619      	mov	r1, r3
 800efca:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800efce:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800efd2:	4618      	mov	r0, r3
 800efd4:	f7fe ffcb 	bl	800df6e <sub32>
 800efd8:	e008      	b.n	800efec <ecp_mod_p384+0x7b2>
 800efda:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 800efde:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800efe2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7fe ff9e 	bl	800df28 <add32>

    ADD( 20 ); ADD( 17 ); ADD( 16 );
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	689b      	ldr	r3, [r3, #8]
 800eff0:	3350      	adds	r3, #80	@ 0x50
 800eff2:	6819      	ldr	r1, [r3, #0]
 800eff4:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800eff8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800effc:	4618      	mov	r0, r3
 800effe:	f7fe ff93 	bl	800df28 <add32>
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	689b      	ldr	r3, [r3, #8]
 800f006:	3344      	adds	r3, #68	@ 0x44
 800f008:	6819      	ldr	r1, [r3, #0]
 800f00a:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800f00e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f012:	4618      	mov	r0, r3
 800f014:	f7fe ff88 	bl	800df28 <add32>
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	689b      	ldr	r3, [r3, #8]
 800f01c:	3340      	adds	r3, #64	@ 0x40
 800f01e:	6819      	ldr	r1, [r3, #0]
 800f020:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800f024:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f028:	4618      	mov	r0, r3
 800f02a:	f7fe ff7d 	bl	800df28 <add32>
    SUB( 19 );                                              NEXT; // A8
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	689b      	ldr	r3, [r3, #8]
 800f032:	334c      	adds	r3, #76	@ 0x4c
 800f034:	6819      	ldr	r1, [r3, #0]
 800f036:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800f03a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f03e:	4618      	mov	r0, r3
 800f040:	f7fe ff95 	bl	800df6e <sub32>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	689a      	ldr	r2, [r3, #8]
 800f048:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f04a:	009b      	lsls	r3, r3, #2
 800f04c:	4413      	add	r3, r2
 800f04e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f050:	601a      	str	r2, [r3, #0]
 800f052:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f054:	3301      	adds	r3, #1
 800f056:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	689a      	ldr	r2, [r3, #8]
 800f05c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f05e:	009b      	lsls	r3, r3, #2
 800f060:	4413      	add	r3, r2
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f066:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800f06a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800f06e:	2300      	movs	r3, #0
 800f070:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800f074:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800f078:	2b00      	cmp	r3, #0
 800f07a:	da0b      	bge.n	800f094 <ecp_mod_p384+0x85a>
 800f07c:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800f080:	425b      	negs	r3, r3
 800f082:	4619      	mov	r1, r3
 800f084:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800f088:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f08c:	4618      	mov	r0, r3
 800f08e:	f7fe ff6e 	bl	800df6e <sub32>
 800f092:	e008      	b.n	800f0a6 <ecp_mod_p384+0x86c>
 800f094:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 800f098:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800f09c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f7fe ff41 	bl	800df28 <add32>

    ADD( 21 ); ADD( 18 ); ADD( 17 );
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	689b      	ldr	r3, [r3, #8]
 800f0aa:	3354      	adds	r3, #84	@ 0x54
 800f0ac:	6819      	ldr	r1, [r3, #0]
 800f0ae:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800f0b2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f7fe ff36 	bl	800df28 <add32>
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	689b      	ldr	r3, [r3, #8]
 800f0c0:	3348      	adds	r3, #72	@ 0x48
 800f0c2:	6819      	ldr	r1, [r3, #0]
 800f0c4:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800f0c8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f7fe ff2b 	bl	800df28 <add32>
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	689b      	ldr	r3, [r3, #8]
 800f0d6:	3344      	adds	r3, #68	@ 0x44
 800f0d8:	6819      	ldr	r1, [r3, #0]
 800f0da:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800f0de:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f7fe ff20 	bl	800df28 <add32>
    SUB( 20 );                                              NEXT; // A9
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	689b      	ldr	r3, [r3, #8]
 800f0ec:	3350      	adds	r3, #80	@ 0x50
 800f0ee:	6819      	ldr	r1, [r3, #0]
 800f0f0:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800f0f4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f7fe ff38 	bl	800df6e <sub32>
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	689a      	ldr	r2, [r3, #8]
 800f102:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f104:	009b      	lsls	r3, r3, #2
 800f106:	4413      	add	r3, r2
 800f108:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f10a:	601a      	str	r2, [r3, #0]
 800f10c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f10e:	3301      	adds	r3, #1
 800f110:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	689a      	ldr	r2, [r3, #8]
 800f116:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f118:	009b      	lsls	r3, r3, #2
 800f11a:	4413      	add	r3, r2
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f120:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800f124:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800f128:	2300      	movs	r3, #0
 800f12a:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800f12e:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800f132:	2b00      	cmp	r3, #0
 800f134:	da0b      	bge.n	800f14e <ecp_mod_p384+0x914>
 800f136:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800f13a:	425b      	negs	r3, r3
 800f13c:	4619      	mov	r1, r3
 800f13e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800f142:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f146:	4618      	mov	r0, r3
 800f148:	f7fe ff11 	bl	800df6e <sub32>
 800f14c:	e008      	b.n	800f160 <ecp_mod_p384+0x926>
 800f14e:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 800f152:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800f156:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f15a:	4618      	mov	r0, r3
 800f15c:	f7fe fee4 	bl	800df28 <add32>

    ADD( 22 ); ADD( 19 ); ADD( 18 );
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	689b      	ldr	r3, [r3, #8]
 800f164:	3358      	adds	r3, #88	@ 0x58
 800f166:	6819      	ldr	r1, [r3, #0]
 800f168:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800f16c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f170:	4618      	mov	r0, r3
 800f172:	f7fe fed9 	bl	800df28 <add32>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	689b      	ldr	r3, [r3, #8]
 800f17a:	334c      	adds	r3, #76	@ 0x4c
 800f17c:	6819      	ldr	r1, [r3, #0]
 800f17e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800f182:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f186:	4618      	mov	r0, r3
 800f188:	f7fe fece 	bl	800df28 <add32>
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	689b      	ldr	r3, [r3, #8]
 800f190:	3348      	adds	r3, #72	@ 0x48
 800f192:	6819      	ldr	r1, [r3, #0]
 800f194:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800f198:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f19c:	4618      	mov	r0, r3
 800f19e:	f7fe fec3 	bl	800df28 <add32>
    SUB( 21 );                                              NEXT; // A10
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	689b      	ldr	r3, [r3, #8]
 800f1a6:	3354      	adds	r3, #84	@ 0x54
 800f1a8:	6819      	ldr	r1, [r3, #0]
 800f1aa:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800f1ae:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f7fe fedb 	bl	800df6e <sub32>
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	689a      	ldr	r2, [r3, #8]
 800f1bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f1be:	009b      	lsls	r3, r3, #2
 800f1c0:	4413      	add	r3, r2
 800f1c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f1c4:	601a      	str	r2, [r3, #0]
 800f1c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	689a      	ldr	r2, [r3, #8]
 800f1d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f1d2:	009b      	lsls	r3, r3, #2
 800f1d4:	4413      	add	r3, r2
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f1da:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800f1de:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800f1e8:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	da0b      	bge.n	800f208 <ecp_mod_p384+0x9ce>
 800f1f0:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800f1f4:	425b      	negs	r3, r3
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800f1fc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f200:	4618      	mov	r0, r3
 800f202:	f7fe feb4 	bl	800df6e <sub32>
 800f206:	e008      	b.n	800f21a <ecp_mod_p384+0x9e0>
 800f208:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 800f20c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800f210:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f214:	4618      	mov	r0, r3
 800f216:	f7fe fe87 	bl	800df28 <add32>

    ADD( 23 ); ADD( 20 ); ADD( 19 );
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	689b      	ldr	r3, [r3, #8]
 800f21e:	335c      	adds	r3, #92	@ 0x5c
 800f220:	6819      	ldr	r1, [r3, #0]
 800f222:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800f226:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f22a:	4618      	mov	r0, r3
 800f22c:	f7fe fe7c 	bl	800df28 <add32>
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	689b      	ldr	r3, [r3, #8]
 800f234:	3350      	adds	r3, #80	@ 0x50
 800f236:	6819      	ldr	r1, [r3, #0]
 800f238:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800f23c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f240:	4618      	mov	r0, r3
 800f242:	f7fe fe71 	bl	800df28 <add32>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	689b      	ldr	r3, [r3, #8]
 800f24a:	334c      	adds	r3, #76	@ 0x4c
 800f24c:	6819      	ldr	r1, [r3, #0]
 800f24e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800f252:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f256:	4618      	mov	r0, r3
 800f258:	f7fe fe66 	bl	800df28 <add32>
    SUB( 22 );                                              LAST; // A11
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	689b      	ldr	r3, [r3, #8]
 800f260:	3358      	adds	r3, #88	@ 0x58
 800f262:	6819      	ldr	r1, [r3, #0]
 800f264:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 800f268:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f26c:	4618      	mov	r0, r3
 800f26e:	f7fe fe7e 	bl	800df6e <sub32>
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	689a      	ldr	r2, [r3, #8]
 800f276:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f278:	009b      	lsls	r3, r3, #2
 800f27a:	4413      	add	r3, r2
 800f27c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f27e:	601a      	str	r2, [r3, #0]
 800f280:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f282:	3301      	adds	r3, #1
 800f284:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f286:	f997 3052 	ldrsb.w	r3, [r7, #82]	@ 0x52
 800f28a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f28e:	b25b      	sxtb	r3, r3
 800f290:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	689a      	ldr	r2, [r3, #8]
 800f296:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f298:	009b      	lsls	r3, r3, #2
 800f29a:	4413      	add	r3, r2
 800f29c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f29e:	601a      	str	r2, [r3, #0]
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f2a4:	e006      	b.n	800f2b4 <ecp_mod_p384+0xa7a>
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	689a      	ldr	r2, [r3, #8]
 800f2aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f2ac:	009b      	lsls	r3, r3, #2
 800f2ae:	4413      	add	r3, r2
 800f2b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f2b2:	601a      	str	r2, [r3, #0]
 800f2b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f2b6:	3301      	adds	r3, #1
 800f2b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	685b      	ldr	r3, [r3, #4]
 800f2be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	d3f0      	bcc.n	800f2a6 <ecp_mod_p384+0xa6c>
 800f2c4:	f997 3052 	ldrsb.w	r3, [r7, #82]	@ 0x52
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	da08      	bge.n	800f2de <ecp_mod_p384+0xaa4>
 800f2cc:	f997 1052 	ldrsb.w	r1, [r7, #82]	@ 0x52
 800f2d0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800f2d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f7fe fe6c 	bl	800dfb4 <fix_negative>
 800f2dc:	e000      	b.n	800f2e0 <ecp_mod_p384+0xaa6>

cleanup:
 800f2de:	bf00      	nop
    return( ret );
 800f2e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3760      	adds	r7, #96	@ 0x60
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}
	...

0800f2ec <ecp_mod_p448>:
 * arithmetic using the limbs directly as we do for the NIST primes above,
 * but for 64-bit targets it should use half the number of operations if we do
 * the reduction with 224-bit limbs, since mpi_add_mpi will then use 64-bit adds.
 */
static int ecp_mod_p448( mbedtls_mpi *N )
{
 800f2ec:	b5b0      	push	{r4, r5, r7, lr}
 800f2ee:	b0a8      	sub	sp, #160	@ 0xa0
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
    int ret;
    size_t i;
    mbedtls_mpi M, Q;
    mbedtls_mpi_uint Mp[P448_WIDTH + 1], Qp[P448_WIDTH];

    if( N->n <= P448_WIDTH )
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	685b      	ldr	r3, [r3, #4]
 800f2f8:	2b0e      	cmp	r3, #14
 800f2fa:	d801      	bhi.n	800f300 <ecp_mod_p448+0x14>
        return( 0 );
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	e0be      	b.n	800f47e <ecp_mod_p448+0x192>

    /* M = A1 */
    M.s = 1;
 800f300:	2301      	movs	r3, #1
 800f302:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    M.n = N->n - ( P448_WIDTH );
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	3b0e      	subs	r3, #14
 800f30c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if( M.n > P448_WIDTH )
 800f310:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f314:	2b0e      	cmp	r3, #14
 800f316:	d901      	bls.n	800f31c <ecp_mod_p448+0x30>
        /* Shouldn't be called with N larger than 2^896! */
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800f318:	4b5b      	ldr	r3, [pc, #364]	@ (800f488 <ecp_mod_p448+0x19c>)
 800f31a:	e0b0      	b.n	800f47e <ecp_mod_p448+0x192>
    M.p = Mp;
 800f31c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800f320:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    memset( Mp, 0, sizeof( Mp ) );
 800f324:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800f328:	223c      	movs	r2, #60	@ 0x3c
 800f32a:	2100      	movs	r1, #0
 800f32c:	4618      	mov	r0, r3
 800f32e:	f007 fc43 	bl	8016bb8 <memset>
    memcpy( Mp, N->p + P448_WIDTH, M.n * sizeof( mbedtls_mpi_uint ) );
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	689b      	ldr	r3, [r3, #8]
 800f336:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800f33a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f33e:	009a      	lsls	r2, r3, #2
 800f340:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800f344:	4618      	mov	r0, r3
 800f346:	f007 fd14 	bl	8016d72 <memcpy>

    /* N = A0 */
    for( i = P448_WIDTH; i < N->n; i++ )
 800f34a:	230e      	movs	r3, #14
 800f34c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f350:	e00c      	b.n	800f36c <ecp_mod_p448+0x80>
        N->p[i] = 0;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	689a      	ldr	r2, [r3, #8]
 800f356:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f35a:	009b      	lsls	r3, r3, #2
 800f35c:	4413      	add	r3, r2
 800f35e:	2200      	movs	r2, #0
 800f360:	601a      	str	r2, [r3, #0]
    for( i = P448_WIDTH; i < N->n; i++ )
 800f362:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f366:	3301      	adds	r3, #1
 800f368:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	685b      	ldr	r3, [r3, #4]
 800f370:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f374:	429a      	cmp	r2, r3
 800f376:	d3ec      	bcc.n	800f352 <ecp_mod_p448+0x66>

    /* N += A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &M ) );
 800f378:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800f37c:	461a      	mov	r2, r3
 800f37e:	6879      	ldr	r1, [r7, #4]
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	f7f7 feb6 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800f386:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 800f38a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d173      	bne.n	800f47a <ecp_mod_p448+0x18e>

    /* Q = B1, N += B1 */
    Q = M;
 800f392:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800f396:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 800f39a:	ca07      	ldmia	r2, {r0, r1, r2}
 800f39c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Q.p = Qp;
 800f3a0:	f107 030c 	add.w	r3, r7, #12
 800f3a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    memcpy( Qp, Mp, sizeof( Qp ) );
 800f3a8:	f107 040c 	add.w	r4, r7, #12
 800f3ac:	f107 0544 	add.w	r5, r7, #68	@ 0x44
 800f3b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f3b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f3b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f3b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f3b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f3ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f3bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f3c0:	e884 0003 	stmia.w	r4, {r0, r1}
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Q, 224 ) );
 800f3c4:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800f3c8:	21e0      	movs	r1, #224	@ 0xe0
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f7f7 fb4e 	bl	8006a6c <mbedtls_mpi_shift_r>
 800f3d0:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 800f3d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d14e      	bne.n	800f47a <ecp_mod_p448+0x18e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &Q ) );
 800f3dc:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800f3e0:	461a      	mov	r2, r3
 800f3e2:	6879      	ldr	r1, [r7, #4]
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f7f7 fe84 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800f3ea:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 800f3ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d141      	bne.n	800f47a <ecp_mod_p448+0x18e>

    /* M = (B0 + B1) * 2^224, N += M */
    if( sizeof( mbedtls_mpi_uint ) > 4 )
        Mp[P224_WIDTH_MIN] &= ( (mbedtls_mpi_uint)-1 ) >> ( P224_UNUSED_BITS );
    for( i = P224_WIDTH_MAX; i < M.n; ++i )
 800f3f6:	2307      	movs	r3, #7
 800f3f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f3fc:	e00c      	b.n	800f418 <ecp_mod_p448+0x12c>
        Mp[i] = 0;
 800f3fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f402:	009b      	lsls	r3, r3, #2
 800f404:	33a0      	adds	r3, #160	@ 0xa0
 800f406:	443b      	add	r3, r7
 800f408:	2200      	movs	r2, #0
 800f40a:	f843 2c5c 	str.w	r2, [r3, #-92]
    for( i = P224_WIDTH_MAX; i < M.n; ++i )
 800f40e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f412:	3301      	adds	r3, #1
 800f414:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f418:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f41c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f420:	429a      	cmp	r2, r3
 800f422:	d3ec      	bcc.n	800f3fe <ecp_mod_p448+0x112>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M, &M, &Q ) );
 800f424:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800f428:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 800f42c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800f430:	4618      	mov	r0, r3
 800f432:	f7f7 fe5e 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800f436:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 800f43a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d11b      	bne.n	800f47a <ecp_mod_p448+0x18e>
    M.n = P448_WIDTH + 1; /* Make room for shifted carry bit from the addition */
 800f442:	230f      	movs	r3, #15
 800f444:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &M, 224 ) );
 800f448:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800f44c:	21e0      	movs	r1, #224	@ 0xe0
 800f44e:	4618      	mov	r0, r3
 800f450:	f7f7 fa6a 	bl	8006928 <mbedtls_mpi_shift_l>
 800f454:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 800f458:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d10c      	bne.n	800f47a <ecp_mod_p448+0x18e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &M ) );
 800f460:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800f464:	461a      	mov	r2, r3
 800f466:	6879      	ldr	r1, [r7, #4]
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f7f7 fe42 	bl	80070f2 <mbedtls_mpi_add_mpi>
 800f46e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 800f472:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f476:	2b00      	cmp	r3, #0

cleanup:
 800f478:	bf00      	nop
    return( ret );
 800f47a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
}
 800f47e:	4618      	mov	r0, r3
 800f480:	37a0      	adds	r7, #160	@ 0xa0
 800f482:	46bd      	mov	sp, r7
 800f484:	bdb0      	pop	{r4, r5, r7, pc}
 800f486:	bf00      	nop
 800f488:	ffffb080 	.word	0xffffb080

0800f48c <mbedtls_entropy_init>:
#endif

#define ENTROPY_MAX_LOOP    256     /**< Maximum amount to loop before error */

void mbedtls_entropy_init( mbedtls_entropy_context *ctx )
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b084      	sub	sp, #16
 800f490:	af02      	add	r7, sp, #8
 800f492:	6078      	str	r0, [r7, #4]
    ctx->source_count = 0;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2200      	movs	r2, #0
 800f498:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    memset( ctx->source, 0, sizeof( ctx->source ) );
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	33e4      	adds	r3, #228	@ 0xe4
 800f4a0:	2228      	movs	r2, #40	@ 0x28
 800f4a2:	2100      	movs	r1, #0
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f007 fb87 	bl	8016bb8 <memset>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif

    ctx->accumulator_started = 0;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	601a      	str	r2, [r3, #0]
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    mbedtls_sha512_init( &ctx->accumulator );
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	3308      	adds	r3, #8
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f003 fa69 	bl	801298c <mbedtls_sha512_init>
    mbedtls_entropy_add_source( ctx, mbedtls_havege_poll, &ctx->havege_data,
                                MBEDTLS_ENTROPY_MIN_HAVEGE,
                                MBEDTLS_ENTROPY_SOURCE_STRONG );
#endif
#if defined(MBEDTLS_ENTROPY_HARDWARE_ALT)
    mbedtls_entropy_add_source( ctx, mbedtls_hardware_poll, NULL,
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	9300      	str	r3, [sp, #0]
 800f4be:	2320      	movs	r3, #32
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	4904      	ldr	r1, [pc, #16]	@ (800f4d4 <mbedtls_entropy_init+0x48>)
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f000 f821 	bl	800f50c <mbedtls_entropy_add_source>
                                MBEDTLS_ENTROPY_BLOCK_SIZE,
                                MBEDTLS_ENTROPY_SOURCE_STRONG );
    ctx->initial_entropy_run = 0;
#endif
#endif /* MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES */
}
 800f4ca:	bf00      	nop
 800f4cc:	3708      	adds	r7, #8
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}
 800f4d2:	bf00      	nop
 800f4d4:	080041b1 	.word	0x080041b1

0800f4d8 <mbedtls_entropy_free>:

void mbedtls_entropy_free( mbedtls_entropy_context *ctx )
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b082      	sub	sp, #8
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
#endif
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    mbedtls_sha512_free( &ctx->accumulator );
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	3308      	adds	r3, #8
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f003 fa5e 	bl	80129a6 <mbedtls_sha512_free>
    mbedtls_sha256_free( &ctx->accumulator );
#endif
#if defined(MBEDTLS_ENTROPY_NV_SEED)
    ctx->initial_entropy_run = 0;
#endif
    ctx->source_count = 0;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    mbedtls_platform_zeroize( ctx->source, sizeof( ctx->source ) );
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	33e4      	adds	r3, #228	@ 0xe4
 800f4f6:	2128      	movs	r1, #40	@ 0x28
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f001 fa3f 	bl	801097c <mbedtls_platform_zeroize>
    ctx->accumulator_started = 0;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2200      	movs	r2, #0
 800f502:	601a      	str	r2, [r3, #0]
}
 800f504:	bf00      	nop
 800f506:	3708      	adds	r7, #8
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}

0800f50c <mbedtls_entropy_add_source>:

int mbedtls_entropy_add_source( mbedtls_entropy_context *ctx,
                        mbedtls_entropy_f_source_ptr f_source, void *p_source,
                        size_t threshold, int strong )
{
 800f50c:	b480      	push	{r7}
 800f50e:	b087      	sub	sp, #28
 800f510:	af00      	add	r7, sp, #0
 800f512:	60f8      	str	r0, [r7, #12]
 800f514:	60b9      	str	r1, [r7, #8]
 800f516:	607a      	str	r2, [r7, #4]
 800f518:	603b      	str	r3, [r7, #0]
    int idx, ret = 0;
 800f51a:	2300      	movs	r3, #0
 800f51c:	617b      	str	r3, [r7, #20]
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    idx = ctx->source_count;
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f524:	613b      	str	r3, [r7, #16]
    if( idx >= MBEDTLS_ENTROPY_MAX_SOURCES )
 800f526:	693b      	ldr	r3, [r7, #16]
 800f528:	2b01      	cmp	r3, #1
 800f52a:	dd03      	ble.n	800f534 <mbedtls_entropy_add_source+0x28>
    {
        ret = MBEDTLS_ERR_ENTROPY_MAX_SOURCES;
 800f52c:	f06f 033d 	mvn.w	r3, #61	@ 0x3d
 800f530:	617b      	str	r3, [r7, #20]
        goto exit;
 800f532:	e02e      	b.n	800f592 <mbedtls_entropy_add_source+0x86>
    }

    ctx->source[idx].f_source  = f_source;
 800f534:	68f9      	ldr	r1, [r7, #12]
 800f536:	693a      	ldr	r2, [r7, #16]
 800f538:	4613      	mov	r3, r2
 800f53a:	009b      	lsls	r3, r3, #2
 800f53c:	4413      	add	r3, r2
 800f53e:	009b      	lsls	r3, r3, #2
 800f540:	440b      	add	r3, r1
 800f542:	33e4      	adds	r3, #228	@ 0xe4
 800f544:	68ba      	ldr	r2, [r7, #8]
 800f546:	601a      	str	r2, [r3, #0]
    ctx->source[idx].p_source  = p_source;
 800f548:	68f9      	ldr	r1, [r7, #12]
 800f54a:	693a      	ldr	r2, [r7, #16]
 800f54c:	4613      	mov	r3, r2
 800f54e:	009b      	lsls	r3, r3, #2
 800f550:	4413      	add	r3, r2
 800f552:	009b      	lsls	r3, r3, #2
 800f554:	440b      	add	r3, r1
 800f556:	33e8      	adds	r3, #232	@ 0xe8
 800f558:	687a      	ldr	r2, [r7, #4]
 800f55a:	601a      	str	r2, [r3, #0]
    ctx->source[idx].threshold = threshold;
 800f55c:	68f9      	ldr	r1, [r7, #12]
 800f55e:	693a      	ldr	r2, [r7, #16]
 800f560:	4613      	mov	r3, r2
 800f562:	009b      	lsls	r3, r3, #2
 800f564:	4413      	add	r3, r2
 800f566:	009b      	lsls	r3, r3, #2
 800f568:	440b      	add	r3, r1
 800f56a:	33f0      	adds	r3, #240	@ 0xf0
 800f56c:	683a      	ldr	r2, [r7, #0]
 800f56e:	601a      	str	r2, [r3, #0]
    ctx->source[idx].strong    = strong;
 800f570:	68f9      	ldr	r1, [r7, #12]
 800f572:	693a      	ldr	r2, [r7, #16]
 800f574:	4613      	mov	r3, r2
 800f576:	009b      	lsls	r3, r3, #2
 800f578:	4413      	add	r3, r2
 800f57a:	009b      	lsls	r3, r3, #2
 800f57c:	440b      	add	r3, r1
 800f57e:	33f4      	adds	r3, #244	@ 0xf4
 800f580:	6a3a      	ldr	r2, [r7, #32]
 800f582:	601a      	str	r2, [r3, #0]

    ctx->source_count++;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f58a:	1c5a      	adds	r2, r3, #1
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
 800f592:	697b      	ldr	r3, [r7, #20]
}
 800f594:	4618      	mov	r0, r3
 800f596:	371c      	adds	r7, #28
 800f598:	46bd      	mov	sp, r7
 800f59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59e:	4770      	bx	lr

0800f5a0 <entropy_update>:
/*
 * Entropy accumulator update
 */
static int entropy_update( mbedtls_entropy_context *ctx, unsigned char source_id,
                           const unsigned char *data, size_t len )
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b098      	sub	sp, #96	@ 0x60
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	60f8      	str	r0, [r7, #12]
 800f5a8:	607a      	str	r2, [r7, #4]
 800f5aa:	603b      	str	r3, [r7, #0]
 800f5ac:	460b      	mov	r3, r1
 800f5ae:	72fb      	strb	r3, [r7, #11]
    unsigned char header[2];
    unsigned char tmp[MBEDTLS_ENTROPY_BLOCK_SIZE];
    size_t use_len = len;
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const unsigned char *p = data;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	65bb      	str	r3, [r7, #88]	@ 0x58
    int ret = 0;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	657b      	str	r3, [r7, #84]	@ 0x54

    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 800f5bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f5be:	2b40      	cmp	r3, #64	@ 0x40
 800f5c0:	d90f      	bls.n	800f5e2 <entropy_update+0x42>
    {
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
        if( ( ret = mbedtls_sha512_ret( data, len, tmp, 0 ) ) != 0 )
 800f5c2:	f107 0210 	add.w	r2, r7, #16
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	6839      	ldr	r1, [r7, #0]
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f006 f898 	bl	8015700 <mbedtls_sha512_ret>
 800f5d0:	6578      	str	r0, [r7, #84]	@ 0x54
 800f5d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d131      	bne.n	800f63c <entropy_update+0x9c>
            goto cleanup;
#else
        if( ( ret = mbedtls_sha256_ret( data, len, tmp, 0 ) ) != 0 )
            goto cleanup;
#endif
        p = tmp;
 800f5d8:	f107 0310 	add.w	r3, r7, #16
 800f5dc:	65bb      	str	r3, [r7, #88]	@ 0x58
        use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;
 800f5de:	2340      	movs	r3, #64	@ 0x40
 800f5e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }

    header[0] = source_id;
 800f5e2:	7afb      	ldrb	r3, [r7, #11]
 800f5e4:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    header[1] = use_len & 0xFF;
 800f5e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
     * Start the accumulator if this has not already happened. Note that
     * it is sufficient to start the accumulator here only because all calls to
     * gather entropy eventually execute this code.
     */
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    if( ctx->accumulator_started == 0 &&
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d109      	bne.n	800f60c <entropy_update+0x6c>
        ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	3308      	adds	r3, #8
 800f5fc:	2100      	movs	r1, #0
 800f5fe:	4618      	mov	r0, r3
 800f600:	f003 f9f2 	bl	80129e8 <mbedtls_sha512_starts_ret>
 800f604:	6578      	str	r0, [r7, #84]	@ 0x54
    if( ctx->accumulator_started == 0 &&
 800f606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d119      	bne.n	800f640 <entropy_update+0xa0>
        goto cleanup;
    else
        ctx->accumulator_started = 1;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	2201      	movs	r2, #1
 800f610:	601a      	str	r2, [r3, #0]
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, header, 2 ) ) != 0 )
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	3308      	adds	r3, #8
 800f616:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800f61a:	2202      	movs	r2, #2
 800f61c:	4618      	mov	r0, r3
 800f61e:	f005 fb65 	bl	8014cec <mbedtls_sha512_update_ret>
 800f622:	6578      	str	r0, [r7, #84]	@ 0x54
 800f624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f626:	2b00      	cmp	r3, #0
 800f628:	d10c      	bne.n	800f644 <entropy_update+0xa4>
        goto cleanup;
    ret = mbedtls_sha512_update_ret( &ctx->accumulator, p, use_len );
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	3308      	adds	r3, #8
 800f62e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f630:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800f632:	4618      	mov	r0, r3
 800f634:	f005 fb5a 	bl	8014cec <mbedtls_sha512_update_ret>
 800f638:	6578      	str	r0, [r7, #84]	@ 0x54
 800f63a:	e004      	b.n	800f646 <entropy_update+0xa6>
            goto cleanup;
 800f63c:	bf00      	nop
 800f63e:	e002      	b.n	800f646 <entropy_update+0xa6>
        goto cleanup;
 800f640:	bf00      	nop
 800f642:	e000      	b.n	800f646 <entropy_update+0xa6>
        goto cleanup;
 800f644:	bf00      	nop
        goto cleanup;
    ret = mbedtls_sha256_update_ret( &ctx->accumulator, p, use_len );
#endif

cleanup:
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 800f646:	f107 0310 	add.w	r3, r7, #16
 800f64a:	2140      	movs	r1, #64	@ 0x40
 800f64c:	4618      	mov	r0, r3
 800f64e:	f001 f995 	bl	801097c <mbedtls_platform_zeroize>

    return( ret );
 800f652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 800f654:	4618      	mov	r0, r3
 800f656:	3760      	adds	r7, #96	@ 0x60
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}

0800f65c <entropy_gather_internal>:

/*
 * Run through the different sources to add entropy to our accumulator
 */
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
{
 800f65c:	b590      	push	{r4, r7, lr}
 800f65e:	b0a7      	sub	sp, #156	@ 0x9c
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
    int ret, i, have_one_strong = 0;
 800f664:	2300      	movs	r3, #0
 800f666:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    unsigned char buf[MBEDTLS_ENTROPY_MAX_GATHER];
    size_t olen;

    if( ctx->source_count == 0 )
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f670:	2b00      	cmp	r3, #0
 800f672:	d102      	bne.n	800f67a <entropy_gather_internal+0x1e>
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );
 800f674:	f06f 033f 	mvn.w	r3, #63	@ 0x3f
 800f678:	e07f      	b.n	800f77a <entropy_gather_internal+0x11e>

    /*
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
 800f67a:	2300      	movs	r3, #0
 800f67c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f680:	e060      	b.n	800f744 <entropy_gather_internal+0xe8>
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
 800f682:	6879      	ldr	r1, [r7, #4]
 800f684:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800f688:	4613      	mov	r3, r2
 800f68a:	009b      	lsls	r3, r3, #2
 800f68c:	4413      	add	r3, r2
 800f68e:	009b      	lsls	r3, r3, #2
 800f690:	440b      	add	r3, r1
 800f692:	33f4      	adds	r3, #244	@ 0xf4
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	2b01      	cmp	r3, #1
 800f698:	d102      	bne.n	800f6a0 <entropy_gather_internal+0x44>
            have_one_strong = 1;
 800f69a:	2301      	movs	r3, #1
 800f69c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

        olen = 0;
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	60bb      	str	r3, [r7, #8]
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 800f6a4:	6879      	ldr	r1, [r7, #4]
 800f6a6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800f6aa:	4613      	mov	r3, r2
 800f6ac:	009b      	lsls	r3, r3, #2
 800f6ae:	4413      	add	r3, r2
 800f6b0:	009b      	lsls	r3, r3, #2
 800f6b2:	440b      	add	r3, r1
 800f6b4:	33e4      	adds	r3, #228	@ 0xe4
 800f6b6:	681c      	ldr	r4, [r3, #0]
 800f6b8:	6879      	ldr	r1, [r7, #4]
 800f6ba:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800f6be:	4613      	mov	r3, r2
 800f6c0:	009b      	lsls	r3, r3, #2
 800f6c2:	4413      	add	r3, r2
 800f6c4:	009b      	lsls	r3, r3, #2
 800f6c6:	440b      	add	r3, r1
 800f6c8:	33e8      	adds	r3, #232	@ 0xe8
 800f6ca:	6818      	ldr	r0, [r3, #0]
 800f6cc:	f107 0308 	add.w	r3, r7, #8
 800f6d0:	f107 010c 	add.w	r1, r7, #12
 800f6d4:	2280      	movs	r2, #128	@ 0x80
 800f6d6:	47a0      	blx	r4
 800f6d8:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 800f6dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d13f      	bne.n	800f764 <entropy_gather_internal+0x108>
        }

        /*
         * Add if we actually gathered something
         */
        if( olen > 0 )
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d027      	beq.n	800f73a <entropy_gather_internal+0xde>
        {
            if( ( ret = entropy_update( ctx, (unsigned char) i,
 800f6ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f6ee:	b2d9      	uxtb	r1, r3
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	f107 020c 	add.w	r2, r7, #12
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f7ff ff52 	bl	800f5a0 <entropy_update>
 800f6fc:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 800f700:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f704:	2b00      	cmp	r3, #0
 800f706:	d002      	beq.n	800f70e <entropy_gather_internal+0xb2>
                                        buf, olen ) ) != 0 )
                return( ret );
 800f708:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f70c:	e035      	b.n	800f77a <entropy_gather_internal+0x11e>
            ctx->source[i].size += olen;
 800f70e:	6879      	ldr	r1, [r7, #4]
 800f710:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800f714:	4613      	mov	r3, r2
 800f716:	009b      	lsls	r3, r3, #2
 800f718:	4413      	add	r3, r2
 800f71a:	009b      	lsls	r3, r3, #2
 800f71c:	440b      	add	r3, r1
 800f71e:	33ec      	adds	r3, #236	@ 0xec
 800f720:	681a      	ldr	r2, [r3, #0]
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	18d1      	adds	r1, r2, r3
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800f72c:	4613      	mov	r3, r2
 800f72e:	009b      	lsls	r3, r3, #2
 800f730:	4413      	add	r3, r2
 800f732:	009b      	lsls	r3, r3, #2
 800f734:	4403      	add	r3, r0
 800f736:	33ec      	adds	r3, #236	@ 0xec
 800f738:	6019      	str	r1, [r3, #0]
    for( i = 0; i < ctx->source_count; i++ )
 800f73a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f73e:	3301      	adds	r3, #1
 800f740:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f74a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800f74e:	429a      	cmp	r2, r3
 800f750:	db97      	blt.n	800f682 <entropy_gather_internal+0x26>
        }
    }

    if( have_one_strong == 0 )
 800f752:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f756:	2b00      	cmp	r3, #0
 800f758:	d106      	bne.n	800f768 <entropy_gather_internal+0x10c>
        ret = MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE;
 800f75a:	f06f 033c 	mvn.w	r3, #60	@ 0x3c
 800f75e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f762:	e002      	b.n	800f76a <entropy_gather_internal+0x10e>
            goto cleanup;
 800f764:	bf00      	nop
 800f766:	e000      	b.n	800f76a <entropy_gather_internal+0x10e>

cleanup:
 800f768:	bf00      	nop
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 800f76a:	f107 030c 	add.w	r3, r7, #12
 800f76e:	2180      	movs	r1, #128	@ 0x80
 800f770:	4618      	mov	r0, r3
 800f772:	f001 f903 	bl	801097c <mbedtls_platform_zeroize>

    return( ret );
 800f776:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
}
 800f77a:	4618      	mov	r0, r3
 800f77c:	379c      	adds	r7, #156	@ 0x9c
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd90      	pop	{r4, r7, pc}

0800f782 <mbedtls_entropy_func>:

    return( ret );
}

int mbedtls_entropy_func( void *data, unsigned char *output, size_t len )
{
 800f782:	b580      	push	{r7, lr}
 800f784:	b09a      	sub	sp, #104	@ 0x68
 800f786:	af00      	add	r7, sp, #0
 800f788:	60f8      	str	r0, [r7, #12]
 800f78a:	60b9      	str	r1, [r7, #8]
 800f78c:	607a      	str	r2, [r7, #4]
    int ret, count = 0, i, done;
 800f78e:	2300      	movs	r3, #0
 800f790:	663b      	str	r3, [r7, #96]	@ 0x60
    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	657b      	str	r3, [r7, #84]	@ 0x54
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	2b40      	cmp	r3, #64	@ 0x40
 800f79a:	d902      	bls.n	800f7a2 <mbedtls_entropy_func+0x20>
        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );
 800f79c:	f06f 033b 	mvn.w	r3, #59	@ 0x3b
 800f7a0:	e0a7      	b.n	800f8f2 <mbedtls_entropy_func+0x170>
    /*
     * Always gather extra entropy before a call
     */
    do
    {
        if( count++ > ENTROPY_MAX_LOOP )
 800f7a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f7a4:	1c5a      	adds	r2, r3, #1
 800f7a6:	663a      	str	r2, [r7, #96]	@ 0x60
 800f7a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f7ac:	dd03      	ble.n	800f7b6 <mbedtls_entropy_func+0x34>
        {
            ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
 800f7ae:	f06f 033b 	mvn.w	r3, #59	@ 0x3b
 800f7b2:	667b      	str	r3, [r7, #100]	@ 0x64
            goto exit;
 800f7b4:	e096      	b.n	800f8e4 <mbedtls_entropy_func+0x162>
        }

        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )
 800f7b6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800f7b8:	f7ff ff50 	bl	800f65c <entropy_gather_internal>
 800f7bc:	6678      	str	r0, [r7, #100]	@ 0x64
 800f7be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	f040 8086 	bne.w	800f8d2 <mbedtls_entropy_func+0x150>
            goto exit;

        done = 1;
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	65bb      	str	r3, [r7, #88]	@ 0x58
        for( i = 0; i < ctx->source_count; i++ )
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f7ce:	e018      	b.n	800f802 <mbedtls_entropy_func+0x80>
            if( ctx->source[i].size < ctx->source[i].threshold )
 800f7d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f7d2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f7d4:	4613      	mov	r3, r2
 800f7d6:	009b      	lsls	r3, r3, #2
 800f7d8:	4413      	add	r3, r2
 800f7da:	009b      	lsls	r3, r3, #2
 800f7dc:	440b      	add	r3, r1
 800f7de:	33ec      	adds	r3, #236	@ 0xec
 800f7e0:	6819      	ldr	r1, [r3, #0]
 800f7e2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800f7e4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f7e6:	4613      	mov	r3, r2
 800f7e8:	009b      	lsls	r3, r3, #2
 800f7ea:	4413      	add	r3, r2
 800f7ec:	009b      	lsls	r3, r3, #2
 800f7ee:	4403      	add	r3, r0
 800f7f0:	33f0      	adds	r3, #240	@ 0xf0
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	4299      	cmp	r1, r3
 800f7f6:	d201      	bcs.n	800f7fc <mbedtls_entropy_func+0x7a>
                done = 0;
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	65bb      	str	r3, [r7, #88]	@ 0x58
        for( i = 0; i < ctx->source_count; i++ )
 800f7fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f7fe:	3301      	adds	r3, #1
 800f800:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f808:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f80a:	429a      	cmp	r2, r3
 800f80c:	dbe0      	blt.n	800f7d0 <mbedtls_entropy_func+0x4e>
    }
    while( ! done );
 800f80e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f810:	2b00      	cmp	r3, #0
 800f812:	d0c6      	beq.n	800f7a2 <mbedtls_entropy_func+0x20>

    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 800f814:	f107 0314 	add.w	r3, r7, #20
 800f818:	2240      	movs	r2, #64	@ 0x40
 800f81a:	2100      	movs	r1, #0
 800f81c:	4618      	mov	r0, r3
 800f81e:	f007 f9cb 	bl	8016bb8 <memset>
    /*
     * Note that at this stage it is assumed that the accumulator was started
     * in a previous call to entropy_update(). If this is not guaranteed, the
     * code below will fail.
     */
    if( ( ret = mbedtls_sha512_finish_ret( &ctx->accumulator, buf ) ) != 0 )
 800f822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f824:	3308      	adds	r3, #8
 800f826:	f107 0214 	add.w	r2, r7, #20
 800f82a:	4611      	mov	r1, r2
 800f82c:	4618      	mov	r0, r3
 800f82e:	f005 fae8 	bl	8014e02 <mbedtls_sha512_finish_ret>
 800f832:	6678      	str	r0, [r7, #100]	@ 0x64
 800f834:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f836:	2b00      	cmp	r3, #0
 800f838:	d14d      	bne.n	800f8d6 <mbedtls_entropy_func+0x154>
        goto exit;

    /*
     * Reset accumulator and counters and recycle existing entropy
     */
    mbedtls_sha512_free( &ctx->accumulator );
 800f83a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f83c:	3308      	adds	r3, #8
 800f83e:	4618      	mov	r0, r3
 800f840:	f003 f8b1 	bl	80129a6 <mbedtls_sha512_free>
    mbedtls_sha512_init( &ctx->accumulator );
 800f844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f846:	3308      	adds	r3, #8
 800f848:	4618      	mov	r0, r3
 800f84a:	f003 f89f 	bl	801298c <mbedtls_sha512_init>
    if( ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
 800f84e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f850:	3308      	adds	r3, #8
 800f852:	2100      	movs	r1, #0
 800f854:	4618      	mov	r0, r3
 800f856:	f003 f8c7 	bl	80129e8 <mbedtls_sha512_starts_ret>
 800f85a:	6678      	str	r0, [r7, #100]	@ 0x64
 800f85c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d13b      	bne.n	800f8da <mbedtls_entropy_func+0x158>
        goto exit;
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, buf,
 800f862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f864:	3308      	adds	r3, #8
 800f866:	f107 0114 	add.w	r1, r7, #20
 800f86a:	2240      	movs	r2, #64	@ 0x40
 800f86c:	4618      	mov	r0, r3
 800f86e:	f005 fa3d 	bl	8014cec <mbedtls_sha512_update_ret>
 800f872:	6678      	str	r0, [r7, #100]	@ 0x64
 800f874:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f876:	2b00      	cmp	r3, #0
 800f878:	d131      	bne.n	800f8de <mbedtls_entropy_func+0x15c>
        goto exit;

    /*
     * Perform second SHA-512 on entropy
     */
    if( ( ret = mbedtls_sha512_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
 800f87a:	f107 0214 	add.w	r2, r7, #20
 800f87e:	f107 0014 	add.w	r0, r7, #20
 800f882:	2300      	movs	r3, #0
 800f884:	2140      	movs	r1, #64	@ 0x40
 800f886:	f005 ff3b 	bl	8015700 <mbedtls_sha512_ret>
 800f88a:	6678      	str	r0, [r7, #100]	@ 0x64
 800f88c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d127      	bne.n	800f8e2 <mbedtls_entropy_func+0x160>
    if( ( ret = mbedtls_sha256_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
                                    buf, 0 ) ) != 0 )
        goto exit;
#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */

    for( i = 0; i < ctx->source_count; i++ )
 800f892:	2300      	movs	r3, #0
 800f894:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f896:	e00c      	b.n	800f8b2 <mbedtls_entropy_func+0x130>
        ctx->source[i].size = 0;
 800f898:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f89a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f89c:	4613      	mov	r3, r2
 800f89e:	009b      	lsls	r3, r3, #2
 800f8a0:	4413      	add	r3, r2
 800f8a2:	009b      	lsls	r3, r3, #2
 800f8a4:	440b      	add	r3, r1
 800f8a6:	33ec      	adds	r3, #236	@ 0xec
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ctx->source_count; i++ )
 800f8ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f8ae:	3301      	adds	r3, #1
 800f8b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f8b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f8b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f8b8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	dbec      	blt.n	800f898 <mbedtls_entropy_func+0x116>

    memcpy( output, buf, len );
 800f8be:	f107 0314 	add.w	r3, r7, #20
 800f8c2:	687a      	ldr	r2, [r7, #4]
 800f8c4:	4619      	mov	r1, r3
 800f8c6:	68b8      	ldr	r0, [r7, #8]
 800f8c8:	f007 fa53 	bl	8016d72 <memcpy>

    ret = 0;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	667b      	str	r3, [r7, #100]	@ 0x64
 800f8d0:	e008      	b.n	800f8e4 <mbedtls_entropy_func+0x162>
            goto exit;
 800f8d2:	bf00      	nop
 800f8d4:	e006      	b.n	800f8e4 <mbedtls_entropy_func+0x162>
        goto exit;
 800f8d6:	bf00      	nop
 800f8d8:	e004      	b.n	800f8e4 <mbedtls_entropy_func+0x162>
        goto exit;
 800f8da:	bf00      	nop
 800f8dc:	e002      	b.n	800f8e4 <mbedtls_entropy_func+0x162>
        goto exit;
 800f8de:	bf00      	nop
 800f8e0:	e000      	b.n	800f8e4 <mbedtls_entropy_func+0x162>
        goto exit;
 800f8e2:	bf00      	nop

exit:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 800f8e4:	f107 0314 	add.w	r3, r7, #20
 800f8e8:	2140      	movs	r1, #64	@ 0x40
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f001 f846 	bl	801097c <mbedtls_platform_zeroize>
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
 800f8f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
}
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	3768      	adds	r7, #104	@ 0x68
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}
	...

0800f8fc <mbedtls_md_info_from_type>:
#endif
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	b083      	sub	sp, #12
 800f900:	af00      	add	r7, sp, #0
 800f902:	4603      	mov	r3, r0
 800f904:	71fb      	strb	r3, [r7, #7]
    switch( md_type )
 800f906:	79fb      	ldrb	r3, [r7, #7]
 800f908:	3b05      	subs	r3, #5
 800f90a:	2b03      	cmp	r3, #3
 800f90c:	d812      	bhi.n	800f934 <mbedtls_md_info_from_type+0x38>
 800f90e:	a201      	add	r2, pc, #4	@ (adr r2, 800f914 <mbedtls_md_info_from_type+0x18>)
 800f910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f914:	0800f925 	.word	0x0800f925
 800f918:	0800f929 	.word	0x0800f929
 800f91c:	0800f92d 	.word	0x0800f92d
 800f920:	0800f931 	.word	0x0800f931
        case MBEDTLS_MD_SHA1:
            return( &mbedtls_sha1_info );
#endif
#if defined(MBEDTLS_SHA256_C)
        case MBEDTLS_MD_SHA224:
            return( &mbedtls_sha224_info );
 800f924:	4b07      	ldr	r3, [pc, #28]	@ (800f944 <mbedtls_md_info_from_type+0x48>)
 800f926:	e006      	b.n	800f936 <mbedtls_md_info_from_type+0x3a>
        case MBEDTLS_MD_SHA256:
            return( &mbedtls_sha256_info );
 800f928:	4b07      	ldr	r3, [pc, #28]	@ (800f948 <mbedtls_md_info_from_type+0x4c>)
 800f92a:	e004      	b.n	800f936 <mbedtls_md_info_from_type+0x3a>
#endif
#if defined(MBEDTLS_SHA512_C)
        case MBEDTLS_MD_SHA384:
            return( &mbedtls_sha384_info );
 800f92c:	4b07      	ldr	r3, [pc, #28]	@ (800f94c <mbedtls_md_info_from_type+0x50>)
 800f92e:	e002      	b.n	800f936 <mbedtls_md_info_from_type+0x3a>
        case MBEDTLS_MD_SHA512:
            return( &mbedtls_sha512_info );
 800f930:	4b07      	ldr	r3, [pc, #28]	@ (800f950 <mbedtls_md_info_from_type+0x54>)
 800f932:	e000      	b.n	800f936 <mbedtls_md_info_from_type+0x3a>
#endif
        default:
            return( NULL );
 800f934:	2300      	movs	r3, #0
    }
}
 800f936:	4618      	mov	r0, r3
 800f938:	370c      	adds	r7, #12
 800f93a:	46bd      	mov	sp, r7
 800f93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f940:	4770      	bx	lr
 800f942:	bf00      	nop
 800f944:	0801b074 	.word	0x0801b074
 800f948:	0801b0a4 	.word	0x0801b0a4
 800f94c:	0801b0d4 	.word	0x0801b0d4
 800f950:	0801b104 	.word	0x0801b104

0800f954 <mbedtls_md>:
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b084      	sub	sp, #16
 800f958:	af00      	add	r7, sp, #0
 800f95a:	60f8      	str	r0, [r7, #12]
 800f95c:	60b9      	str	r1, [r7, #8]
 800f95e:	607a      	str	r2, [r7, #4]
 800f960:	603b      	str	r3, [r7, #0]
    if( md_info == NULL )
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d101      	bne.n	800f96c <mbedtls_md+0x18>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800f968:	4b06      	ldr	r3, [pc, #24]	@ (800f984 <mbedtls_md+0x30>)
 800f96a:	e006      	b.n	800f97a <mbedtls_md+0x26>

    return( md_info->digest_func( input, ilen, output ) );
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	69db      	ldr	r3, [r3, #28]
 800f970:	683a      	ldr	r2, [r7, #0]
 800f972:	6879      	ldr	r1, [r7, #4]
 800f974:	68b8      	ldr	r0, [r7, #8]
 800f976:	4798      	blx	r3
 800f978:	4603      	mov	r3, r0
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	3710      	adds	r7, #16
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}
 800f982:	bf00      	nop
 800f984:	ffffaf00 	.word	0xffffaf00

0800f988 <mbedtls_md_get_size>:

    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
}

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
 800f988:	b480      	push	{r7}
 800f98a:	b083      	sub	sp, #12
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
    if( md_info == NULL )
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d101      	bne.n	800f99a <mbedtls_md_get_size+0x12>
        return( 0 );
 800f996:	2300      	movs	r3, #0
 800f998:	e002      	b.n	800f9a0 <mbedtls_md_get_size+0x18>

    return md_info->size;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	689b      	ldr	r3, [r3, #8]
 800f99e:	b2db      	uxtb	r3, r3
}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	370c      	adds	r7, #12
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9aa:	4770      	bx	lr

0800f9ac <sha224_starts_wrap>:
 * Wrappers for generic message digests
 */
#if defined(MBEDTLS_SHA256_C)

static int sha224_starts_wrap( void *ctx )
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b082      	sub	sp, #8
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
 800f9b4:	2101      	movs	r1, #1
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f001 f820 	bl	80109fc <mbedtls_sha256_starts_ret>
 800f9bc:	4603      	mov	r3, r0
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	3708      	adds	r7, #8
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}

0800f9c6 <sha224_update_wrap>:

static int sha224_update_wrap( void *ctx, const unsigned char *input,
                                size_t ilen )
{
 800f9c6:	b580      	push	{r7, lr}
 800f9c8:	b084      	sub	sp, #16
 800f9ca:	af00      	add	r7, sp, #0
 800f9cc:	60f8      	str	r0, [r7, #12]
 800f9ce:	60b9      	str	r1, [r7, #8]
 800f9d0:	607a      	str	r2, [r7, #4]
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
 800f9d2:	687a      	ldr	r2, [r7, #4]
 800f9d4:	68b9      	ldr	r1, [r7, #8]
 800f9d6:	68f8      	ldr	r0, [r7, #12]
 800f9d8:	f002 fdc4 	bl	8012564 <mbedtls_sha256_update_ret>
 800f9dc:	4603      	mov	r3, r0
                                       input, ilen ) );
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	3710      	adds	r7, #16
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}

0800f9e6 <sha224_finish_wrap>:

static int sha224_finish_wrap( void *ctx, unsigned char *output )
{
 800f9e6:	b580      	push	{r7, lr}
 800f9e8:	b082      	sub	sp, #8
 800f9ea:	af00      	add	r7, sp, #0
 800f9ec:	6078      	str	r0, [r7, #4]
 800f9ee:	6039      	str	r1, [r7, #0]
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
 800f9f0:	6839      	ldr	r1, [r7, #0]
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f002 fe2b 	bl	801264e <mbedtls_sha256_finish_ret>
 800f9f8:	4603      	mov	r3, r0
                                       output ) );
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	3708      	adds	r7, #8
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd80      	pop	{r7, pc}

0800fa02 <sha224_wrap>:

static int sha224_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
 800fa02:	b580      	push	{r7, lr}
 800fa04:	b084      	sub	sp, #16
 800fa06:	af00      	add	r7, sp, #0
 800fa08:	60f8      	str	r0, [r7, #12]
 800fa0a:	60b9      	str	r1, [r7, #8]
 800fa0c:	607a      	str	r2, [r7, #4]
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 800fa0e:	2301      	movs	r3, #1
 800fa10:	687a      	ldr	r2, [r7, #4]
 800fa12:	68b9      	ldr	r1, [r7, #8]
 800fa14:	68f8      	ldr	r0, [r7, #12]
 800fa16:	f002 ff81 	bl	801291c <mbedtls_sha256_ret>
 800fa1a:	4603      	mov	r3, r0
}
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	3710      	adds	r7, #16
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd80      	pop	{r7, pc}

0800fa24 <sha224_ctx_alloc>:

static void *sha224_ctx_alloc( void )
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b082      	sub	sp, #8
 800fa28:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 800fa2a:	216c      	movs	r1, #108	@ 0x6c
 800fa2c:	2001      	movs	r0, #1
 800fa2e:	f006 fd89 	bl	8016544 <calloc>
 800fa32:	4603      	mov	r3, r0
 800fa34:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d002      	beq.n	800fa42 <sha224_ctx_alloc+0x1e>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 800fa3c:	6878      	ldr	r0, [r7, #4]
 800fa3e:	f000 ffaf 	bl	80109a0 <mbedtls_sha256_init>

    return( ctx );
 800fa42:	687b      	ldr	r3, [r7, #4]
}
 800fa44:	4618      	mov	r0, r3
 800fa46:	3708      	adds	r7, #8
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd80      	pop	{r7, pc}

0800fa4c <sha224_ctx_free>:

static void sha224_ctx_free( void *ctx )
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b082      	sub	sp, #8
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	f000 ffb0 	bl	80109ba <mbedtls_sha256_free>
    mbedtls_free( ctx );
 800fa5a:	6878      	ldr	r0, [r7, #4]
 800fa5c:	f006 fd8e 	bl	801657c <free>
}
 800fa60:	bf00      	nop
 800fa62:	3708      	adds	r7, #8
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}

0800fa68 <sha224_clone_wrap>:

static void sha224_clone_wrap( void *dst, const void *src )
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
 800fa70:	6039      	str	r1, [r7, #0]
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
 800fa72:	6839      	ldr	r1, [r7, #0]
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f000 ffb0 	bl	80109da <mbedtls_sha256_clone>
                    (const mbedtls_sha256_context *) src );
}
 800fa7a:	bf00      	nop
 800fa7c:	3708      	adds	r7, #8
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}

0800fa82 <sha224_process_wrap>:

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
 800fa82:	b580      	push	{r7, lr}
 800fa84:	b082      	sub	sp, #8
 800fa86:	af00      	add	r7, sp, #0
 800fa88:	6078      	str	r0, [r7, #4]
 800fa8a:	6039      	str	r1, [r7, #0]
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
 800fa8c:	6839      	ldr	r1, [r7, #0]
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f001 f81e 	bl	8010ad0 <mbedtls_internal_sha256_process>
 800fa94:	4603      	mov	r3, r0
                                             data ) );
}
 800fa96:	4618      	mov	r0, r3
 800fa98:	3708      	adds	r7, #8
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bd80      	pop	{r7, pc}

0800fa9e <sha256_starts_wrap>:
    sha224_clone_wrap,
    sha224_process_wrap,
};

static int sha256_starts_wrap( void *ctx )
{
 800fa9e:	b580      	push	{r7, lr}
 800faa0:	b082      	sub	sp, #8
 800faa2:	af00      	add	r7, sp, #0
 800faa4:	6078      	str	r0, [r7, #4]
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
 800faa6:	2100      	movs	r1, #0
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f000 ffa7 	bl	80109fc <mbedtls_sha256_starts_ret>
 800faae:	4603      	mov	r3, r0
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	3708      	adds	r7, #8
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}

0800fab8 <sha256_wrap>:

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b084      	sub	sp, #16
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	60f8      	str	r0, [r7, #12]
 800fac0:	60b9      	str	r1, [r7, #8]
 800fac2:	607a      	str	r2, [r7, #4]
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 800fac4:	2300      	movs	r3, #0
 800fac6:	687a      	ldr	r2, [r7, #4]
 800fac8:	68b9      	ldr	r1, [r7, #8]
 800faca:	68f8      	ldr	r0, [r7, #12]
 800facc:	f002 ff26 	bl	801291c <mbedtls_sha256_ret>
 800fad0:	4603      	mov	r3, r0
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3710      	adds	r7, #16
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}

0800fada <sha384_starts_wrap>:
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)

static int sha384_starts_wrap( void *ctx )
{
 800fada:	b580      	push	{r7, lr}
 800fadc:	b082      	sub	sp, #8
 800fade:	af00      	add	r7, sp, #0
 800fae0:	6078      	str	r0, [r7, #4]
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 1 ) );
 800fae2:	2101      	movs	r1, #1
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f002 ff7f 	bl	80129e8 <mbedtls_sha512_starts_ret>
 800faea:	4603      	mov	r3, r0
}
 800faec:	4618      	mov	r0, r3
 800faee:	3708      	adds	r7, #8
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <sha384_update_wrap>:

static int sha384_update_wrap( void *ctx, const unsigned char *input,
                               size_t ilen )
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b084      	sub	sp, #16
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	60f8      	str	r0, [r7, #12]
 800fafc:	60b9      	str	r1, [r7, #8]
 800fafe:	607a      	str	r2, [r7, #4]
    return( mbedtls_sha512_update_ret( (mbedtls_sha512_context *) ctx,
 800fb00:	687a      	ldr	r2, [r7, #4]
 800fb02:	68b9      	ldr	r1, [r7, #8]
 800fb04:	68f8      	ldr	r0, [r7, #12]
 800fb06:	f005 f8f1 	bl	8014cec <mbedtls_sha512_update_ret>
 800fb0a:	4603      	mov	r3, r0
                                       input, ilen ) );
}
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3710      	adds	r7, #16
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}

0800fb14 <sha384_finish_wrap>:

static int sha384_finish_wrap( void *ctx, unsigned char *output )
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b082      	sub	sp, #8
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
 800fb1c:	6039      	str	r1, [r7, #0]
    return( mbedtls_sha512_finish_ret( (mbedtls_sha512_context *) ctx,
 800fb1e:	6839      	ldr	r1, [r7, #0]
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	f005 f96e 	bl	8014e02 <mbedtls_sha512_finish_ret>
 800fb26:	4603      	mov	r3, r0
                                       output ) );
}
 800fb28:	4618      	mov	r0, r3
 800fb2a:	3708      	adds	r7, #8
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}

0800fb30 <sha384_wrap>:

static int sha384_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	60f8      	str	r0, [r7, #12]
 800fb38:	60b9      	str	r1, [r7, #8]
 800fb3a:	607a      	str	r2, [r7, #4]
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	687a      	ldr	r2, [r7, #4]
 800fb40:	68b9      	ldr	r1, [r7, #8]
 800fb42:	68f8      	ldr	r0, [r7, #12]
 800fb44:	f005 fddc 	bl	8015700 <mbedtls_sha512_ret>
 800fb48:	4603      	mov	r3, r0
}
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	3710      	adds	r7, #16
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	bd80      	pop	{r7, pc}

0800fb52 <sha384_ctx_alloc>:

static void *sha384_ctx_alloc( void )
{
 800fb52:	b580      	push	{r7, lr}
 800fb54:	b082      	sub	sp, #8
 800fb56:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
 800fb58:	21d8      	movs	r1, #216	@ 0xd8
 800fb5a:	2001      	movs	r0, #1
 800fb5c:	f006 fcf2 	bl	8016544 <calloc>
 800fb60:	4603      	mov	r3, r0
 800fb62:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d002      	beq.n	800fb70 <sha384_ctx_alloc+0x1e>
        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	f002 ff0e 	bl	801298c <mbedtls_sha512_init>

    return( ctx );
 800fb70:	687b      	ldr	r3, [r7, #4]
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	3708      	adds	r7, #8
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}

0800fb7a <sha384_ctx_free>:

static void sha384_ctx_free( void *ctx )
{
 800fb7a:	b580      	push	{r7, lr}
 800fb7c:	b082      	sub	sp, #8
 800fb7e:	af00      	add	r7, sp, #0
 800fb80:	6078      	str	r0, [r7, #4]
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f002 ff0f 	bl	80129a6 <mbedtls_sha512_free>
    mbedtls_free( ctx );
 800fb88:	6878      	ldr	r0, [r7, #4]
 800fb8a:	f006 fcf7 	bl	801657c <free>
}
 800fb8e:	bf00      	nop
 800fb90:	3708      	adds	r7, #8
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}

0800fb96 <sha384_clone_wrap>:

static void sha384_clone_wrap( void *dst, const void *src )
{
 800fb96:	b580      	push	{r7, lr}
 800fb98:	b082      	sub	sp, #8
 800fb9a:	af00      	add	r7, sp, #0
 800fb9c:	6078      	str	r0, [r7, #4]
 800fb9e:	6039      	str	r1, [r7, #0]
    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,
 800fba0:	6839      	ldr	r1, [r7, #0]
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f002 ff0f 	bl	80129c6 <mbedtls_sha512_clone>
                    (const mbedtls_sha512_context *) src );
}
 800fba8:	bf00      	nop
 800fbaa:	3708      	adds	r7, #8
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}

0800fbb0 <sha384_process_wrap>:

static int sha384_process_wrap( void *ctx, const unsigned char *data )
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b082      	sub	sp, #8
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
 800fbb8:	6039      	str	r1, [r7, #0]
    return( mbedtls_internal_sha512_process( (mbedtls_sha512_context *) ctx,
 800fbba:	6839      	ldr	r1, [r7, #0]
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f002 ffd7 	bl	8012b70 <mbedtls_internal_sha512_process>
 800fbc2:	4603      	mov	r3, r0
                                             data ) );
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	3708      	adds	r7, #8
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}

0800fbcc <sha512_starts_wrap>:
    sha384_clone_wrap,
    sha384_process_wrap,
};

static int sha512_starts_wrap( void *ctx )
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b082      	sub	sp, #8
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 0 ) );
 800fbd4:	2100      	movs	r1, #0
 800fbd6:	6878      	ldr	r0, [r7, #4]
 800fbd8:	f002 ff06 	bl	80129e8 <mbedtls_sha512_starts_ret>
 800fbdc:	4603      	mov	r3, r0
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3708      	adds	r7, #8
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}

0800fbe6 <sha512_wrap>:

static int sha512_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
 800fbe6:	b580      	push	{r7, lr}
 800fbe8:	b084      	sub	sp, #16
 800fbea:	af00      	add	r7, sp, #0
 800fbec:	60f8      	str	r0, [r7, #12]
 800fbee:	60b9      	str	r1, [r7, #8]
 800fbf0:	607a      	str	r2, [r7, #4]
    return( mbedtls_sha512_ret( input, ilen, output, 0 ) );
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	687a      	ldr	r2, [r7, #4]
 800fbf6:	68b9      	ldr	r1, [r7, #8]
 800fbf8:	68f8      	ldr	r0, [r7, #12]
 800fbfa:	f005 fd81 	bl	8015700 <mbedtls_sha512_ret>
 800fbfe:	4603      	mov	r3, r0
}
 800fc00:	4618      	mov	r0, r3
 800fc02:	3710      	adds	r7, #16
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bd80      	pop	{r7, pc}

0800fc08 <mbedtls_oid_get_oid_by_sig_alg>:
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
FN_OID_GET_OID_BY_ATTR2(mbedtls_oid_get_oid_by_sig_alg, oid_sig_alg_t, oid_sig_alg, mbedtls_pk_type_t, pk_alg, mbedtls_md_type_t, md_alg)
 800fc08:	b480      	push	{r7}
 800fc0a:	b087      	sub	sp, #28
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	60ba      	str	r2, [r7, #8]
 800fc10:	607b      	str	r3, [r7, #4]
 800fc12:	4603      	mov	r3, r0
 800fc14:	73fb      	strb	r3, [r7, #15]
 800fc16:	460b      	mov	r3, r1
 800fc18:	73bb      	strb	r3, [r7, #14]
 800fc1a:	4b13      	ldr	r3, [pc, #76]	@ (800fc68 <mbedtls_oid_get_oid_by_sig_alg+0x60>)
 800fc1c:	617b      	str	r3, [r7, #20]
 800fc1e:	e016      	b.n	800fc4e <mbedtls_oid_get_oid_by_sig_alg+0x46>
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	7c5b      	ldrb	r3, [r3, #17]
 800fc24:	7bfa      	ldrb	r2, [r7, #15]
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d10e      	bne.n	800fc48 <mbedtls_oid_get_oid_by_sig_alg+0x40>
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	7c1b      	ldrb	r3, [r3, #16]
 800fc2e:	7bba      	ldrb	r2, [r7, #14]
 800fc30:	429a      	cmp	r2, r3
 800fc32:	d109      	bne.n	800fc48 <mbedtls_oid_get_oid_by_sig_alg+0x40>
 800fc34:	697b      	ldr	r3, [r7, #20]
 800fc36:	681a      	ldr	r2, [r3, #0]
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	601a      	str	r2, [r3, #0]
 800fc3c:	697b      	ldr	r3, [r7, #20]
 800fc3e:	685a      	ldr	r2, [r3, #4]
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	601a      	str	r2, [r3, #0]
 800fc44:	2300      	movs	r3, #0
 800fc46:	e008      	b.n	800fc5a <mbedtls_oid_get_oid_by_sig_alg+0x52>
 800fc48:	697b      	ldr	r3, [r7, #20]
 800fc4a:	3314      	adds	r3, #20
 800fc4c:	617b      	str	r3, [r7, #20]
 800fc4e:	697b      	ldr	r3, [r7, #20]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d1e4      	bne.n	800fc20 <mbedtls_oid_get_oid_by_sig_alg+0x18>
 800fc56:	f06f 032d 	mvn.w	r3, #45	@ 0x2d
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	371c      	adds	r7, #28
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc64:	4770      	bx	lr
 800fc66:	bf00      	nop
 800fc68:	0801b134 	.word	0x0801b134

0800fc6c <mbedtls_oid_get_oid_by_pk_alg>:
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_pk_alg, oid_pk_alg_t, oid_pk_alg, mbedtls_pk_type_t, pk_alg)
 800fc6c:	b480      	push	{r7}
 800fc6e:	b087      	sub	sp, #28
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	4603      	mov	r3, r0
 800fc74:	60b9      	str	r1, [r7, #8]
 800fc76:	607a      	str	r2, [r7, #4]
 800fc78:	73fb      	strb	r3, [r7, #15]
 800fc7a:	4b10      	ldr	r3, [pc, #64]	@ (800fcbc <mbedtls_oid_get_oid_by_pk_alg+0x50>)
 800fc7c:	617b      	str	r3, [r7, #20]
 800fc7e:	e011      	b.n	800fca4 <mbedtls_oid_get_oid_by_pk_alg+0x38>
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	7c1b      	ldrb	r3, [r3, #16]
 800fc84:	7bfa      	ldrb	r2, [r7, #15]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d109      	bne.n	800fc9e <mbedtls_oid_get_oid_by_pk_alg+0x32>
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	681a      	ldr	r2, [r3, #0]
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	601a      	str	r2, [r3, #0]
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	685a      	ldr	r2, [r3, #4]
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	601a      	str	r2, [r3, #0]
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	e008      	b.n	800fcb0 <mbedtls_oid_get_oid_by_pk_alg+0x44>
 800fc9e:	697b      	ldr	r3, [r7, #20]
 800fca0:	3314      	adds	r3, #20
 800fca2:	617b      	str	r3, [r7, #20]
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d1e9      	bne.n	800fc80 <mbedtls_oid_get_oid_by_pk_alg+0x14>
 800fcac:	f06f 032d 	mvn.w	r3, #45	@ 0x2d
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	371c      	adds	r7, #28
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcba:	4770      	bx	lr
 800fcbc:	0801b198 	.word	0x0801b198

0800fcc0 <mbedtls_oid_get_oid_by_ec_grp>:
    },
};

FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_ec_grp, oid_ecp_grp_t, oid_ecp_grp, mbedtls_ecp_group_id, grp_id)
 800fcc0:	b480      	push	{r7}
 800fcc2:	b087      	sub	sp, #28
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	60b9      	str	r1, [r7, #8]
 800fcca:	607a      	str	r2, [r7, #4]
 800fccc:	73fb      	strb	r3, [r7, #15]
 800fcce:	4b10      	ldr	r3, [pc, #64]	@ (800fd10 <mbedtls_oid_get_oid_by_ec_grp+0x50>)
 800fcd0:	617b      	str	r3, [r7, #20]
 800fcd2:	e011      	b.n	800fcf8 <mbedtls_oid_get_oid_by_ec_grp+0x38>
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	7c1b      	ldrb	r3, [r3, #16]
 800fcd8:	7bfa      	ldrb	r2, [r7, #15]
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	d109      	bne.n	800fcf2 <mbedtls_oid_get_oid_by_ec_grp+0x32>
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	681a      	ldr	r2, [r3, #0]
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	601a      	str	r2, [r3, #0]
 800fce6:	697b      	ldr	r3, [r7, #20]
 800fce8:	685a      	ldr	r2, [r3, #4]
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	601a      	str	r2, [r3, #0]
 800fcee:	2300      	movs	r3, #0
 800fcf0:	e008      	b.n	800fd04 <mbedtls_oid_get_oid_by_ec_grp+0x44>
 800fcf2:	697b      	ldr	r3, [r7, #20]
 800fcf4:	3314      	adds	r3, #20
 800fcf6:	617b      	str	r3, [r7, #20]
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d1e9      	bne.n	800fcd4 <mbedtls_oid_get_oid_by_ec_grp+0x14>
 800fd00:	f06f 032d 	mvn.w	r3, #45	@ 0x2d
 800fd04:	4618      	mov	r0, r3
 800fd06:	371c      	adds	r7, #28
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0e:	4770      	bx	lr
 800fd10:	0801b1e8 	.word	0x0801b1e8

0800fd14 <mbedtls_pem_write_buffer>:

#if defined(MBEDTLS_PEM_WRITE_C)
int mbedtls_pem_write_buffer( const char *header, const char *footer,
                      const unsigned char *der_data, size_t der_len,
                      unsigned char *buf, size_t buf_len, size_t *olen )
{
 800fd14:	b590      	push	{r4, r7, lr}
 800fd16:	b08f      	sub	sp, #60	@ 0x3c
 800fd18:	af02      	add	r7, sp, #8
 800fd1a:	60f8      	str	r0, [r7, #12]
 800fd1c:	60b9      	str	r1, [r7, #8]
 800fd1e:	607a      	str	r2, [r7, #4]
 800fd20:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char *encode_buf = NULL, *c, *p = buf;
 800fd22:	2300      	movs	r3, #0
 800fd24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fd26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd28:	627b      	str	r3, [r7, #36]	@ 0x24
    size_t len = 0, use_len, add_len = 0;
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	623b      	str	r3, [r7, #32]
 800fd2e:	2300      	movs	r3, #0
 800fd30:	61fb      	str	r3, [r7, #28]

    mbedtls_base64_encode( NULL, 0, &use_len, der_data, der_len );
 800fd32:	f107 0214 	add.w	r2, r7, #20
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	9300      	str	r3, [sp, #0]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2100      	movs	r1, #0
 800fd3e:	2000      	movs	r0, #0
 800fd40:	f7f5 ff6a 	bl	8005c18 <mbedtls_base64_encode>
    add_len = strlen( header ) + strlen( footer ) + ( use_len / 64 ) + 1;
 800fd44:	68f8      	ldr	r0, [r7, #12]
 800fd46:	f7f0 fa43 	bl	80001d0 <strlen>
 800fd4a:	4604      	mov	r4, r0
 800fd4c:	68b8      	ldr	r0, [r7, #8]
 800fd4e:	f7f0 fa3f 	bl	80001d0 <strlen>
 800fd52:	4603      	mov	r3, r0
 800fd54:	18e2      	adds	r2, r4, r3
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	099b      	lsrs	r3, r3, #6
 800fd5a:	4413      	add	r3, r2
 800fd5c:	3301      	adds	r3, #1
 800fd5e:	61fb      	str	r3, [r7, #28]

    if( use_len + add_len > buf_len )
 800fd60:	697a      	ldr	r2, [r7, #20]
 800fd62:	69fb      	ldr	r3, [r7, #28]
 800fd64:	4413      	add	r3, r2
 800fd66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fd68:	429a      	cmp	r2, r3
 800fd6a:	d207      	bcs.n	800fd7c <mbedtls_pem_write_buffer+0x68>
    {
        *olen = use_len + add_len;
 800fd6c:	697a      	ldr	r2, [r7, #20]
 800fd6e:	69fb      	ldr	r3, [r7, #28]
 800fd70:	441a      	add	r2, r3
 800fd72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fd74:	601a      	str	r2, [r3, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 800fd76:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800fd7a:	e070      	b.n	800fe5e <mbedtls_pem_write_buffer+0x14a>
    }

    if( use_len != 0 &&
 800fd7c:	697b      	ldr	r3, [r7, #20]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d00b      	beq.n	800fd9a <mbedtls_pem_write_buffer+0x86>
        ( ( encode_buf = mbedtls_calloc( 1, use_len ) ) == NULL ) )
 800fd82:	697b      	ldr	r3, [r7, #20]
 800fd84:	4619      	mov	r1, r3
 800fd86:	2001      	movs	r0, #1
 800fd88:	f006 fbdc 	bl	8016544 <calloc>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if( use_len != 0 &&
 800fd90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d101      	bne.n	800fd9a <mbedtls_pem_write_buffer+0x86>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
 800fd96:	4b34      	ldr	r3, [pc, #208]	@ (800fe68 <mbedtls_pem_write_buffer+0x154>)
 800fd98:	e061      	b.n	800fe5e <mbedtls_pem_write_buffer+0x14a>

    if( ( ret = mbedtls_base64_encode( encode_buf, use_len, &use_len, der_data,
 800fd9a:	6979      	ldr	r1, [r7, #20]
 800fd9c:	f107 0214 	add.w	r2, r7, #20
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	9300      	str	r3, [sp, #0]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fda8:	f7f5 ff36 	bl	8005c18 <mbedtls_base64_encode>
 800fdac:	61b8      	str	r0, [r7, #24]
 800fdae:	69bb      	ldr	r3, [r7, #24]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d004      	beq.n	800fdbe <mbedtls_pem_write_buffer+0xaa>
                               der_len ) ) != 0 )
    {
        mbedtls_free( encode_buf );
 800fdb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fdb6:	f006 fbe1 	bl	801657c <free>
        return( ret );
 800fdba:	69bb      	ldr	r3, [r7, #24]
 800fdbc:	e04f      	b.n	800fe5e <mbedtls_pem_write_buffer+0x14a>
    }

    memcpy( p, header, strlen( header ) );
 800fdbe:	68f8      	ldr	r0, [r7, #12]
 800fdc0:	f7f0 fa06 	bl	80001d0 <strlen>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	461a      	mov	r2, r3
 800fdc8:	68f9      	ldr	r1, [r7, #12]
 800fdca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fdcc:	f006 ffd1 	bl	8016d72 <memcpy>
    p += strlen( header );
 800fdd0:	68f8      	ldr	r0, [r7, #12]
 800fdd2:	f7f0 f9fd 	bl	80001d0 <strlen>
 800fdd6:	4602      	mov	r2, r0
 800fdd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdda:	4413      	add	r3, r2
 800fddc:	627b      	str	r3, [r7, #36]	@ 0x24
    c = encode_buf;
 800fdde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fde0:	62bb      	str	r3, [r7, #40]	@ 0x28

    while( use_len )
 800fde2:	e01a      	b.n	800fe1a <mbedtls_pem_write_buffer+0x106>
    {
        len = ( use_len > 64 ) ? 64 : use_len;
 800fde4:	697b      	ldr	r3, [r7, #20]
 800fde6:	2b40      	cmp	r3, #64	@ 0x40
 800fde8:	bf28      	it	cs
 800fdea:	2340      	movcs	r3, #64	@ 0x40
 800fdec:	623b      	str	r3, [r7, #32]
        memcpy( p, c, len );
 800fdee:	6a3a      	ldr	r2, [r7, #32]
 800fdf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fdf2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fdf4:	f006 ffbd 	bl	8016d72 <memcpy>
        use_len -= len;
 800fdf8:	697a      	ldr	r2, [r7, #20]
 800fdfa:	6a3b      	ldr	r3, [r7, #32]
 800fdfc:	1ad3      	subs	r3, r2, r3
 800fdfe:	617b      	str	r3, [r7, #20]
        p += len;
 800fe00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe02:	6a3b      	ldr	r3, [r7, #32]
 800fe04:	4413      	add	r3, r2
 800fe06:	627b      	str	r3, [r7, #36]	@ 0x24
        c += len;
 800fe08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fe0a:	6a3b      	ldr	r3, [r7, #32]
 800fe0c:	4413      	add	r3, r2
 800fe0e:	62bb      	str	r3, [r7, #40]	@ 0x28
        *p++ = '\n';
 800fe10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe12:	1c5a      	adds	r2, r3, #1
 800fe14:	627a      	str	r2, [r7, #36]	@ 0x24
 800fe16:	220a      	movs	r2, #10
 800fe18:	701a      	strb	r2, [r3, #0]
    while( use_len )
 800fe1a:	697b      	ldr	r3, [r7, #20]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d1e1      	bne.n	800fde4 <mbedtls_pem_write_buffer+0xd0>
    }

    memcpy( p, footer, strlen( footer ) );
 800fe20:	68b8      	ldr	r0, [r7, #8]
 800fe22:	f7f0 f9d5 	bl	80001d0 <strlen>
 800fe26:	4603      	mov	r3, r0
 800fe28:	461a      	mov	r2, r3
 800fe2a:	68b9      	ldr	r1, [r7, #8]
 800fe2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fe2e:	f006 ffa0 	bl	8016d72 <memcpy>
    p += strlen( footer );
 800fe32:	68b8      	ldr	r0, [r7, #8]
 800fe34:	f7f0 f9cc 	bl	80001d0 <strlen>
 800fe38:	4602      	mov	r2, r0
 800fe3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe3c:	4413      	add	r3, r2
 800fe3e:	627b      	str	r3, [r7, #36]	@ 0x24

    *p++ = '\0';
 800fe40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe42:	1c5a      	adds	r2, r3, #1
 800fe44:	627a      	str	r2, [r7, #36]	@ 0x24
 800fe46:	2200      	movs	r2, #0
 800fe48:	701a      	strb	r2, [r3, #0]
    *olen = p - buf;
 800fe4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe4e:	1ad3      	subs	r3, r2, r3
 800fe50:	461a      	mov	r2, r3
 800fe52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fe54:	601a      	str	r2, [r3, #0]

    mbedtls_free( encode_buf );
 800fe56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fe58:	f006 fb90 	bl	801657c <free>
    return( 0 );
 800fe5c:	2300      	movs	r3, #0
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3734      	adds	r7, #52	@ 0x34
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd90      	pop	{r4, r7, pc}
 800fe66:	bf00      	nop
 800fe68:	ffffee80 	.word	0xffffee80

0800fe6c <mbedtls_pk_init>:

/*
 * Initialise a mbedtls_pk_context
 */
void mbedtls_pk_init( mbedtls_pk_context *ctx )
{
 800fe6c:	b480      	push	{r7}
 800fe6e:	b083      	sub	sp, #12
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
    PK_VALIDATE( ctx != NULL );

    ctx->pk_info = NULL;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2200      	movs	r2, #0
 800fe78:	601a      	str	r2, [r3, #0]
    ctx->pk_ctx = NULL;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	605a      	str	r2, [r3, #4]
}
 800fe80:	bf00      	nop
 800fe82:	370c      	adds	r7, #12
 800fe84:	46bd      	mov	sp, r7
 800fe86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8a:	4770      	bx	lr

0800fe8c <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b082      	sub	sp, #8
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d00f      	beq.n	800feba <mbedtls_pk_free+0x2e>
        return;

    if ( ctx->pk_info != NULL )
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d006      	beq.n	800feb0 <mbedtls_pk_free+0x24>
        ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fea8:	687a      	ldr	r2, [r7, #4]
 800feaa:	6852      	ldr	r2, [r2, #4]
 800feac:	4610      	mov	r0, r2
 800feae:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
 800feb0:	2108      	movs	r1, #8
 800feb2:	6878      	ldr	r0, [r7, #4]
 800feb4:	f000 fd62 	bl	801097c <mbedtls_platform_zeroize>
 800feb8:	e000      	b.n	800febc <mbedtls_pk_free+0x30>
        return;
 800feba:	bf00      	nop
}
 800febc:	3708      	adds	r7, #8
 800febe:	46bd      	mov	sp, r7
 800fec0:	bd80      	pop	{r7, pc}
	...

0800fec4 <mbedtls_pk_info_from_type>:

/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
 800fec4:	b480      	push	{r7}
 800fec6:	b083      	sub	sp, #12
 800fec8:	af00      	add	r7, sp, #0
 800feca:	4603      	mov	r3, r0
 800fecc:	71fb      	strb	r3, [r7, #7]
    switch( pk_type ) {
 800fece:	79fb      	ldrb	r3, [r7, #7]
 800fed0:	2b04      	cmp	r3, #4
 800fed2:	d00a      	beq.n	800feea <mbedtls_pk_info_from_type+0x26>
 800fed4:	2b04      	cmp	r3, #4
 800fed6:	dc0a      	bgt.n	800feee <mbedtls_pk_info_from_type+0x2a>
 800fed8:	2b02      	cmp	r3, #2
 800feda:	d002      	beq.n	800fee2 <mbedtls_pk_info_from_type+0x1e>
 800fedc:	2b03      	cmp	r3, #3
 800fede:	d002      	beq.n	800fee6 <mbedtls_pk_info_from_type+0x22>
 800fee0:	e005      	b.n	800feee <mbedtls_pk_info_from_type+0x2a>
        case MBEDTLS_PK_RSA:
            return( &mbedtls_rsa_info );
#endif
#if defined(MBEDTLS_ECP_C)
        case MBEDTLS_PK_ECKEY:
            return( &mbedtls_eckey_info );
 800fee2:	4b06      	ldr	r3, [pc, #24]	@ (800fefc <mbedtls_pk_info_from_type+0x38>)
 800fee4:	e004      	b.n	800fef0 <mbedtls_pk_info_from_type+0x2c>
        case MBEDTLS_PK_ECKEY_DH:
            return( &mbedtls_eckeydh_info );
 800fee6:	4b06      	ldr	r3, [pc, #24]	@ (800ff00 <mbedtls_pk_info_from_type+0x3c>)
 800fee8:	e002      	b.n	800fef0 <mbedtls_pk_info_from_type+0x2c>
#endif
#if defined(MBEDTLS_ECDSA_C)
        case MBEDTLS_PK_ECDSA:
            return( &mbedtls_ecdsa_info );
 800feea:	4b06      	ldr	r3, [pc, #24]	@ (800ff04 <mbedtls_pk_info_from_type+0x40>)
 800feec:	e000      	b.n	800fef0 <mbedtls_pk_info_from_type+0x2c>
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
 800feee:	2300      	movs	r3, #0
    }
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	370c      	adds	r7, #12
 800fef4:	46bd      	mov	sp, r7
 800fef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefa:	4770      	bx	lr
 800fefc:	0801b224 	.word	0x0801b224
 800ff00:	0801b254 	.word	0x0801b254
 800ff04:	0801b284 	.word	0x0801b284

0800ff08 <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b082      	sub	sp, #8
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
 800ff10:	6039      	str	r1, [r7, #0]
    PK_VALIDATE_RET( ctx != NULL );
    if( info == NULL || ctx->pk_info != NULL )
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d003      	beq.n	800ff20 <mbedtls_pk_setup+0x18>
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d001      	beq.n	800ff24 <mbedtls_pk_setup+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800ff20:	4b0a      	ldr	r3, [pc, #40]	@ (800ff4c <mbedtls_pk_setup+0x44>)
 800ff22:	e00f      	b.n	800ff44 <mbedtls_pk_setup+0x3c>

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff28:	4798      	blx	r3
 800ff2a:	4602      	mov	r2, r0
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	605a      	str	r2, [r3, #4]
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	685b      	ldr	r3, [r3, #4]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d101      	bne.n	800ff3c <mbedtls_pk_setup+0x34>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 800ff38:	4b05      	ldr	r3, [pc, #20]	@ (800ff50 <mbedtls_pk_setup+0x48>)
 800ff3a:	e003      	b.n	800ff44 <mbedtls_pk_setup+0x3c>

    ctx->pk_info = info;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	683a      	ldr	r2, [r7, #0]
 800ff40:	601a      	str	r2, [r3, #0]

    return( 0 );
 800ff42:	2300      	movs	r3, #0
}
 800ff44:	4618      	mov	r0, r3
 800ff46:	3708      	adds	r7, #8
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}
 800ff4c:	ffffc180 	.word	0xffffc180
 800ff50:	ffffc080 	.word	0xffffc080

0800ff54 <mbedtls_pk_can_do>:

/*
 * Tell if a PK can do the operations of the given type
 */
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b082      	sub	sp, #8
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
 800ff5c:	460b      	mov	r3, r1
 800ff5e:	70fb      	strb	r3, [r7, #3]
    /* A context with null pk_info is not set up yet and can't do anything.
     * For backward compatibility, also accept NULL instead of a context
     * pointer. */
    if( ctx == NULL || ctx->pk_info == NULL )
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d003      	beq.n	800ff6e <mbedtls_pk_can_do+0x1a>
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d101      	bne.n	800ff72 <mbedtls_pk_can_do+0x1e>
        return( 0 );
 800ff6e:	2300      	movs	r3, #0
 800ff70:	e006      	b.n	800ff80 <mbedtls_pk_can_do+0x2c>

    return( ctx->pk_info->can_do( type ) );
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	68db      	ldr	r3, [r3, #12]
 800ff78:	78fa      	ldrb	r2, [r7, #3]
 800ff7a:	4610      	mov	r0, r2
 800ff7c:	4798      	blx	r3
 800ff7e:	4603      	mov	r3, r0
}
 800ff80:	4618      	mov	r0, r3
 800ff82:	3708      	adds	r7, #8
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd80      	pop	{r7, pc}

0800ff88 <pk_hashlen_helper>:

/*
 * Helper for mbedtls_pk_sign and mbedtls_pk_verify
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b084      	sub	sp, #16
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	4603      	mov	r3, r0
 800ff90:	6039      	str	r1, [r7, #0]
 800ff92:	71fb      	strb	r3, [r7, #7]
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d001      	beq.n	800ffa0 <pk_hashlen_helper+0x18>
        return( 0 );
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	e012      	b.n	800ffc6 <pk_hashlen_helper+0x3e>

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 800ffa0:	79fb      	ldrb	r3, [r7, #7]
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7ff fcaa 	bl	800f8fc <mbedtls_md_info_from_type>
 800ffa8:	60f8      	str	r0, [r7, #12]
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d102      	bne.n	800ffb6 <pk_hashlen_helper+0x2e>
        return( -1 );
 800ffb0:	f04f 33ff 	mov.w	r3, #4294967295
 800ffb4:	e007      	b.n	800ffc6 <pk_hashlen_helper+0x3e>

    *hash_len = mbedtls_md_get_size( md_info );
 800ffb6:	68f8      	ldr	r0, [r7, #12]
 800ffb8:	f7ff fce6 	bl	800f988 <mbedtls_md_get_size>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	461a      	mov	r2, r3
 800ffc0:	683b      	ldr	r3, [r7, #0]
 800ffc2:	601a      	str	r2, [r3, #0]
    return( 0 );
 800ffc4:	2300      	movs	r3, #0
}
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	3710      	adds	r7, #16
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}
	...

0800ffd0 <mbedtls_pk_sign_restartable>:
             mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_pk_restart_ctx *rs_ctx )
{
 800ffd0:	b590      	push	{r4, r7, lr}
 800ffd2:	b089      	sub	sp, #36	@ 0x24
 800ffd4:	af04      	add	r7, sp, #16
 800ffd6:	60f8      	str	r0, [r7, #12]
 800ffd8:	607a      	str	r2, [r7, #4]
 800ffda:	603b      	str	r3, [r7, #0]
 800ffdc:	460b      	mov	r3, r1
 800ffde:	72fb      	strb	r3, [r7, #11]
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL ||
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d008      	beq.n	800fffa <mbedtls_pk_sign_restartable+0x2a>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
 800ffe8:	463a      	mov	r2, r7
 800ffea:	7afb      	ldrb	r3, [r7, #11]
 800ffec:	4611      	mov	r1, r2
 800ffee:	4618      	mov	r0, r3
 800fff0:	f7ff ffca 	bl	800ff88 <pk_hashlen_helper>
 800fff4:	4603      	mov	r3, r0
    if( ctx->pk_info == NULL ||
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d001      	beq.n	800fffe <mbedtls_pk_sign_restartable+0x2e>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800fffa:	4b10      	ldr	r3, [pc, #64]	@ (801003c <mbedtls_pk_sign_restartable+0x6c>)
 800fffc:	e019      	b.n	8010032 <mbedtls_pk_sign_restartable+0x62>
    }
#else /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */
    (void) rs_ctx;
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    if( ctx->pk_info->sign_func == NULL )
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	695b      	ldr	r3, [r3, #20]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d101      	bne.n	801000c <mbedtls_pk_sign_restartable+0x3c>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 8010008:	4b0d      	ldr	r3, [pc, #52]	@ (8010040 <mbedtls_pk_sign_restartable+0x70>)
 801000a:	e012      	b.n	8010032 <mbedtls_pk_sign_restartable+0x62>

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	695c      	ldr	r4, [r3, #20]
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	6858      	ldr	r0, [r3, #4]
 8010016:	683a      	ldr	r2, [r7, #0]
 8010018:	7af9      	ldrb	r1, [r7, #11]
 801001a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801001c:	9303      	str	r3, [sp, #12]
 801001e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010020:	9302      	str	r3, [sp, #8]
 8010022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010024:	9301      	str	r3, [sp, #4]
 8010026:	6a3b      	ldr	r3, [r7, #32]
 8010028:	9300      	str	r3, [sp, #0]
 801002a:	4613      	mov	r3, r2
 801002c:	687a      	ldr	r2, [r7, #4]
 801002e:	47a0      	blx	r4
 8010030:	4603      	mov	r3, r0
                                     sig, sig_len, f_rng, p_rng ) );
}
 8010032:	4618      	mov	r0, r3
 8010034:	3714      	adds	r7, #20
 8010036:	46bd      	mov	sp, r7
 8010038:	bd90      	pop	{r4, r7, pc}
 801003a:	bf00      	nop
 801003c:	ffffc180 	.word	0xffffc180
 8010040:	ffffc100 	.word	0xffffc100

08010044 <mbedtls_pk_sign>:
 */
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b08a      	sub	sp, #40	@ 0x28
 8010048:	af06      	add	r7, sp, #24
 801004a:	60f8      	str	r0, [r7, #12]
 801004c:	607a      	str	r2, [r7, #4]
 801004e:	603b      	str	r3, [r7, #0]
 8010050:	460b      	mov	r3, r1
 8010052:	72fb      	strb	r3, [r7, #11]
    return( mbedtls_pk_sign_restartable( ctx, md_alg, hash, hash_len,
 8010054:	7af9      	ldrb	r1, [r7, #11]
 8010056:	2300      	movs	r3, #0
 8010058:	9304      	str	r3, [sp, #16]
 801005a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801005c:	9303      	str	r3, [sp, #12]
 801005e:	6a3b      	ldr	r3, [r7, #32]
 8010060:	9302      	str	r3, [sp, #8]
 8010062:	69fb      	ldr	r3, [r7, #28]
 8010064:	9301      	str	r3, [sp, #4]
 8010066:	69bb      	ldr	r3, [r7, #24]
 8010068:	9300      	str	r3, [sp, #0]
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	687a      	ldr	r2, [r7, #4]
 801006e:	68f8      	ldr	r0, [r7, #12]
 8010070:	f7ff ffae 	bl	800ffd0 <mbedtls_pk_sign_restartable>
 8010074:	4603      	mov	r3, r0
                                         sig, sig_len, f_rng, p_rng, NULL ) );
}
 8010076:	4618      	mov	r0, r3
 8010078:	3710      	adds	r7, #16
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}

0801007e <mbedtls_pk_get_type>:

/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
 801007e:	b480      	push	{r7}
 8010080:	b083      	sub	sp, #12
 8010082:	af00      	add	r7, sp, #0
 8010084:	6078      	str	r0, [r7, #4]
    if( ctx == NULL || ctx->pk_info == NULL )
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d003      	beq.n	8010094 <mbedtls_pk_get_type+0x16>
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d101      	bne.n	8010098 <mbedtls_pk_get_type+0x1a>
        return( MBEDTLS_PK_NONE );
 8010094:	2300      	movs	r3, #0
 8010096:	e002      	b.n	801009e <mbedtls_pk_get_type+0x20>

    return( ctx->pk_info->type );
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	781b      	ldrb	r3, [r3, #0]
}
 801009e:	4618      	mov	r0, r3
 80100a0:	370c      	adds	r7, #12
 80100a2:	46bd      	mov	sp, r7
 80100a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a8:	4770      	bx	lr

080100aa <eckey_can_do>:
#if defined(MBEDTLS_ECP_C)
/*
 * Generic EC key
 */
static int eckey_can_do( mbedtls_pk_type_t type )
{
 80100aa:	b480      	push	{r7}
 80100ac:	b083      	sub	sp, #12
 80100ae:	af00      	add	r7, sp, #0
 80100b0:	4603      	mov	r3, r0
 80100b2:	71fb      	strb	r3, [r7, #7]
    return( type == MBEDTLS_PK_ECKEY ||
            type == MBEDTLS_PK_ECKEY_DH ||
 80100b4:	79fb      	ldrb	r3, [r7, #7]
 80100b6:	2b02      	cmp	r3, #2
 80100b8:	d005      	beq.n	80100c6 <eckey_can_do+0x1c>
    return( type == MBEDTLS_PK_ECKEY ||
 80100ba:	79fb      	ldrb	r3, [r7, #7]
 80100bc:	2b03      	cmp	r3, #3
 80100be:	d002      	beq.n	80100c6 <eckey_can_do+0x1c>
            type == MBEDTLS_PK_ECKEY_DH ||
 80100c0:	79fb      	ldrb	r3, [r7, #7]
 80100c2:	2b04      	cmp	r3, #4
 80100c4:	d101      	bne.n	80100ca <eckey_can_do+0x20>
 80100c6:	2301      	movs	r3, #1
 80100c8:	e000      	b.n	80100cc <eckey_can_do+0x22>
 80100ca:	2300      	movs	r3, #0
            type == MBEDTLS_PK_ECDSA );
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	370c      	adds	r7, #12
 80100d0:	46bd      	mov	sp, r7
 80100d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d6:	4770      	bx	lr

080100d8 <eckey_get_bitlen>:

static size_t eckey_get_bitlen( const void *ctx )
{
 80100d8:	b480      	push	{r7}
 80100da:	b083      	sub	sp, #12
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
    return( ((mbedtls_ecp_keypair *) ctx)->grp.pbits );
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	370c      	adds	r7, #12
 80100e8:	46bd      	mov	sp, r7
 80100ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ee:	4770      	bx	lr

080100f0 <eckey_verify_wrap>:
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );

static int eckey_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                       const unsigned char *hash, size_t hash_len,
                       const unsigned char *sig, size_t sig_len )
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b0b2      	sub	sp, #200	@ 0xc8
 80100f4:	af02      	add	r7, sp, #8
 80100f6:	60f8      	str	r0, [r7, #12]
 80100f8:	607a      	str	r2, [r7, #4]
 80100fa:	603b      	str	r3, [r7, #0]
 80100fc:	460b      	mov	r3, r1
 80100fe:	72fb      	strb	r3, [r7, #11]
    int ret;
    mbedtls_ecdsa_context ecdsa;

    mbedtls_ecdsa_init( &ecdsa );
 8010100:	f107 0310 	add.w	r3, r7, #16
 8010104:	4618      	mov	r0, r3
 8010106:	f7fa fc60 	bl	800a9ca <mbedtls_ecdsa_init>

    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )
 801010a:	f107 0310 	add.w	r3, r7, #16
 801010e:	68f9      	ldr	r1, [r7, #12]
 8010110:	4618      	mov	r0, r3
 8010112:	f7fa fc29 	bl	800a968 <mbedtls_ecdsa_from_keypair>
 8010116:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
 801011a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801011e:	2b00      	cmp	r3, #0
 8010120:	d10e      	bne.n	8010140 <eckey_verify_wrap+0x50>
        ret = ecdsa_verify_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len );
 8010122:	7af9      	ldrb	r1, [r7, #11]
 8010124:	f107 0010 	add.w	r0, r7, #16
 8010128:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801012c:	9301      	str	r3, [sp, #4]
 801012e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010132:	9300      	str	r3, [sp, #0]
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	687a      	ldr	r2, [r7, #4]
 8010138:	f000 f8b4 	bl	80102a4 <ecdsa_verify_wrap>
 801013c:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc

    mbedtls_ecdsa_free( &ecdsa );
 8010140:	f107 0310 	add.w	r3, r7, #16
 8010144:	4618      	mov	r0, r3
 8010146:	f7fa fc4b 	bl	800a9e0 <mbedtls_ecdsa_free>

    return( ret );
 801014a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
}
 801014e:	4618      	mov	r0, r3
 8010150:	37c0      	adds	r7, #192	@ 0xc0
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}

08010156 <eckey_sign_wrap>:

static int eckey_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8010156:	b580      	push	{r7, lr}
 8010158:	b0b4      	sub	sp, #208	@ 0xd0
 801015a:	af04      	add	r7, sp, #16
 801015c:	60f8      	str	r0, [r7, #12]
 801015e:	607a      	str	r2, [r7, #4]
 8010160:	603b      	str	r3, [r7, #0]
 8010162:	460b      	mov	r3, r1
 8010164:	72fb      	strb	r3, [r7, #11]
    int ret;
    mbedtls_ecdsa_context ecdsa;

    mbedtls_ecdsa_init( &ecdsa );
 8010166:	f107 0310 	add.w	r3, r7, #16
 801016a:	4618      	mov	r0, r3
 801016c:	f7fa fc2d 	bl	800a9ca <mbedtls_ecdsa_init>

    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )
 8010170:	f107 0310 	add.w	r3, r7, #16
 8010174:	68f9      	ldr	r1, [r7, #12]
 8010176:	4618      	mov	r0, r3
 8010178:	f7fa fbf6 	bl	800a968 <mbedtls_ecdsa_from_keypair>
 801017c:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
 8010180:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8010184:	2b00      	cmp	r3, #0
 8010186:	d114      	bne.n	80101b2 <eckey_sign_wrap+0x5c>
        ret = ecdsa_sign_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len,
 8010188:	7af9      	ldrb	r1, [r7, #11]
 801018a:	f107 0010 	add.w	r0, r7, #16
 801018e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010192:	9303      	str	r3, [sp, #12]
 8010194:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010198:	9302      	str	r3, [sp, #8]
 801019a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801019e:	9301      	str	r3, [sp, #4]
 80101a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80101a4:	9300      	str	r3, [sp, #0]
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	687a      	ldr	r2, [r7, #4]
 80101aa:	f000 f899 	bl	80102e0 <ecdsa_sign_wrap>
 80101ae:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
                               f_rng, p_rng );

    mbedtls_ecdsa_free( &ecdsa );
 80101b2:	f107 0310 	add.w	r3, r7, #16
 80101b6:	4618      	mov	r0, r3
 80101b8:	f7fa fc12 	bl	800a9e0 <mbedtls_ecdsa_free>

    return( ret );
 80101bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
}
 80101c0:	4618      	mov	r0, r3
 80101c2:	37c0      	adds	r7, #192	@ 0xc0
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}

080101c8 <eckey_check_pair>:
}
#endif /* MBEDTLS_ECP_RESTARTABLE */
#endif /* MBEDTLS_ECDSA_C */

static int eckey_check_pair( const void *pub, const void *prv )
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b082      	sub	sp, #8
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
 80101d0:	6039      	str	r1, [r7, #0]
    return( mbedtls_ecp_check_pub_priv( (const mbedtls_ecp_keypair *) pub,
 80101d2:	6839      	ldr	r1, [r7, #0]
 80101d4:	6878      	ldr	r0, [r7, #4]
 80101d6:	f7fd fc6d 	bl	800dab4 <mbedtls_ecp_check_pub_priv>
 80101da:	4603      	mov	r3, r0
                                (const mbedtls_ecp_keypair *) prv ) );
}
 80101dc:	4618      	mov	r0, r3
 80101de:	3708      	adds	r7, #8
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bd80      	pop	{r7, pc}

080101e4 <eckey_alloc_wrap>:

static void *eckey_alloc_wrap( void )
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b082      	sub	sp, #8
 80101e8:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
 80101ea:	21ac      	movs	r1, #172	@ 0xac
 80101ec:	2001      	movs	r0, #1
 80101ee:	f006 f9a9 	bl	8016544 <calloc>
 80101f2:	4603      	mov	r3, r0
 80101f4:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d002      	beq.n	8010202 <eckey_alloc_wrap+0x1e>
        mbedtls_ecp_keypair_init( ctx );
 80101fc:	6878      	ldr	r0, [r7, #4]
 80101fe:	f7fa fc6a 	bl	800aad6 <mbedtls_ecp_keypair_init>

    return( ctx );
 8010202:	687b      	ldr	r3, [r7, #4]
}
 8010204:	4618      	mov	r0, r3
 8010206:	3708      	adds	r7, #8
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}

0801020c <eckey_free_wrap>:

static void eckey_free_wrap( void *ctx )
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b082      	sub	sp, #8
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
    mbedtls_ecp_keypair_free( (mbedtls_ecp_keypair *) ctx );
 8010214:	6878      	ldr	r0, [r7, #4]
 8010216:	f7fa fcda 	bl	800abce <mbedtls_ecp_keypair_free>
    mbedtls_free( ctx );
 801021a:	6878      	ldr	r0, [r7, #4]
 801021c:	f006 f9ae 	bl	801657c <free>
}
 8010220:	bf00      	nop
 8010222:	3708      	adds	r7, #8
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}

08010228 <eckey_debug>:

static void eckey_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
 8010228:	b480      	push	{r7}
 801022a:	b083      	sub	sp, #12
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
 8010230:	6039      	str	r1, [r7, #0]
    items->type = MBEDTLS_PK_DEBUG_ECP;
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	2202      	movs	r2, #2
 8010236:	701a      	strb	r2, [r3, #0]
    items->name = "eckey.Q";
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	4a06      	ldr	r2, [pc, #24]	@ (8010254 <eckey_debug+0x2c>)
 801023c:	605a      	str	r2, [r3, #4]
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	609a      	str	r2, [r3, #8]
}
 8010248:	bf00      	nop
 801024a:	370c      	adds	r7, #12
 801024c:	46bd      	mov	sp, r7
 801024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010252:	4770      	bx	lr
 8010254:	080189e4 	.word	0x080189e4

08010258 <eckeydh_can_do>:

/*
 * EC key restricted to ECDH
 */
static int eckeydh_can_do( mbedtls_pk_type_t type )
{
 8010258:	b480      	push	{r7}
 801025a:	b083      	sub	sp, #12
 801025c:	af00      	add	r7, sp, #0
 801025e:	4603      	mov	r3, r0
 8010260:	71fb      	strb	r3, [r7, #7]
    return( type == MBEDTLS_PK_ECKEY ||
 8010262:	79fb      	ldrb	r3, [r7, #7]
 8010264:	2b02      	cmp	r3, #2
 8010266:	d002      	beq.n	801026e <eckeydh_can_do+0x16>
 8010268:	79fb      	ldrb	r3, [r7, #7]
 801026a:	2b03      	cmp	r3, #3
 801026c:	d101      	bne.n	8010272 <eckeydh_can_do+0x1a>
 801026e:	2301      	movs	r3, #1
 8010270:	e000      	b.n	8010274 <eckeydh_can_do+0x1c>
 8010272:	2300      	movs	r3, #0
            type == MBEDTLS_PK_ECKEY_DH );
}
 8010274:	4618      	mov	r0, r3
 8010276:	370c      	adds	r7, #12
 8010278:	46bd      	mov	sp, r7
 801027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027e:	4770      	bx	lr

08010280 <ecdsa_can_do>:
};
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_ECDSA_C)
static int ecdsa_can_do( mbedtls_pk_type_t type )
{
 8010280:	b480      	push	{r7}
 8010282:	b083      	sub	sp, #12
 8010284:	af00      	add	r7, sp, #0
 8010286:	4603      	mov	r3, r0
 8010288:	71fb      	strb	r3, [r7, #7]
    return( type == MBEDTLS_PK_ECDSA );
 801028a:	79fb      	ldrb	r3, [r7, #7]
 801028c:	2b04      	cmp	r3, #4
 801028e:	bf0c      	ite	eq
 8010290:	2301      	moveq	r3, #1
 8010292:	2300      	movne	r3, #0
 8010294:	b2db      	uxtb	r3, r3
}
 8010296:	4618      	mov	r0, r3
 8010298:	370c      	adds	r7, #12
 801029a:	46bd      	mov	sp, r7
 801029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a0:	4770      	bx	lr
	...

080102a4 <ecdsa_verify_wrap>:

static int ecdsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                       const unsigned char *hash, size_t hash_len,
                       const unsigned char *sig, size_t sig_len )
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b088      	sub	sp, #32
 80102a8:	af02      	add	r7, sp, #8
 80102aa:	60f8      	str	r0, [r7, #12]
 80102ac:	607a      	str	r2, [r7, #4]
 80102ae:	603b      	str	r3, [r7, #0]
 80102b0:	460b      	mov	r3, r1
 80102b2:	72fb      	strb	r3, [r7, #11]
    int ret;
    ((void) md_alg);

    ret = mbedtls_ecdsa_read_signature( (mbedtls_ecdsa_context *) ctx,
 80102b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102b6:	9300      	str	r3, [sp, #0]
 80102b8:	6a3b      	ldr	r3, [r7, #32]
 80102ba:	683a      	ldr	r2, [r7, #0]
 80102bc:	6879      	ldr	r1, [r7, #4]
 80102be:	68f8      	ldr	r0, [r7, #12]
 80102c0:	f7fa fabc 	bl	800a83c <mbedtls_ecdsa_read_signature>
 80102c4:	6178      	str	r0, [r7, #20]
                                hash, hash_len, sig, sig_len );

    if( ret == MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH )
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	f513 4f98 	cmn.w	r3, #19456	@ 0x4c00
 80102cc:	d101      	bne.n	80102d2 <ecdsa_verify_wrap+0x2e>
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 80102ce:	4b03      	ldr	r3, [pc, #12]	@ (80102dc <ecdsa_verify_wrap+0x38>)
 80102d0:	e000      	b.n	80102d4 <ecdsa_verify_wrap+0x30>

    return( ret );
 80102d2:	697b      	ldr	r3, [r7, #20]
}
 80102d4:	4618      	mov	r0, r3
 80102d6:	3718      	adds	r7, #24
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}
 80102dc:	ffffc700 	.word	0xffffc700

080102e0 <ecdsa_sign_wrap>:

static int ecdsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b088      	sub	sp, #32
 80102e4:	af04      	add	r7, sp, #16
 80102e6:	60f8      	str	r0, [r7, #12]
 80102e8:	607a      	str	r2, [r7, #4]
 80102ea:	603b      	str	r3, [r7, #0]
 80102ec:	460b      	mov	r3, r1
 80102ee:	72fb      	strb	r3, [r7, #11]
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
 80102f0:	7af9      	ldrb	r1, [r7, #11]
 80102f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102f4:	9303      	str	r3, [sp, #12]
 80102f6:	6a3b      	ldr	r3, [r7, #32]
 80102f8:	9302      	str	r3, [sp, #8]
 80102fa:	69fb      	ldr	r3, [r7, #28]
 80102fc:	9301      	str	r3, [sp, #4]
 80102fe:	69bb      	ldr	r3, [r7, #24]
 8010300:	9300      	str	r3, [sp, #0]
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	687a      	ldr	r2, [r7, #4]
 8010306:	68f8      	ldr	r0, [r7, #12]
 8010308:	f7fa fa7b 	bl	800a802 <mbedtls_ecdsa_write_signature>
 801030c:	4603      	mov	r3, r0
                md_alg, hash, hash_len, sig, sig_len, f_rng, p_rng ) );
}
 801030e:	4618      	mov	r0, r3
 8010310:	3710      	adds	r7, #16
 8010312:	46bd      	mov	sp, r7
 8010314:	bd80      	pop	{r7, pc}

08010316 <ecdsa_alloc_wrap>:

}
#endif /* MBEDTLS_ECP_RESTARTABLE */

static void *ecdsa_alloc_wrap( void )
{
 8010316:	b580      	push	{r7, lr}
 8010318:	b082      	sub	sp, #8
 801031a:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecdsa_context ) );
 801031c:	21ac      	movs	r1, #172	@ 0xac
 801031e:	2001      	movs	r0, #1
 8010320:	f006 f910 	bl	8016544 <calloc>
 8010324:	4603      	mov	r3, r0
 8010326:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d002      	beq.n	8010334 <ecdsa_alloc_wrap+0x1e>
        mbedtls_ecdsa_init( (mbedtls_ecdsa_context *) ctx );
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f7fa fb4b 	bl	800a9ca <mbedtls_ecdsa_init>

    return( ctx );
 8010334:	687b      	ldr	r3, [r7, #4]
}
 8010336:	4618      	mov	r0, r3
 8010338:	3708      	adds	r7, #8
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}

0801033e <ecdsa_free_wrap>:

static void ecdsa_free_wrap( void *ctx )
{
 801033e:	b580      	push	{r7, lr}
 8010340:	b082      	sub	sp, #8
 8010342:	af00      	add	r7, sp, #0
 8010344:	6078      	str	r0, [r7, #4]
    mbedtls_ecdsa_free( (mbedtls_ecdsa_context *) ctx );
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	f7fa fb4a 	bl	800a9e0 <mbedtls_ecdsa_free>
    mbedtls_free( ctx );
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	f006 f915 	bl	801657c <free>
}
 8010352:	bf00      	nop
 8010354:	3708      	adds	r7, #8
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}

0801035a <mbedtls_pk_ec>:
{
 801035a:	b480      	push	{r7}
 801035c:	b083      	sub	sp, #12
 801035e:	af00      	add	r7, sp, #0
 8010360:	463b      	mov	r3, r7
 8010362:	e883 0003 	stmia.w	r3, {r0, r1}
    return( (mbedtls_ecp_keypair *) (pk).pk_ctx );
 8010366:	687b      	ldr	r3, [r7, #4]
}
 8010368:	4618      	mov	r0, r3
 801036a:	370c      	adds	r7, #12
 801036c:	46bd      	mov	sp, r7
 801036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010372:	4770      	bx	lr

08010374 <pk_write_ec_pubkey>:
/*
 * EC public key is an EC point
 */
static int pk_write_ec_pubkey( unsigned char **p, unsigned char *start,
                               mbedtls_ecp_keypair *ec )
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b0a2      	sub	sp, #136	@ 0x88
 8010378:	af02      	add	r7, sp, #8
 801037a:	60f8      	str	r0, [r7, #12]
 801037c:	60b9      	str	r1, [r7, #8]
 801037e:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len = 0;
 8010380:	2300      	movs	r3, #0
 8010382:	67bb      	str	r3, [r7, #120]	@ 0x78
    unsigned char buf[MBEDTLS_ECP_MAX_PT_LEN];

    if( ( ret = mbedtls_ecp_point_write_binary( &ec->grp, &ec->Q,
 8010384:	6878      	ldr	r0, [r7, #4]
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 801038c:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8010390:	2361      	movs	r3, #97	@ 0x61
 8010392:	9301      	str	r3, [sp, #4]
 8010394:	f107 0314 	add.w	r3, r7, #20
 8010398:	9300      	str	r3, [sp, #0]
 801039a:	4613      	mov	r3, r2
 801039c:	2200      	movs	r2, #0
 801039e:	f7fa fca9 	bl	800acf4 <mbedtls_ecp_point_write_binary>
 80103a2:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80103a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d001      	beq.n	80103ae <pk_write_ec_pubkey+0x3a>
                                        MBEDTLS_ECP_PF_UNCOMPRESSED,
                                        &len, buf, sizeof( buf ) ) ) != 0 )
    {
        return( ret );
 80103aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80103ac:	e01f      	b.n	80103ee <pk_write_ec_pubkey+0x7a>
    }

    if( *p < start || (size_t)( *p - start ) < len )
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	68ba      	ldr	r2, [r7, #8]
 80103b4:	429a      	cmp	r2, r3
 80103b6:	d807      	bhi.n	80103c8 <pk_write_ec_pubkey+0x54>
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	681a      	ldr	r2, [r3, #0]
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	1ad3      	subs	r3, r2, r3
 80103c0:	461a      	mov	r2, r3
 80103c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80103c4:	429a      	cmp	r2, r3
 80103c6:	d202      	bcs.n	80103ce <pk_write_ec_pubkey+0x5a>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 80103c8:	f06f 036b 	mvn.w	r3, #107	@ 0x6b
 80103cc:	e00f      	b.n	80103ee <pk_write_ec_pubkey+0x7a>

    *p -= len;
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	681a      	ldr	r2, [r3, #0]
 80103d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80103d4:	425b      	negs	r3, r3
 80103d6:	441a      	add	r2, r3
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	601a      	str	r2, [r3, #0]
    memcpy( *p, buf, len );
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80103e2:	f107 0114 	add.w	r1, r7, #20
 80103e6:	4618      	mov	r0, r3
 80103e8:	f006 fcc3 	bl	8016d72 <memcpy>

    return( (int) len );
 80103ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3780      	adds	r7, #128	@ 0x80
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}

080103f6 <pk_write_ec_param>:
 *   namedCurve         OBJECT IDENTIFIER
 * }
 */
static int pk_write_ec_param( unsigned char **p, unsigned char *start,
                              mbedtls_ecp_keypair *ec )
{
 80103f6:	b580      	push	{r7, lr}
 80103f8:	b088      	sub	sp, #32
 80103fa:	af00      	add	r7, sp, #0
 80103fc:	60f8      	str	r0, [r7, #12]
 80103fe:	60b9      	str	r1, [r7, #8]
 8010400:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len = 0;
 8010402:	2300      	movs	r3, #0
 8010404:	61fb      	str	r3, [r7, #28]
    const char *oid;
    size_t oid_len;

    if( ( ret = mbedtls_oid_get_oid_by_ec_grp( ec->grp.id, &oid, &oid_len ) ) != 0 )
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	781b      	ldrb	r3, [r3, #0]
 801040a:	f107 0210 	add.w	r2, r7, #16
 801040e:	f107 0114 	add.w	r1, r7, #20
 8010412:	4618      	mov	r0, r3
 8010414:	f7ff fc54 	bl	800fcc0 <mbedtls_oid_get_oid_by_ec_grp>
 8010418:	61b8      	str	r0, [r7, #24]
 801041a:	69bb      	ldr	r3, [r7, #24]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d001      	beq.n	8010424 <pk_write_ec_param+0x2e>
        return( ret );
 8010420:	69bb      	ldr	r3, [r7, #24]
 8010422:	e010      	b.n	8010446 <pk_write_ec_param+0x50>

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_oid( p, start, oid, oid_len ) );
 8010424:	697a      	ldr	r2, [r7, #20]
 8010426:	693b      	ldr	r3, [r7, #16]
 8010428:	68b9      	ldr	r1, [r7, #8]
 801042a:	68f8      	ldr	r0, [r7, #12]
 801042c:	f7f5 f9dd 	bl	80057ea <mbedtls_asn1_write_oid>
 8010430:	61b8      	str	r0, [r7, #24]
 8010432:	69bb      	ldr	r3, [r7, #24]
 8010434:	2b00      	cmp	r3, #0
 8010436:	da01      	bge.n	801043c <pk_write_ec_param+0x46>
 8010438:	69bb      	ldr	r3, [r7, #24]
 801043a:	e004      	b.n	8010446 <pk_write_ec_param+0x50>
 801043c:	69bb      	ldr	r3, [r7, #24]
 801043e:	69fa      	ldr	r2, [r7, #28]
 8010440:	4413      	add	r3, r2
 8010442:	61fb      	str	r3, [r7, #28]

    return( (int) len );
 8010444:	69fb      	ldr	r3, [r7, #28]
}
 8010446:	4618      	mov	r0, r3
 8010448:	3720      	adds	r7, #32
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}
	...

08010450 <mbedtls_pk_write_pubkey>:
#endif /* MBEDTLS_ECP_C */

int mbedtls_pk_write_pubkey( unsigned char **p, unsigned char *start,
                             const mbedtls_pk_context *key )
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b086      	sub	sp, #24
 8010454:	af00      	add	r7, sp, #0
 8010456:	60f8      	str	r0, [r7, #12]
 8010458:	60b9      	str	r1, [r7, #8]
 801045a:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len = 0;
 801045c:	2300      	movs	r3, #0
 801045e:	617b      	str	r3, [r7, #20]
    if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_RSA )
        MBEDTLS_ASN1_CHK_ADD( len, pk_write_rsa_pubkey( p, start, mbedtls_pk_rsa( *key ) ) );
    else
#endif
#if defined(MBEDTLS_ECP_C)
    if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_ECKEY )
 8010460:	6878      	ldr	r0, [r7, #4]
 8010462:	f7ff fe0c 	bl	801007e <mbedtls_pk_get_type>
 8010466:	4603      	mov	r3, r0
 8010468:	2b02      	cmp	r3, #2
 801046a:	d116      	bne.n	801049a <mbedtls_pk_write_pubkey+0x4a>
        MBEDTLS_ASN1_CHK_ADD( len, pk_write_ec_pubkey( p, start, mbedtls_pk_ec( *key ) ) );
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010472:	f7ff ff72 	bl	801035a <mbedtls_pk_ec>
 8010476:	4603      	mov	r3, r0
 8010478:	461a      	mov	r2, r3
 801047a:	68b9      	ldr	r1, [r7, #8]
 801047c:	68f8      	ldr	r0, [r7, #12]
 801047e:	f7ff ff79 	bl	8010374 <pk_write_ec_pubkey>
 8010482:	6138      	str	r0, [r7, #16]
 8010484:	693b      	ldr	r3, [r7, #16]
 8010486:	2b00      	cmp	r3, #0
 8010488:	da01      	bge.n	801048e <mbedtls_pk_write_pubkey+0x3e>
 801048a:	693b      	ldr	r3, [r7, #16]
 801048c:	e006      	b.n	801049c <mbedtls_pk_write_pubkey+0x4c>
 801048e:	693b      	ldr	r3, [r7, #16]
 8010490:	697a      	ldr	r2, [r7, #20]
 8010492:	4413      	add	r3, r2
 8010494:	617b      	str	r3, [r7, #20]
    else
#endif
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );

    return( (int) len );
 8010496:	697b      	ldr	r3, [r7, #20]
 8010498:	e000      	b.n	801049c <mbedtls_pk_write_pubkey+0x4c>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 801049a:	4b02      	ldr	r3, [pc, #8]	@ (80104a4 <mbedtls_pk_write_pubkey+0x54>)
}
 801049c:	4618      	mov	r0, r3
 801049e:	3718      	adds	r7, #24
 80104a0:	46bd      	mov	sp, r7
 80104a2:	bd80      	pop	{r7, pc}
 80104a4:	ffffc680 	.word	0xffffc680

080104a8 <mbedtls_pk_write_pubkey_der>:

int mbedtls_pk_write_pubkey_der( mbedtls_pk_context *key, unsigned char *buf, size_t size )
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b08c      	sub	sp, #48	@ 0x30
 80104ac:	af02      	add	r7, sp, #8
 80104ae:	60f8      	str	r0, [r7, #12]
 80104b0:	60b9      	str	r1, [r7, #8]
 80104b2:	607a      	str	r2, [r7, #4]
    int ret;
    unsigned char *c;
    size_t len = 0, par_len = 0, oid_len;
 80104b4:	2300      	movs	r3, #0
 80104b6:	623b      	str	r3, [r7, #32]
 80104b8:	2300      	movs	r3, #0
 80104ba:	627b      	str	r3, [r7, #36]	@ 0x24
    const char *oid;

    PK_VALIDATE_RET( key != NULL );
    if( size == 0 )
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d102      	bne.n	80104c8 <mbedtls_pk_write_pubkey_der+0x20>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 80104c2:	f06f 036b 	mvn.w	r3, #107	@ 0x6b
 80104c6:	e0ac      	b.n	8010622 <mbedtls_pk_write_pubkey_der+0x17a>
    PK_VALIDATE_RET( buf != NULL );

    c = buf + size;
 80104c8:	68ba      	ldr	r2, [r7, #8]
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	4413      	add	r3, r2
 80104ce:	61bb      	str	r3, [r7, #24]

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_pk_write_pubkey( &c, buf, key ) );
 80104d0:	f107 0318 	add.w	r3, r7, #24
 80104d4:	68fa      	ldr	r2, [r7, #12]
 80104d6:	68b9      	ldr	r1, [r7, #8]
 80104d8:	4618      	mov	r0, r3
 80104da:	f7ff ffb9 	bl	8010450 <mbedtls_pk_write_pubkey>
 80104de:	61f8      	str	r0, [r7, #28]
 80104e0:	69fb      	ldr	r3, [r7, #28]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	da01      	bge.n	80104ea <mbedtls_pk_write_pubkey_der+0x42>
 80104e6:	69fb      	ldr	r3, [r7, #28]
 80104e8:	e09b      	b.n	8010622 <mbedtls_pk_write_pubkey_der+0x17a>
 80104ea:	69fb      	ldr	r3, [r7, #28]
 80104ec:	6a3a      	ldr	r2, [r7, #32]
 80104ee:	4413      	add	r3, r2
 80104f0:	623b      	str	r3, [r7, #32]

    if( c - buf < 1 )
 80104f2:	69ba      	ldr	r2, [r7, #24]
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	1ad3      	subs	r3, r2, r3
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	dc02      	bgt.n	8010502 <mbedtls_pk_write_pubkey_der+0x5a>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 80104fc:	f06f 036b 	mvn.w	r3, #107	@ 0x6b
 8010500:	e08f      	b.n	8010622 <mbedtls_pk_write_pubkey_der+0x17a>
    /*
     *  SubjectPublicKeyInfo  ::=  SEQUENCE  {
     *       algorithm            AlgorithmIdentifier,
     *       subjectPublicKey     BIT STRING }
     */
    *--c = 0;
 8010502:	69bb      	ldr	r3, [r7, #24]
 8010504:	3b01      	subs	r3, #1
 8010506:	61bb      	str	r3, [r7, #24]
 8010508:	69bb      	ldr	r3, [r7, #24]
 801050a:	2200      	movs	r2, #0
 801050c:	701a      	strb	r2, [r3, #0]
    len += 1;
 801050e:	6a3b      	ldr	r3, [r7, #32]
 8010510:	3301      	adds	r3, #1
 8010512:	623b      	str	r3, [r7, #32]

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
 8010514:	f107 0318 	add.w	r3, r7, #24
 8010518:	6a3a      	ldr	r2, [r7, #32]
 801051a:	68b9      	ldr	r1, [r7, #8]
 801051c:	4618      	mov	r0, r3
 801051e:	f7f4 ff92 	bl	8005446 <mbedtls_asn1_write_len>
 8010522:	61f8      	str	r0, [r7, #28]
 8010524:	69fb      	ldr	r3, [r7, #28]
 8010526:	2b00      	cmp	r3, #0
 8010528:	da01      	bge.n	801052e <mbedtls_pk_write_pubkey_der+0x86>
 801052a:	69fb      	ldr	r3, [r7, #28]
 801052c:	e079      	b.n	8010622 <mbedtls_pk_write_pubkey_der+0x17a>
 801052e:	69fb      	ldr	r3, [r7, #28]
 8010530:	6a3a      	ldr	r2, [r7, #32]
 8010532:	4413      	add	r3, r2
 8010534:	623b      	str	r3, [r7, #32]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_BIT_STRING ) );
 8010536:	f107 0318 	add.w	r3, r7, #24
 801053a:	2203      	movs	r2, #3
 801053c:	68b9      	ldr	r1, [r7, #8]
 801053e:	4618      	mov	r0, r3
 8010540:	f7f5 f869 	bl	8005616 <mbedtls_asn1_write_tag>
 8010544:	61f8      	str	r0, [r7, #28]
 8010546:	69fb      	ldr	r3, [r7, #28]
 8010548:	2b00      	cmp	r3, #0
 801054a:	da01      	bge.n	8010550 <mbedtls_pk_write_pubkey_der+0xa8>
 801054c:	69fb      	ldr	r3, [r7, #28]
 801054e:	e068      	b.n	8010622 <mbedtls_pk_write_pubkey_der+0x17a>
 8010550:	69fb      	ldr	r3, [r7, #28]
 8010552:	6a3a      	ldr	r2, [r7, #32]
 8010554:	4413      	add	r3, r2
 8010556:	623b      	str	r3, [r7, #32]

    if( ( ret = mbedtls_oid_get_oid_by_pk_alg( mbedtls_pk_get_type( key ),
 8010558:	68f8      	ldr	r0, [r7, #12]
 801055a:	f7ff fd90 	bl	801007e <mbedtls_pk_get_type>
 801055e:	4603      	mov	r3, r0
 8010560:	4618      	mov	r0, r3
 8010562:	f107 0214 	add.w	r2, r7, #20
 8010566:	f107 0310 	add.w	r3, r7, #16
 801056a:	4619      	mov	r1, r3
 801056c:	f7ff fb7e 	bl	800fc6c <mbedtls_oid_get_oid_by_pk_alg>
 8010570:	61f8      	str	r0, [r7, #28]
 8010572:	69fb      	ldr	r3, [r7, #28]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d001      	beq.n	801057c <mbedtls_pk_write_pubkey_der+0xd4>
                                       &oid, &oid_len ) ) != 0 )
    {
        return( ret );
 8010578:	69fb      	ldr	r3, [r7, #28]
 801057a:	e052      	b.n	8010622 <mbedtls_pk_write_pubkey_der+0x17a>
    }

#if defined(MBEDTLS_ECP_C)
    if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_ECKEY )
 801057c:	68f8      	ldr	r0, [r7, #12]
 801057e:	f7ff fd7e 	bl	801007e <mbedtls_pk_get_type>
 8010582:	4603      	mov	r3, r0
 8010584:	2b02      	cmp	r3, #2
 8010586:	d115      	bne.n	80105b4 <mbedtls_pk_write_pubkey_der+0x10c>
    {
        MBEDTLS_ASN1_CHK_ADD( par_len, pk_write_ec_param( &c, buf, mbedtls_pk_ec( *key ) ) );
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801058e:	f7ff fee4 	bl	801035a <mbedtls_pk_ec>
 8010592:	4602      	mov	r2, r0
 8010594:	f107 0318 	add.w	r3, r7, #24
 8010598:	68b9      	ldr	r1, [r7, #8]
 801059a:	4618      	mov	r0, r3
 801059c:	f7ff ff2b 	bl	80103f6 <pk_write_ec_param>
 80105a0:	61f8      	str	r0, [r7, #28]
 80105a2:	69fb      	ldr	r3, [r7, #28]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	da01      	bge.n	80105ac <mbedtls_pk_write_pubkey_der+0x104>
 80105a8:	69fb      	ldr	r3, [r7, #28]
 80105aa:	e03a      	b.n	8010622 <mbedtls_pk_write_pubkey_der+0x17a>
 80105ac:	69fb      	ldr	r3, [r7, #28]
 80105ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80105b0:	4413      	add	r3, r2
 80105b2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_algorithm_identifier( &c, buf, oid, oid_len,
 80105b4:	693a      	ldr	r2, [r7, #16]
 80105b6:	6979      	ldr	r1, [r7, #20]
 80105b8:	f107 0018 	add.w	r0, r7, #24
 80105bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105be:	9300      	str	r3, [sp, #0]
 80105c0:	460b      	mov	r3, r1
 80105c2:	68b9      	ldr	r1, [r7, #8]
 80105c4:	f7f5 f94d 	bl	8005862 <mbedtls_asn1_write_algorithm_identifier>
 80105c8:	61f8      	str	r0, [r7, #28]
 80105ca:	69fb      	ldr	r3, [r7, #28]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	da01      	bge.n	80105d4 <mbedtls_pk_write_pubkey_der+0x12c>
 80105d0:	69fb      	ldr	r3, [r7, #28]
 80105d2:	e026      	b.n	8010622 <mbedtls_pk_write_pubkey_der+0x17a>
 80105d4:	69fb      	ldr	r3, [r7, #28]
 80105d6:	6a3a      	ldr	r2, [r7, #32]
 80105d8:	4413      	add	r3, r2
 80105da:	623b      	str	r3, [r7, #32]
                                                        par_len ) );

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
 80105dc:	f107 0318 	add.w	r3, r7, #24
 80105e0:	6a3a      	ldr	r2, [r7, #32]
 80105e2:	68b9      	ldr	r1, [r7, #8]
 80105e4:	4618      	mov	r0, r3
 80105e6:	f7f4 ff2e 	bl	8005446 <mbedtls_asn1_write_len>
 80105ea:	61f8      	str	r0, [r7, #28]
 80105ec:	69fb      	ldr	r3, [r7, #28]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	da01      	bge.n	80105f6 <mbedtls_pk_write_pubkey_der+0x14e>
 80105f2:	69fb      	ldr	r3, [r7, #28]
 80105f4:	e015      	b.n	8010622 <mbedtls_pk_write_pubkey_der+0x17a>
 80105f6:	69fb      	ldr	r3, [r7, #28]
 80105f8:	6a3a      	ldr	r2, [r7, #32]
 80105fa:	4413      	add	r3, r2
 80105fc:	623b      	str	r3, [r7, #32]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_CONSTRUCTED |
 80105fe:	f107 0318 	add.w	r3, r7, #24
 8010602:	2230      	movs	r2, #48	@ 0x30
 8010604:	68b9      	ldr	r1, [r7, #8]
 8010606:	4618      	mov	r0, r3
 8010608:	f7f5 f805 	bl	8005616 <mbedtls_asn1_write_tag>
 801060c:	61f8      	str	r0, [r7, #28]
 801060e:	69fb      	ldr	r3, [r7, #28]
 8010610:	2b00      	cmp	r3, #0
 8010612:	da01      	bge.n	8010618 <mbedtls_pk_write_pubkey_der+0x170>
 8010614:	69fb      	ldr	r3, [r7, #28]
 8010616:	e004      	b.n	8010622 <mbedtls_pk_write_pubkey_der+0x17a>
 8010618:	69fb      	ldr	r3, [r7, #28]
 801061a:	6a3a      	ldr	r2, [r7, #32]
 801061c:	4413      	add	r3, r2
 801061e:	623b      	str	r3, [r7, #32]
                                                MBEDTLS_ASN1_SEQUENCE ) );

    return( (int) len );
 8010620:	6a3b      	ldr	r3, [r7, #32]
}
 8010622:	4618      	mov	r0, r3
 8010624:	3728      	adds	r7, #40	@ 0x28
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}
	...

0801062c <mbedtls_pk_write_key_der>:

int mbedtls_pk_write_key_der( mbedtls_pk_context *key, unsigned char *buf, size_t size )
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b08a      	sub	sp, #40	@ 0x28
 8010630:	af00      	add	r7, sp, #0
 8010632:	60f8      	str	r0, [r7, #12]
 8010634:	60b9      	str	r1, [r7, #8]
 8010636:	607a      	str	r2, [r7, #4]
    int ret;
    unsigned char *c;
    size_t len = 0;
 8010638:	2300      	movs	r3, #0
 801063a:	627b      	str	r3, [r7, #36]	@ 0x24

    PK_VALIDATE_RET( key != NULL );
    if( size == 0 )
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d102      	bne.n	8010648 <mbedtls_pk_write_key_der+0x1c>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 8010642:	f06f 036b 	mvn.w	r3, #107	@ 0x6b
 8010646:	e101      	b.n	801084c <mbedtls_pk_write_key_der+0x220>
    PK_VALIDATE_RET( buf != NULL );

    c = buf + size;
 8010648:	68ba      	ldr	r2, [r7, #8]
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	4413      	add	r3, r2
 801064e:	613b      	str	r3, [r7, #16]
                                               MBEDTLS_ASN1_SEQUENCE ) );
    }
    else
#endif /* MBEDTLS_RSA_C */
#if defined(MBEDTLS_ECP_C)
    if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_ECKEY )
 8010650:	68f8      	ldr	r0, [r7, #12]
 8010652:	f7ff fd14 	bl	801007e <mbedtls_pk_get_type>
 8010656:	4603      	mov	r3, r0
 8010658:	2b02      	cmp	r3, #2
 801065a:	f040 80f6 	bne.w	801084a <mbedtls_pk_write_key_der+0x21e>
    {
        mbedtls_ecp_keypair *ec = mbedtls_pk_ec( *key );
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010664:	f7ff fe79 	bl	801035a <mbedtls_pk_ec>
 8010668:	6238      	str	r0, [r7, #32]
        size_t pub_len = 0, par_len = 0;
 801066a:	2300      	movs	r3, #0
 801066c:	61fb      	str	r3, [r7, #28]
 801066e:	2300      	movs	r3, #0
 8010670:	61bb      	str	r3, [r7, #24]
         *      publicKey  [1] BIT STRING OPTIONAL
         *    }
         */

        /* publicKey */
        MBEDTLS_ASN1_CHK_ADD( pub_len, pk_write_ec_pubkey( &c, buf, ec ) );
 8010672:	f107 0310 	add.w	r3, r7, #16
 8010676:	6a3a      	ldr	r2, [r7, #32]
 8010678:	68b9      	ldr	r1, [r7, #8]
 801067a:	4618      	mov	r0, r3
 801067c:	f7ff fe7a 	bl	8010374 <pk_write_ec_pubkey>
 8010680:	6178      	str	r0, [r7, #20]
 8010682:	697b      	ldr	r3, [r7, #20]
 8010684:	2b00      	cmp	r3, #0
 8010686:	da01      	bge.n	801068c <mbedtls_pk_write_key_der+0x60>
 8010688:	697b      	ldr	r3, [r7, #20]
 801068a:	e0df      	b.n	801084c <mbedtls_pk_write_key_der+0x220>
 801068c:	697b      	ldr	r3, [r7, #20]
 801068e:	69fa      	ldr	r2, [r7, #28]
 8010690:	4413      	add	r3, r2
 8010692:	61fb      	str	r3, [r7, #28]

        if( c - buf < 1 )
 8010694:	693a      	ldr	r2, [r7, #16]
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	1ad3      	subs	r3, r2, r3
 801069a:	2b00      	cmp	r3, #0
 801069c:	dc02      	bgt.n	80106a4 <mbedtls_pk_write_key_der+0x78>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 801069e:	f06f 036b 	mvn.w	r3, #107	@ 0x6b
 80106a2:	e0d3      	b.n	801084c <mbedtls_pk_write_key_der+0x220>
        *--c = 0;
 80106a4:	693b      	ldr	r3, [r7, #16]
 80106a6:	3b01      	subs	r3, #1
 80106a8:	613b      	str	r3, [r7, #16]
 80106aa:	693b      	ldr	r3, [r7, #16]
 80106ac:	2200      	movs	r2, #0
 80106ae:	701a      	strb	r2, [r3, #0]
        pub_len += 1;
 80106b0:	69fb      	ldr	r3, [r7, #28]
 80106b2:	3301      	adds	r3, #1
 80106b4:	61fb      	str	r3, [r7, #28]

        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_len( &c, buf, pub_len ) );
 80106b6:	f107 0310 	add.w	r3, r7, #16
 80106ba:	69fa      	ldr	r2, [r7, #28]
 80106bc:	68b9      	ldr	r1, [r7, #8]
 80106be:	4618      	mov	r0, r3
 80106c0:	f7f4 fec1 	bl	8005446 <mbedtls_asn1_write_len>
 80106c4:	6178      	str	r0, [r7, #20]
 80106c6:	697b      	ldr	r3, [r7, #20]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	da01      	bge.n	80106d0 <mbedtls_pk_write_key_der+0xa4>
 80106cc:	697b      	ldr	r3, [r7, #20]
 80106ce:	e0bd      	b.n	801084c <mbedtls_pk_write_key_der+0x220>
 80106d0:	697b      	ldr	r3, [r7, #20]
 80106d2:	69fa      	ldr	r2, [r7, #28]
 80106d4:	4413      	add	r3, r2
 80106d6:	61fb      	str	r3, [r7, #28]
        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_BIT_STRING ) );
 80106d8:	f107 0310 	add.w	r3, r7, #16
 80106dc:	2203      	movs	r2, #3
 80106de:	68b9      	ldr	r1, [r7, #8]
 80106e0:	4618      	mov	r0, r3
 80106e2:	f7f4 ff98 	bl	8005616 <mbedtls_asn1_write_tag>
 80106e6:	6178      	str	r0, [r7, #20]
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	da01      	bge.n	80106f2 <mbedtls_pk_write_key_der+0xc6>
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	e0ac      	b.n	801084c <mbedtls_pk_write_key_der+0x220>
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	69fa      	ldr	r2, [r7, #28]
 80106f6:	4413      	add	r3, r2
 80106f8:	61fb      	str	r3, [r7, #28]

        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_len( &c, buf, pub_len ) );
 80106fa:	f107 0310 	add.w	r3, r7, #16
 80106fe:	69fa      	ldr	r2, [r7, #28]
 8010700:	68b9      	ldr	r1, [r7, #8]
 8010702:	4618      	mov	r0, r3
 8010704:	f7f4 fe9f 	bl	8005446 <mbedtls_asn1_write_len>
 8010708:	6178      	str	r0, [r7, #20]
 801070a:	697b      	ldr	r3, [r7, #20]
 801070c:	2b00      	cmp	r3, #0
 801070e:	da01      	bge.n	8010714 <mbedtls_pk_write_key_der+0xe8>
 8010710:	697b      	ldr	r3, [r7, #20]
 8010712:	e09b      	b.n	801084c <mbedtls_pk_write_key_der+0x220>
 8010714:	697b      	ldr	r3, [r7, #20]
 8010716:	69fa      	ldr	r2, [r7, #28]
 8010718:	4413      	add	r3, r2
 801071a:	61fb      	str	r3, [r7, #28]
        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_tag( &c, buf,
 801071c:	f107 0310 	add.w	r3, r7, #16
 8010720:	22a1      	movs	r2, #161	@ 0xa1
 8010722:	68b9      	ldr	r1, [r7, #8]
 8010724:	4618      	mov	r0, r3
 8010726:	f7f4 ff76 	bl	8005616 <mbedtls_asn1_write_tag>
 801072a:	6178      	str	r0, [r7, #20]
 801072c:	697b      	ldr	r3, [r7, #20]
 801072e:	2b00      	cmp	r3, #0
 8010730:	da01      	bge.n	8010736 <mbedtls_pk_write_key_der+0x10a>
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	e08a      	b.n	801084c <mbedtls_pk_write_key_der+0x220>
 8010736:	697b      	ldr	r3, [r7, #20]
 8010738:	69fa      	ldr	r2, [r7, #28]
 801073a:	4413      	add	r3, r2
 801073c:	61fb      	str	r3, [r7, #28]
                            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) );
        len += pub_len;
 801073e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010740:	69fb      	ldr	r3, [r7, #28]
 8010742:	4413      	add	r3, r2
 8010744:	627b      	str	r3, [r7, #36]	@ 0x24

        /* parameters */
        MBEDTLS_ASN1_CHK_ADD( par_len, pk_write_ec_param( &c, buf, ec ) );
 8010746:	f107 0310 	add.w	r3, r7, #16
 801074a:	6a3a      	ldr	r2, [r7, #32]
 801074c:	68b9      	ldr	r1, [r7, #8]
 801074e:	4618      	mov	r0, r3
 8010750:	f7ff fe51 	bl	80103f6 <pk_write_ec_param>
 8010754:	6178      	str	r0, [r7, #20]
 8010756:	697b      	ldr	r3, [r7, #20]
 8010758:	2b00      	cmp	r3, #0
 801075a:	da01      	bge.n	8010760 <mbedtls_pk_write_key_der+0x134>
 801075c:	697b      	ldr	r3, [r7, #20]
 801075e:	e075      	b.n	801084c <mbedtls_pk_write_key_der+0x220>
 8010760:	697b      	ldr	r3, [r7, #20]
 8010762:	69ba      	ldr	r2, [r7, #24]
 8010764:	4413      	add	r3, r2
 8010766:	61bb      	str	r3, [r7, #24]

        MBEDTLS_ASN1_CHK_ADD( par_len, mbedtls_asn1_write_len( &c, buf, par_len ) );
 8010768:	f107 0310 	add.w	r3, r7, #16
 801076c:	69ba      	ldr	r2, [r7, #24]
 801076e:	68b9      	ldr	r1, [r7, #8]
 8010770:	4618      	mov	r0, r3
 8010772:	f7f4 fe68 	bl	8005446 <mbedtls_asn1_write_len>
 8010776:	6178      	str	r0, [r7, #20]
 8010778:	697b      	ldr	r3, [r7, #20]
 801077a:	2b00      	cmp	r3, #0
 801077c:	da01      	bge.n	8010782 <mbedtls_pk_write_key_der+0x156>
 801077e:	697b      	ldr	r3, [r7, #20]
 8010780:	e064      	b.n	801084c <mbedtls_pk_write_key_der+0x220>
 8010782:	697b      	ldr	r3, [r7, #20]
 8010784:	69ba      	ldr	r2, [r7, #24]
 8010786:	4413      	add	r3, r2
 8010788:	61bb      	str	r3, [r7, #24]
        MBEDTLS_ASN1_CHK_ADD( par_len, mbedtls_asn1_write_tag( &c, buf,
 801078a:	f107 0310 	add.w	r3, r7, #16
 801078e:	22a0      	movs	r2, #160	@ 0xa0
 8010790:	68b9      	ldr	r1, [r7, #8]
 8010792:	4618      	mov	r0, r3
 8010794:	f7f4 ff3f 	bl	8005616 <mbedtls_asn1_write_tag>
 8010798:	6178      	str	r0, [r7, #20]
 801079a:	697b      	ldr	r3, [r7, #20]
 801079c:	2b00      	cmp	r3, #0
 801079e:	da01      	bge.n	80107a4 <mbedtls_pk_write_key_der+0x178>
 80107a0:	697b      	ldr	r3, [r7, #20]
 80107a2:	e053      	b.n	801084c <mbedtls_pk_write_key_der+0x220>
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	69ba      	ldr	r2, [r7, #24]
 80107a8:	4413      	add	r3, r2
 80107aa:	61bb      	str	r3, [r7, #24]
                            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) );
        len += par_len;
 80107ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80107ae:	69bb      	ldr	r3, [r7, #24]
 80107b0:	4413      	add	r3, r2
 80107b2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* privateKey: write as MPI then fix tag */
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &c, buf, &ec->d ) );
 80107b4:	6a3b      	ldr	r3, [r7, #32]
 80107b6:	f103 027c 	add.w	r2, r3, #124	@ 0x7c
 80107ba:	f107 0310 	add.w	r3, r7, #16
 80107be:	68b9      	ldr	r1, [r7, #8]
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7f4 ff76 	bl	80056b2 <mbedtls_asn1_write_mpi>
 80107c6:	6178      	str	r0, [r7, #20]
 80107c8:	697b      	ldr	r3, [r7, #20]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	da01      	bge.n	80107d2 <mbedtls_pk_write_key_der+0x1a6>
 80107ce:	697b      	ldr	r3, [r7, #20]
 80107d0:	e03c      	b.n	801084c <mbedtls_pk_write_key_der+0x220>
 80107d2:	697b      	ldr	r3, [r7, #20]
 80107d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80107d6:	4413      	add	r3, r2
 80107d8:	627b      	str	r3, [r7, #36]	@ 0x24
        *c = MBEDTLS_ASN1_OCTET_STRING;
 80107da:	693b      	ldr	r3, [r7, #16]
 80107dc:	2204      	movs	r2, #4
 80107de:	701a      	strb	r2, [r3, #0]

        /* version */
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_int( &c, buf, 1 ) );
 80107e0:	f107 0310 	add.w	r3, r7, #16
 80107e4:	2201      	movs	r2, #1
 80107e6:	68b9      	ldr	r1, [r7, #8]
 80107e8:	4618      	mov	r0, r3
 80107ea:	f7f5 f8d2 	bl	8005992 <mbedtls_asn1_write_int>
 80107ee:	6178      	str	r0, [r7, #20]
 80107f0:	697b      	ldr	r3, [r7, #20]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	da01      	bge.n	80107fa <mbedtls_pk_write_key_der+0x1ce>
 80107f6:	697b      	ldr	r3, [r7, #20]
 80107f8:	e028      	b.n	801084c <mbedtls_pk_write_key_der+0x220>
 80107fa:	697b      	ldr	r3, [r7, #20]
 80107fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80107fe:	4413      	add	r3, r2
 8010800:	627b      	str	r3, [r7, #36]	@ 0x24

        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
 8010802:	f107 0310 	add.w	r3, r7, #16
 8010806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010808:	68b9      	ldr	r1, [r7, #8]
 801080a:	4618      	mov	r0, r3
 801080c:	f7f4 fe1b 	bl	8005446 <mbedtls_asn1_write_len>
 8010810:	6178      	str	r0, [r7, #20]
 8010812:	697b      	ldr	r3, [r7, #20]
 8010814:	2b00      	cmp	r3, #0
 8010816:	da01      	bge.n	801081c <mbedtls_pk_write_key_der+0x1f0>
 8010818:	697b      	ldr	r3, [r7, #20]
 801081a:	e017      	b.n	801084c <mbedtls_pk_write_key_der+0x220>
 801081c:	697b      	ldr	r3, [r7, #20]
 801081e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010820:	4413      	add	r3, r2
 8010822:	627b      	str	r3, [r7, #36]	@ 0x24
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_CONSTRUCTED |
 8010824:	f107 0310 	add.w	r3, r7, #16
 8010828:	2230      	movs	r2, #48	@ 0x30
 801082a:	68b9      	ldr	r1, [r7, #8]
 801082c:	4618      	mov	r0, r3
 801082e:	f7f4 fef2 	bl	8005616 <mbedtls_asn1_write_tag>
 8010832:	6178      	str	r0, [r7, #20]
 8010834:	697b      	ldr	r3, [r7, #20]
 8010836:	2b00      	cmp	r3, #0
 8010838:	da01      	bge.n	801083e <mbedtls_pk_write_key_der+0x212>
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	e006      	b.n	801084c <mbedtls_pk_write_key_der+0x220>
 801083e:	697b      	ldr	r3, [r7, #20]
 8010840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010842:	4413      	add	r3, r2
 8010844:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );

    return( (int) len );
 8010846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010848:	e000      	b.n	801084c <mbedtls_pk_write_key_der+0x220>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 801084a:	4b02      	ldr	r3, [pc, #8]	@ (8010854 <mbedtls_pk_write_key_der+0x228>)
}
 801084c:	4618      	mov	r0, r3
 801084e:	3728      	adds	r7, #40	@ 0x28
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}
 8010854:	ffffc680 	.word	0xffffc680

08010858 <mbedtls_pk_write_pubkey_pem>:
                            RSA_PUB_DER_MAX_BYTES : ECP_PUB_DER_MAX_BYTES
#define PRV_DER_MAX_BYTES   RSA_PRV_DER_MAX_BYTES > ECP_PRV_DER_MAX_BYTES ? \
                            RSA_PRV_DER_MAX_BYTES : ECP_PRV_DER_MAX_BYTES

int mbedtls_pk_write_pubkey_pem( mbedtls_pk_context *key, unsigned char *buf, size_t size )
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b0aa      	sub	sp, #168	@ 0xa8
 801085c:	af04      	add	r7, sp, #16
 801085e:	60f8      	str	r0, [r7, #12]
 8010860:	60b9      	str	r1, [r7, #8]
 8010862:	607a      	str	r2, [r7, #4]
    int ret;
    unsigned char output_buf[PUB_DER_MAX_BYTES];
    size_t olen = 0;
 8010864:	2300      	movs	r3, #0
 8010866:	613b      	str	r3, [r7, #16]

    PK_VALIDATE_RET( key != NULL );
    PK_VALIDATE_RET( buf != NULL || size == 0 );

    if( ( ret = mbedtls_pk_write_pubkey_der( key, output_buf,
 8010868:	f107 0314 	add.w	r3, r7, #20
 801086c:	227e      	movs	r2, #126	@ 0x7e
 801086e:	4619      	mov	r1, r3
 8010870:	68f8      	ldr	r0, [r7, #12]
 8010872:	f7ff fe19 	bl	80104a8 <mbedtls_pk_write_pubkey_der>
 8010876:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 801087a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801087e:	2b00      	cmp	r3, #0
 8010880:	da02      	bge.n	8010888 <mbedtls_pk_write_pubkey_pem+0x30>
                                     sizeof(output_buf) ) ) < 0 )
    {
        return( ret );
 8010882:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8010886:	e01e      	b.n	80108c6 <mbedtls_pk_write_pubkey_pem+0x6e>
    }

    if( ( ret = mbedtls_pem_write_buffer( PEM_BEGIN_PUBLIC_KEY, PEM_END_PUBLIC_KEY,
                                  output_buf + sizeof(output_buf) - ret,
 8010888:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801088c:	f1c3 037e 	rsb	r3, r3, #126	@ 0x7e
    if( ( ret = mbedtls_pem_write_buffer( PEM_BEGIN_PUBLIC_KEY, PEM_END_PUBLIC_KEY,
 8010890:	f107 0214 	add.w	r2, r7, #20
 8010894:	441a      	add	r2, r3
 8010896:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 801089a:	f107 0310 	add.w	r3, r7, #16
 801089e:	9302      	str	r3, [sp, #8]
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	9301      	str	r3, [sp, #4]
 80108a4:	68bb      	ldr	r3, [r7, #8]
 80108a6:	9300      	str	r3, [sp, #0]
 80108a8:	460b      	mov	r3, r1
 80108aa:	4909      	ldr	r1, [pc, #36]	@ (80108d0 <mbedtls_pk_write_pubkey_pem+0x78>)
 80108ac:	4809      	ldr	r0, [pc, #36]	@ (80108d4 <mbedtls_pk_write_pubkey_pem+0x7c>)
 80108ae:	f7ff fa31 	bl	800fd14 <mbedtls_pem_write_buffer>
 80108b2:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 80108b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d002      	beq.n	80108c4 <mbedtls_pk_write_pubkey_pem+0x6c>
                                  ret, buf, size, &olen ) ) != 0 )
    {
        return( ret );
 80108be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80108c2:	e000      	b.n	80108c6 <mbedtls_pk_write_pubkey_pem+0x6e>
    }

    return( 0 );
 80108c4:	2300      	movs	r3, #0
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3798      	adds	r7, #152	@ 0x98
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}
 80108ce:	bf00      	nop
 80108d0:	08018a00 	.word	0x08018a00
 80108d4:	08018a1c 	.word	0x08018a1c

080108d8 <mbedtls_pk_write_key_pem>:

int mbedtls_pk_write_key_pem( mbedtls_pk_context *key, unsigned char *buf, size_t size )
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b0b8      	sub	sp, #224	@ 0xe0
 80108dc:	af04      	add	r7, sp, #16
 80108de:	60f8      	str	r0, [r7, #12]
 80108e0:	60b9      	str	r1, [r7, #8]
 80108e2:	607a      	str	r2, [r7, #4]
    int ret;
    unsigned char output_buf[PRV_DER_MAX_BYTES];
    const char *begin, *end;
    size_t olen = 0;
 80108e4:	2300      	movs	r3, #0
 80108e6:	613b      	str	r3, [r7, #16]

    PK_VALIDATE_RET( key != NULL );
    PK_VALIDATE_RET( buf != NULL || size == 0 );

    if( ( ret = mbedtls_pk_write_key_der( key, output_buf, sizeof(output_buf) ) ) < 0 )
 80108e8:	f107 0314 	add.w	r3, r7, #20
 80108ec:	22ad      	movs	r2, #173	@ 0xad
 80108ee:	4619      	mov	r1, r3
 80108f0:	68f8      	ldr	r0, [r7, #12]
 80108f2:	f7ff fe9b 	bl	801062c <mbedtls_pk_write_key_der>
 80108f6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
 80108fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80108fe:	2b00      	cmp	r3, #0
 8010900:	da02      	bge.n	8010908 <mbedtls_pk_write_key_pem+0x30>
        return( ret );
 8010902:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010906:	e02f      	b.n	8010968 <mbedtls_pk_write_key_pem+0x90>
        end = PEM_END_PRIVATE_KEY_RSA;
    }
    else
#endif
#if defined(MBEDTLS_ECP_C)
    if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_ECKEY )
 8010908:	68f8      	ldr	r0, [r7, #12]
 801090a:	f7ff fbb8 	bl	801007e <mbedtls_pk_get_type>
 801090e:	4603      	mov	r3, r0
 8010910:	2b02      	cmp	r3, #2
 8010912:	d123      	bne.n	801095c <mbedtls_pk_write_key_pem+0x84>
    {
        begin = PEM_BEGIN_PRIVATE_KEY_EC;
 8010914:	4b16      	ldr	r3, [pc, #88]	@ (8010970 <mbedtls_pk_write_key_pem+0x98>)
 8010916:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        end = PEM_END_PRIVATE_KEY_EC;
 801091a:	4b16      	ldr	r3, [pc, #88]	@ (8010974 <mbedtls_pk_write_key_pem+0x9c>)
 801091c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    else
#endif
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );

    if( ( ret = mbedtls_pem_write_buffer( begin, end,
                                  output_buf + sizeof(output_buf) - ret,
 8010920:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010924:	f1c3 03ad 	rsb	r3, r3, #173	@ 0xad
    if( ( ret = mbedtls_pem_write_buffer( begin, end,
 8010928:	f107 0214 	add.w	r2, r7, #20
 801092c:	441a      	add	r2, r3
 801092e:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8010932:	f107 0310 	add.w	r3, r7, #16
 8010936:	9302      	str	r3, [sp, #8]
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	9301      	str	r3, [sp, #4]
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	9300      	str	r3, [sp, #0]
 8010940:	460b      	mov	r3, r1
 8010942:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8010946:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 801094a:	f7ff f9e3 	bl	800fd14 <mbedtls_pem_write_buffer>
 801094e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
 8010952:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010956:	2b00      	cmp	r3, #0
 8010958:	d005      	beq.n	8010966 <mbedtls_pk_write_key_pem+0x8e>
 801095a:	e001      	b.n	8010960 <mbedtls_pk_write_key_pem+0x88>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 801095c:	4b06      	ldr	r3, [pc, #24]	@ (8010978 <mbedtls_pk_write_key_pem+0xa0>)
 801095e:	e003      	b.n	8010968 <mbedtls_pk_write_key_pem+0x90>
                                  ret, buf, size, &olen ) ) != 0 )
    {
        return( ret );
 8010960:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010964:	e000      	b.n	8010968 <mbedtls_pk_write_key_pem+0x90>
    }

    return( 0 );
 8010966:	2300      	movs	r3, #0
}
 8010968:	4618      	mov	r0, r3
 801096a:	37d0      	adds	r7, #208	@ 0xd0
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}
 8010970:	08018a38 	.word	0x08018a38
 8010974:	08018a58 	.word	0x08018a58
 8010978:	ffffc680 	.word	0xffffc680

0801097c <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b082      	sub	sp, #8
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
 8010984:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 8010986:	4b05      	ldr	r3, [pc, #20]	@ (801099c <mbedtls_platform_zeroize+0x20>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	683a      	ldr	r2, [r7, #0]
 801098c:	2100      	movs	r1, #0
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	4798      	blx	r3
}
 8010992:	bf00      	nop
 8010994:	3708      	adds	r7, #8
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}
 801099a:	bf00      	nop
 801099c:	20000064 	.word	0x20000064

080109a0 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b082      	sub	sp, #8
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 80109a8:	226c      	movs	r2, #108	@ 0x6c
 80109aa:	2100      	movs	r1, #0
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	f006 f903 	bl	8016bb8 <memset>
}
 80109b2:	bf00      	nop
 80109b4:	3708      	adds	r7, #8
 80109b6:	46bd      	mov	sp, r7
 80109b8:	bd80      	pop	{r7, pc}

080109ba <mbedtls_sha256_free>:

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
 80109ba:	b580      	push	{r7, lr}
 80109bc:	b082      	sub	sp, #8
 80109be:	af00      	add	r7, sp, #0
 80109c0:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d004      	beq.n	80109d2 <mbedtls_sha256_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 80109c8:	216c      	movs	r1, #108	@ 0x6c
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	f7ff ffd6 	bl	801097c <mbedtls_platform_zeroize>
 80109d0:	e000      	b.n	80109d4 <mbedtls_sha256_free+0x1a>
        return;
 80109d2:	bf00      	nop
}
 80109d4:	3708      	adds	r7, #8
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd80      	pop	{r7, pc}

080109da <mbedtls_sha256_clone>:

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 80109da:	b580      	push	{r7, lr}
 80109dc:	b082      	sub	sp, #8
 80109de:	af00      	add	r7, sp, #0
 80109e0:	6078      	str	r0, [r7, #4]
 80109e2:	6039      	str	r1, [r7, #0]
    SHA256_VALIDATE( dst != NULL );
    SHA256_VALIDATE( src != NULL );

    *dst = *src;
 80109e4:	687a      	ldr	r2, [r7, #4]
 80109e6:	683b      	ldr	r3, [r7, #0]
 80109e8:	4610      	mov	r0, r2
 80109ea:	4619      	mov	r1, r3
 80109ec:	236c      	movs	r3, #108	@ 0x6c
 80109ee:	461a      	mov	r2, r3
 80109f0:	f006 f9bf 	bl	8016d72 <memcpy>
}
 80109f4:	bf00      	nop
 80109f6:	3708      	adds	r7, #8
 80109f8:	46bd      	mov	sp, r7
 80109fa:	bd80      	pop	{r7, pc}

080109fc <mbedtls_sha256_starts_ret>:

/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
 80109fc:	b480      	push	{r7}
 80109fe:	b083      	sub	sp, #12
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
 8010a04:	6039      	str	r1, [r7, #0]
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2200      	movs	r2, #0
 8010a0a:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2200      	movs	r2, #0
 8010a10:	605a      	str	r2, [r3, #4]

    if( is224 == 0 )
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d118      	bne.n	8010a4a <mbedtls_sha256_starts_ret+0x4e>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	4a1d      	ldr	r2, [pc, #116]	@ (8010a90 <mbedtls_sha256_starts_ret+0x94>)
 8010a1c:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0xBB67AE85;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	4a1c      	ldr	r2, [pc, #112]	@ (8010a94 <mbedtls_sha256_starts_ret+0x98>)
 8010a22:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3C6EF372;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	4a1c      	ldr	r2, [pc, #112]	@ (8010a98 <mbedtls_sha256_starts_ret+0x9c>)
 8010a28:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xA54FF53A;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8010a9c <mbedtls_sha256_starts_ret+0xa0>)
 8010a2e:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0x510E527F;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	4a1b      	ldr	r2, [pc, #108]	@ (8010aa0 <mbedtls_sha256_starts_ret+0xa4>)
 8010a34:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x9B05688C;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	4a1a      	ldr	r2, [pc, #104]	@ (8010aa4 <mbedtls_sha256_starts_ret+0xa8>)
 8010a3a:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x1F83D9AB;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	4a1a      	ldr	r2, [pc, #104]	@ (8010aa8 <mbedtls_sha256_starts_ret+0xac>)
 8010a40:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0x5BE0CD19;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	4a19      	ldr	r2, [pc, #100]	@ (8010aac <mbedtls_sha256_starts_ret+0xb0>)
 8010a46:	625a      	str	r2, [r3, #36]	@ 0x24
 8010a48:	e017      	b.n	8010a7a <mbedtls_sha256_starts_ret+0x7e>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	4a18      	ldr	r2, [pc, #96]	@ (8010ab0 <mbedtls_sha256_starts_ret+0xb4>)
 8010a4e:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0x367CD507;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	4a18      	ldr	r2, [pc, #96]	@ (8010ab4 <mbedtls_sha256_starts_ret+0xb8>)
 8010a54:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3070DD17;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	4a17      	ldr	r2, [pc, #92]	@ (8010ab8 <mbedtls_sha256_starts_ret+0xbc>)
 8010a5a:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xF70E5939;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	4a17      	ldr	r2, [pc, #92]	@ (8010abc <mbedtls_sha256_starts_ret+0xc0>)
 8010a60:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0xFFC00B31;
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	4a16      	ldr	r2, [pc, #88]	@ (8010ac0 <mbedtls_sha256_starts_ret+0xc4>)
 8010a66:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x68581511;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	4a16      	ldr	r2, [pc, #88]	@ (8010ac4 <mbedtls_sha256_starts_ret+0xc8>)
 8010a6c:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x64F98FA7;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	4a15      	ldr	r2, [pc, #84]	@ (8010ac8 <mbedtls_sha256_starts_ret+0xcc>)
 8010a72:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0xBEFA4FA4;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	4a15      	ldr	r2, [pc, #84]	@ (8010acc <mbedtls_sha256_starts_ret+0xd0>)
 8010a78:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    ctx->is224 = is224;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	683a      	ldr	r2, [r7, #0]
 8010a7e:	669a      	str	r2, [r3, #104]	@ 0x68

    return( 0 );
 8010a80:	2300      	movs	r3, #0
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	370c      	adds	r7, #12
 8010a86:	46bd      	mov	sp, r7
 8010a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8c:	4770      	bx	lr
 8010a8e:	bf00      	nop
 8010a90:	6a09e667 	.word	0x6a09e667
 8010a94:	bb67ae85 	.word	0xbb67ae85
 8010a98:	3c6ef372 	.word	0x3c6ef372
 8010a9c:	a54ff53a 	.word	0xa54ff53a
 8010aa0:	510e527f 	.word	0x510e527f
 8010aa4:	9b05688c 	.word	0x9b05688c
 8010aa8:	1f83d9ab 	.word	0x1f83d9ab
 8010aac:	5be0cd19 	.word	0x5be0cd19
 8010ab0:	c1059ed8 	.word	0xc1059ed8
 8010ab4:	367cd507 	.word	0x367cd507
 8010ab8:	3070dd17 	.word	0x3070dd17
 8010abc:	f70e5939 	.word	0xf70e5939
 8010ac0:	ffc00b31 	.word	0xffc00b31
 8010ac4:	68581511 	.word	0x68581511
 8010ac8:	64f98fa7 	.word	0x64f98fa7
 8010acc:	befa4fa4 	.word	0xbefa4fa4

08010ad0 <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 8010ad0:	b490      	push	{r4, r7}
 8010ad2:	b0ce      	sub	sp, #312	@ 0x138
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010ada:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8010ade:	6018      	str	r0, [r3, #0]
 8010ae0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010ae4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8010ae8:	6019      	str	r1, [r3, #0]
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
 8010aea:	2300      	movs	r3, #0
 8010aec:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8010af0:	e016      	b.n	8010b20 <mbedtls_internal_sha256_process+0x50>
        A[i] = ctx->state[i];
 8010af2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010af6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8010b00:	3202      	adds	r2, #2
 8010b02:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010b06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010b0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010b0e:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8010b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 8010b16:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010b1a:	3301      	adds	r3, #1
 8010b1c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8010b20:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010b24:	2b07      	cmp	r3, #7
 8010b26:	d9e4      	bls.n	8010af2 <mbedtls_internal_sha256_process+0x22>

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 8010b28:	2300      	movs	r3, #0
 8010b2a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8010b2e:	e03e      	b.n	8010bae <mbedtls_internal_sha256_process+0xde>
        GET_UINT32_BE( W[i], data, 4 * i );
 8010b30:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010b34:	009b      	lsls	r3, r3, #2
 8010b36:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8010b3a:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8010b3e:	6812      	ldr	r2, [r2, #0]
 8010b40:	4413      	add	r3, r2
 8010b42:	781b      	ldrb	r3, [r3, #0]
 8010b44:	061a      	lsls	r2, r3, #24
 8010b46:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010b4a:	009b      	lsls	r3, r3, #2
 8010b4c:	3301      	adds	r3, #1
 8010b4e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8010b52:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8010b56:	6809      	ldr	r1, [r1, #0]
 8010b58:	440b      	add	r3, r1
 8010b5a:	781b      	ldrb	r3, [r3, #0]
 8010b5c:	041b      	lsls	r3, r3, #16
 8010b5e:	431a      	orrs	r2, r3
 8010b60:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010b64:	009b      	lsls	r3, r3, #2
 8010b66:	3302      	adds	r3, #2
 8010b68:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8010b6c:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8010b70:	6809      	ldr	r1, [r1, #0]
 8010b72:	440b      	add	r3, r1
 8010b74:	781b      	ldrb	r3, [r3, #0]
 8010b76:	021b      	lsls	r3, r3, #8
 8010b78:	4313      	orrs	r3, r2
 8010b7a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8010b7e:	0092      	lsls	r2, r2, #2
 8010b80:	3203      	adds	r2, #3
 8010b82:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8010b86:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8010b8a:	6809      	ldr	r1, [r1, #0]
 8010b8c:	440a      	add	r2, r1
 8010b8e:	7812      	ldrb	r2, [r2, #0]
 8010b90:	ea43 0102 	orr.w	r1, r3, r2
 8010b94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010b98:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010b9c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8010ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 16; i++ )
 8010ba4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010ba8:	3301      	adds	r3, #1
 8010baa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8010bae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010bb2:	2b0f      	cmp	r3, #15
 8010bb4:	d9bc      	bls.n	8010b30 <mbedtls_internal_sha256_process+0x60>

    for( i = 0; i < 16; i += 8 )
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8010bbc:	f000 bcba 	b.w	8011534 <mbedtls_internal_sha256_process+0xa64>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8010bc0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010bc4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010bc8:	69da      	ldr	r2, [r3, #28]
 8010bca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010bce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010bd2:	691b      	ldr	r3, [r3, #16]
 8010bd4:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8010bd8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010bdc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010be0:	691b      	ldr	r3, [r3, #16]
 8010be2:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8010be6:	4059      	eors	r1, r3
 8010be8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010bec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010bf0:	691b      	ldr	r3, [r3, #16]
 8010bf2:	ea4f 6373 	mov.w	r3, r3, ror #25
 8010bf6:	404b      	eors	r3, r1
 8010bf8:	441a      	add	r2, r3
 8010bfa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010bfe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010c02:	6999      	ldr	r1, [r3, #24]
 8010c04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010c08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010c0c:	6918      	ldr	r0, [r3, #16]
 8010c0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010c12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010c16:	695c      	ldr	r4, [r3, #20]
 8010c18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010c1c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010c20:	699b      	ldr	r3, [r3, #24]
 8010c22:	4063      	eors	r3, r4
 8010c24:	4003      	ands	r3, r0
 8010c26:	404b      	eors	r3, r1
 8010c28:	441a      	add	r2, r3
 8010c2a:	49e0      	ldr	r1, [pc, #896]	@ (8010fac <mbedtls_internal_sha256_process+0x4dc>)
 8010c2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010c30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010c34:	441a      	add	r2, r3
 8010c36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010c3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010c3e:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8010c42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010c46:	4413      	add	r3, r2
 8010c48:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8010c4c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010c50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8010c5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010c5e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	ea4f 3373 	mov.w	r3, r3, ror #13
 8010c68:	405a      	eors	r2, r3
 8010c6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010c6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010c78:	405a      	eors	r2, r3
 8010c7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010c7e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010c82:	6819      	ldr	r1, [r3, #0]
 8010c84:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010c88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010c8c:	685b      	ldr	r3, [r3, #4]
 8010c8e:	4019      	ands	r1, r3
 8010c90:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010c94:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010c98:	6898      	ldr	r0, [r3, #8]
 8010c9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010c9e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010ca2:	681c      	ldr	r4, [r3, #0]
 8010ca4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010ca8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010cac:	685b      	ldr	r3, [r3, #4]
 8010cae:	4323      	orrs	r3, r4
 8010cb0:	4003      	ands	r3, r0
 8010cb2:	430b      	orrs	r3, r1
 8010cb4:	4413      	add	r3, r2
 8010cb6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8010cba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010cbe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010cc2:	68da      	ldr	r2, [r3, #12]
 8010cc4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010cc8:	441a      	add	r2, r3
 8010cca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010cce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010cd2:	60da      	str	r2, [r3, #12]
 8010cd4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8010cd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010cdc:	441a      	add	r2, r3
 8010cde:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010ce2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010ce6:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8010ce8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010cec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010cf0:	699a      	ldr	r2, [r3, #24]
 8010cf2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010cf6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010cfa:	68db      	ldr	r3, [r3, #12]
 8010cfc:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8010d00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010d04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010d08:	68db      	ldr	r3, [r3, #12]
 8010d0a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8010d0e:	4059      	eors	r1, r3
 8010d10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010d14:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010d18:	68db      	ldr	r3, [r3, #12]
 8010d1a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8010d1e:	404b      	eors	r3, r1
 8010d20:	441a      	add	r2, r3
 8010d22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010d26:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010d2a:	6959      	ldr	r1, [r3, #20]
 8010d2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010d30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010d34:	68d8      	ldr	r0, [r3, #12]
 8010d36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010d3a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010d3e:	691c      	ldr	r4, [r3, #16]
 8010d40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010d44:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010d48:	695b      	ldr	r3, [r3, #20]
 8010d4a:	4063      	eors	r3, r4
 8010d4c:	4003      	ands	r3, r0
 8010d4e:	404b      	eors	r3, r1
 8010d50:	441a      	add	r2, r3
 8010d52:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010d56:	3301      	adds	r3, #1
 8010d58:	4994      	ldr	r1, [pc, #592]	@ (8010fac <mbedtls_internal_sha256_process+0x4dc>)
 8010d5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010d5e:	441a      	add	r2, r3
 8010d60:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010d64:	1c59      	adds	r1, r3, #1
 8010d66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010d6a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010d6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010d72:	4413      	add	r3, r2
 8010d74:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8010d78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010d7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010d80:	69db      	ldr	r3, [r3, #28]
 8010d82:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8010d86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010d8a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010d8e:	69db      	ldr	r3, [r3, #28]
 8010d90:	ea4f 3373 	mov.w	r3, r3, ror #13
 8010d94:	405a      	eors	r2, r3
 8010d96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010d9a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010d9e:	69db      	ldr	r3, [r3, #28]
 8010da0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010da4:	405a      	eors	r2, r3
 8010da6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010daa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010dae:	69d9      	ldr	r1, [r3, #28]
 8010db0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010db4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	4019      	ands	r1, r3
 8010dbc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010dc0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010dc4:	6858      	ldr	r0, [r3, #4]
 8010dc6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010dca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010dce:	69dc      	ldr	r4, [r3, #28]
 8010dd0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010dd4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	4323      	orrs	r3, r4
 8010ddc:	4003      	ands	r3, r0
 8010dde:	430b      	orrs	r3, r1
 8010de0:	4413      	add	r3, r2
 8010de2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8010de6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010dea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010dee:	689a      	ldr	r2, [r3, #8]
 8010df0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010df4:	441a      	add	r2, r3
 8010df6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010dfa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010dfe:	609a      	str	r2, [r3, #8]
 8010e00:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8010e04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010e08:	441a      	add	r2, r3
 8010e0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010e0e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010e12:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8010e14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010e18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010e1c:	695a      	ldr	r2, [r3, #20]
 8010e1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010e22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010e26:	689b      	ldr	r3, [r3, #8]
 8010e28:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8010e2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010e30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010e34:	689b      	ldr	r3, [r3, #8]
 8010e36:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8010e3a:	4059      	eors	r1, r3
 8010e3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010e40:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010e44:	689b      	ldr	r3, [r3, #8]
 8010e46:	ea4f 6373 	mov.w	r3, r3, ror #25
 8010e4a:	404b      	eors	r3, r1
 8010e4c:	441a      	add	r2, r3
 8010e4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010e52:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010e56:	6919      	ldr	r1, [r3, #16]
 8010e58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010e5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010e60:	6898      	ldr	r0, [r3, #8]
 8010e62:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010e66:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010e6a:	68dc      	ldr	r4, [r3, #12]
 8010e6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010e70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010e74:	691b      	ldr	r3, [r3, #16]
 8010e76:	4063      	eors	r3, r4
 8010e78:	4003      	ands	r3, r0
 8010e7a:	404b      	eors	r3, r1
 8010e7c:	441a      	add	r2, r3
 8010e7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010e82:	3302      	adds	r3, #2
 8010e84:	4949      	ldr	r1, [pc, #292]	@ (8010fac <mbedtls_internal_sha256_process+0x4dc>)
 8010e86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010e8a:	441a      	add	r2, r3
 8010e8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010e90:	1c99      	adds	r1, r3, #2
 8010e92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010e96:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010e9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010e9e:	4413      	add	r3, r2
 8010ea0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8010ea4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010ea8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010eac:	699b      	ldr	r3, [r3, #24]
 8010eae:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8010eb2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010eb6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010eba:	699b      	ldr	r3, [r3, #24]
 8010ebc:	ea4f 3373 	mov.w	r3, r3, ror #13
 8010ec0:	405a      	eors	r2, r3
 8010ec2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010ec6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010eca:	699b      	ldr	r3, [r3, #24]
 8010ecc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8010ed0:	405a      	eors	r2, r3
 8010ed2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010ed6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010eda:	6999      	ldr	r1, [r3, #24]
 8010edc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010ee0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010ee4:	69db      	ldr	r3, [r3, #28]
 8010ee6:	4019      	ands	r1, r3
 8010ee8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010eec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010ef0:	6818      	ldr	r0, [r3, #0]
 8010ef2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010ef6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010efa:	699c      	ldr	r4, [r3, #24]
 8010efc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010f00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010f04:	69db      	ldr	r3, [r3, #28]
 8010f06:	4323      	orrs	r3, r4
 8010f08:	4003      	ands	r3, r0
 8010f0a:	430b      	orrs	r3, r1
 8010f0c:	4413      	add	r3, r2
 8010f0e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8010f12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010f16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010f1a:	685a      	ldr	r2, [r3, #4]
 8010f1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010f20:	441a      	add	r2, r3
 8010f22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010f26:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010f2a:	605a      	str	r2, [r3, #4]
 8010f2c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8010f30:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010f34:	441a      	add	r2, r3
 8010f36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010f3a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010f3e:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8010f40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010f44:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010f48:	691a      	ldr	r2, [r3, #16]
 8010f4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010f4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010f52:	685b      	ldr	r3, [r3, #4]
 8010f54:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8010f58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010f5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010f60:	685b      	ldr	r3, [r3, #4]
 8010f62:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8010f66:	4059      	eors	r1, r3
 8010f68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010f6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010f70:	685b      	ldr	r3, [r3, #4]
 8010f72:	ea4f 6373 	mov.w	r3, r3, ror #25
 8010f76:	404b      	eors	r3, r1
 8010f78:	441a      	add	r2, r3
 8010f7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010f7e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010f82:	68d9      	ldr	r1, [r3, #12]
 8010f84:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010f88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010f8c:	6858      	ldr	r0, [r3, #4]
 8010f8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010f92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010f96:	689c      	ldr	r4, [r3, #8]
 8010f98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010f9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010fa0:	68db      	ldr	r3, [r3, #12]
 8010fa2:	4063      	eors	r3, r4
 8010fa4:	4003      	ands	r3, r0
 8010fa6:	404b      	eors	r3, r1
 8010fa8:	441a      	add	r2, r3
 8010faa:	e001      	b.n	8010fb0 <mbedtls_internal_sha256_process+0x4e0>
 8010fac:	0801b2b4 	.word	0x0801b2b4
 8010fb0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010fb4:	3303      	adds	r3, #3
 8010fb6:	49e0      	ldr	r1, [pc, #896]	@ (8011338 <mbedtls_internal_sha256_process+0x868>)
 8010fb8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010fbc:	441a      	add	r2, r3
 8010fbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010fc2:	1cd9      	adds	r1, r3, #3
 8010fc4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010fc8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010fcc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010fd0:	4413      	add	r3, r2
 8010fd2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8010fd6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010fda:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010fde:	695b      	ldr	r3, [r3, #20]
 8010fe0:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8010fe4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010fe8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010fec:	695b      	ldr	r3, [r3, #20]
 8010fee:	ea4f 3373 	mov.w	r3, r3, ror #13
 8010ff2:	405a      	eors	r2, r3
 8010ff4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010ff8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010ffc:	695b      	ldr	r3, [r3, #20]
 8010ffe:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011002:	405a      	eors	r2, r3
 8011004:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011008:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801100c:	6959      	ldr	r1, [r3, #20]
 801100e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011012:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011016:	699b      	ldr	r3, [r3, #24]
 8011018:	4019      	ands	r1, r3
 801101a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801101e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011022:	69d8      	ldr	r0, [r3, #28]
 8011024:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011028:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801102c:	695c      	ldr	r4, [r3, #20]
 801102e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011032:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011036:	699b      	ldr	r3, [r3, #24]
 8011038:	4323      	orrs	r3, r4
 801103a:	4003      	ands	r3, r0
 801103c:	430b      	orrs	r3, r1
 801103e:	4413      	add	r3, r2
 8011040:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8011044:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011048:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801104c:	681a      	ldr	r2, [r3, #0]
 801104e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8011052:	441a      	add	r2, r3
 8011054:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011058:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801105c:	601a      	str	r2, [r3, #0]
 801105e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8011062:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011066:	441a      	add	r2, r3
 8011068:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801106c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011070:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 8011072:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011076:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801107a:	68da      	ldr	r2, [r3, #12]
 801107c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011080:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	ea4f 11b3 	mov.w	r1, r3, ror #6
 801108a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801108e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011098:	4059      	eors	r1, r3
 801109a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801109e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	ea4f 6373 	mov.w	r3, r3, ror #25
 80110a8:	404b      	eors	r3, r1
 80110aa:	441a      	add	r2, r3
 80110ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80110b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80110b4:	6899      	ldr	r1, [r3, #8]
 80110b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80110ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80110be:	6818      	ldr	r0, [r3, #0]
 80110c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80110c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80110c8:	685c      	ldr	r4, [r3, #4]
 80110ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80110ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80110d2:	689b      	ldr	r3, [r3, #8]
 80110d4:	4063      	eors	r3, r4
 80110d6:	4003      	ands	r3, r0
 80110d8:	404b      	eors	r3, r1
 80110da:	441a      	add	r2, r3
 80110dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80110e0:	3304      	adds	r3, #4
 80110e2:	4995      	ldr	r1, [pc, #596]	@ (8011338 <mbedtls_internal_sha256_process+0x868>)
 80110e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80110e8:	441a      	add	r2, r3
 80110ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80110ee:	1d19      	adds	r1, r3, #4
 80110f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80110f4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80110f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80110fc:	4413      	add	r3, r2
 80110fe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8011102:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011106:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801110a:	691b      	ldr	r3, [r3, #16]
 801110c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011110:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011114:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011118:	691b      	ldr	r3, [r3, #16]
 801111a:	ea4f 3373 	mov.w	r3, r3, ror #13
 801111e:	405a      	eors	r2, r3
 8011120:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011124:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011128:	691b      	ldr	r3, [r3, #16]
 801112a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801112e:	405a      	eors	r2, r3
 8011130:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011134:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011138:	6919      	ldr	r1, [r3, #16]
 801113a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801113e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011142:	695b      	ldr	r3, [r3, #20]
 8011144:	4019      	ands	r1, r3
 8011146:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801114a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801114e:	6998      	ldr	r0, [r3, #24]
 8011150:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011154:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011158:	691c      	ldr	r4, [r3, #16]
 801115a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801115e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011162:	695b      	ldr	r3, [r3, #20]
 8011164:	4323      	orrs	r3, r4
 8011166:	4003      	ands	r3, r0
 8011168:	430b      	orrs	r3, r1
 801116a:	4413      	add	r3, r2
 801116c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8011170:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011174:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011178:	69da      	ldr	r2, [r3, #28]
 801117a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801117e:	441a      	add	r2, r3
 8011180:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011184:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011188:	61da      	str	r2, [r3, #28]
 801118a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 801118e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011192:	441a      	add	r2, r3
 8011194:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011198:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801119c:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 801119e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80111a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80111a6:	689a      	ldr	r2, [r3, #8]
 80111a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80111ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80111b0:	69db      	ldr	r3, [r3, #28]
 80111b2:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80111b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80111ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80111be:	69db      	ldr	r3, [r3, #28]
 80111c0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80111c4:	4059      	eors	r1, r3
 80111c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80111ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80111ce:	69db      	ldr	r3, [r3, #28]
 80111d0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80111d4:	404b      	eors	r3, r1
 80111d6:	441a      	add	r2, r3
 80111d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80111dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80111e0:	6859      	ldr	r1, [r3, #4]
 80111e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80111e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80111ea:	69d8      	ldr	r0, [r3, #28]
 80111ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80111f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80111f4:	681c      	ldr	r4, [r3, #0]
 80111f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80111fa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80111fe:	685b      	ldr	r3, [r3, #4]
 8011200:	4063      	eors	r3, r4
 8011202:	4003      	ands	r3, r0
 8011204:	404b      	eors	r3, r1
 8011206:	441a      	add	r2, r3
 8011208:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801120c:	3305      	adds	r3, #5
 801120e:	494a      	ldr	r1, [pc, #296]	@ (8011338 <mbedtls_internal_sha256_process+0x868>)
 8011210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011214:	441a      	add	r2, r3
 8011216:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801121a:	1d59      	adds	r1, r3, #5
 801121c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011220:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011224:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011228:	4413      	add	r3, r2
 801122a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 801122e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011232:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011236:	68db      	ldr	r3, [r3, #12]
 8011238:	ea4f 02b3 	mov.w	r2, r3, ror #2
 801123c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011240:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011244:	68db      	ldr	r3, [r3, #12]
 8011246:	ea4f 3373 	mov.w	r3, r3, ror #13
 801124a:	405a      	eors	r2, r3
 801124c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011250:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011254:	68db      	ldr	r3, [r3, #12]
 8011256:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801125a:	405a      	eors	r2, r3
 801125c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011260:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011264:	68d9      	ldr	r1, [r3, #12]
 8011266:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801126a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801126e:	691b      	ldr	r3, [r3, #16]
 8011270:	4019      	ands	r1, r3
 8011272:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011276:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801127a:	6958      	ldr	r0, [r3, #20]
 801127c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011280:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011284:	68dc      	ldr	r4, [r3, #12]
 8011286:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801128a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801128e:	691b      	ldr	r3, [r3, #16]
 8011290:	4323      	orrs	r3, r4
 8011292:	4003      	ands	r3, r0
 8011294:	430b      	orrs	r3, r1
 8011296:	4413      	add	r3, r2
 8011298:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 801129c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80112a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80112a4:	699a      	ldr	r2, [r3, #24]
 80112a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80112aa:	441a      	add	r2, r3
 80112ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80112b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80112b4:	619a      	str	r2, [r3, #24]
 80112b6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80112ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80112be:	441a      	add	r2, r3
 80112c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80112c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80112c8:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 80112ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80112ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80112d2:	685a      	ldr	r2, [r3, #4]
 80112d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80112d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80112dc:	699b      	ldr	r3, [r3, #24]
 80112de:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80112e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80112e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80112ea:	699b      	ldr	r3, [r3, #24]
 80112ec:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80112f0:	4059      	eors	r1, r3
 80112f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80112f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80112fa:	699b      	ldr	r3, [r3, #24]
 80112fc:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011300:	404b      	eors	r3, r1
 8011302:	441a      	add	r2, r3
 8011304:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011308:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801130c:	6819      	ldr	r1, [r3, #0]
 801130e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011312:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011316:	6998      	ldr	r0, [r3, #24]
 8011318:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801131c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011320:	69dc      	ldr	r4, [r3, #28]
 8011322:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011326:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	4063      	eors	r3, r4
 801132e:	4003      	ands	r3, r0
 8011330:	404b      	eors	r3, r1
 8011332:	441a      	add	r2, r3
 8011334:	e002      	b.n	801133c <mbedtls_internal_sha256_process+0x86c>
 8011336:	bf00      	nop
 8011338:	0801b2b4 	.word	0x0801b2b4
 801133c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011340:	3306      	adds	r3, #6
 8011342:	4981      	ldr	r1, [pc, #516]	@ (8011548 <mbedtls_internal_sha256_process+0xa78>)
 8011344:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011348:	441a      	add	r2, r3
 801134a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801134e:	1d99      	adds	r1, r3, #6
 8011350:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011354:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011358:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801135c:	4413      	add	r3, r2
 801135e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8011362:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011366:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801136a:	689b      	ldr	r3, [r3, #8]
 801136c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011370:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011374:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011378:	689b      	ldr	r3, [r3, #8]
 801137a:	ea4f 3373 	mov.w	r3, r3, ror #13
 801137e:	405a      	eors	r2, r3
 8011380:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011384:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011388:	689b      	ldr	r3, [r3, #8]
 801138a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801138e:	405a      	eors	r2, r3
 8011390:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011394:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011398:	6899      	ldr	r1, [r3, #8]
 801139a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801139e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80113a2:	68db      	ldr	r3, [r3, #12]
 80113a4:	4019      	ands	r1, r3
 80113a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80113aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80113ae:	6918      	ldr	r0, [r3, #16]
 80113b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80113b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80113b8:	689c      	ldr	r4, [r3, #8]
 80113ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80113be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80113c2:	68db      	ldr	r3, [r3, #12]
 80113c4:	4323      	orrs	r3, r4
 80113c6:	4003      	ands	r3, r0
 80113c8:	430b      	orrs	r3, r1
 80113ca:	4413      	add	r3, r2
 80113cc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80113d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80113d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80113d8:	695a      	ldr	r2, [r3, #20]
 80113da:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80113de:	441a      	add	r2, r3
 80113e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80113e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80113e8:	615a      	str	r2, [r3, #20]
 80113ea:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80113ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80113f2:	441a      	add	r2, r3
 80113f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80113f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80113fc:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 80113fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011402:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011406:	681a      	ldr	r2, [r3, #0]
 8011408:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801140c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011410:	695b      	ldr	r3, [r3, #20]
 8011412:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8011416:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801141a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801141e:	695b      	ldr	r3, [r3, #20]
 8011420:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011424:	4059      	eors	r1, r3
 8011426:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801142a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801142e:	695b      	ldr	r3, [r3, #20]
 8011430:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011434:	404b      	eors	r3, r1
 8011436:	441a      	add	r2, r3
 8011438:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801143c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011440:	69d9      	ldr	r1, [r3, #28]
 8011442:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011446:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801144a:	6958      	ldr	r0, [r3, #20]
 801144c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011450:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011454:	699c      	ldr	r4, [r3, #24]
 8011456:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801145a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801145e:	69db      	ldr	r3, [r3, #28]
 8011460:	4063      	eors	r3, r4
 8011462:	4003      	ands	r3, r0
 8011464:	404b      	eors	r3, r1
 8011466:	441a      	add	r2, r3
 8011468:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801146c:	3307      	adds	r3, #7
 801146e:	4936      	ldr	r1, [pc, #216]	@ (8011548 <mbedtls_internal_sha256_process+0xa78>)
 8011470:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011474:	441a      	add	r2, r3
 8011476:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801147a:	1dd9      	adds	r1, r3, #7
 801147c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011480:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011484:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011488:	4413      	add	r3, r2
 801148a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 801148e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011492:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011496:	685b      	ldr	r3, [r3, #4]
 8011498:	ea4f 02b3 	mov.w	r2, r3, ror #2
 801149c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80114a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80114a4:	685b      	ldr	r3, [r3, #4]
 80114a6:	ea4f 3373 	mov.w	r3, r3, ror #13
 80114aa:	405a      	eors	r2, r3
 80114ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80114b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80114b4:	685b      	ldr	r3, [r3, #4]
 80114b6:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80114ba:	405a      	eors	r2, r3
 80114bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80114c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80114c4:	6859      	ldr	r1, [r3, #4]
 80114c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80114ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80114ce:	689b      	ldr	r3, [r3, #8]
 80114d0:	4019      	ands	r1, r3
 80114d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80114d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80114da:	68d8      	ldr	r0, [r3, #12]
 80114dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80114e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80114e4:	685c      	ldr	r4, [r3, #4]
 80114e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80114ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80114ee:	689b      	ldr	r3, [r3, #8]
 80114f0:	4323      	orrs	r3, r4
 80114f2:	4003      	ands	r3, r0
 80114f4:	430b      	orrs	r3, r1
 80114f6:	4413      	add	r3, r2
 80114f8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80114fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011500:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011504:	691a      	ldr	r2, [r3, #16]
 8011506:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801150a:	441a      	add	r2, r3
 801150c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011510:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011514:	611a      	str	r2, [r3, #16]
 8011516:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 801151a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801151e:	441a      	add	r2, r3
 8011520:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011524:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011528:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 16; i += 8 )
 801152a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801152e:	3308      	adds	r3, #8
 8011530:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8011534:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011538:	2b0f      	cmp	r3, #15
 801153a:	f67f ab41 	bls.w	8010bc0 <mbedtls_internal_sha256_process+0xf0>
    }

    for( i = 16; i < 64; i += 8 )
 801153e:	2310      	movs	r3, #16
 8011540:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8011544:	f000 bfd5 	b.w	80124f2 <mbedtls_internal_sha256_process+0x1a22>
 8011548:	0801b2b4 	.word	0x0801b2b4
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 801154c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011550:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011554:	69da      	ldr	r2, [r3, #28]
 8011556:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801155a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801155e:	691b      	ldr	r3, [r3, #16]
 8011560:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8011564:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011568:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801156c:	691b      	ldr	r3, [r3, #16]
 801156e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011572:	4059      	eors	r1, r3
 8011574:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011578:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801157c:	691b      	ldr	r3, [r3, #16]
 801157e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011582:	404b      	eors	r3, r1
 8011584:	441a      	add	r2, r3
 8011586:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801158a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801158e:	6999      	ldr	r1, [r3, #24]
 8011590:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011594:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011598:	6918      	ldr	r0, [r3, #16]
 801159a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801159e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80115a2:	695c      	ldr	r4, [r3, #20]
 80115a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80115a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80115ac:	699b      	ldr	r3, [r3, #24]
 80115ae:	4063      	eors	r3, r4
 80115b0:	4003      	ands	r3, r0
 80115b2:	404b      	eors	r3, r1
 80115b4:	441a      	add	r2, r3
 80115b6:	49ec      	ldr	r1, [pc, #944]	@ (8011968 <mbedtls_internal_sha256_process+0xe98>)
 80115b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80115bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80115c0:	441a      	add	r2, r3
 80115c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80115c6:	1e99      	subs	r1, r3, #2
 80115c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80115cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80115d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80115d4:	ea4f 4173 	mov.w	r1, r3, ror #17
 80115d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80115dc:	1e98      	subs	r0, r3, #2
 80115de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80115e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80115e6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80115ea:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80115ee:	4059      	eors	r1, r3
 80115f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80115f4:	1e98      	subs	r0, r3, #2
 80115f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80115fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80115fe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011602:	0a9b      	lsrs	r3, r3, #10
 8011604:	4059      	eors	r1, r3
 8011606:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801160a:	1fd8      	subs	r0, r3, #7
 801160c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011610:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011614:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011618:	4419      	add	r1, r3
 801161a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801161e:	f1a3 000f 	sub.w	r0, r3, #15
 8011622:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011626:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801162a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801162e:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8011632:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011636:	f1a3 040f 	sub.w	r4, r3, #15
 801163a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801163e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011642:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011646:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801164a:	4058      	eors	r0, r3
 801164c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011650:	f1a3 040f 	sub.w	r4, r3, #15
 8011654:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011658:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801165c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011660:	08db      	lsrs	r3, r3, #3
 8011662:	4043      	eors	r3, r0
 8011664:	4419      	add	r1, r3
 8011666:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801166a:	f1a3 0010 	sub.w	r0, r3, #16
 801166e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011672:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011676:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801167a:	18c8      	adds	r0, r1, r3
 801167c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011680:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011684:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8011688:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 801168c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011690:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011694:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8011698:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801169c:	4413      	add	r3, r2
 801169e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80116a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80116a6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80116b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80116b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	ea4f 3373 	mov.w	r3, r3, ror #13
 80116be:	405a      	eors	r2, r3
 80116c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80116c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80116ce:	405a      	eors	r2, r3
 80116d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80116d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80116d8:	6819      	ldr	r1, [r3, #0]
 80116da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80116de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80116e2:	685b      	ldr	r3, [r3, #4]
 80116e4:	4019      	ands	r1, r3
 80116e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80116ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80116ee:	6898      	ldr	r0, [r3, #8]
 80116f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80116f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80116f8:	681c      	ldr	r4, [r3, #0]
 80116fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80116fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011702:	685b      	ldr	r3, [r3, #4]
 8011704:	4323      	orrs	r3, r4
 8011706:	4003      	ands	r3, r0
 8011708:	430b      	orrs	r3, r1
 801170a:	4413      	add	r3, r2
 801170c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8011710:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011714:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011718:	68da      	ldr	r2, [r3, #12]
 801171a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801171e:	441a      	add	r2, r3
 8011720:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011724:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011728:	60da      	str	r2, [r3, #12]
 801172a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 801172e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011732:	441a      	add	r2, r3
 8011734:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011738:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801173c:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 801173e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011742:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011746:	699a      	ldr	r2, [r3, #24]
 8011748:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801174c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011750:	68db      	ldr	r3, [r3, #12]
 8011752:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8011756:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801175a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801175e:	68db      	ldr	r3, [r3, #12]
 8011760:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011764:	4059      	eors	r1, r3
 8011766:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801176a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801176e:	68db      	ldr	r3, [r3, #12]
 8011770:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011774:	404b      	eors	r3, r1
 8011776:	441a      	add	r2, r3
 8011778:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801177c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011780:	6959      	ldr	r1, [r3, #20]
 8011782:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011786:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801178a:	68d8      	ldr	r0, [r3, #12]
 801178c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011790:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011794:	691c      	ldr	r4, [r3, #16]
 8011796:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801179a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801179e:	695b      	ldr	r3, [r3, #20]
 80117a0:	4063      	eors	r3, r4
 80117a2:	4003      	ands	r3, r0
 80117a4:	404b      	eors	r3, r1
 80117a6:	441a      	add	r2, r3
 80117a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80117ac:	3301      	adds	r3, #1
 80117ae:	496e      	ldr	r1, [pc, #440]	@ (8011968 <mbedtls_internal_sha256_process+0xe98>)
 80117b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80117b4:	441a      	add	r2, r3
 80117b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80117ba:	1e59      	subs	r1, r3, #1
 80117bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80117c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80117c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80117c8:	ea4f 4173 	mov.w	r1, r3, ror #17
 80117cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80117d0:	1e58      	subs	r0, r3, #1
 80117d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80117d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80117da:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80117de:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80117e2:	4059      	eors	r1, r3
 80117e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80117e8:	1e58      	subs	r0, r3, #1
 80117ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80117ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80117f2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80117f6:	0a9b      	lsrs	r3, r3, #10
 80117f8:	4059      	eors	r1, r3
 80117fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80117fe:	1f98      	subs	r0, r3, #6
 8011800:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011804:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011808:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801180c:	4419      	add	r1, r3
 801180e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011812:	f1a3 000e 	sub.w	r0, r3, #14
 8011816:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801181a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801181e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011822:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8011826:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801182a:	f1a3 040e 	sub.w	r4, r3, #14
 801182e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011832:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011836:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801183a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801183e:	4058      	eors	r0, r3
 8011840:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011844:	f1a3 040e 	sub.w	r4, r3, #14
 8011848:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801184c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011850:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011854:	08db      	lsrs	r3, r3, #3
 8011856:	4043      	eors	r3, r0
 8011858:	18c8      	adds	r0, r1, r3
 801185a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801185e:	f1a3 010f 	sub.w	r1, r3, #15
 8011862:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011866:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801186a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 801186e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011872:	3301      	adds	r3, #1
 8011874:	4408      	add	r0, r1
 8011876:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 801187a:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 801187e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8011882:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8011886:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 801188a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801188e:	4413      	add	r3, r2
 8011890:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8011894:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011898:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801189c:	69db      	ldr	r3, [r3, #28]
 801189e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80118a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80118a6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80118aa:	69db      	ldr	r3, [r3, #28]
 80118ac:	ea4f 3373 	mov.w	r3, r3, ror #13
 80118b0:	405a      	eors	r2, r3
 80118b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80118b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80118ba:	69db      	ldr	r3, [r3, #28]
 80118bc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80118c0:	405a      	eors	r2, r3
 80118c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80118c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80118ca:	69d9      	ldr	r1, [r3, #28]
 80118cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80118d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	4019      	ands	r1, r3
 80118d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80118dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80118e0:	6858      	ldr	r0, [r3, #4]
 80118e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80118e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80118ea:	69dc      	ldr	r4, [r3, #28]
 80118ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80118f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	4323      	orrs	r3, r4
 80118f8:	4003      	ands	r3, r0
 80118fa:	430b      	orrs	r3, r1
 80118fc:	4413      	add	r3, r2
 80118fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8011902:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011906:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801190a:	689a      	ldr	r2, [r3, #8]
 801190c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8011910:	441a      	add	r2, r3
 8011912:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011916:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801191a:	609a      	str	r2, [r3, #8]
 801191c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8011920:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011924:	441a      	add	r2, r3
 8011926:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801192a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801192e:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8011930:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011934:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011938:	695a      	ldr	r2, [r3, #20]
 801193a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801193e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011942:	689b      	ldr	r3, [r3, #8]
 8011944:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8011948:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801194c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011950:	689b      	ldr	r3, [r3, #8]
 8011952:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011956:	4059      	eors	r1, r3
 8011958:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801195c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011960:	689b      	ldr	r3, [r3, #8]
 8011962:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011966:	e001      	b.n	801196c <mbedtls_internal_sha256_process+0xe9c>
 8011968:	0801b2b4 	.word	0x0801b2b4
 801196c:	404b      	eors	r3, r1
 801196e:	441a      	add	r2, r3
 8011970:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011974:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011978:	6919      	ldr	r1, [r3, #16]
 801197a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801197e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011982:	6898      	ldr	r0, [r3, #8]
 8011984:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011988:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801198c:	68dc      	ldr	r4, [r3, #12]
 801198e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011992:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011996:	691b      	ldr	r3, [r3, #16]
 8011998:	4063      	eors	r3, r4
 801199a:	4003      	ands	r3, r0
 801199c:	404b      	eors	r3, r1
 801199e:	441a      	add	r2, r3
 80119a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80119a4:	3302      	adds	r3, #2
 80119a6:	49ec      	ldr	r1, [pc, #944]	@ (8011d58 <mbedtls_internal_sha256_process+0x1288>)
 80119a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80119ac:	441a      	add	r2, r3
 80119ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80119b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80119b6:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80119ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80119be:	ea4f 4173 	mov.w	r1, r3, ror #17
 80119c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80119c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80119ca:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80119ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80119d2:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80119d6:	4059      	eors	r1, r3
 80119d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80119dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80119e0:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80119e4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80119e8:	0a9b      	lsrs	r3, r3, #10
 80119ea:	4059      	eors	r1, r3
 80119ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80119f0:	1f58      	subs	r0, r3, #5
 80119f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80119f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80119fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80119fe:	4419      	add	r1, r3
 8011a00:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011a04:	f1a3 000d 	sub.w	r0, r3, #13
 8011a08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011a0c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011a10:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011a14:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8011a18:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011a1c:	f1a3 040d 	sub.w	r4, r3, #13
 8011a20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011a24:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011a28:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011a2c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8011a30:	4058      	eors	r0, r3
 8011a32:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011a36:	f1a3 040d 	sub.w	r4, r3, #13
 8011a3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011a3e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011a42:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011a46:	08db      	lsrs	r3, r3, #3
 8011a48:	4043      	eors	r3, r0
 8011a4a:	18c8      	adds	r0, r1, r3
 8011a4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011a50:	f1a3 010e 	sub.w	r1, r3, #14
 8011a54:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011a58:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011a5c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8011a60:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011a64:	3302      	adds	r3, #2
 8011a66:	4408      	add	r0, r1
 8011a68:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8011a6c:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8011a70:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8011a74:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8011a78:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8011a7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011a80:	4413      	add	r3, r2
 8011a82:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8011a86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011a8a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011a8e:	699b      	ldr	r3, [r3, #24]
 8011a90:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011a94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011a98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011a9c:	699b      	ldr	r3, [r3, #24]
 8011a9e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8011aa2:	405a      	eors	r2, r3
 8011aa4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011aa8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011aac:	699b      	ldr	r3, [r3, #24]
 8011aae:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011ab2:	405a      	eors	r2, r3
 8011ab4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011ab8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011abc:	6999      	ldr	r1, [r3, #24]
 8011abe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011ac2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011ac6:	69db      	ldr	r3, [r3, #28]
 8011ac8:	4019      	ands	r1, r3
 8011aca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011ace:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011ad2:	6818      	ldr	r0, [r3, #0]
 8011ad4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011ad8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011adc:	699c      	ldr	r4, [r3, #24]
 8011ade:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011ae2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011ae6:	69db      	ldr	r3, [r3, #28]
 8011ae8:	4323      	orrs	r3, r4
 8011aea:	4003      	ands	r3, r0
 8011aec:	430b      	orrs	r3, r1
 8011aee:	4413      	add	r3, r2
 8011af0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8011af4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011af8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011afc:	685a      	ldr	r2, [r3, #4]
 8011afe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8011b02:	441a      	add	r2, r3
 8011b04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011b08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011b0c:	605a      	str	r2, [r3, #4]
 8011b0e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8011b12:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011b16:	441a      	add	r2, r3
 8011b18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011b1c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011b20:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8011b22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011b26:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011b2a:	691a      	ldr	r2, [r3, #16]
 8011b2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011b30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011b34:	685b      	ldr	r3, [r3, #4]
 8011b36:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8011b3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011b3e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011b42:	685b      	ldr	r3, [r3, #4]
 8011b44:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011b48:	4059      	eors	r1, r3
 8011b4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011b4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011b52:	685b      	ldr	r3, [r3, #4]
 8011b54:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011b58:	404b      	eors	r3, r1
 8011b5a:	441a      	add	r2, r3
 8011b5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011b60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011b64:	68d9      	ldr	r1, [r3, #12]
 8011b66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011b6a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011b6e:	6858      	ldr	r0, [r3, #4]
 8011b70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011b74:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011b78:	689c      	ldr	r4, [r3, #8]
 8011b7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011b7e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011b82:	68db      	ldr	r3, [r3, #12]
 8011b84:	4063      	eors	r3, r4
 8011b86:	4003      	ands	r3, r0
 8011b88:	404b      	eors	r3, r1
 8011b8a:	441a      	add	r2, r3
 8011b8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011b90:	3303      	adds	r3, #3
 8011b92:	4971      	ldr	r1, [pc, #452]	@ (8011d58 <mbedtls_internal_sha256_process+0x1288>)
 8011b94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011b98:	441a      	add	r2, r3
 8011b9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011b9e:	1c59      	adds	r1, r3, #1
 8011ba0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011ba4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011ba8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011bac:	ea4f 4173 	mov.w	r1, r3, ror #17
 8011bb0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011bb4:	1c58      	adds	r0, r3, #1
 8011bb6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011bba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011bbe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011bc2:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8011bc6:	4059      	eors	r1, r3
 8011bc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011bcc:	1c58      	adds	r0, r3, #1
 8011bce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011bd2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011bd6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011bda:	0a9b      	lsrs	r3, r3, #10
 8011bdc:	4059      	eors	r1, r3
 8011bde:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011be2:	1f18      	subs	r0, r3, #4
 8011be4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011be8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011bec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011bf0:	4419      	add	r1, r3
 8011bf2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011bf6:	f1a3 000c 	sub.w	r0, r3, #12
 8011bfa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011bfe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011c02:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011c06:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8011c0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011c0e:	f1a3 040c 	sub.w	r4, r3, #12
 8011c12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011c16:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011c1a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011c1e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8011c22:	4058      	eors	r0, r3
 8011c24:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011c28:	f1a3 040c 	sub.w	r4, r3, #12
 8011c2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011c30:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011c34:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011c38:	08db      	lsrs	r3, r3, #3
 8011c3a:	4043      	eors	r3, r0
 8011c3c:	18c8      	adds	r0, r1, r3
 8011c3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011c42:	f1a3 010d 	sub.w	r1, r3, #13
 8011c46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011c4a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011c4e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8011c52:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011c56:	3303      	adds	r3, #3
 8011c58:	4408      	add	r0, r1
 8011c5a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8011c5e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8011c62:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8011c66:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8011c6a:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8011c6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011c72:	4413      	add	r3, r2
 8011c74:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8011c78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011c7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011c80:	695b      	ldr	r3, [r3, #20]
 8011c82:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011c86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011c8a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011c8e:	695b      	ldr	r3, [r3, #20]
 8011c90:	ea4f 3373 	mov.w	r3, r3, ror #13
 8011c94:	405a      	eors	r2, r3
 8011c96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011c9a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011c9e:	695b      	ldr	r3, [r3, #20]
 8011ca0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011ca4:	405a      	eors	r2, r3
 8011ca6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011caa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011cae:	6959      	ldr	r1, [r3, #20]
 8011cb0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011cb4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011cb8:	699b      	ldr	r3, [r3, #24]
 8011cba:	4019      	ands	r1, r3
 8011cbc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011cc0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011cc4:	69d8      	ldr	r0, [r3, #28]
 8011cc6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011cca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011cce:	695c      	ldr	r4, [r3, #20]
 8011cd0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011cd4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011cd8:	699b      	ldr	r3, [r3, #24]
 8011cda:	4323      	orrs	r3, r4
 8011cdc:	4003      	ands	r3, r0
 8011cde:	430b      	orrs	r3, r1
 8011ce0:	4413      	add	r3, r2
 8011ce2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8011ce6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011cea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011cee:	681a      	ldr	r2, [r3, #0]
 8011cf0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8011cf4:	441a      	add	r2, r3
 8011cf6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011cfa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011cfe:	601a      	str	r2, [r3, #0]
 8011d00:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8011d04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011d08:	441a      	add	r2, r3
 8011d0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011d0e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011d12:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8011d14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011d18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011d1c:	68da      	ldr	r2, [r3, #12]
 8011d1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011d22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8011d2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011d30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011d3a:	4059      	eors	r1, r3
 8011d3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011d40:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011d4a:	404b      	eors	r3, r1
 8011d4c:	441a      	add	r2, r3
 8011d4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011d52:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011d56:	e001      	b.n	8011d5c <mbedtls_internal_sha256_process+0x128c>
 8011d58:	0801b2b4 	.word	0x0801b2b4
 8011d5c:	6899      	ldr	r1, [r3, #8]
 8011d5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011d62:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011d66:	6818      	ldr	r0, [r3, #0]
 8011d68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011d6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011d70:	685c      	ldr	r4, [r3, #4]
 8011d72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011d76:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011d7a:	689b      	ldr	r3, [r3, #8]
 8011d7c:	4063      	eors	r3, r4
 8011d7e:	4003      	ands	r3, r0
 8011d80:	404b      	eors	r3, r1
 8011d82:	441a      	add	r2, r3
 8011d84:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011d88:	3304      	adds	r3, #4
 8011d8a:	49ec      	ldr	r1, [pc, #944]	@ (801213c <mbedtls_internal_sha256_process+0x166c>)
 8011d8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011d90:	441a      	add	r2, r3
 8011d92:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011d96:	1c99      	adds	r1, r3, #2
 8011d98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011d9c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011da0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011da4:	ea4f 4173 	mov.w	r1, r3, ror #17
 8011da8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011dac:	1c98      	adds	r0, r3, #2
 8011dae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011db2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011db6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011dba:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8011dbe:	4059      	eors	r1, r3
 8011dc0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011dc4:	1c98      	adds	r0, r3, #2
 8011dc6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011dca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011dce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011dd2:	0a9b      	lsrs	r3, r3, #10
 8011dd4:	4059      	eors	r1, r3
 8011dd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011dda:	1ed8      	subs	r0, r3, #3
 8011ddc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011de0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011de4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011de8:	4419      	add	r1, r3
 8011dea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011dee:	f1a3 000b 	sub.w	r0, r3, #11
 8011df2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011df6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011dfa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011dfe:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8011e02:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011e06:	f1a3 040b 	sub.w	r4, r3, #11
 8011e0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011e0e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011e12:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011e16:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8011e1a:	4058      	eors	r0, r3
 8011e1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011e20:	f1a3 040b 	sub.w	r4, r3, #11
 8011e24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011e28:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011e2c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011e30:	08db      	lsrs	r3, r3, #3
 8011e32:	4043      	eors	r3, r0
 8011e34:	18c8      	adds	r0, r1, r3
 8011e36:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011e3a:	f1a3 010c 	sub.w	r1, r3, #12
 8011e3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011e42:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011e46:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8011e4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011e4e:	3304      	adds	r3, #4
 8011e50:	4408      	add	r0, r1
 8011e52:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8011e56:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8011e5a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8011e5e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8011e62:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8011e66:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011e6a:	4413      	add	r3, r2
 8011e6c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8011e70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011e74:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011e78:	691b      	ldr	r3, [r3, #16]
 8011e7a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8011e7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011e82:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011e86:	691b      	ldr	r3, [r3, #16]
 8011e88:	ea4f 3373 	mov.w	r3, r3, ror #13
 8011e8c:	405a      	eors	r2, r3
 8011e8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011e92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011e96:	691b      	ldr	r3, [r3, #16]
 8011e98:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8011e9c:	405a      	eors	r2, r3
 8011e9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011ea2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011ea6:	6919      	ldr	r1, [r3, #16]
 8011ea8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011eac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011eb0:	695b      	ldr	r3, [r3, #20]
 8011eb2:	4019      	ands	r1, r3
 8011eb4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011eb8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011ebc:	6998      	ldr	r0, [r3, #24]
 8011ebe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011ec2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011ec6:	691c      	ldr	r4, [r3, #16]
 8011ec8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011ecc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011ed0:	695b      	ldr	r3, [r3, #20]
 8011ed2:	4323      	orrs	r3, r4
 8011ed4:	4003      	ands	r3, r0
 8011ed6:	430b      	orrs	r3, r1
 8011ed8:	4413      	add	r3, r2
 8011eda:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8011ede:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011ee2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011ee6:	69da      	ldr	r2, [r3, #28]
 8011ee8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8011eec:	441a      	add	r2, r3
 8011eee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011ef2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011ef6:	61da      	str	r2, [r3, #28]
 8011ef8:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8011efc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011f00:	441a      	add	r2, r3
 8011f02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011f06:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011f0a:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8011f0c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011f10:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011f14:	689a      	ldr	r2, [r3, #8]
 8011f16:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011f1a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011f1e:	69db      	ldr	r3, [r3, #28]
 8011f20:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8011f24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011f28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011f2c:	69db      	ldr	r3, [r3, #28]
 8011f2e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8011f32:	4059      	eors	r1, r3
 8011f34:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011f38:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011f3c:	69db      	ldr	r3, [r3, #28]
 8011f3e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8011f42:	404b      	eors	r3, r1
 8011f44:	441a      	add	r2, r3
 8011f46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011f4a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011f4e:	6859      	ldr	r1, [r3, #4]
 8011f50:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011f54:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011f58:	69d8      	ldr	r0, [r3, #28]
 8011f5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011f5e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011f62:	681c      	ldr	r4, [r3, #0]
 8011f64:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011f68:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011f6c:	685b      	ldr	r3, [r3, #4]
 8011f6e:	4063      	eors	r3, r4
 8011f70:	4003      	ands	r3, r0
 8011f72:	404b      	eors	r3, r1
 8011f74:	441a      	add	r2, r3
 8011f76:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011f7a:	3305      	adds	r3, #5
 8011f7c:	496f      	ldr	r1, [pc, #444]	@ (801213c <mbedtls_internal_sha256_process+0x166c>)
 8011f7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011f82:	441a      	add	r2, r3
 8011f84:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011f88:	1cd9      	adds	r1, r3, #3
 8011f8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011f8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011f92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011f96:	ea4f 4173 	mov.w	r1, r3, ror #17
 8011f9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011f9e:	1cd8      	adds	r0, r3, #3
 8011fa0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011fa4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011fa8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011fac:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8011fb0:	4059      	eors	r1, r3
 8011fb2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011fb6:	1cd8      	adds	r0, r3, #3
 8011fb8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011fbc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011fc0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011fc4:	0a9b      	lsrs	r3, r3, #10
 8011fc6:	4059      	eors	r1, r3
 8011fc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011fcc:	1e98      	subs	r0, r3, #2
 8011fce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011fd2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011fd6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011fda:	4419      	add	r1, r3
 8011fdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011fe0:	f1a3 000a 	sub.w	r0, r3, #10
 8011fe4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011fe8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011fec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011ff0:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8011ff4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011ff8:	f1a3 040a 	sub.w	r4, r3, #10
 8011ffc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012000:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8012004:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012008:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801200c:	4058      	eors	r0, r3
 801200e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012012:	f1a3 040a 	sub.w	r4, r3, #10
 8012016:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801201a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801201e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012022:	08db      	lsrs	r3, r3, #3
 8012024:	4043      	eors	r3, r0
 8012026:	18c8      	adds	r0, r1, r3
 8012028:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801202c:	f1a3 010b 	sub.w	r1, r3, #11
 8012030:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012034:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8012038:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 801203c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012040:	3305      	adds	r3, #5
 8012042:	4408      	add	r0, r1
 8012044:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8012048:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 801204c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8012050:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8012054:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8012058:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801205c:	4413      	add	r3, r2
 801205e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8012062:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012066:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801206a:	68db      	ldr	r3, [r3, #12]
 801206c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8012070:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012074:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012078:	68db      	ldr	r3, [r3, #12]
 801207a:	ea4f 3373 	mov.w	r3, r3, ror #13
 801207e:	405a      	eors	r2, r3
 8012080:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012084:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012088:	68db      	ldr	r3, [r3, #12]
 801208a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801208e:	405a      	eors	r2, r3
 8012090:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012094:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012098:	68d9      	ldr	r1, [r3, #12]
 801209a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801209e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80120a2:	691b      	ldr	r3, [r3, #16]
 80120a4:	4019      	ands	r1, r3
 80120a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80120aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80120ae:	6958      	ldr	r0, [r3, #20]
 80120b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80120b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80120b8:	68dc      	ldr	r4, [r3, #12]
 80120ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80120be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80120c2:	691b      	ldr	r3, [r3, #16]
 80120c4:	4323      	orrs	r3, r4
 80120c6:	4003      	ands	r3, r0
 80120c8:	430b      	orrs	r3, r1
 80120ca:	4413      	add	r3, r2
 80120cc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80120d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80120d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80120d8:	699a      	ldr	r2, [r3, #24]
 80120da:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80120de:	441a      	add	r2, r3
 80120e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80120e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80120e8:	619a      	str	r2, [r3, #24]
 80120ea:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80120ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80120f2:	441a      	add	r2, r3
 80120f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80120f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80120fc:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 80120fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012102:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012106:	685a      	ldr	r2, [r3, #4]
 8012108:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801210c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012110:	699b      	ldr	r3, [r3, #24]
 8012112:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8012116:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801211a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801211e:	699b      	ldr	r3, [r3, #24]
 8012120:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8012124:	4059      	eors	r1, r3
 8012126:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801212a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801212e:	699b      	ldr	r3, [r3, #24]
 8012130:	ea4f 6373 	mov.w	r3, r3, ror #25
 8012134:	404b      	eors	r3, r1
 8012136:	441a      	add	r2, r3
 8012138:	e002      	b.n	8012140 <mbedtls_internal_sha256_process+0x1670>
 801213a:	bf00      	nop
 801213c:	0801b2b4 	.word	0x0801b2b4
 8012140:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012144:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012148:	6819      	ldr	r1, [r3, #0]
 801214a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801214e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012152:	6998      	ldr	r0, [r3, #24]
 8012154:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012158:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801215c:	69dc      	ldr	r4, [r3, #28]
 801215e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012162:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	4063      	eors	r3, r4
 801216a:	4003      	ands	r3, r0
 801216c:	404b      	eors	r3, r1
 801216e:	441a      	add	r2, r3
 8012170:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012174:	3306      	adds	r3, #6
 8012176:	49e3      	ldr	r1, [pc, #908]	@ (8012504 <mbedtls_internal_sha256_process+0x1a34>)
 8012178:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801217c:	441a      	add	r2, r3
 801217e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012182:	1d19      	adds	r1, r3, #4
 8012184:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012188:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801218c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012190:	ea4f 4173 	mov.w	r1, r3, ror #17
 8012194:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012198:	1d18      	adds	r0, r3, #4
 801219a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801219e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80121a2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80121a6:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80121aa:	4059      	eors	r1, r3
 80121ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80121b0:	1d18      	adds	r0, r3, #4
 80121b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80121b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80121ba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80121be:	0a9b      	lsrs	r3, r3, #10
 80121c0:	4059      	eors	r1, r3
 80121c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80121c6:	1e58      	subs	r0, r3, #1
 80121c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80121cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80121d0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80121d4:	4419      	add	r1, r3
 80121d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80121da:	f1a3 0009 	sub.w	r0, r3, #9
 80121de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80121e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80121e6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80121ea:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80121ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80121f2:	f1a3 0409 	sub.w	r4, r3, #9
 80121f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80121fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80121fe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012202:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8012206:	4058      	eors	r0, r3
 8012208:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801220c:	f1a3 0409 	sub.w	r4, r3, #9
 8012210:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012214:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8012218:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801221c:	08db      	lsrs	r3, r3, #3
 801221e:	4043      	eors	r3, r0
 8012220:	18c8      	adds	r0, r1, r3
 8012222:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012226:	f1a3 010a 	sub.w	r1, r3, #10
 801222a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801222e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8012232:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8012236:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801223a:	3306      	adds	r3, #6
 801223c:	4408      	add	r0, r1
 801223e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8012242:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8012246:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 801224a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 801224e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8012252:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012256:	4413      	add	r3, r2
 8012258:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 801225c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012260:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012264:	689b      	ldr	r3, [r3, #8]
 8012266:	ea4f 02b3 	mov.w	r2, r3, ror #2
 801226a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801226e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012272:	689b      	ldr	r3, [r3, #8]
 8012274:	ea4f 3373 	mov.w	r3, r3, ror #13
 8012278:	405a      	eors	r2, r3
 801227a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801227e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012282:	689b      	ldr	r3, [r3, #8]
 8012284:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8012288:	405a      	eors	r2, r3
 801228a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801228e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012292:	6899      	ldr	r1, [r3, #8]
 8012294:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012298:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801229c:	68db      	ldr	r3, [r3, #12]
 801229e:	4019      	ands	r1, r3
 80122a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80122a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80122a8:	6918      	ldr	r0, [r3, #16]
 80122aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80122ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80122b2:	689c      	ldr	r4, [r3, #8]
 80122b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80122b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80122bc:	68db      	ldr	r3, [r3, #12]
 80122be:	4323      	orrs	r3, r4
 80122c0:	4003      	ands	r3, r0
 80122c2:	430b      	orrs	r3, r1
 80122c4:	4413      	add	r3, r2
 80122c6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80122ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80122ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80122d2:	695a      	ldr	r2, [r3, #20]
 80122d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80122d8:	441a      	add	r2, r3
 80122da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80122de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80122e2:	615a      	str	r2, [r3, #20]
 80122e4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80122e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80122ec:	441a      	add	r2, r3
 80122ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80122f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80122f6:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 80122f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80122fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012300:	681a      	ldr	r2, [r3, #0]
 8012302:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012306:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801230a:	695b      	ldr	r3, [r3, #20]
 801230c:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8012310:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012314:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012318:	695b      	ldr	r3, [r3, #20]
 801231a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801231e:	4059      	eors	r1, r3
 8012320:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012324:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012328:	695b      	ldr	r3, [r3, #20]
 801232a:	ea4f 6373 	mov.w	r3, r3, ror #25
 801232e:	404b      	eors	r3, r1
 8012330:	441a      	add	r2, r3
 8012332:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012336:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801233a:	69d9      	ldr	r1, [r3, #28]
 801233c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012340:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012344:	6958      	ldr	r0, [r3, #20]
 8012346:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801234a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801234e:	699c      	ldr	r4, [r3, #24]
 8012350:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012354:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012358:	69db      	ldr	r3, [r3, #28]
 801235a:	4063      	eors	r3, r4
 801235c:	4003      	ands	r3, r0
 801235e:	404b      	eors	r3, r1
 8012360:	441a      	add	r2, r3
 8012362:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012366:	3307      	adds	r3, #7
 8012368:	4966      	ldr	r1, [pc, #408]	@ (8012504 <mbedtls_internal_sha256_process+0x1a34>)
 801236a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801236e:	441a      	add	r2, r3
 8012370:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012374:	1d59      	adds	r1, r3, #5
 8012376:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801237a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801237e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012382:	ea4f 4173 	mov.w	r1, r3, ror #17
 8012386:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801238a:	1d58      	adds	r0, r3, #5
 801238c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012390:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8012394:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012398:	ea4f 43f3 	mov.w	r3, r3, ror #19
 801239c:	4059      	eors	r1, r3
 801239e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80123a2:	1d58      	adds	r0, r3, #5
 80123a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80123a8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80123ac:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80123b0:	0a9b      	lsrs	r3, r3, #10
 80123b2:	4059      	eors	r1, r3
 80123b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80123b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80123bc:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80123c0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80123c4:	4419      	add	r1, r3
 80123c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80123ca:	f1a3 0008 	sub.w	r0, r3, #8
 80123ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80123d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80123d6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80123da:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80123de:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80123e2:	f1a3 0408 	sub.w	r4, r3, #8
 80123e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80123ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80123ee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80123f2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80123f6:	4058      	eors	r0, r3
 80123f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80123fc:	f1a3 0408 	sub.w	r4, r3, #8
 8012400:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012404:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8012408:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801240c:	08db      	lsrs	r3, r3, #3
 801240e:	4043      	eors	r3, r0
 8012410:	18c8      	adds	r0, r1, r3
 8012412:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012416:	f1a3 0109 	sub.w	r1, r3, #9
 801241a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801241e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8012422:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8012426:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801242a:	3307      	adds	r3, #7
 801242c:	4408      	add	r0, r1
 801242e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8012432:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8012436:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 801243a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 801243e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8012442:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012446:	4413      	add	r3, r2
 8012448:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 801244c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012450:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012454:	685b      	ldr	r3, [r3, #4]
 8012456:	ea4f 02b3 	mov.w	r2, r3, ror #2
 801245a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801245e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012462:	685b      	ldr	r3, [r3, #4]
 8012464:	ea4f 3373 	mov.w	r3, r3, ror #13
 8012468:	405a      	eors	r2, r3
 801246a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801246e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012472:	685b      	ldr	r3, [r3, #4]
 8012474:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8012478:	405a      	eors	r2, r3
 801247a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801247e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012482:	6859      	ldr	r1, [r3, #4]
 8012484:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012488:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801248c:	689b      	ldr	r3, [r3, #8]
 801248e:	4019      	ands	r1, r3
 8012490:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012494:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012498:	68d8      	ldr	r0, [r3, #12]
 801249a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801249e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80124a2:	685c      	ldr	r4, [r3, #4]
 80124a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80124a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80124ac:	689b      	ldr	r3, [r3, #8]
 80124ae:	4323      	orrs	r3, r4
 80124b0:	4003      	ands	r3, r0
 80124b2:	430b      	orrs	r3, r1
 80124b4:	4413      	add	r3, r2
 80124b6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80124ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80124be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80124c2:	691a      	ldr	r2, [r3, #16]
 80124c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80124c8:	441a      	add	r2, r3
 80124ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80124ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80124d2:	611a      	str	r2, [r3, #16]
 80124d4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80124d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80124dc:	441a      	add	r2, r3
 80124de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80124e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80124e6:	601a      	str	r2, [r3, #0]
    for( i = 16; i < 64; i += 8 )
 80124e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80124ec:	3308      	adds	r3, #8
 80124ee:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80124f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80124f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80124f8:	f67f a828 	bls.w	801154c <mbedtls_internal_sha256_process+0xa7c>
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 80124fc:	2300      	movs	r3, #0
 80124fe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8012502:	e023      	b.n	801254c <mbedtls_internal_sha256_process+0x1a7c>
 8012504:	0801b2b4 	.word	0x0801b2b4
        ctx->state[i] += A[i];
 8012508:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801250c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8012516:	3202      	adds	r2, #2
 8012518:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801251c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012520:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012524:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8012528:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801252c:	18d1      	adds	r1, r2, r3
 801252e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012532:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801253c:	3202      	adds	r2, #2
 801253e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 8012542:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012546:	3301      	adds	r3, #1
 8012548:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 801254c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012550:	2b07      	cmp	r3, #7
 8012552:	d9d9      	bls.n	8012508 <mbedtls_internal_sha256_process+0x1a38>

    return( 0 );
 8012554:	2300      	movs	r3, #0
}
 8012556:	4618      	mov	r0, r3
 8012558:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 801255c:	46bd      	mov	sp, r7
 801255e:	bc90      	pop	{r4, r7}
 8012560:	4770      	bx	lr
 8012562:	bf00      	nop

08012564 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b088      	sub	sp, #32
 8012568:	af00      	add	r7, sp, #0
 801256a:	60f8      	str	r0, [r7, #12]
 801256c:	60b9      	str	r1, [r7, #8]
 801256e:	607a      	str	r2, [r7, #4]
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d101      	bne.n	801257a <mbedtls_sha256_update_ret+0x16>
        return( 0 );
 8012576:	2300      	movs	r3, #0
 8012578:	e065      	b.n	8012646 <mbedtls_sha256_update_ret+0xe2>

    left = ctx->total[0] & 0x3F;
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012582:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 8012584:	69fb      	ldr	r3, [r7, #28]
 8012586:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 801258a:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint32_t) ilen;
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	681a      	ldr	r2, [r3, #0]
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	441a      	add	r2, r3
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	681a      	ldr	r2, [r3, #0]
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	687a      	ldr	r2, [r7, #4]
 80125a6:	429a      	cmp	r2, r3
 80125a8:	d904      	bls.n	80125b4 <mbedtls_sha256_update_ret+0x50>
        ctx->total[1]++;
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	685b      	ldr	r3, [r3, #4]
 80125ae:	1c5a      	adds	r2, r3, #1
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 80125b4:	69fb      	ldr	r3, [r7, #28]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d034      	beq.n	8012624 <mbedtls_sha256_update_ret+0xc0>
 80125ba:	687a      	ldr	r2, [r7, #4]
 80125bc:	69bb      	ldr	r3, [r7, #24]
 80125be:	429a      	cmp	r2, r3
 80125c0:	d330      	bcc.n	8012624 <mbedtls_sha256_update_ret+0xc0>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80125c8:	69fb      	ldr	r3, [r7, #28]
 80125ca:	4413      	add	r3, r2
 80125cc:	69ba      	ldr	r2, [r7, #24]
 80125ce:	68b9      	ldr	r1, [r7, #8]
 80125d0:	4618      	mov	r0, r3
 80125d2:	f004 fbce 	bl	8016d72 <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	3328      	adds	r3, #40	@ 0x28
 80125da:	4619      	mov	r1, r3
 80125dc:	68f8      	ldr	r0, [r7, #12]
 80125de:	f7fe fa77 	bl	8010ad0 <mbedtls_internal_sha256_process>
 80125e2:	6178      	str	r0, [r7, #20]
 80125e4:	697b      	ldr	r3, [r7, #20]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d001      	beq.n	80125ee <mbedtls_sha256_update_ret+0x8a>
            return( ret );
 80125ea:	697b      	ldr	r3, [r7, #20]
 80125ec:	e02b      	b.n	8012646 <mbedtls_sha256_update_ret+0xe2>

        input += fill;
 80125ee:	68ba      	ldr	r2, [r7, #8]
 80125f0:	69bb      	ldr	r3, [r7, #24]
 80125f2:	4413      	add	r3, r2
 80125f4:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 80125f6:	687a      	ldr	r2, [r7, #4]
 80125f8:	69bb      	ldr	r3, [r7, #24]
 80125fa:	1ad3      	subs	r3, r2, r3
 80125fc:	607b      	str	r3, [r7, #4]
        left = 0;
 80125fe:	2300      	movs	r3, #0
 8012600:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 64 )
 8012602:	e00f      	b.n	8012624 <mbedtls_sha256_update_ret+0xc0>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 8012604:	68b9      	ldr	r1, [r7, #8]
 8012606:	68f8      	ldr	r0, [r7, #12]
 8012608:	f7fe fa62 	bl	8010ad0 <mbedtls_internal_sha256_process>
 801260c:	6178      	str	r0, [r7, #20]
 801260e:	697b      	ldr	r3, [r7, #20]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d001      	beq.n	8012618 <mbedtls_sha256_update_ret+0xb4>
            return( ret );
 8012614:	697b      	ldr	r3, [r7, #20]
 8012616:	e016      	b.n	8012646 <mbedtls_sha256_update_ret+0xe2>

        input += 64;
 8012618:	68bb      	ldr	r3, [r7, #8]
 801261a:	3340      	adds	r3, #64	@ 0x40
 801261c:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	3b40      	subs	r3, #64	@ 0x40
 8012622:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	2b3f      	cmp	r3, #63	@ 0x3f
 8012628:	d8ec      	bhi.n	8012604 <mbedtls_sha256_update_ret+0xa0>
    }

    if( ilen > 0 )
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d009      	beq.n	8012644 <mbedtls_sha256_update_ret+0xe0>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8012636:	69fb      	ldr	r3, [r7, #28]
 8012638:	4413      	add	r3, r2
 801263a:	687a      	ldr	r2, [r7, #4]
 801263c:	68b9      	ldr	r1, [r7, #8]
 801263e:	4618      	mov	r0, r3
 8012640:	f004 fb97 	bl	8016d72 <memcpy>

    return( 0 );
 8012644:	2300      	movs	r3, #0
}
 8012646:	4618      	mov	r0, r3
 8012648:	3720      	adds	r7, #32
 801264a:	46bd      	mov	sp, r7
 801264c:	bd80      	pop	{r7, pc}

0801264e <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 801264e:	b580      	push	{r7, lr}
 8012650:	b086      	sub	sp, #24
 8012652:	af00      	add	r7, sp, #0
 8012654:	6078      	str	r0, [r7, #4]
 8012656:	6039      	str	r1, [r7, #0]
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012660:	617b      	str	r3, [r7, #20]

    ctx->buffer[used++] = 0x80;
 8012662:	697b      	ldr	r3, [r7, #20]
 8012664:	1c5a      	adds	r2, r3, #1
 8012666:	617a      	str	r2, [r7, #20]
 8012668:	687a      	ldr	r2, [r7, #4]
 801266a:	4413      	add	r3, r2
 801266c:	2280      	movs	r2, #128	@ 0x80
 801266e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( used <= 56 )
 8012672:	697b      	ldr	r3, [r7, #20]
 8012674:	2b38      	cmp	r3, #56	@ 0x38
 8012676:	d80c      	bhi.n	8012692 <mbedtls_sha256_finish_ret+0x44>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801267e:	697b      	ldr	r3, [r7, #20]
 8012680:	18d0      	adds	r0, r2, r3
 8012682:	697b      	ldr	r3, [r7, #20]
 8012684:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8012688:	461a      	mov	r2, r3
 801268a:	2100      	movs	r1, #0
 801268c:	f004 fa94 	bl	8016bb8 <memset>
 8012690:	e01e      	b.n	80126d0 <mbedtls_sha256_finish_ret+0x82>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8012698:	697b      	ldr	r3, [r7, #20]
 801269a:	18d0      	adds	r0, r2, r3
 801269c:	697b      	ldr	r3, [r7, #20]
 801269e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80126a2:	461a      	mov	r2, r3
 80126a4:	2100      	movs	r1, #0
 80126a6:	f004 fa87 	bl	8016bb8 <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	3328      	adds	r3, #40	@ 0x28
 80126ae:	4619      	mov	r1, r3
 80126b0:	6878      	ldr	r0, [r7, #4]
 80126b2:	f7fe fa0d 	bl	8010ad0 <mbedtls_internal_sha256_process>
 80126b6:	6138      	str	r0, [r7, #16]
 80126b8:	693b      	ldr	r3, [r7, #16]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d001      	beq.n	80126c2 <mbedtls_sha256_finish_ret+0x74>
            return( ret );
 80126be:	693b      	ldr	r3, [r7, #16]
 80126c0:	e128      	b.n	8012914 <mbedtls_sha256_finish_ret+0x2c6>

        memset( ctx->buffer, 0, 56 );
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	3328      	adds	r3, #40	@ 0x28
 80126c6:	2238      	movs	r2, #56	@ 0x38
 80126c8:	2100      	movs	r1, #0
 80126ca:	4618      	mov	r0, r3
 80126cc:	f004 fa74 	bl	8016bb8 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	685b      	ldr	r3, [r3, #4]
 80126da:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 80126dc:	4313      	orrs	r3, r2
 80126de:	60fb      	str	r3, [r7, #12]
    low  = ( ctx->total[0] <<  3 );
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	00db      	lsls	r3, r3, #3
 80126e6:	60bb      	str	r3, [r7, #8]

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	0e1b      	lsrs	r3, r3, #24
 80126ec:	b2da      	uxtb	r2, r3
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	0c1b      	lsrs	r3, r3, #16
 80126f8:	b2da      	uxtb	r2, r3
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	0a1b      	lsrs	r3, r3, #8
 8012704:	b2da      	uxtb	r2, r3
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	b2da      	uxtb	r2, r3
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8012716:	68bb      	ldr	r3, [r7, #8]
 8012718:	0e1b      	lsrs	r3, r3, #24
 801271a:	b2da      	uxtb	r2, r3
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
 8012722:	68bb      	ldr	r3, [r7, #8]
 8012724:	0c1b      	lsrs	r3, r3, #16
 8012726:	b2da      	uxtb	r2, r3
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 801272e:	68bb      	ldr	r3, [r7, #8]
 8012730:	0a1b      	lsrs	r3, r3, #8
 8012732:	b2da      	uxtb	r2, r3
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 801273a:	68bb      	ldr	r3, [r7, #8]
 801273c:	b2da      	uxtb	r2, r3
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	3328      	adds	r3, #40	@ 0x28
 8012748:	4619      	mov	r1, r3
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	f7fe f9c0 	bl	8010ad0 <mbedtls_internal_sha256_process>
 8012750:	6138      	str	r0, [r7, #16]
 8012752:	693b      	ldr	r3, [r7, #16]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d001      	beq.n	801275c <mbedtls_sha256_finish_ret+0x10e>
        return( ret );
 8012758:	693b      	ldr	r3, [r7, #16]
 801275a:	e0db      	b.n	8012914 <mbedtls_sha256_finish_ret+0x2c6>

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	689b      	ldr	r3, [r3, #8]
 8012760:	0e1b      	lsrs	r3, r3, #24
 8012762:	b2da      	uxtb	r2, r3
 8012764:	683b      	ldr	r3, [r7, #0]
 8012766:	701a      	strb	r2, [r3, #0]
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	689b      	ldr	r3, [r3, #8]
 801276c:	0c1a      	lsrs	r2, r3, #16
 801276e:	683b      	ldr	r3, [r7, #0]
 8012770:	3301      	adds	r3, #1
 8012772:	b2d2      	uxtb	r2, r2
 8012774:	701a      	strb	r2, [r3, #0]
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	689b      	ldr	r3, [r3, #8]
 801277a:	0a1a      	lsrs	r2, r3, #8
 801277c:	683b      	ldr	r3, [r7, #0]
 801277e:	3302      	adds	r3, #2
 8012780:	b2d2      	uxtb	r2, r2
 8012782:	701a      	strb	r2, [r3, #0]
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	689a      	ldr	r2, [r3, #8]
 8012788:	683b      	ldr	r3, [r7, #0]
 801278a:	3303      	adds	r3, #3
 801278c:	b2d2      	uxtb	r2, r2
 801278e:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	68db      	ldr	r3, [r3, #12]
 8012794:	0e1a      	lsrs	r2, r3, #24
 8012796:	683b      	ldr	r3, [r7, #0]
 8012798:	3304      	adds	r3, #4
 801279a:	b2d2      	uxtb	r2, r2
 801279c:	701a      	strb	r2, [r3, #0]
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	68db      	ldr	r3, [r3, #12]
 80127a2:	0c1a      	lsrs	r2, r3, #16
 80127a4:	683b      	ldr	r3, [r7, #0]
 80127a6:	3305      	adds	r3, #5
 80127a8:	b2d2      	uxtb	r2, r2
 80127aa:	701a      	strb	r2, [r3, #0]
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	68db      	ldr	r3, [r3, #12]
 80127b0:	0a1a      	lsrs	r2, r3, #8
 80127b2:	683b      	ldr	r3, [r7, #0]
 80127b4:	3306      	adds	r3, #6
 80127b6:	b2d2      	uxtb	r2, r2
 80127b8:	701a      	strb	r2, [r3, #0]
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	68da      	ldr	r2, [r3, #12]
 80127be:	683b      	ldr	r3, [r7, #0]
 80127c0:	3307      	adds	r3, #7
 80127c2:	b2d2      	uxtb	r2, r2
 80127c4:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	691b      	ldr	r3, [r3, #16]
 80127ca:	0e1a      	lsrs	r2, r3, #24
 80127cc:	683b      	ldr	r3, [r7, #0]
 80127ce:	3308      	adds	r3, #8
 80127d0:	b2d2      	uxtb	r2, r2
 80127d2:	701a      	strb	r2, [r3, #0]
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	691b      	ldr	r3, [r3, #16]
 80127d8:	0c1a      	lsrs	r2, r3, #16
 80127da:	683b      	ldr	r3, [r7, #0]
 80127dc:	3309      	adds	r3, #9
 80127de:	b2d2      	uxtb	r2, r2
 80127e0:	701a      	strb	r2, [r3, #0]
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	691b      	ldr	r3, [r3, #16]
 80127e6:	0a1a      	lsrs	r2, r3, #8
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	330a      	adds	r3, #10
 80127ec:	b2d2      	uxtb	r2, r2
 80127ee:	701a      	strb	r2, [r3, #0]
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	691a      	ldr	r2, [r3, #16]
 80127f4:	683b      	ldr	r3, [r7, #0]
 80127f6:	330b      	adds	r3, #11
 80127f8:	b2d2      	uxtb	r2, r2
 80127fa:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	695b      	ldr	r3, [r3, #20]
 8012800:	0e1a      	lsrs	r2, r3, #24
 8012802:	683b      	ldr	r3, [r7, #0]
 8012804:	330c      	adds	r3, #12
 8012806:	b2d2      	uxtb	r2, r2
 8012808:	701a      	strb	r2, [r3, #0]
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	695b      	ldr	r3, [r3, #20]
 801280e:	0c1a      	lsrs	r2, r3, #16
 8012810:	683b      	ldr	r3, [r7, #0]
 8012812:	330d      	adds	r3, #13
 8012814:	b2d2      	uxtb	r2, r2
 8012816:	701a      	strb	r2, [r3, #0]
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	695b      	ldr	r3, [r3, #20]
 801281c:	0a1a      	lsrs	r2, r3, #8
 801281e:	683b      	ldr	r3, [r7, #0]
 8012820:	330e      	adds	r3, #14
 8012822:	b2d2      	uxtb	r2, r2
 8012824:	701a      	strb	r2, [r3, #0]
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	695a      	ldr	r2, [r3, #20]
 801282a:	683b      	ldr	r3, [r7, #0]
 801282c:	330f      	adds	r3, #15
 801282e:	b2d2      	uxtb	r2, r2
 8012830:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	699b      	ldr	r3, [r3, #24]
 8012836:	0e1a      	lsrs	r2, r3, #24
 8012838:	683b      	ldr	r3, [r7, #0]
 801283a:	3310      	adds	r3, #16
 801283c:	b2d2      	uxtb	r2, r2
 801283e:	701a      	strb	r2, [r3, #0]
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	699b      	ldr	r3, [r3, #24]
 8012844:	0c1a      	lsrs	r2, r3, #16
 8012846:	683b      	ldr	r3, [r7, #0]
 8012848:	3311      	adds	r3, #17
 801284a:	b2d2      	uxtb	r2, r2
 801284c:	701a      	strb	r2, [r3, #0]
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	699b      	ldr	r3, [r3, #24]
 8012852:	0a1a      	lsrs	r2, r3, #8
 8012854:	683b      	ldr	r3, [r7, #0]
 8012856:	3312      	adds	r3, #18
 8012858:	b2d2      	uxtb	r2, r2
 801285a:	701a      	strb	r2, [r3, #0]
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	699a      	ldr	r2, [r3, #24]
 8012860:	683b      	ldr	r3, [r7, #0]
 8012862:	3313      	adds	r3, #19
 8012864:	b2d2      	uxtb	r2, r2
 8012866:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	69db      	ldr	r3, [r3, #28]
 801286c:	0e1a      	lsrs	r2, r3, #24
 801286e:	683b      	ldr	r3, [r7, #0]
 8012870:	3314      	adds	r3, #20
 8012872:	b2d2      	uxtb	r2, r2
 8012874:	701a      	strb	r2, [r3, #0]
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	69db      	ldr	r3, [r3, #28]
 801287a:	0c1a      	lsrs	r2, r3, #16
 801287c:	683b      	ldr	r3, [r7, #0]
 801287e:	3315      	adds	r3, #21
 8012880:	b2d2      	uxtb	r2, r2
 8012882:	701a      	strb	r2, [r3, #0]
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	69db      	ldr	r3, [r3, #28]
 8012888:	0a1a      	lsrs	r2, r3, #8
 801288a:	683b      	ldr	r3, [r7, #0]
 801288c:	3316      	adds	r3, #22
 801288e:	b2d2      	uxtb	r2, r2
 8012890:	701a      	strb	r2, [r3, #0]
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	69da      	ldr	r2, [r3, #28]
 8012896:	683b      	ldr	r3, [r7, #0]
 8012898:	3317      	adds	r3, #23
 801289a:	b2d2      	uxtb	r2, r2
 801289c:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	6a1b      	ldr	r3, [r3, #32]
 80128a2:	0e1a      	lsrs	r2, r3, #24
 80128a4:	683b      	ldr	r3, [r7, #0]
 80128a6:	3318      	adds	r3, #24
 80128a8:	b2d2      	uxtb	r2, r2
 80128aa:	701a      	strb	r2, [r3, #0]
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	6a1b      	ldr	r3, [r3, #32]
 80128b0:	0c1a      	lsrs	r2, r3, #16
 80128b2:	683b      	ldr	r3, [r7, #0]
 80128b4:	3319      	adds	r3, #25
 80128b6:	b2d2      	uxtb	r2, r2
 80128b8:	701a      	strb	r2, [r3, #0]
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	6a1b      	ldr	r3, [r3, #32]
 80128be:	0a1a      	lsrs	r2, r3, #8
 80128c0:	683b      	ldr	r3, [r7, #0]
 80128c2:	331a      	adds	r3, #26
 80128c4:	b2d2      	uxtb	r2, r2
 80128c6:	701a      	strb	r2, [r3, #0]
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	6a1a      	ldr	r2, [r3, #32]
 80128cc:	683b      	ldr	r3, [r7, #0]
 80128ce:	331b      	adds	r3, #27
 80128d0:	b2d2      	uxtb	r2, r2
 80128d2:	701a      	strb	r2, [r3, #0]

    if( ctx->is224 == 0 )
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d11a      	bne.n	8012912 <mbedtls_sha256_finish_ret+0x2c4>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128e0:	0e1a      	lsrs	r2, r3, #24
 80128e2:	683b      	ldr	r3, [r7, #0]
 80128e4:	331c      	adds	r3, #28
 80128e6:	b2d2      	uxtb	r2, r2
 80128e8:	701a      	strb	r2, [r3, #0]
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128ee:	0c1a      	lsrs	r2, r3, #16
 80128f0:	683b      	ldr	r3, [r7, #0]
 80128f2:	331d      	adds	r3, #29
 80128f4:	b2d2      	uxtb	r2, r2
 80128f6:	701a      	strb	r2, [r3, #0]
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128fc:	0a1a      	lsrs	r2, r3, #8
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	331e      	adds	r3, #30
 8012902:	b2d2      	uxtb	r2, r2
 8012904:	701a      	strb	r2, [r3, #0]
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	331f      	adds	r3, #31
 801290e:	b2d2      	uxtb	r2, r2
 8012910:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8012912:	2300      	movs	r3, #0
}
 8012914:	4618      	mov	r0, r3
 8012916:	3718      	adds	r7, #24
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}

0801291c <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b0a0      	sub	sp, #128	@ 0x80
 8012920:	af00      	add	r7, sp, #0
 8012922:	60f8      	str	r0, [r7, #12]
 8012924:	60b9      	str	r1, [r7, #8]
 8012926:	607a      	str	r2, [r7, #4]
 8012928:	603b      	str	r3, [r7, #0]

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
 801292a:	f107 0310 	add.w	r3, r7, #16
 801292e:	4618      	mov	r0, r3
 8012930:	f7fe f836 	bl	80109a0 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 8012934:	f107 0310 	add.w	r3, r7, #16
 8012938:	6839      	ldr	r1, [r7, #0]
 801293a:	4618      	mov	r0, r3
 801293c:	f7fe f85e 	bl	80109fc <mbedtls_sha256_starts_ret>
 8012940:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8012942:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012944:	2b00      	cmp	r3, #0
 8012946:	d114      	bne.n	8012972 <mbedtls_sha256_ret+0x56>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 8012948:	f107 0310 	add.w	r3, r7, #16
 801294c:	68ba      	ldr	r2, [r7, #8]
 801294e:	68f9      	ldr	r1, [r7, #12]
 8012950:	4618      	mov	r0, r3
 8012952:	f7ff fe07 	bl	8012564 <mbedtls_sha256_update_ret>
 8012956:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8012958:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801295a:	2b00      	cmp	r3, #0
 801295c:	d10b      	bne.n	8012976 <mbedtls_sha256_ret+0x5a>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 801295e:	f107 0310 	add.w	r3, r7, #16
 8012962:	6879      	ldr	r1, [r7, #4]
 8012964:	4618      	mov	r0, r3
 8012966:	f7ff fe72 	bl	801264e <mbedtls_sha256_finish_ret>
 801296a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801296c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801296e:	2b00      	cmp	r3, #0
        goto exit;

exit:
 8012970:	e002      	b.n	8012978 <mbedtls_sha256_ret+0x5c>
        goto exit;
 8012972:	bf00      	nop
 8012974:	e000      	b.n	8012978 <mbedtls_sha256_ret+0x5c>
        goto exit;
 8012976:	bf00      	nop
    mbedtls_sha256_free( &ctx );
 8012978:	f107 0310 	add.w	r3, r7, #16
 801297c:	4618      	mov	r0, r3
 801297e:	f7fe f81c 	bl	80109ba <mbedtls_sha256_free>

    return( ret );
 8012982:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
}
 8012984:	4618      	mov	r0, r3
 8012986:	3780      	adds	r7, #128	@ 0x80
 8012988:	46bd      	mov	sp, r7
 801298a:	bd80      	pop	{r7, pc}

0801298c <mbedtls_sha512_init>:
    (b)[(i) + 7] = (unsigned char) ( (n)       );       \
}
#endif /* PUT_UINT64_BE */

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
 801298c:	b580      	push	{r7, lr}
 801298e:	b082      	sub	sp, #8
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
    SHA512_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 8012994:	22d8      	movs	r2, #216	@ 0xd8
 8012996:	2100      	movs	r1, #0
 8012998:	6878      	ldr	r0, [r7, #4]
 801299a:	f004 f90d 	bl	8016bb8 <memset>
}
 801299e:	bf00      	nop
 80129a0:	3708      	adds	r7, #8
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}

080129a6 <mbedtls_sha512_free>:

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
 80129a6:	b580      	push	{r7, lr}
 80129a8:	b082      	sub	sp, #8
 80129aa:	af00      	add	r7, sp, #0
 80129ac:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d004      	beq.n	80129be <mbedtls_sha512_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
 80129b4:	21d8      	movs	r1, #216	@ 0xd8
 80129b6:	6878      	ldr	r0, [r7, #4]
 80129b8:	f7fd ffe0 	bl	801097c <mbedtls_platform_zeroize>
 80129bc:	e000      	b.n	80129c0 <mbedtls_sha512_free+0x1a>
        return;
 80129be:	bf00      	nop
}
 80129c0:	3708      	adds	r7, #8
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}

080129c6 <mbedtls_sha512_clone>:

void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
                           const mbedtls_sha512_context *src )
{
 80129c6:	b580      	push	{r7, lr}
 80129c8:	b082      	sub	sp, #8
 80129ca:	af00      	add	r7, sp, #0
 80129cc:	6078      	str	r0, [r7, #4]
 80129ce:	6039      	str	r1, [r7, #0]
    SHA512_VALIDATE( dst != NULL );
    SHA512_VALIDATE( src != NULL );

    *dst = *src;
 80129d0:	687a      	ldr	r2, [r7, #4]
 80129d2:	683b      	ldr	r3, [r7, #0]
 80129d4:	4610      	mov	r0, r2
 80129d6:	4619      	mov	r1, r3
 80129d8:	23d8      	movs	r3, #216	@ 0xd8
 80129da:	461a      	mov	r2, r3
 80129dc:	f004 f9c9 	bl	8016d72 <memcpy>
}
 80129e0:	bf00      	nop
 80129e2:	3708      	adds	r7, #8
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}

080129e8 <mbedtls_sha512_starts_ret>:

/*
 * SHA-512 context setup
 */
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
{
 80129e8:	b480      	push	{r7}
 80129ea:	b083      	sub	sp, #12
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
 80129f0:	6039      	str	r1, [r7, #0]
    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );

    ctx->total[0] = 0;
 80129f2:	6879      	ldr	r1, [r7, #4]
 80129f4:	f04f 0200 	mov.w	r2, #0
 80129f8:	f04f 0300 	mov.w	r3, #0
 80129fc:	e9c1 2300 	strd	r2, r3, [r1]
    ctx->total[1] = 0;
 8012a00:	6879      	ldr	r1, [r7, #4]
 8012a02:	f04f 0200 	mov.w	r2, #0
 8012a06:	f04f 0300 	mov.w	r3, #0
 8012a0a:	e9c1 2302 	strd	r2, r3, [r1, #8]

    if( is384 == 0 )
 8012a0e:	683b      	ldr	r3, [r7, #0]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d130      	bne.n	8012a76 <mbedtls_sha512_starts_ret+0x8e>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
 8012a14:	6879      	ldr	r1, [r7, #4]
 8012a16:	a336      	add	r3, pc, #216	@ (adr r3, 8012af0 <mbedtls_sha512_starts_ret+0x108>)
 8012a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a1c:	e9c1 2304 	strd	r2, r3, [r1, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
 8012a20:	6879      	ldr	r1, [r7, #4]
 8012a22:	a335      	add	r3, pc, #212	@ (adr r3, 8012af8 <mbedtls_sha512_starts_ret+0x110>)
 8012a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a28:	e9c1 2306 	strd	r2, r3, [r1, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
 8012a2c:	6879      	ldr	r1, [r7, #4]
 8012a2e:	a334      	add	r3, pc, #208	@ (adr r3, 8012b00 <mbedtls_sha512_starts_ret+0x118>)
 8012a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a34:	e9c1 2308 	strd	r2, r3, [r1, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
 8012a38:	6879      	ldr	r1, [r7, #4]
 8012a3a:	a333      	add	r3, pc, #204	@ (adr r3, 8012b08 <mbedtls_sha512_starts_ret+0x120>)
 8012a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a40:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
 8012a44:	6879      	ldr	r1, [r7, #4]
 8012a46:	a332      	add	r3, pc, #200	@ (adr r3, 8012b10 <mbedtls_sha512_starts_ret+0x128>)
 8012a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a4c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
 8012a50:	6879      	ldr	r1, [r7, #4]
 8012a52:	a331      	add	r3, pc, #196	@ (adr r3, 8012b18 <mbedtls_sha512_starts_ret+0x130>)
 8012a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a58:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
 8012a5c:	6879      	ldr	r1, [r7, #4]
 8012a5e:	a330      	add	r3, pc, #192	@ (adr r3, 8012b20 <mbedtls_sha512_starts_ret+0x138>)
 8012a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a64:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
 8012a68:	6879      	ldr	r1, [r7, #4]
 8012a6a:	a32f      	add	r3, pc, #188	@ (adr r3, 8012b28 <mbedtls_sha512_starts_ret+0x140>)
 8012a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a70:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
 8012a74:	e02f      	b.n	8012ad6 <mbedtls_sha512_starts_ret+0xee>
    }
    else
    {
        /* SHA-384 */
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
 8012a76:	6879      	ldr	r1, [r7, #4]
 8012a78:	a32d      	add	r3, pc, #180	@ (adr r3, 8012b30 <mbedtls_sha512_starts_ret+0x148>)
 8012a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a7e:	e9c1 2304 	strd	r2, r3, [r1, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
 8012a82:	6879      	ldr	r1, [r7, #4]
 8012a84:	a32c      	add	r3, pc, #176	@ (adr r3, 8012b38 <mbedtls_sha512_starts_ret+0x150>)
 8012a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a8a:	e9c1 2306 	strd	r2, r3, [r1, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
 8012a8e:	6879      	ldr	r1, [r7, #4]
 8012a90:	a32b      	add	r3, pc, #172	@ (adr r3, 8012b40 <mbedtls_sha512_starts_ret+0x158>)
 8012a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a96:	e9c1 2308 	strd	r2, r3, [r1, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
 8012a9a:	6879      	ldr	r1, [r7, #4]
 8012a9c:	a32a      	add	r3, pc, #168	@ (adr r3, 8012b48 <mbedtls_sha512_starts_ret+0x160>)
 8012a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aa2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
 8012aa6:	6879      	ldr	r1, [r7, #4]
 8012aa8:	a329      	add	r3, pc, #164	@ (adr r3, 8012b50 <mbedtls_sha512_starts_ret+0x168>)
 8012aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aae:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
 8012ab2:	6879      	ldr	r1, [r7, #4]
 8012ab4:	a328      	add	r3, pc, #160	@ (adr r3, 8012b58 <mbedtls_sha512_starts_ret+0x170>)
 8012ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aba:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
 8012abe:	6879      	ldr	r1, [r7, #4]
 8012ac0:	a327      	add	r3, pc, #156	@ (adr r3, 8012b60 <mbedtls_sha512_starts_ret+0x178>)
 8012ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ac6:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 8012aca:	6879      	ldr	r1, [r7, #4]
 8012acc:	a326      	add	r3, pc, #152	@ (adr r3, 8012b68 <mbedtls_sha512_starts_ret+0x180>)
 8012ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad2:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    }

    ctx->is384 = is384;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	683a      	ldr	r2, [r7, #0]
 8012ada:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

    return( 0 );
 8012ade:	2300      	movs	r3, #0
}
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	370c      	adds	r7, #12
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aea:	4770      	bx	lr
 8012aec:	f3af 8000 	nop.w
 8012af0:	f3bcc908 	.word	0xf3bcc908
 8012af4:	6a09e667 	.word	0x6a09e667
 8012af8:	84caa73b 	.word	0x84caa73b
 8012afc:	bb67ae85 	.word	0xbb67ae85
 8012b00:	fe94f82b 	.word	0xfe94f82b
 8012b04:	3c6ef372 	.word	0x3c6ef372
 8012b08:	5f1d36f1 	.word	0x5f1d36f1
 8012b0c:	a54ff53a 	.word	0xa54ff53a
 8012b10:	ade682d1 	.word	0xade682d1
 8012b14:	510e527f 	.word	0x510e527f
 8012b18:	2b3e6c1f 	.word	0x2b3e6c1f
 8012b1c:	9b05688c 	.word	0x9b05688c
 8012b20:	fb41bd6b 	.word	0xfb41bd6b
 8012b24:	1f83d9ab 	.word	0x1f83d9ab
 8012b28:	137e2179 	.word	0x137e2179
 8012b2c:	5be0cd19 	.word	0x5be0cd19
 8012b30:	c1059ed8 	.word	0xc1059ed8
 8012b34:	cbbb9d5d 	.word	0xcbbb9d5d
 8012b38:	367cd507 	.word	0x367cd507
 8012b3c:	629a292a 	.word	0x629a292a
 8012b40:	3070dd17 	.word	0x3070dd17
 8012b44:	9159015a 	.word	0x9159015a
 8012b48:	f70e5939 	.word	0xf70e5939
 8012b4c:	152fecd8 	.word	0x152fecd8
 8012b50:	ffc00b31 	.word	0xffc00b31
 8012b54:	67332667 	.word	0x67332667
 8012b58:	68581511 	.word	0x68581511
 8012b5c:	8eb44a87 	.word	0x8eb44a87
 8012b60:	64f98fa7 	.word	0x64f98fa7
 8012b64:	db0c2e0d 	.word	0xdb0c2e0d
 8012b68:	befa4fa4 	.word	0xbefa4fa4
 8012b6c:	47b5481d 	.word	0x47b5481d

08012b70 <mbedtls_internal_sha512_process>:
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] )
{
 8012b70:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8012b74:	f5ad 6d1e 	sub.w	sp, sp, #2528	@ 0x9e0
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8012b7e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8012b82:	6018      	str	r0, [r3, #0]
 8012b84:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8012b88:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8012b8c:	6019      	str	r1, [r3, #0]
        temp1 = (h) + S3(e) + F1((e),(f),(g)) + (K) + (x);      \
        temp2 = S2(a) + F0((a),(b),(c));                        \
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
 8012b8e:	2300      	movs	r3, #0
 8012b90:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
 8012b94:	e11f      	b.n	8012dd6 <mbedtls_internal_sha512_process+0x266>
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 8012b96:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8012b9a:	00db      	lsls	r3, r3, #3
 8012b9c:	461a      	mov	r2, r3
 8012b9e:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8012ba2:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	4413      	add	r3, r2
 8012baa:	781b      	ldrb	r3, [r3, #0]
 8012bac:	b2db      	uxtb	r3, r3
 8012bae:	2200      	movs	r2, #0
 8012bb0:	f8c7 36d0 	str.w	r3, [r7, #1744]	@ 0x6d0
 8012bb4:	f8c7 26d4 	str.w	r2, [r7, #1748]	@ 0x6d4
 8012bb8:	f04f 0000 	mov.w	r0, #0
 8012bbc:	f04f 0100 	mov.w	r1, #0
 8012bc0:	f8d7 36d0 	ldr.w	r3, [r7, #1744]	@ 0x6d0
 8012bc4:	0619      	lsls	r1, r3, #24
 8012bc6:	2000      	movs	r0, #0
 8012bc8:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8012bcc:	00db      	lsls	r3, r3, #3
 8012bce:	1c5a      	adds	r2, r3, #1
 8012bd0:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8012bd4:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	4413      	add	r3, r2
 8012bdc:	781b      	ldrb	r3, [r3, #0]
 8012bde:	b2db      	uxtb	r3, r3
 8012be0:	2200      	movs	r2, #0
 8012be2:	f8c7 36c8 	str.w	r3, [r7, #1736]	@ 0x6c8
 8012be6:	f8c7 26cc 	str.w	r2, [r7, #1740]	@ 0x6cc
 8012bea:	f04f 0200 	mov.w	r2, #0
 8012bee:	f04f 0300 	mov.w	r3, #0
 8012bf2:	f8d7 66c8 	ldr.w	r6, [r7, #1736]	@ 0x6c8
 8012bf6:	0433      	lsls	r3, r6, #16
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	ea40 0602 	orr.w	r6, r0, r2
 8012bfe:	f8c7 66e8 	str.w	r6, [r7, #1768]	@ 0x6e8
 8012c02:	430b      	orrs	r3, r1
 8012c04:	f8c7 36ec 	str.w	r3, [r7, #1772]	@ 0x6ec
 8012c08:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8012c0c:	00db      	lsls	r3, r3, #3
 8012c0e:	1c9a      	adds	r2, r3, #2
 8012c10:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8012c14:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	4413      	add	r3, r2
 8012c1c:	781b      	ldrb	r3, [r3, #0]
 8012c1e:	b2db      	uxtb	r3, r3
 8012c20:	2200      	movs	r2, #0
 8012c22:	f8c7 36c0 	str.w	r3, [r7, #1728]	@ 0x6c0
 8012c26:	f8c7 26c4 	str.w	r2, [r7, #1732]	@ 0x6c4
 8012c2a:	f04f 0200 	mov.w	r2, #0
 8012c2e:	f04f 0300 	mov.w	r3, #0
 8012c32:	f8d7 16c0 	ldr.w	r1, [r7, #1728]	@ 0x6c0
 8012c36:	020b      	lsls	r3, r1, #8
 8012c38:	2200      	movs	r2, #0
 8012c3a:	f8d7 16e8 	ldr.w	r1, [r7, #1768]	@ 0x6e8
 8012c3e:	4311      	orrs	r1, r2
 8012c40:	f8c7 16e0 	str.w	r1, [r7, #1760]	@ 0x6e0
 8012c44:	f8d7 16ec 	ldr.w	r1, [r7, #1772]	@ 0x6ec
 8012c48:	430b      	orrs	r3, r1
 8012c4a:	f8c7 36e4 	str.w	r3, [r7, #1764]	@ 0x6e4
 8012c4e:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8012c52:	00db      	lsls	r3, r3, #3
 8012c54:	1cda      	adds	r2, r3, #3
 8012c56:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8012c5a:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	4413      	add	r3, r2
 8012c62:	781b      	ldrb	r3, [r3, #0]
 8012c64:	b2db      	uxtb	r3, r3
 8012c66:	2200      	movs	r2, #0
 8012c68:	f8c7 36b8 	str.w	r3, [r7, #1720]	@ 0x6b8
 8012c6c:	f8c7 26bc 	str.w	r2, [r7, #1724]	@ 0x6bc
 8012c70:	f04f 0200 	mov.w	r2, #0
 8012c74:	f04f 0300 	mov.w	r3, #0
 8012c78:	f8d7 16b8 	ldr.w	r1, [r7, #1720]	@ 0x6b8
 8012c7c:	000b      	movs	r3, r1
 8012c7e:	2200      	movs	r2, #0
 8012c80:	f8d7 16e0 	ldr.w	r1, [r7, #1760]	@ 0x6e0
 8012c84:	4311      	orrs	r1, r2
 8012c86:	f8c7 16d8 	str.w	r1, [r7, #1752]	@ 0x6d8
 8012c8a:	f8d7 16e4 	ldr.w	r1, [r7, #1764]	@ 0x6e4
 8012c8e:	430b      	orrs	r3, r1
 8012c90:	f8c7 36dc 	str.w	r3, [r7, #1756]	@ 0x6dc
 8012c94:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8012c98:	00db      	lsls	r3, r3, #3
 8012c9a:	1d1a      	adds	r2, r3, #4
 8012c9c:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8012ca0:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	4413      	add	r3, r2
 8012ca8:	781b      	ldrb	r3, [r3, #0]
 8012caa:	b2db      	uxtb	r3, r3
 8012cac:	2200      	movs	r2, #0
 8012cae:	f8c7 36b0 	str.w	r3, [r7, #1712]	@ 0x6b0
 8012cb2:	f8c7 26b4 	str.w	r2, [r7, #1716]	@ 0x6b4
 8012cb6:	f507 63d6 	add.w	r3, r7, #1712	@ 0x6b0
 8012cba:	e9d3 1200 	ldrd	r1, r2, [r3]
 8012cbe:	460b      	mov	r3, r1
 8012cc0:	0a1b      	lsrs	r3, r3, #8
 8012cc2:	f8c7 36ac 	str.w	r3, [r7, #1708]	@ 0x6ac
 8012cc6:	460b      	mov	r3, r1
 8012cc8:	061b      	lsls	r3, r3, #24
 8012cca:	f8c7 36a8 	str.w	r3, [r7, #1704]	@ 0x6a8
 8012cce:	f8d7 36d8 	ldr.w	r3, [r7, #1752]	@ 0x6d8
 8012cd2:	f507 62d5 	add.w	r2, r7, #1704	@ 0x6a8
 8012cd6:	e9d2 0100 	ldrd	r0, r1, [r2]
 8012cda:	4602      	mov	r2, r0
 8012cdc:	ea43 0a02 	orr.w	sl, r3, r2
 8012ce0:	f8d7 36dc 	ldr.w	r3, [r7, #1756]	@ 0x6dc
 8012ce4:	460a      	mov	r2, r1
 8012ce6:	ea43 0b02 	orr.w	fp, r3, r2
 8012cea:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8012cee:	00db      	lsls	r3, r3, #3
 8012cf0:	1d5a      	adds	r2, r3, #5
 8012cf2:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8012cf6:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	4413      	add	r3, r2
 8012cfe:	781b      	ldrb	r3, [r3, #0]
 8012d00:	b2db      	uxtb	r3, r3
 8012d02:	2200      	movs	r2, #0
 8012d04:	f8c7 36f8 	str.w	r3, [r7, #1784]	@ 0x6f8
 8012d08:	f8c7 26fc 	str.w	r2, [r7, #1788]	@ 0x6fc
 8012d0c:	f04f 0200 	mov.w	r2, #0
 8012d10:	f04f 0300 	mov.w	r3, #0
 8012d14:	f8d7 16fc 	ldr.w	r1, [r7, #1788]	@ 0x6fc
 8012d18:	040b      	lsls	r3, r1, #16
 8012d1a:	f8d7 16f8 	ldr.w	r1, [r7, #1784]	@ 0x6f8
 8012d1e:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8012d22:	f8d7 16f8 	ldr.w	r1, [r7, #1784]	@ 0x6f8
 8012d26:	040a      	lsls	r2, r1, #16
 8012d28:	ea4a 0802 	orr.w	r8, sl, r2
 8012d2c:	ea4b 0903 	orr.w	r9, fp, r3
 8012d30:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8012d34:	00db      	lsls	r3, r3, #3
 8012d36:	1d9a      	adds	r2, r3, #6
 8012d38:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8012d3c:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	4413      	add	r3, r2
 8012d44:	781b      	ldrb	r3, [r3, #0]
 8012d46:	b2db      	uxtb	r3, r3
 8012d48:	2200      	movs	r2, #0
 8012d4a:	f8c7 36f0 	str.w	r3, [r7, #1776]	@ 0x6f0
 8012d4e:	f8c7 26f4 	str.w	r2, [r7, #1780]	@ 0x6f4
 8012d52:	f04f 0200 	mov.w	r2, #0
 8012d56:	f04f 0300 	mov.w	r3, #0
 8012d5a:	f8d7 16f4 	ldr.w	r1, [r7, #1780]	@ 0x6f4
 8012d5e:	020b      	lsls	r3, r1, #8
 8012d60:	f8d7 16f0 	ldr.w	r1, [r7, #1776]	@ 0x6f0
 8012d64:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8012d68:	f8d7 16f0 	ldr.w	r1, [r7, #1776]	@ 0x6f0
 8012d6c:	020a      	lsls	r2, r1, #8
 8012d6e:	ea48 0402 	orr.w	r4, r8, r2
 8012d72:	ea49 0503 	orr.w	r5, r9, r3
 8012d76:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8012d7a:	00db      	lsls	r3, r3, #3
 8012d7c:	1dda      	adds	r2, r3, #7
 8012d7e:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8012d82:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	4413      	add	r3, r2
 8012d8a:	781b      	ldrb	r3, [r3, #0]
 8012d8c:	b2db      	uxtb	r3, r3
 8012d8e:	2200      	movs	r2, #0
 8012d90:	f8c7 36a0 	str.w	r3, [r7, #1696]	@ 0x6a0
 8012d94:	f8c7 26a4 	str.w	r2, [r7, #1700]	@ 0x6a4
 8012d98:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8012d9c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8012da0:	460b      	mov	r3, r1
 8012da2:	4323      	orrs	r3, r4
 8012da4:	f8c7 3698 	str.w	r3, [r7, #1688]	@ 0x698
 8012da8:	4613      	mov	r3, r2
 8012daa:	432b      	orrs	r3, r5
 8012dac:	f8c7 369c 	str.w	r3, [r7, #1692]	@ 0x69c
 8012db0:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8012db4:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8012db8:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8012dbc:	00db      	lsls	r3, r3, #3
 8012dbe:	4413      	add	r3, r2
 8012dc0:	f507 62d3 	add.w	r2, r7, #1688	@ 0x698
 8012dc4:	e9d2 1200 	ldrd	r1, r2, [r2]
 8012dc8:	e9c3 1200 	strd	r1, r2, [r3]
    for( i = 0; i < 16; i++ )
 8012dcc:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8012dd0:	3301      	adds	r3, #1
 8012dd2:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
 8012dd6:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8012dda:	2b0f      	cmp	r3, #15
 8012ddc:	f77f aedb 	ble.w	8012b96 <mbedtls_internal_sha512_process+0x26>
    }

    for( ; i < 80; i++ )
 8012de0:	e10e      	b.n	8013000 <mbedtls_internal_sha512_process+0x490>
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
 8012de2:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8012de6:	1e99      	subs	r1, r3, #2
 8012de8:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8012dec:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8012df0:	00cb      	lsls	r3, r1, #3
 8012df2:	4413      	add	r3, r2
 8012df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df8:	0358      	lsls	r0, r3, #13
 8012dfa:	0cd1      	lsrs	r1, r2, #19
 8012dfc:	4301      	orrs	r1, r0
 8012dfe:	f8c7 1690 	str.w	r1, [r7, #1680]	@ 0x690
 8012e02:	0351      	lsls	r1, r2, #13
 8012e04:	0cdb      	lsrs	r3, r3, #19
 8012e06:	430b      	orrs	r3, r1
 8012e08:	f8c7 3694 	str.w	r3, [r7, #1684]	@ 0x694
 8012e0c:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8012e10:	1e99      	subs	r1, r3, #2
 8012e12:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8012e16:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8012e1a:	00cb      	lsls	r3, r1, #3
 8012e1c:	4413      	add	r3, r2
 8012e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e22:	0f50      	lsrs	r0, r2, #29
 8012e24:	00d9      	lsls	r1, r3, #3
 8012e26:	4301      	orrs	r1, r0
 8012e28:	f8c7 168c 	str.w	r1, [r7, #1676]	@ 0x68c
 8012e2c:	0f59      	lsrs	r1, r3, #29
 8012e2e:	00d3      	lsls	r3, r2, #3
 8012e30:	430b      	orrs	r3, r1
 8012e32:	f8c7 3688 	str.w	r3, [r7, #1672]	@ 0x688
 8012e36:	f507 63d2 	add.w	r3, r7, #1680	@ 0x690
 8012e3a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8012e3e:	4623      	mov	r3, r4
 8012e40:	f507 62d1 	add.w	r2, r7, #1672	@ 0x688
 8012e44:	e9d2 0100 	ldrd	r0, r1, [r2]
 8012e48:	4602      	mov	r2, r0
 8012e4a:	4053      	eors	r3, r2
 8012e4c:	f8c7 3680 	str.w	r3, [r7, #1664]	@ 0x680
 8012e50:	462b      	mov	r3, r5
 8012e52:	460a      	mov	r2, r1
 8012e54:	4053      	eors	r3, r2
 8012e56:	f8c7 3684 	str.w	r3, [r7, #1668]	@ 0x684
 8012e5a:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8012e5e:	1e99      	subs	r1, r3, #2
 8012e60:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8012e64:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8012e68:	00cb      	lsls	r3, r1, #3
 8012e6a:	4413      	add	r3, r2
 8012e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e70:	f04f 0000 	mov.w	r0, #0
 8012e74:	f04f 0100 	mov.w	r1, #0
 8012e78:	0990      	lsrs	r0, r2, #6
 8012e7a:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8012e7e:	0999      	lsrs	r1, r3, #6
 8012e80:	f507 63d0 	add.w	r3, r7, #1664	@ 0x680
 8012e84:	e9d3 4500 	ldrd	r4, r5, [r3]
 8012e88:	4623      	mov	r3, r4
 8012e8a:	4043      	eors	r3, r0
 8012e8c:	f8c7 3678 	str.w	r3, [r7, #1656]	@ 0x678
 8012e90:	462b      	mov	r3, r5
 8012e92:	404b      	eors	r3, r1
 8012e94:	f8c7 367c 	str.w	r3, [r7, #1660]	@ 0x67c
 8012e98:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8012e9c:	1fd9      	subs	r1, r3, #7
 8012e9e:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8012ea2:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8012ea6:	00cb      	lsls	r3, r1, #3
 8012ea8:	4413      	add	r3, r2
 8012eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eae:	f507 61cf 	add.w	r1, r7, #1656	@ 0x678
 8012eb2:	e9d1 4500 	ldrd	r4, r5, [r1]
 8012eb6:	4621      	mov	r1, r4
 8012eb8:	1889      	adds	r1, r1, r2
 8012eba:	f8c7 1670 	str.w	r1, [r7, #1648]	@ 0x670
 8012ebe:	4629      	mov	r1, r5
 8012ec0:	eb41 0303 	adc.w	r3, r1, r3
 8012ec4:	f8c7 3674 	str.w	r3, [r7, #1652]	@ 0x674
               S0(W[i - 15]) + W[i - 16];
 8012ec8:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8012ecc:	f1a3 010f 	sub.w	r1, r3, #15
 8012ed0:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8012ed4:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8012ed8:	00cb      	lsls	r3, r1, #3
 8012eda:	4413      	add	r3, r2
 8012edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee0:	07d8      	lsls	r0, r3, #31
 8012ee2:	0851      	lsrs	r1, r2, #1
 8012ee4:	4301      	orrs	r1, r0
 8012ee6:	f8c7 1668 	str.w	r1, [r7, #1640]	@ 0x668
 8012eea:	07d1      	lsls	r1, r2, #31
 8012eec:	085b      	lsrs	r3, r3, #1
 8012eee:	430b      	orrs	r3, r1
 8012ef0:	f8c7 366c 	str.w	r3, [r7, #1644]	@ 0x66c
 8012ef4:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8012ef8:	f1a3 010f 	sub.w	r1, r3, #15
 8012efc:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8012f00:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8012f04:	00cb      	lsls	r3, r1, #3
 8012f06:	4413      	add	r3, r2
 8012f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f0c:	0618      	lsls	r0, r3, #24
 8012f0e:	0a11      	lsrs	r1, r2, #8
 8012f10:	4301      	orrs	r1, r0
 8012f12:	f8c7 1660 	str.w	r1, [r7, #1632]	@ 0x660
 8012f16:	0611      	lsls	r1, r2, #24
 8012f18:	0a1b      	lsrs	r3, r3, #8
 8012f1a:	430b      	orrs	r3, r1
 8012f1c:	f8c7 3664 	str.w	r3, [r7, #1636]	@ 0x664
 8012f20:	f507 63cd 	add.w	r3, r7, #1640	@ 0x668
 8012f24:	e9d3 4500 	ldrd	r4, r5, [r3]
 8012f28:	4623      	mov	r3, r4
 8012f2a:	f507 62cc 	add.w	r2, r7, #1632	@ 0x660
 8012f2e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8012f32:	4602      	mov	r2, r0
 8012f34:	4053      	eors	r3, r2
 8012f36:	f8c7 3658 	str.w	r3, [r7, #1624]	@ 0x658
 8012f3a:	462b      	mov	r3, r5
 8012f3c:	460a      	mov	r2, r1
 8012f3e:	4053      	eors	r3, r2
 8012f40:	f8c7 365c 	str.w	r3, [r7, #1628]	@ 0x65c
 8012f44:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8012f48:	f1a3 010f 	sub.w	r1, r3, #15
 8012f4c:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8012f50:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8012f54:	00cb      	lsls	r3, r1, #3
 8012f56:	4413      	add	r3, r2
 8012f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f5c:	f04f 0000 	mov.w	r0, #0
 8012f60:	f04f 0100 	mov.w	r1, #0
 8012f64:	09d0      	lsrs	r0, r2, #7
 8012f66:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8012f6a:	09d9      	lsrs	r1, r3, #7
 8012f6c:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8012f70:	e9d3 4500 	ldrd	r4, r5, [r3]
 8012f74:	4623      	mov	r3, r4
 8012f76:	4043      	eors	r3, r0
 8012f78:	f8c7 3650 	str.w	r3, [r7, #1616]	@ 0x650
 8012f7c:	462b      	mov	r3, r5
 8012f7e:	404b      	eors	r3, r1
 8012f80:	f8c7 3654 	str.w	r3, [r7, #1620]	@ 0x654
        W[i] = S1(W[i -  2]) + W[i -  7] +
 8012f84:	f507 63ce 	add.w	r3, r7, #1648	@ 0x670
 8012f88:	e9d3 4500 	ldrd	r4, r5, [r3]
 8012f8c:	4623      	mov	r3, r4
 8012f8e:	f507 62ca 	add.w	r2, r7, #1616	@ 0x650
 8012f92:	e9d2 0100 	ldrd	r0, r1, [r2]
 8012f96:	4602      	mov	r2, r0
 8012f98:	189b      	adds	r3, r3, r2
 8012f9a:	f8c7 3648 	str.w	r3, [r7, #1608]	@ 0x648
 8012f9e:	462b      	mov	r3, r5
 8012fa0:	460a      	mov	r2, r1
 8012fa2:	4153      	adcs	r3, r2
 8012fa4:	f8c7 364c 	str.w	r3, [r7, #1612]	@ 0x64c
               S0(W[i - 15]) + W[i - 16];
 8012fa8:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8012fac:	f1a3 0110 	sub.w	r1, r3, #16
 8012fb0:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8012fb4:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8012fb8:	00cb      	lsls	r3, r1, #3
 8012fba:	4413      	add	r3, r2
 8012fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fc0:	f507 61c9 	add.w	r1, r7, #1608	@ 0x648
 8012fc4:	e9d1 4500 	ldrd	r4, r5, [r1]
 8012fc8:	4621      	mov	r1, r4
 8012fca:	1889      	adds	r1, r1, r2
 8012fcc:	f8c7 1640 	str.w	r1, [r7, #1600]	@ 0x640
 8012fd0:	4629      	mov	r1, r5
 8012fd2:	eb41 0303 	adc.w	r3, r1, r3
 8012fd6:	f8c7 3644 	str.w	r3, [r7, #1604]	@ 0x644
        W[i] = S1(W[i -  2]) + W[i -  7] +
 8012fda:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8012fde:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8012fe2:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8012fe6:	00db      	lsls	r3, r3, #3
 8012fe8:	4413      	add	r3, r2
 8012fea:	f507 62c8 	add.w	r2, r7, #1600	@ 0x640
 8012fee:	e9d2 1200 	ldrd	r1, r2, [r2]
 8012ff2:	e9c3 1200 	strd	r1, r2, [r3]
    for( ; i < 80; i++ )
 8012ff6:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8012ffa:	3301      	adds	r3, #1
 8012ffc:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
 8013000:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8013004:	2b4f      	cmp	r3, #79	@ 0x4f
 8013006:	f77f aeec 	ble.w	8012de2 <mbedtls_internal_sha512_process+0x272>
    }

    A = ctx->state[0];
 801300a:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 801300e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8013018:	f507 611d 	add.w	r1, r7, #2512	@ 0x9d0
 801301c:	e9c1 2300 	strd	r2, r3, [r1]
    B = ctx->state[1];
 8013020:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8013024:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801302e:	f607 11c8 	addw	r1, r7, #2504	@ 0x9c8
 8013032:	e9c1 2300 	strd	r2, r3, [r1]
    C = ctx->state[2];
 8013036:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 801303a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013044:	f507 611c 	add.w	r1, r7, #2496	@ 0x9c0
 8013048:	e9c1 2300 	strd	r2, r3, [r1]
    D = ctx->state[3];
 801304c:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8013050:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 801305a:	f607 11b8 	addw	r1, r7, #2488	@ 0x9b8
 801305e:	e9c1 2300 	strd	r2, r3, [r1]
    E = ctx->state[4];
 8013062:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8013066:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8013070:	f507 611b 	add.w	r1, r7, #2480	@ 0x9b0
 8013074:	e9c1 2300 	strd	r2, r3, [r1]
    F = ctx->state[5];
 8013078:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 801307c:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8013086:	f607 11a8 	addw	r1, r7, #2472	@ 0x9a8
 801308a:	e9c1 2300 	strd	r2, r3, [r1]
    G = ctx->state[6];
 801308e:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8013092:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 801309c:	f507 611a 	add.w	r1, r7, #2464	@ 0x9a0
 80130a0:	e9c1 2300 	strd	r2, r3, [r1]
    H = ctx->state[7];
 80130a4:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 80130a8:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80130b2:	f607 1198 	addw	r1, r7, #2456	@ 0x998
 80130b6:	e9c1 2300 	strd	r2, r3, [r1]
    i = 0;
 80130ba:	2300      	movs	r3, #0
 80130bc:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 80130c0:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 80130c4:	049a      	lsls	r2, r3, #18
 80130c6:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 80130ca:	0b9b      	lsrs	r3, r3, #14
 80130cc:	4313      	orrs	r3, r2
 80130ce:	f8c7 3638 	str.w	r3, [r7, #1592]	@ 0x638
 80130d2:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 80130d6:	049a      	lsls	r2, r3, #18
 80130d8:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 80130dc:	0b9b      	lsrs	r3, r3, #14
 80130de:	4313      	orrs	r3, r2
 80130e0:	f8c7 363c 	str.w	r3, [r7, #1596]	@ 0x63c
 80130e4:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 80130e8:	039a      	lsls	r2, r3, #14
 80130ea:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 80130ee:	0c9b      	lsrs	r3, r3, #18
 80130f0:	4313      	orrs	r3, r2
 80130f2:	f8c7 3630 	str.w	r3, [r7, #1584]	@ 0x630
 80130f6:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 80130fa:	039a      	lsls	r2, r3, #14
 80130fc:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 8013100:	0c9b      	lsrs	r3, r3, #18
 8013102:	4313      	orrs	r3, r2
 8013104:	f8c7 3634 	str.w	r3, [r7, #1588]	@ 0x634
 8013108:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 801310c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013110:	4623      	mov	r3, r4
 8013112:	f507 62c6 	add.w	r2, r7, #1584	@ 0x630
 8013116:	e9d2 0100 	ldrd	r0, r1, [r2]
 801311a:	4602      	mov	r2, r0
 801311c:	4053      	eors	r3, r2
 801311e:	f8c7 3628 	str.w	r3, [r7, #1576]	@ 0x628
 8013122:	462b      	mov	r3, r5
 8013124:	460a      	mov	r2, r1
 8013126:	4053      	eors	r3, r2
 8013128:	f8c7 362c 	str.w	r3, [r7, #1580]	@ 0x62c
 801312c:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 8013130:	0a5a      	lsrs	r2, r3, #9
 8013132:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 8013136:	05db      	lsls	r3, r3, #23
 8013138:	4313      	orrs	r3, r2
 801313a:	f8c7 3624 	str.w	r3, [r7, #1572]	@ 0x624
 801313e:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 8013142:	0a5a      	lsrs	r2, r3, #9
 8013144:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 8013148:	05db      	lsls	r3, r3, #23
 801314a:	4313      	orrs	r3, r2
 801314c:	f8c7 3620 	str.w	r3, [r7, #1568]	@ 0x620
 8013150:	f507 63c5 	add.w	r3, r7, #1576	@ 0x628
 8013154:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013158:	4623      	mov	r3, r4
 801315a:	f507 62c4 	add.w	r2, r7, #1568	@ 0x620
 801315e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8013162:	4602      	mov	r2, r0
 8013164:	4053      	eors	r3, r2
 8013166:	f8c7 3618 	str.w	r3, [r7, #1560]	@ 0x618
 801316a:	462b      	mov	r3, r5
 801316c:	460a      	mov	r2, r1
 801316e:	4053      	eors	r3, r2
 8013170:	f8c7 361c 	str.w	r3, [r7, #1564]	@ 0x61c
 8013174:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 8013178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801317c:	f507 61c3 	add.w	r1, r7, #1560	@ 0x618
 8013180:	e9d1 4500 	ldrd	r4, r5, [r1]
 8013184:	4621      	mov	r1, r4
 8013186:	1889      	adds	r1, r1, r2
 8013188:	f8c7 1610 	str.w	r1, [r7, #1552]	@ 0x610
 801318c:	4629      	mov	r1, r5
 801318e:	eb41 0303 	adc.w	r3, r1, r3
 8013192:	f8c7 3614 	str.w	r3, [r7, #1556]	@ 0x614
 8013196:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 801319a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801319e:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 80131a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131a6:	ea80 0402 	eor.w	r4, r0, r2
 80131aa:	f8c7 4608 	str.w	r4, [r7, #1544]	@ 0x608
 80131ae:	404b      	eors	r3, r1
 80131b0:	f8c7 360c 	str.w	r3, [r7, #1548]	@ 0x60c
 80131b4:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 80131b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131bc:	f507 61c1 	add.w	r1, r7, #1544	@ 0x608
 80131c0:	e9d1 4500 	ldrd	r4, r5, [r1]
 80131c4:	4621      	mov	r1, r4
 80131c6:	4011      	ands	r1, r2
 80131c8:	f8c7 1600 	str.w	r1, [r7, #1536]	@ 0x600
 80131cc:	4629      	mov	r1, r5
 80131ce:	400b      	ands	r3, r1
 80131d0:	f8c7 3604 	str.w	r3, [r7, #1540]	@ 0x604
 80131d4:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 80131d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131dc:	f507 61c0 	add.w	r1, r7, #1536	@ 0x600
 80131e0:	e9d1 4500 	ldrd	r4, r5, [r1]
 80131e4:	4621      	mov	r1, r4
 80131e6:	4051      	eors	r1, r2
 80131e8:	f8c7 15f8 	str.w	r1, [r7, #1528]	@ 0x5f8
 80131ec:	4629      	mov	r1, r5
 80131ee:	404b      	eors	r3, r1
 80131f0:	f8c7 35fc 	str.w	r3, [r7, #1532]	@ 0x5fc
 80131f4:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 80131f8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80131fc:	4623      	mov	r3, r4
 80131fe:	f507 62bf 	add.w	r2, r7, #1528	@ 0x5f8
 8013202:	e9d2 0100 	ldrd	r0, r1, [r2]
 8013206:	4602      	mov	r2, r0
 8013208:	189b      	adds	r3, r3, r2
 801320a:	f8c7 35f0 	str.w	r3, [r7, #1520]	@ 0x5f0
 801320e:	462b      	mov	r3, r5
 8013210:	460a      	mov	r2, r1
 8013212:	4153      	adcs	r3, r2
 8013214:	f8c7 35f4 	str.w	r3, [r7, #1524]	@ 0x5f4
 8013218:	4afc      	ldr	r2, [pc, #1008]	@ (801360c <mbedtls_internal_sha512_process+0xa9c>)
 801321a:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 801321e:	00db      	lsls	r3, r3, #3
 8013220:	4413      	add	r3, r2
 8013222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013226:	f507 61be 	add.w	r1, r7, #1520	@ 0x5f0
 801322a:	e9d1 4500 	ldrd	r4, r5, [r1]
 801322e:	4621      	mov	r1, r4
 8013230:	1889      	adds	r1, r1, r2
 8013232:	f8c7 15e8 	str.w	r1, [r7, #1512]	@ 0x5e8
 8013236:	4629      	mov	r1, r5
 8013238:	eb41 0303 	adc.w	r3, r1, r3
 801323c:	f8c7 35ec 	str.w	r3, [r7, #1516]	@ 0x5ec
 8013240:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8013244:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8013248:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 801324c:	00db      	lsls	r3, r3, #3
 801324e:	4413      	add	r3, r2
 8013250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013254:	f507 61bd 	add.w	r1, r7, #1512	@ 0x5e8
 8013258:	e9d1 4500 	ldrd	r4, r5, [r1]
 801325c:	4621      	mov	r1, r4
 801325e:	1889      	adds	r1, r1, r2
 8013260:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8013264:	4629      	mov	r1, r5
 8013266:	eb41 0303 	adc.w	r3, r1, r3
 801326a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801326e:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 8013272:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 8013276:	e9c2 3400 	strd	r3, r4, [r2]
 801327a:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 801327e:	011a      	lsls	r2, r3, #4
 8013280:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 8013284:	0f1b      	lsrs	r3, r3, #28
 8013286:	4313      	orrs	r3, r2
 8013288:	f8c7 35e0 	str.w	r3, [r7, #1504]	@ 0x5e0
 801328c:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 8013290:	011a      	lsls	r2, r3, #4
 8013292:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 8013296:	0f1b      	lsrs	r3, r3, #28
 8013298:	4313      	orrs	r3, r2
 801329a:	f8c7 35e4 	str.w	r3, [r7, #1508]	@ 0x5e4
 801329e:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 80132a2:	089a      	lsrs	r2, r3, #2
 80132a4:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 80132a8:	079b      	lsls	r3, r3, #30
 80132aa:	4313      	orrs	r3, r2
 80132ac:	f8c7 35dc 	str.w	r3, [r7, #1500]	@ 0x5dc
 80132b0:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 80132b4:	089a      	lsrs	r2, r3, #2
 80132b6:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 80132ba:	079b      	lsls	r3, r3, #30
 80132bc:	4313      	orrs	r3, r2
 80132be:	f8c7 35d8 	str.w	r3, [r7, #1496]	@ 0x5d8
 80132c2:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80132c6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80132ca:	4623      	mov	r3, r4
 80132cc:	f507 62bb 	add.w	r2, r7, #1496	@ 0x5d8
 80132d0:	e9d2 0100 	ldrd	r0, r1, [r2]
 80132d4:	4602      	mov	r2, r0
 80132d6:	4053      	eors	r3, r2
 80132d8:	f8c7 35d0 	str.w	r3, [r7, #1488]	@ 0x5d0
 80132dc:	462b      	mov	r3, r5
 80132de:	460a      	mov	r2, r1
 80132e0:	4053      	eors	r3, r2
 80132e2:	f8c7 35d4 	str.w	r3, [r7, #1492]	@ 0x5d4
 80132e6:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 80132ea:	09da      	lsrs	r2, r3, #7
 80132ec:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 80132f0:	065b      	lsls	r3, r3, #25
 80132f2:	4313      	orrs	r3, r2
 80132f4:	f8c7 35cc 	str.w	r3, [r7, #1484]	@ 0x5cc
 80132f8:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 80132fc:	09da      	lsrs	r2, r3, #7
 80132fe:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 8013302:	065b      	lsls	r3, r3, #25
 8013304:	4313      	orrs	r3, r2
 8013306:	f8c7 35c8 	str.w	r3, [r7, #1480]	@ 0x5c8
 801330a:	f507 63ba 	add.w	r3, r7, #1488	@ 0x5d0
 801330e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013312:	4623      	mov	r3, r4
 8013314:	f507 62b9 	add.w	r2, r7, #1480	@ 0x5c8
 8013318:	e9d2 0100 	ldrd	r0, r1, [r2]
 801331c:	4602      	mov	r2, r0
 801331e:	4053      	eors	r3, r2
 8013320:	f8c7 35c0 	str.w	r3, [r7, #1472]	@ 0x5c0
 8013324:	462b      	mov	r3, r5
 8013326:	460a      	mov	r2, r1
 8013328:	4053      	eors	r3, r2
 801332a:	f8c7 35c4 	str.w	r3, [r7, #1476]	@ 0x5c4
 801332e:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8013332:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013336:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 801333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801333e:	ea00 0402 	and.w	r4, r0, r2
 8013342:	f8c7 45b8 	str.w	r4, [r7, #1464]	@ 0x5b8
 8013346:	400b      	ands	r3, r1
 8013348:	f8c7 35bc 	str.w	r3, [r7, #1468]	@ 0x5bc
 801334c:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8013350:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013354:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 8013358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801335c:	ea40 0402 	orr.w	r4, r0, r2
 8013360:	f8c7 45b0 	str.w	r4, [r7, #1456]	@ 0x5b0
 8013364:	430b      	orrs	r3, r1
 8013366:	f8c7 35b4 	str.w	r3, [r7, #1460]	@ 0x5b4
 801336a:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 801336e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013372:	f507 61b6 	add.w	r1, r7, #1456	@ 0x5b0
 8013376:	e9d1 4500 	ldrd	r4, r5, [r1]
 801337a:	4621      	mov	r1, r4
 801337c:	4011      	ands	r1, r2
 801337e:	f8c7 15a8 	str.w	r1, [r7, #1448]	@ 0x5a8
 8013382:	4629      	mov	r1, r5
 8013384:	400b      	ands	r3, r1
 8013386:	f8c7 35ac 	str.w	r3, [r7, #1452]	@ 0x5ac
 801338a:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 801338e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013392:	4623      	mov	r3, r4
 8013394:	f507 62b5 	add.w	r2, r7, #1448	@ 0x5a8
 8013398:	e9d2 0100 	ldrd	r0, r1, [r2]
 801339c:	4602      	mov	r2, r0
 801339e:	4313      	orrs	r3, r2
 80133a0:	f8c7 35a0 	str.w	r3, [r7, #1440]	@ 0x5a0
 80133a4:	462b      	mov	r3, r5
 80133a6:	460a      	mov	r2, r1
 80133a8:	4313      	orrs	r3, r2
 80133aa:	f8c7 35a4 	str.w	r3, [r7, #1444]	@ 0x5a4
 80133ae:	f507 63b8 	add.w	r3, r7, #1472	@ 0x5c0
 80133b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80133b6:	4623      	mov	r3, r4
 80133b8:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
 80133bc:	e9d2 0100 	ldrd	r0, r1, [r2]
 80133c0:	4602      	mov	r2, r0
 80133c2:	189b      	adds	r3, r3, r2
 80133c4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80133c8:	462b      	mov	r3, r5
 80133ca:	460a      	mov	r2, r1
 80133cc:	4153      	adcs	r3, r2
 80133ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80133d2:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 80133d6:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 80133da:	e9c2 3400 	strd	r3, r4, [r2]
 80133de:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 80133e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80133e6:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 80133ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ee:	1884      	adds	r4, r0, r2
 80133f0:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 80133f4:	eb41 0303 	adc.w	r3, r1, r3
 80133f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80133fc:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 8013400:	f607 12b8 	addw	r2, r7, #2488	@ 0x9b8
 8013404:	e9c2 3400 	strd	r3, r4, [r2]
 8013408:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 801340c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013410:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 8013414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013418:	1884      	adds	r4, r0, r2
 801341a:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 801341e:	eb41 0303 	adc.w	r3, r1, r3
 8013422:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8013426:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 801342a:	f607 1298 	addw	r2, r7, #2456	@ 0x998
 801342e:	e9c2 3400 	strd	r3, r4, [r2]
 8013432:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8013436:	3301      	adds	r3, #1
 8013438:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 801343c:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 8013440:	049a      	lsls	r2, r3, #18
 8013442:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 8013446:	0b9b      	lsrs	r3, r3, #14
 8013448:	4313      	orrs	r3, r2
 801344a:	f8c7 3598 	str.w	r3, [r7, #1432]	@ 0x598
 801344e:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 8013452:	049a      	lsls	r2, r3, #18
 8013454:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 8013458:	0b9b      	lsrs	r3, r3, #14
 801345a:	4313      	orrs	r3, r2
 801345c:	f8c7 359c 	str.w	r3, [r7, #1436]	@ 0x59c
 8013460:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 8013464:	039a      	lsls	r2, r3, #14
 8013466:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 801346a:	0c9b      	lsrs	r3, r3, #18
 801346c:	4313      	orrs	r3, r2
 801346e:	f8c7 3590 	str.w	r3, [r7, #1424]	@ 0x590
 8013472:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 8013476:	039a      	lsls	r2, r3, #14
 8013478:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 801347c:	0c9b      	lsrs	r3, r3, #18
 801347e:	4313      	orrs	r3, r2
 8013480:	f8c7 3594 	str.w	r3, [r7, #1428]	@ 0x594
 8013484:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8013488:	e9d3 4500 	ldrd	r4, r5, [r3]
 801348c:	4623      	mov	r3, r4
 801348e:	f507 62b2 	add.w	r2, r7, #1424	@ 0x590
 8013492:	e9d2 0100 	ldrd	r0, r1, [r2]
 8013496:	4602      	mov	r2, r0
 8013498:	4053      	eors	r3, r2
 801349a:	f8c7 3588 	str.w	r3, [r7, #1416]	@ 0x588
 801349e:	462b      	mov	r3, r5
 80134a0:	460a      	mov	r2, r1
 80134a2:	4053      	eors	r3, r2
 80134a4:	f8c7 358c 	str.w	r3, [r7, #1420]	@ 0x58c
 80134a8:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 80134ac:	0a5a      	lsrs	r2, r3, #9
 80134ae:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 80134b2:	05db      	lsls	r3, r3, #23
 80134b4:	4313      	orrs	r3, r2
 80134b6:	f8c7 3584 	str.w	r3, [r7, #1412]	@ 0x584
 80134ba:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 80134be:	0a5a      	lsrs	r2, r3, #9
 80134c0:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 80134c4:	05db      	lsls	r3, r3, #23
 80134c6:	4313      	orrs	r3, r2
 80134c8:	f8c7 3580 	str.w	r3, [r7, #1408]	@ 0x580
 80134cc:	f507 63b1 	add.w	r3, r7, #1416	@ 0x588
 80134d0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80134d4:	4623      	mov	r3, r4
 80134d6:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
 80134da:	e9d2 0100 	ldrd	r0, r1, [r2]
 80134de:	4602      	mov	r2, r0
 80134e0:	4053      	eors	r3, r2
 80134e2:	f8c7 3578 	str.w	r3, [r7, #1400]	@ 0x578
 80134e6:	462b      	mov	r3, r5
 80134e8:	460a      	mov	r2, r1
 80134ea:	4053      	eors	r3, r2
 80134ec:	f8c7 357c 	str.w	r3, [r7, #1404]	@ 0x57c
 80134f0:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 80134f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134f8:	f507 61af 	add.w	r1, r7, #1400	@ 0x578
 80134fc:	e9d1 4500 	ldrd	r4, r5, [r1]
 8013500:	4621      	mov	r1, r4
 8013502:	1889      	adds	r1, r1, r2
 8013504:	f8c7 1570 	str.w	r1, [r7, #1392]	@ 0x570
 8013508:	4629      	mov	r1, r5
 801350a:	eb41 0303 	adc.w	r3, r1, r3
 801350e:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574
 8013512:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 8013516:	e9d3 0100 	ldrd	r0, r1, [r3]
 801351a:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 801351e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013522:	ea80 0402 	eor.w	r4, r0, r2
 8013526:	f8c7 4568 	str.w	r4, [r7, #1384]	@ 0x568
 801352a:	404b      	eors	r3, r1
 801352c:	f8c7 356c 	str.w	r3, [r7, #1388]	@ 0x56c
 8013530:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 8013534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013538:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 801353c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8013540:	4621      	mov	r1, r4
 8013542:	4011      	ands	r1, r2
 8013544:	f8c7 1560 	str.w	r1, [r7, #1376]	@ 0x560
 8013548:	4629      	mov	r1, r5
 801354a:	400b      	ands	r3, r1
 801354c:	f8c7 3564 	str.w	r3, [r7, #1380]	@ 0x564
 8013550:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 8013554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013558:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 801355c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8013560:	4621      	mov	r1, r4
 8013562:	4051      	eors	r1, r2
 8013564:	f8c7 1558 	str.w	r1, [r7, #1368]	@ 0x558
 8013568:	4629      	mov	r1, r5
 801356a:	404b      	eors	r3, r1
 801356c:	f8c7 355c 	str.w	r3, [r7, #1372]	@ 0x55c
 8013570:	f507 63ae 	add.w	r3, r7, #1392	@ 0x570
 8013574:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013578:	4623      	mov	r3, r4
 801357a:	f507 62ab 	add.w	r2, r7, #1368	@ 0x558
 801357e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8013582:	4602      	mov	r2, r0
 8013584:	189b      	adds	r3, r3, r2
 8013586:	f8c7 3550 	str.w	r3, [r7, #1360]	@ 0x550
 801358a:	462b      	mov	r3, r5
 801358c:	460a      	mov	r2, r1
 801358e:	4153      	adcs	r3, r2
 8013590:	f8c7 3554 	str.w	r3, [r7, #1364]	@ 0x554
 8013594:	4a1d      	ldr	r2, [pc, #116]	@ (801360c <mbedtls_internal_sha512_process+0xa9c>)
 8013596:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 801359a:	00db      	lsls	r3, r3, #3
 801359c:	4413      	add	r3, r2
 801359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135a2:	f507 61aa 	add.w	r1, r7, #1360	@ 0x550
 80135a6:	e9d1 4500 	ldrd	r4, r5, [r1]
 80135aa:	4621      	mov	r1, r4
 80135ac:	1889      	adds	r1, r1, r2
 80135ae:	f8c7 1548 	str.w	r1, [r7, #1352]	@ 0x548
 80135b2:	4629      	mov	r1, r5
 80135b4:	eb41 0303 	adc.w	r3, r1, r3
 80135b8:	f8c7 354c 	str.w	r3, [r7, #1356]	@ 0x54c
 80135bc:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 80135c0:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 80135c4:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 80135c8:	00db      	lsls	r3, r3, #3
 80135ca:	4413      	add	r3, r2
 80135cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135d0:	f507 61a9 	add.w	r1, r7, #1352	@ 0x548
 80135d4:	e9d1 4500 	ldrd	r4, r5, [r1]
 80135d8:	4621      	mov	r1, r4
 80135da:	1889      	adds	r1, r1, r2
 80135dc:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 80135e0:	4629      	mov	r1, r5
 80135e2:	eb41 0303 	adc.w	r3, r1, r3
 80135e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80135ea:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	@ 0xd8
 80135ee:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 80135f2:	e9c2 3400 	strd	r3, r4, [r2]
 80135f6:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 80135fa:	011a      	lsls	r2, r3, #4
 80135fc:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 8013600:	0f1b      	lsrs	r3, r3, #28
 8013602:	4313      	orrs	r3, r2
 8013604:	f8c7 3540 	str.w	r3, [r7, #1344]	@ 0x540
 8013608:	e002      	b.n	8013610 <mbedtls_internal_sha512_process+0xaa0>
 801360a:	bf00      	nop
 801360c:	0801b3b8 	.word	0x0801b3b8
 8013610:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 8013614:	011a      	lsls	r2, r3, #4
 8013616:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 801361a:	0f1b      	lsrs	r3, r3, #28
 801361c:	4313      	orrs	r3, r2
 801361e:	f8c7 3544 	str.w	r3, [r7, #1348]	@ 0x544
 8013622:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 8013626:	089a      	lsrs	r2, r3, #2
 8013628:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 801362c:	079b      	lsls	r3, r3, #30
 801362e:	4313      	orrs	r3, r2
 8013630:	f8c7 353c 	str.w	r3, [r7, #1340]	@ 0x53c
 8013634:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 8013638:	089a      	lsrs	r2, r3, #2
 801363a:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 801363e:	079b      	lsls	r3, r3, #30
 8013640:	4313      	orrs	r3, r2
 8013642:	f8c7 3538 	str.w	r3, [r7, #1336]	@ 0x538
 8013646:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 801364a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801364e:	4623      	mov	r3, r4
 8013650:	f507 62a7 	add.w	r2, r7, #1336	@ 0x538
 8013654:	e9d2 0100 	ldrd	r0, r1, [r2]
 8013658:	4602      	mov	r2, r0
 801365a:	4053      	eors	r3, r2
 801365c:	f8c7 3530 	str.w	r3, [r7, #1328]	@ 0x530
 8013660:	462b      	mov	r3, r5
 8013662:	460a      	mov	r2, r1
 8013664:	4053      	eors	r3, r2
 8013666:	f8c7 3534 	str.w	r3, [r7, #1332]	@ 0x534
 801366a:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 801366e:	09da      	lsrs	r2, r3, #7
 8013670:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 8013674:	065b      	lsls	r3, r3, #25
 8013676:	4313      	orrs	r3, r2
 8013678:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
 801367c:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 8013680:	09da      	lsrs	r2, r3, #7
 8013682:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 8013686:	065b      	lsls	r3, r3, #25
 8013688:	4313      	orrs	r3, r2
 801368a:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 801368e:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8013692:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013696:	4623      	mov	r3, r4
 8013698:	f507 62a5 	add.w	r2, r7, #1320	@ 0x528
 801369c:	e9d2 0100 	ldrd	r0, r1, [r2]
 80136a0:	4602      	mov	r2, r0
 80136a2:	4053      	eors	r3, r2
 80136a4:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 80136a8:	462b      	mov	r3, r5
 80136aa:	460a      	mov	r2, r1
 80136ac:	4053      	eors	r3, r2
 80136ae:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
 80136b2:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 80136b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80136ba:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 80136be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136c2:	ea00 0402 	and.w	r4, r0, r2
 80136c6:	f8c7 4518 	str.w	r4, [r7, #1304]	@ 0x518
 80136ca:	400b      	ands	r3, r1
 80136cc:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
 80136d0:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 80136d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80136d8:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 80136dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136e0:	ea40 0402 	orr.w	r4, r0, r2
 80136e4:	f8c7 4510 	str.w	r4, [r7, #1296]	@ 0x510
 80136e8:	430b      	orrs	r3, r1
 80136ea:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
 80136ee:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 80136f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136f6:	f507 61a2 	add.w	r1, r7, #1296	@ 0x510
 80136fa:	e9d1 4500 	ldrd	r4, r5, [r1]
 80136fe:	4621      	mov	r1, r4
 8013700:	4011      	ands	r1, r2
 8013702:	f8c7 1508 	str.w	r1, [r7, #1288]	@ 0x508
 8013706:	4629      	mov	r1, r5
 8013708:	400b      	ands	r3, r1
 801370a:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
 801370e:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8013712:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013716:	4623      	mov	r3, r4
 8013718:	f507 62a1 	add.w	r2, r7, #1288	@ 0x508
 801371c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8013720:	4602      	mov	r2, r0
 8013722:	4313      	orrs	r3, r2
 8013724:	f8c7 3500 	str.w	r3, [r7, #1280]	@ 0x500
 8013728:	462b      	mov	r3, r5
 801372a:	460a      	mov	r2, r1
 801372c:	4313      	orrs	r3, r2
 801372e:	f8c7 3504 	str.w	r3, [r7, #1284]	@ 0x504
 8013732:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8013736:	e9d3 4500 	ldrd	r4, r5, [r3]
 801373a:	4623      	mov	r3, r4
 801373c:	f507 62a0 	add.w	r2, r7, #1280	@ 0x500
 8013740:	e9d2 0100 	ldrd	r0, r1, [r2]
 8013744:	4602      	mov	r2, r0
 8013746:	189b      	adds	r3, r3, r2
 8013748:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801374c:	462b      	mov	r3, r5
 801374e:	460a      	mov	r2, r1
 8013750:	4153      	adcs	r3, r2
 8013752:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8013756:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 801375a:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 801375e:	e9c2 3400 	strd	r3, r4, [r2]
 8013762:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 8013766:	e9d3 0100 	ldrd	r0, r1, [r3]
 801376a:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 801376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013772:	1884      	adds	r4, r0, r2
 8013774:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 8013778:	eb41 0303 	adc.w	r3, r1, r3
 801377c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8013780:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8013784:	f507 621c 	add.w	r2, r7, #2496	@ 0x9c0
 8013788:	e9c2 3400 	strd	r3, r4, [r2]
 801378c:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 8013790:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013794:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 8013798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801379c:	1884      	adds	r4, r0, r2
 801379e:	f8c7 40c0 	str.w	r4, [r7, #192]	@ 0xc0
 80137a2:	eb41 0303 	adc.w	r3, r1, r3
 80137a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80137aa:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80137ae:	f507 621a 	add.w	r2, r7, #2464	@ 0x9a0
 80137b2:	e9c2 3400 	strd	r3, r4, [r2]
 80137b6:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 80137ba:	3301      	adds	r3, #1
 80137bc:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 80137c0:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 80137c4:	049a      	lsls	r2, r3, #18
 80137c6:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 80137ca:	0b9b      	lsrs	r3, r3, #14
 80137cc:	4313      	orrs	r3, r2
 80137ce:	f8c7 34f8 	str.w	r3, [r7, #1272]	@ 0x4f8
 80137d2:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 80137d6:	049a      	lsls	r2, r3, #18
 80137d8:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 80137dc:	0b9b      	lsrs	r3, r3, #14
 80137de:	4313      	orrs	r3, r2
 80137e0:	f8c7 34fc 	str.w	r3, [r7, #1276]	@ 0x4fc
 80137e4:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 80137e8:	039a      	lsls	r2, r3, #14
 80137ea:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 80137ee:	0c9b      	lsrs	r3, r3, #18
 80137f0:	4313      	orrs	r3, r2
 80137f2:	f8c7 34f0 	str.w	r3, [r7, #1264]	@ 0x4f0
 80137f6:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 80137fa:	039a      	lsls	r2, r3, #14
 80137fc:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 8013800:	0c9b      	lsrs	r3, r3, #18
 8013802:	4313      	orrs	r3, r2
 8013804:	f8c7 34f4 	str.w	r3, [r7, #1268]	@ 0x4f4
 8013808:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 801380c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013810:	4623      	mov	r3, r4
 8013812:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8013816:	e9d2 0100 	ldrd	r0, r1, [r2]
 801381a:	4602      	mov	r2, r0
 801381c:	4053      	eors	r3, r2
 801381e:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 8013822:	462b      	mov	r3, r5
 8013824:	460a      	mov	r2, r1
 8013826:	4053      	eors	r3, r2
 8013828:	f8c7 34ec 	str.w	r3, [r7, #1260]	@ 0x4ec
 801382c:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 8013830:	0a5a      	lsrs	r2, r3, #9
 8013832:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 8013836:	05db      	lsls	r3, r3, #23
 8013838:	4313      	orrs	r3, r2
 801383a:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
 801383e:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 8013842:	0a5a      	lsrs	r2, r3, #9
 8013844:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 8013848:	05db      	lsls	r3, r3, #23
 801384a:	4313      	orrs	r3, r2
 801384c:	f8c7 34e0 	str.w	r3, [r7, #1248]	@ 0x4e0
 8013850:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8013854:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013858:	4623      	mov	r3, r4
 801385a:	f507 629c 	add.w	r2, r7, #1248	@ 0x4e0
 801385e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8013862:	4602      	mov	r2, r0
 8013864:	4053      	eors	r3, r2
 8013866:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
 801386a:	462b      	mov	r3, r5
 801386c:	460a      	mov	r2, r1
 801386e:	4053      	eors	r3, r2
 8013870:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
 8013874:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 8013878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801387c:	f507 619b 	add.w	r1, r7, #1240	@ 0x4d8
 8013880:	e9d1 4500 	ldrd	r4, r5, [r1]
 8013884:	4621      	mov	r1, r4
 8013886:	1889      	adds	r1, r1, r2
 8013888:	f8c7 14d0 	str.w	r1, [r7, #1232]	@ 0x4d0
 801388c:	4629      	mov	r1, r5
 801388e:	eb41 0303 	adc.w	r3, r1, r3
 8013892:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 8013896:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 801389a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801389e:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 80138a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138a6:	ea80 0402 	eor.w	r4, r0, r2
 80138aa:	f8c7 44c8 	str.w	r4, [r7, #1224]	@ 0x4c8
 80138ae:	404b      	eors	r3, r1
 80138b0:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 80138b4:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 80138b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138bc:	f507 6199 	add.w	r1, r7, #1224	@ 0x4c8
 80138c0:	e9d1 4500 	ldrd	r4, r5, [r1]
 80138c4:	4621      	mov	r1, r4
 80138c6:	4011      	ands	r1, r2
 80138c8:	f8c7 14c0 	str.w	r1, [r7, #1216]	@ 0x4c0
 80138cc:	4629      	mov	r1, r5
 80138ce:	400b      	ands	r3, r1
 80138d0:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
 80138d4:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 80138d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138dc:	f507 6198 	add.w	r1, r7, #1216	@ 0x4c0
 80138e0:	e9d1 4500 	ldrd	r4, r5, [r1]
 80138e4:	4621      	mov	r1, r4
 80138e6:	4051      	eors	r1, r2
 80138e8:	f8c7 14b8 	str.w	r1, [r7, #1208]	@ 0x4b8
 80138ec:	4629      	mov	r1, r5
 80138ee:	404b      	eors	r3, r1
 80138f0:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
 80138f4:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 80138f8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80138fc:	4623      	mov	r3, r4
 80138fe:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 8013902:	e9d2 0100 	ldrd	r0, r1, [r2]
 8013906:	4602      	mov	r2, r0
 8013908:	189b      	adds	r3, r3, r2
 801390a:	f8c7 34b0 	str.w	r3, [r7, #1200]	@ 0x4b0
 801390e:	462b      	mov	r3, r5
 8013910:	460a      	mov	r2, r1
 8013912:	4153      	adcs	r3, r2
 8013914:	f8c7 34b4 	str.w	r3, [r7, #1204]	@ 0x4b4
 8013918:	4afc      	ldr	r2, [pc, #1008]	@ (8013d0c <mbedtls_internal_sha512_process+0x119c>)
 801391a:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 801391e:	00db      	lsls	r3, r3, #3
 8013920:	4413      	add	r3, r2
 8013922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013926:	f507 6196 	add.w	r1, r7, #1200	@ 0x4b0
 801392a:	e9d1 4500 	ldrd	r4, r5, [r1]
 801392e:	4621      	mov	r1, r4
 8013930:	1889      	adds	r1, r1, r2
 8013932:	f8c7 14a8 	str.w	r1, [r7, #1192]	@ 0x4a8
 8013936:	4629      	mov	r1, r5
 8013938:	eb41 0303 	adc.w	r3, r1, r3
 801393c:	f8c7 34ac 	str.w	r3, [r7, #1196]	@ 0x4ac
 8013940:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8013944:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8013948:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 801394c:	00db      	lsls	r3, r3, #3
 801394e:	4413      	add	r3, r2
 8013950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013954:	f507 6195 	add.w	r1, r7, #1192	@ 0x4a8
 8013958:	e9d1 4500 	ldrd	r4, r5, [r1]
 801395c:	4621      	mov	r1, r4
 801395e:	1889      	adds	r1, r1, r2
 8013960:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8013964:	4629      	mov	r1, r5
 8013966:	eb41 0303 	adc.w	r3, r1, r3
 801396a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801396e:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8013972:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 8013976:	e9c2 3400 	strd	r3, r4, [r2]
 801397a:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 801397e:	011a      	lsls	r2, r3, #4
 8013980:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 8013984:	0f1b      	lsrs	r3, r3, #28
 8013986:	4313      	orrs	r3, r2
 8013988:	f8c7 34a0 	str.w	r3, [r7, #1184]	@ 0x4a0
 801398c:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 8013990:	011a      	lsls	r2, r3, #4
 8013992:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 8013996:	0f1b      	lsrs	r3, r3, #28
 8013998:	4313      	orrs	r3, r2
 801399a:	f8c7 34a4 	str.w	r3, [r7, #1188]	@ 0x4a4
 801399e:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 80139a2:	089a      	lsrs	r2, r3, #2
 80139a4:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 80139a8:	079b      	lsls	r3, r3, #30
 80139aa:	4313      	orrs	r3, r2
 80139ac:	f8c7 349c 	str.w	r3, [r7, #1180]	@ 0x49c
 80139b0:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 80139b4:	089a      	lsrs	r2, r3, #2
 80139b6:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 80139ba:	079b      	lsls	r3, r3, #30
 80139bc:	4313      	orrs	r3, r2
 80139be:	f8c7 3498 	str.w	r3, [r7, #1176]	@ 0x498
 80139c2:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80139c6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80139ca:	4623      	mov	r3, r4
 80139cc:	f507 6293 	add.w	r2, r7, #1176	@ 0x498
 80139d0:	e9d2 0100 	ldrd	r0, r1, [r2]
 80139d4:	4602      	mov	r2, r0
 80139d6:	4053      	eors	r3, r2
 80139d8:	f8c7 3490 	str.w	r3, [r7, #1168]	@ 0x490
 80139dc:	462b      	mov	r3, r5
 80139de:	460a      	mov	r2, r1
 80139e0:	4053      	eors	r3, r2
 80139e2:	f8c7 3494 	str.w	r3, [r7, #1172]	@ 0x494
 80139e6:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 80139ea:	09da      	lsrs	r2, r3, #7
 80139ec:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 80139f0:	065b      	lsls	r3, r3, #25
 80139f2:	4313      	orrs	r3, r2
 80139f4:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
 80139f8:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 80139fc:	09da      	lsrs	r2, r3, #7
 80139fe:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 8013a02:	065b      	lsls	r3, r3, #25
 8013a04:	4313      	orrs	r3, r2
 8013a06:	f8c7 3488 	str.w	r3, [r7, #1160]	@ 0x488
 8013a0a:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8013a0e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013a12:	4623      	mov	r3, r4
 8013a14:	f507 6291 	add.w	r2, r7, #1160	@ 0x488
 8013a18:	e9d2 0100 	ldrd	r0, r1, [r2]
 8013a1c:	4602      	mov	r2, r0
 8013a1e:	4053      	eors	r3, r2
 8013a20:	f8c7 3480 	str.w	r3, [r7, #1152]	@ 0x480
 8013a24:	462b      	mov	r3, r5
 8013a26:	460a      	mov	r2, r1
 8013a28:	4053      	eors	r3, r2
 8013a2a:	f8c7 3484 	str.w	r3, [r7, #1156]	@ 0x484
 8013a2e:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 8013a32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013a36:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 8013a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a3e:	ea00 0402 	and.w	r4, r0, r2
 8013a42:	f8c7 4478 	str.w	r4, [r7, #1144]	@ 0x478
 8013a46:	400b      	ands	r3, r1
 8013a48:	f8c7 347c 	str.w	r3, [r7, #1148]	@ 0x47c
 8013a4c:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 8013a50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013a54:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 8013a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a5c:	ea40 0402 	orr.w	r4, r0, r2
 8013a60:	f8c7 4470 	str.w	r4, [r7, #1136]	@ 0x470
 8013a64:	430b      	orrs	r3, r1
 8013a66:	f8c7 3474 	str.w	r3, [r7, #1140]	@ 0x474
 8013a6a:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8013a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a72:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 8013a76:	e9d1 4500 	ldrd	r4, r5, [r1]
 8013a7a:	4621      	mov	r1, r4
 8013a7c:	4011      	ands	r1, r2
 8013a7e:	f8c7 1468 	str.w	r1, [r7, #1128]	@ 0x468
 8013a82:	4629      	mov	r1, r5
 8013a84:	400b      	ands	r3, r1
 8013a86:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
 8013a8a:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8013a8e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013a92:	4623      	mov	r3, r4
 8013a94:	f507 628d 	add.w	r2, r7, #1128	@ 0x468
 8013a98:	e9d2 0100 	ldrd	r0, r1, [r2]
 8013a9c:	4602      	mov	r2, r0
 8013a9e:	4313      	orrs	r3, r2
 8013aa0:	f8c7 3460 	str.w	r3, [r7, #1120]	@ 0x460
 8013aa4:	462b      	mov	r3, r5
 8013aa6:	460a      	mov	r2, r1
 8013aa8:	4313      	orrs	r3, r2
 8013aaa:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 8013aae:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8013ab2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013ab6:	4623      	mov	r3, r4
 8013ab8:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 8013abc:	e9d2 0100 	ldrd	r0, r1, [r2]
 8013ac0:	4602      	mov	r2, r0
 8013ac2:	189b      	adds	r3, r3, r2
 8013ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8013ac8:	462b      	mov	r3, r5
 8013aca:	460a      	mov	r2, r1
 8013acc:	4153      	adcs	r3, r2
 8013ace:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8013ad2:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	@ 0xb0
 8013ad6:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 8013ada:	e9c2 3400 	strd	r3, r4, [r2]
 8013ade:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 8013ae2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013ae6:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 8013aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aee:	1884      	adds	r4, r0, r2
 8013af0:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8013af4:	eb41 0303 	adc.w	r3, r1, r3
 8013af8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8013afc:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8013b00:	f607 12c8 	addw	r2, r7, #2504	@ 0x9c8
 8013b04:	e9c2 3400 	strd	r3, r4, [r2]
 8013b08:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 8013b0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013b10:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 8013b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b18:	1884      	adds	r4, r0, r2
 8013b1a:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 8013b1e:	eb41 0303 	adc.w	r3, r1, r3
 8013b22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8013b26:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	@ 0xa0
 8013b2a:	f607 12a8 	addw	r2, r7, #2472	@ 0x9a8
 8013b2e:	e9c2 3400 	strd	r3, r4, [r2]
 8013b32:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8013b36:	3301      	adds	r3, #1
 8013b38:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 8013b3c:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 8013b40:	049a      	lsls	r2, r3, #18
 8013b42:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 8013b46:	0b9b      	lsrs	r3, r3, #14
 8013b48:	4313      	orrs	r3, r2
 8013b4a:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
 8013b4e:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 8013b52:	049a      	lsls	r2, r3, #18
 8013b54:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 8013b58:	0b9b      	lsrs	r3, r3, #14
 8013b5a:	4313      	orrs	r3, r2
 8013b5c:	f8c7 345c 	str.w	r3, [r7, #1116]	@ 0x45c
 8013b60:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 8013b64:	039a      	lsls	r2, r3, #14
 8013b66:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 8013b6a:	0c9b      	lsrs	r3, r3, #18
 8013b6c:	4313      	orrs	r3, r2
 8013b6e:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
 8013b72:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 8013b76:	039a      	lsls	r2, r3, #14
 8013b78:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 8013b7c:	0c9b      	lsrs	r3, r3, #18
 8013b7e:	4313      	orrs	r3, r2
 8013b80:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
 8013b84:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8013b88:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013b8c:	4623      	mov	r3, r4
 8013b8e:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 8013b92:	e9d2 0100 	ldrd	r0, r1, [r2]
 8013b96:	4602      	mov	r2, r0
 8013b98:	4053      	eors	r3, r2
 8013b9a:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
 8013b9e:	462b      	mov	r3, r5
 8013ba0:	460a      	mov	r2, r1
 8013ba2:	4053      	eors	r3, r2
 8013ba4:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
 8013ba8:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 8013bac:	0a5a      	lsrs	r2, r3, #9
 8013bae:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 8013bb2:	05db      	lsls	r3, r3, #23
 8013bb4:	4313      	orrs	r3, r2
 8013bb6:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
 8013bba:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 8013bbe:	0a5a      	lsrs	r2, r3, #9
 8013bc0:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 8013bc4:	05db      	lsls	r3, r3, #23
 8013bc6:	4313      	orrs	r3, r2
 8013bc8:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440
 8013bcc:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8013bd0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013bd4:	4623      	mov	r3, r4
 8013bd6:	f507 6288 	add.w	r2, r7, #1088	@ 0x440
 8013bda:	e9d2 0100 	ldrd	r0, r1, [r2]
 8013bde:	4602      	mov	r2, r0
 8013be0:	4053      	eors	r3, r2
 8013be2:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
 8013be6:	462b      	mov	r3, r5
 8013be8:	460a      	mov	r2, r1
 8013bea:	4053      	eors	r3, r2
 8013bec:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
 8013bf0:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 8013bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bf8:	f507 6187 	add.w	r1, r7, #1080	@ 0x438
 8013bfc:	e9d1 4500 	ldrd	r4, r5, [r1]
 8013c00:	4621      	mov	r1, r4
 8013c02:	1889      	adds	r1, r1, r2
 8013c04:	f8c7 1430 	str.w	r1, [r7, #1072]	@ 0x430
 8013c08:	4629      	mov	r1, r5
 8013c0a:	eb41 0303 	adc.w	r3, r1, r3
 8013c0e:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 8013c12:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 8013c16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013c1a:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 8013c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c22:	ea80 0402 	eor.w	r4, r0, r2
 8013c26:	f8c7 4428 	str.w	r4, [r7, #1064]	@ 0x428
 8013c2a:	404b      	eors	r3, r1
 8013c2c:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
 8013c30:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 8013c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c38:	f507 6185 	add.w	r1, r7, #1064	@ 0x428
 8013c3c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8013c40:	4621      	mov	r1, r4
 8013c42:	4011      	ands	r1, r2
 8013c44:	f8c7 1420 	str.w	r1, [r7, #1056]	@ 0x420
 8013c48:	4629      	mov	r1, r5
 8013c4a:	400b      	ands	r3, r1
 8013c4c:	f8c7 3424 	str.w	r3, [r7, #1060]	@ 0x424
 8013c50:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 8013c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c58:	f507 6184 	add.w	r1, r7, #1056	@ 0x420
 8013c5c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8013c60:	4621      	mov	r1, r4
 8013c62:	4051      	eors	r1, r2
 8013c64:	f8c7 1418 	str.w	r1, [r7, #1048]	@ 0x418
 8013c68:	4629      	mov	r1, r5
 8013c6a:	404b      	eors	r3, r1
 8013c6c:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 8013c70:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8013c74:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013c78:	4623      	mov	r3, r4
 8013c7a:	f507 6283 	add.w	r2, r7, #1048	@ 0x418
 8013c7e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8013c82:	4602      	mov	r2, r0
 8013c84:	189b      	adds	r3, r3, r2
 8013c86:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
 8013c8a:	462b      	mov	r3, r5
 8013c8c:	460a      	mov	r2, r1
 8013c8e:	4153      	adcs	r3, r2
 8013c90:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 8013c94:	4a1d      	ldr	r2, [pc, #116]	@ (8013d0c <mbedtls_internal_sha512_process+0x119c>)
 8013c96:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8013c9a:	00db      	lsls	r3, r3, #3
 8013c9c:	4413      	add	r3, r2
 8013c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ca2:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8013ca6:	e9d1 4500 	ldrd	r4, r5, [r1]
 8013caa:	4621      	mov	r1, r4
 8013cac:	1889      	adds	r1, r1, r2
 8013cae:	f8c7 1408 	str.w	r1, [r7, #1032]	@ 0x408
 8013cb2:	4629      	mov	r1, r5
 8013cb4:	eb41 0303 	adc.w	r3, r1, r3
 8013cb8:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 8013cbc:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8013cc0:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8013cc4:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8013cc8:	00db      	lsls	r3, r3, #3
 8013cca:	4413      	add	r3, r2
 8013ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cd0:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 8013cd4:	e9d1 4500 	ldrd	r4, r5, [r1]
 8013cd8:	4621      	mov	r1, r4
 8013cda:	1889      	adds	r1, r1, r2
 8013cdc:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8013ce0:	4629      	mov	r1, r5
 8013ce2:	eb41 0303 	adc.w	r3, r1, r3
 8013ce6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8013cea:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8013cee:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 8013cf2:	e9c2 3400 	strd	r3, r4, [r2]
 8013cf6:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 8013cfa:	011a      	lsls	r2, r3, #4
 8013cfc:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 8013d00:	0f1b      	lsrs	r3, r3, #28
 8013d02:	4313      	orrs	r3, r2
 8013d04:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400
 8013d08:	e002      	b.n	8013d10 <mbedtls_internal_sha512_process+0x11a0>
 8013d0a:	bf00      	nop
 8013d0c:	0801b3b8 	.word	0x0801b3b8
 8013d10:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 8013d14:	011a      	lsls	r2, r3, #4
 8013d16:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 8013d1a:	0f1b      	lsrs	r3, r3, #28
 8013d1c:	4313      	orrs	r3, r2
 8013d1e:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 8013d22:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 8013d26:	089a      	lsrs	r2, r3, #2
 8013d28:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 8013d2c:	079b      	lsls	r3, r3, #30
 8013d2e:	4313      	orrs	r3, r2
 8013d30:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 8013d34:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 8013d38:	089a      	lsrs	r2, r3, #2
 8013d3a:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 8013d3e:	079b      	lsls	r3, r3, #30
 8013d40:	4313      	orrs	r3, r2
 8013d42:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8013d46:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8013d4a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013d4e:	4623      	mov	r3, r4
 8013d50:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 8013d54:	4602      	mov	r2, r0
 8013d56:	4053      	eors	r3, r2
 8013d58:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
 8013d5c:	462b      	mov	r3, r5
 8013d5e:	460a      	mov	r2, r1
 8013d60:	4053      	eors	r3, r2
 8013d62:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 8013d66:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 8013d6a:	09da      	lsrs	r2, r3, #7
 8013d6c:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 8013d70:	065b      	lsls	r3, r3, #25
 8013d72:	4313      	orrs	r3, r2
 8013d74:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
 8013d78:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 8013d7c:	09da      	lsrs	r2, r3, #7
 8013d7e:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 8013d82:	065b      	lsls	r3, r3, #25
 8013d84:	4313      	orrs	r3, r2
 8013d86:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
 8013d8a:	e9d7 45fc 	ldrd	r4, r5, [r7, #1008]	@ 0x3f0
 8013d8e:	4623      	mov	r3, r4
 8013d90:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	@ 0x3e8
 8013d94:	4602      	mov	r2, r0
 8013d96:	4053      	eors	r3, r2
 8013d98:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
 8013d9c:	462b      	mov	r3, r5
 8013d9e:	460a      	mov	r2, r1
 8013da0:	4053      	eors	r3, r2
 8013da2:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4
 8013da6:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 8013daa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013dae:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 8013db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013db6:	ea00 0402 	and.w	r4, r0, r2
 8013dba:	f8c7 43d8 	str.w	r4, [r7, #984]	@ 0x3d8
 8013dbe:	400b      	ands	r3, r1
 8013dc0:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
 8013dc4:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 8013dc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013dcc:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 8013dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dd4:	ea40 0402 	orr.w	r4, r0, r2
 8013dd8:	f8c7 43d0 	str.w	r4, [r7, #976]	@ 0x3d0
 8013ddc:	430b      	orrs	r3, r1
 8013dde:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 8013de2:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 8013de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dea:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	@ 0x3d0
 8013dee:	4621      	mov	r1, r4
 8013df0:	4011      	ands	r1, r2
 8013df2:	f8c7 13c8 	str.w	r1, [r7, #968]	@ 0x3c8
 8013df6:	4629      	mov	r1, r5
 8013df8:	400b      	ands	r3, r1
 8013dfa:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 8013dfe:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	@ 0x3d8
 8013e02:	4623      	mov	r3, r4
 8013e04:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	@ 0x3c8
 8013e08:	4602      	mov	r2, r0
 8013e0a:	4313      	orrs	r3, r2
 8013e0c:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
 8013e10:	462b      	mov	r3, r5
 8013e12:	460a      	mov	r2, r1
 8013e14:	4313      	orrs	r3, r2
 8013e16:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 8013e1a:	e9d7 45f8 	ldrd	r4, r5, [r7, #992]	@ 0x3e0
 8013e1e:	4623      	mov	r3, r4
 8013e20:	e9d7 01f0 	ldrd	r0, r1, [r7, #960]	@ 0x3c0
 8013e24:	4602      	mov	r2, r0
 8013e26:	189b      	adds	r3, r3, r2
 8013e28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8013e2c:	462b      	mov	r3, r5
 8013e2e:	460a      	mov	r2, r1
 8013e30:	4153      	adcs	r3, r2
 8013e32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013e36:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8013e3a:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 8013e3e:	e9c2 3400 	strd	r3, r4, [r2]
 8013e42:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8013e46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013e4a:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 8013e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e52:	1884      	adds	r4, r0, r2
 8013e54:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8013e58:	eb41 0303 	adc.w	r3, r1, r3
 8013e5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8013e60:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8013e64:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8013e68:	e9c2 3400 	strd	r3, r4, [r2]
 8013e6c:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 8013e70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013e74:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 8013e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e7c:	1884      	adds	r4, r0, r2
 8013e7e:	f8c7 4080 	str.w	r4, [r7, #128]	@ 0x80
 8013e82:	eb41 0303 	adc.w	r3, r1, r3
 8013e86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8013e8a:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8013e8e:	f507 621b 	add.w	r2, r7, #2480	@ 0x9b0
 8013e92:	e9c2 3400 	strd	r3, r4, [r2]
 8013e96:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8013e9a:	3301      	adds	r3, #1
 8013e9c:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 8013ea0:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 8013ea4:	049a      	lsls	r2, r3, #18
 8013ea6:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 8013eaa:	0b9b      	lsrs	r3, r3, #14
 8013eac:	4313      	orrs	r3, r2
 8013eae:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8
 8013eb2:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 8013eb6:	049a      	lsls	r2, r3, #18
 8013eb8:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 8013ebc:	0b9b      	lsrs	r3, r3, #14
 8013ebe:	4313      	orrs	r3, r2
 8013ec0:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 8013ec4:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 8013ec8:	039a      	lsls	r2, r3, #14
 8013eca:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 8013ece:	0c9b      	lsrs	r3, r3, #18
 8013ed0:	4313      	orrs	r3, r2
 8013ed2:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
 8013ed6:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 8013eda:	039a      	lsls	r2, r3, #14
 8013edc:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 8013ee0:	0c9b      	lsrs	r3, r3, #18
 8013ee2:	4313      	orrs	r3, r2
 8013ee4:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8013ee8:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	@ 0x3b8
 8013eec:	4623      	mov	r3, r4
 8013eee:	e9d7 01ec 	ldrd	r0, r1, [r7, #944]	@ 0x3b0
 8013ef2:	4602      	mov	r2, r0
 8013ef4:	4053      	eors	r3, r2
 8013ef6:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
 8013efa:	462b      	mov	r3, r5
 8013efc:	460a      	mov	r2, r1
 8013efe:	4053      	eors	r3, r2
 8013f00:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 8013f04:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 8013f08:	0a5a      	lsrs	r2, r3, #9
 8013f0a:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 8013f0e:	05db      	lsls	r3, r3, #23
 8013f10:	4313      	orrs	r3, r2
 8013f12:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 8013f16:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 8013f1a:	0a5a      	lsrs	r2, r3, #9
 8013f1c:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 8013f20:	05db      	lsls	r3, r3, #23
 8013f22:	4313      	orrs	r3, r2
 8013f24:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 8013f28:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	@ 0x3a8
 8013f2c:	4623      	mov	r3, r4
 8013f2e:	e9d7 01e8 	ldrd	r0, r1, [r7, #928]	@ 0x3a0
 8013f32:	4602      	mov	r2, r0
 8013f34:	4053      	eors	r3, r2
 8013f36:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
 8013f3a:	462b      	mov	r3, r5
 8013f3c:	460a      	mov	r2, r1
 8013f3e:	4053      	eors	r3, r2
 8013f40:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 8013f44:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 8013f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f4c:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	@ 0x398
 8013f50:	4621      	mov	r1, r4
 8013f52:	1889      	adds	r1, r1, r2
 8013f54:	f8c7 1390 	str.w	r1, [r7, #912]	@ 0x390
 8013f58:	4629      	mov	r1, r5
 8013f5a:	eb41 0303 	adc.w	r3, r1, r3
 8013f5e:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8013f62:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 8013f66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013f6a:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 8013f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f72:	ea80 0402 	eor.w	r4, r0, r2
 8013f76:	f8c7 4388 	str.w	r4, [r7, #904]	@ 0x388
 8013f7a:	404b      	eors	r3, r1
 8013f7c:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 8013f80:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8013f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f88:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	@ 0x388
 8013f8c:	4621      	mov	r1, r4
 8013f8e:	4011      	ands	r1, r2
 8013f90:	f8c7 1380 	str.w	r1, [r7, #896]	@ 0x380
 8013f94:	4629      	mov	r1, r5
 8013f96:	400b      	ands	r3, r1
 8013f98:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 8013f9c:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 8013fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fa4:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	@ 0x380
 8013fa8:	4621      	mov	r1, r4
 8013faa:	4051      	eors	r1, r2
 8013fac:	f8c7 1378 	str.w	r1, [r7, #888]	@ 0x378
 8013fb0:	4629      	mov	r1, r5
 8013fb2:	404b      	eors	r3, r1
 8013fb4:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 8013fb8:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	@ 0x390
 8013fbc:	4623      	mov	r3, r4
 8013fbe:	e9d7 01de 	ldrd	r0, r1, [r7, #888]	@ 0x378
 8013fc2:	4602      	mov	r2, r0
 8013fc4:	189b      	adds	r3, r3, r2
 8013fc6:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
 8013fca:	462b      	mov	r3, r5
 8013fcc:	460a      	mov	r2, r1
 8013fce:	4153      	adcs	r3, r2
 8013fd0:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 8013fd4:	4af7      	ldr	r2, [pc, #988]	@ (80143b4 <mbedtls_internal_sha512_process+0x1844>)
 8013fd6:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8013fda:	00db      	lsls	r3, r3, #3
 8013fdc:	4413      	add	r3, r2
 8013fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fe2:	e9d7 45dc 	ldrd	r4, r5, [r7, #880]	@ 0x370
 8013fe6:	4621      	mov	r1, r4
 8013fe8:	1889      	adds	r1, r1, r2
 8013fea:	f8c7 1368 	str.w	r1, [r7, #872]	@ 0x368
 8013fee:	4629      	mov	r1, r5
 8013ff0:	eb41 0303 	adc.w	r3, r1, r3
 8013ff4:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
 8013ff8:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8013ffc:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8014000:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8014004:	00db      	lsls	r3, r3, #3
 8014006:	4413      	add	r3, r2
 8014008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801400c:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	@ 0x368
 8014010:	4621      	mov	r1, r4
 8014012:	1889      	adds	r1, r1, r2
 8014014:	67b9      	str	r1, [r7, #120]	@ 0x78
 8014016:	4629      	mov	r1, r5
 8014018:	eb41 0303 	adc.w	r3, r1, r3
 801401c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801401e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8014022:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 8014026:	e9c2 3400 	strd	r3, r4, [r2]
 801402a:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 801402e:	011a      	lsls	r2, r3, #4
 8014030:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 8014034:	0f1b      	lsrs	r3, r3, #28
 8014036:	4313      	orrs	r3, r2
 8014038:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
 801403c:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 8014040:	011a      	lsls	r2, r3, #4
 8014042:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 8014046:	0f1b      	lsrs	r3, r3, #28
 8014048:	4313      	orrs	r3, r2
 801404a:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 801404e:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 8014052:	089a      	lsrs	r2, r3, #2
 8014054:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 8014058:	079b      	lsls	r3, r3, #30
 801405a:	4313      	orrs	r3, r2
 801405c:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 8014060:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 8014064:	089a      	lsrs	r2, r3, #2
 8014066:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 801406a:	079b      	lsls	r3, r3, #30
 801406c:	4313      	orrs	r3, r2
 801406e:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
 8014072:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	@ 0x360
 8014076:	4623      	mov	r3, r4
 8014078:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	@ 0x358
 801407c:	4602      	mov	r2, r0
 801407e:	4053      	eors	r3, r2
 8014080:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8014084:	462b      	mov	r3, r5
 8014086:	460a      	mov	r2, r1
 8014088:	4053      	eors	r3, r2
 801408a:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 801408e:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 8014092:	09da      	lsrs	r2, r3, #7
 8014094:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 8014098:	065b      	lsls	r3, r3, #25
 801409a:	4313      	orrs	r3, r2
 801409c:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 80140a0:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 80140a4:	09da      	lsrs	r2, r3, #7
 80140a6:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 80140aa:	065b      	lsls	r3, r3, #25
 80140ac:	4313      	orrs	r3, r2
 80140ae:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
 80140b2:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	@ 0x350
 80140b6:	4623      	mov	r3, r4
 80140b8:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 80140bc:	4602      	mov	r2, r0
 80140be:	4053      	eors	r3, r2
 80140c0:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 80140c4:	462b      	mov	r3, r5
 80140c6:	460a      	mov	r2, r1
 80140c8:	4053      	eors	r3, r2
 80140ca:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 80140ce:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 80140d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80140d6:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 80140da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140de:	ea00 0402 	and.w	r4, r0, r2
 80140e2:	f8c7 4338 	str.w	r4, [r7, #824]	@ 0x338
 80140e6:	400b      	ands	r3, r1
 80140e8:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 80140ec:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 80140f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80140f4:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 80140f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140fc:	ea40 0402 	orr.w	r4, r0, r2
 8014100:	f8c7 4330 	str.w	r4, [r7, #816]	@ 0x330
 8014104:	430b      	orrs	r3, r1
 8014106:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 801410a:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 801410e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014112:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	@ 0x330
 8014116:	4621      	mov	r1, r4
 8014118:	4011      	ands	r1, r2
 801411a:	f8c7 1328 	str.w	r1, [r7, #808]	@ 0x328
 801411e:	4629      	mov	r1, r5
 8014120:	400b      	ands	r3, r1
 8014122:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
 8014126:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	@ 0x338
 801412a:	4623      	mov	r3, r4
 801412c:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8014130:	4602      	mov	r2, r0
 8014132:	4313      	orrs	r3, r2
 8014134:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
 8014138:	462b      	mov	r3, r5
 801413a:	460a      	mov	r2, r1
 801413c:	4313      	orrs	r3, r2
 801413e:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
 8014142:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	@ 0x340
 8014146:	4623      	mov	r3, r4
 8014148:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 801414c:	4602      	mov	r2, r0
 801414e:	189b      	adds	r3, r3, r2
 8014150:	673b      	str	r3, [r7, #112]	@ 0x70
 8014152:	462b      	mov	r3, r5
 8014154:	460a      	mov	r2, r1
 8014156:	4153      	adcs	r3, r2
 8014158:	677b      	str	r3, [r7, #116]	@ 0x74
 801415a:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 801415e:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 8014162:	e9c2 3400 	strd	r3, r4, [r2]
 8014166:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 801416a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801416e:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 8014172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014176:	1884      	adds	r4, r0, r2
 8014178:	66bc      	str	r4, [r7, #104]	@ 0x68
 801417a:	eb41 0303 	adc.w	r3, r1, r3
 801417e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014180:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8014184:	f607 1298 	addw	r2, r7, #2456	@ 0x998
 8014188:	e9c2 3400 	strd	r3, r4, [r2]
 801418c:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 8014190:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014194:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 8014198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801419c:	1884      	adds	r4, r0, r2
 801419e:	663c      	str	r4, [r7, #96]	@ 0x60
 80141a0:	eb41 0303 	adc.w	r3, r1, r3
 80141a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80141a6:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 80141aa:	f607 12b8 	addw	r2, r7, #2488	@ 0x9b8
 80141ae:	e9c2 3400 	strd	r3, r4, [r2]
 80141b2:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 80141b6:	3301      	adds	r3, #1
 80141b8:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
 80141bc:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 80141c0:	049a      	lsls	r2, r3, #18
 80141c2:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 80141c6:	0b9b      	lsrs	r3, r3, #14
 80141c8:	4313      	orrs	r3, r2
 80141ca:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
 80141ce:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 80141d2:	049a      	lsls	r2, r3, #18
 80141d4:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 80141d8:	0b9b      	lsrs	r3, r3, #14
 80141da:	4313      	orrs	r3, r2
 80141dc:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 80141e0:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 80141e4:	039a      	lsls	r2, r3, #14
 80141e6:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 80141ea:	0c9b      	lsrs	r3, r3, #18
 80141ec:	4313      	orrs	r3, r2
 80141ee:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 80141f2:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 80141f6:	039a      	lsls	r2, r3, #14
 80141f8:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 80141fc:	0c9b      	lsrs	r3, r3, #18
 80141fe:	4313      	orrs	r3, r2
 8014200:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 8014204:	e9d7 45c6 	ldrd	r4, r5, [r7, #792]	@ 0x318
 8014208:	4623      	mov	r3, r4
 801420a:	e9d7 01c4 	ldrd	r0, r1, [r7, #784]	@ 0x310
 801420e:	4602      	mov	r2, r0
 8014210:	4053      	eors	r3, r2
 8014212:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 8014216:	462b      	mov	r3, r5
 8014218:	460a      	mov	r2, r1
 801421a:	4053      	eors	r3, r2
 801421c:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 8014220:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 8014224:	0a5a      	lsrs	r2, r3, #9
 8014226:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 801422a:	05db      	lsls	r3, r3, #23
 801422c:	4313      	orrs	r3, r2
 801422e:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 8014232:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 8014236:	0a5a      	lsrs	r2, r3, #9
 8014238:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 801423c:	05db      	lsls	r3, r3, #23
 801423e:	4313      	orrs	r3, r2
 8014240:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
 8014244:	e9d7 45c2 	ldrd	r4, r5, [r7, #776]	@ 0x308
 8014248:	4623      	mov	r3, r4
 801424a:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	@ 0x300
 801424e:	4602      	mov	r2, r0
 8014250:	4053      	eors	r3, r2
 8014252:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 8014256:	462b      	mov	r3, r5
 8014258:	460a      	mov	r2, r1
 801425a:	4053      	eors	r3, r2
 801425c:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8014260:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 8014264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014268:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	@ 0x2f8
 801426c:	4621      	mov	r1, r4
 801426e:	1889      	adds	r1, r1, r2
 8014270:	f8c7 12f0 	str.w	r1, [r7, #752]	@ 0x2f0
 8014274:	4629      	mov	r1, r5
 8014276:	eb41 0303 	adc.w	r3, r1, r3
 801427a:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 801427e:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8014282:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014286:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 801428a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801428e:	ea80 0402 	eor.w	r4, r0, r2
 8014292:	f8c7 42e8 	str.w	r4, [r7, #744]	@ 0x2e8
 8014296:	404b      	eors	r3, r1
 8014298:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 801429c:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 80142a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142a4:	e9d7 45ba 	ldrd	r4, r5, [r7, #744]	@ 0x2e8
 80142a8:	4621      	mov	r1, r4
 80142aa:	4011      	ands	r1, r2
 80142ac:	f8c7 12e0 	str.w	r1, [r7, #736]	@ 0x2e0
 80142b0:	4629      	mov	r1, r5
 80142b2:	400b      	ands	r3, r1
 80142b4:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 80142b8:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 80142bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142c0:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	@ 0x2e0
 80142c4:	4621      	mov	r1, r4
 80142c6:	4051      	eors	r1, r2
 80142c8:	f8c7 12d8 	str.w	r1, [r7, #728]	@ 0x2d8
 80142cc:	4629      	mov	r1, r5
 80142ce:	404b      	eors	r3, r1
 80142d0:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
 80142d4:	e9d7 45bc 	ldrd	r4, r5, [r7, #752]	@ 0x2f0
 80142d8:	4623      	mov	r3, r4
 80142da:	e9d7 01b6 	ldrd	r0, r1, [r7, #728]	@ 0x2d8
 80142de:	4602      	mov	r2, r0
 80142e0:	189b      	adds	r3, r3, r2
 80142e2:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 80142e6:	462b      	mov	r3, r5
 80142e8:	460a      	mov	r2, r1
 80142ea:	4153      	adcs	r3, r2
 80142ec:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 80142f0:	4a30      	ldr	r2, [pc, #192]	@ (80143b4 <mbedtls_internal_sha512_process+0x1844>)
 80142f2:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 80142f6:	00db      	lsls	r3, r3, #3
 80142f8:	4413      	add	r3, r2
 80142fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142fe:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	@ 0x2d0
 8014302:	4621      	mov	r1, r4
 8014304:	1889      	adds	r1, r1, r2
 8014306:	f8c7 12c8 	str.w	r1, [r7, #712]	@ 0x2c8
 801430a:	4629      	mov	r1, r5
 801430c:	eb41 0303 	adc.w	r3, r1, r3
 8014310:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 8014314:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8014318:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 801431c:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8014320:	00db      	lsls	r3, r3, #3
 8014322:	4413      	add	r3, r2
 8014324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014328:	e9d7 45b2 	ldrd	r4, r5, [r7, #712]	@ 0x2c8
 801432c:	4621      	mov	r1, r4
 801432e:	1889      	adds	r1, r1, r2
 8014330:	65b9      	str	r1, [r7, #88]	@ 0x58
 8014332:	4629      	mov	r1, r5
 8014334:	eb41 0303 	adc.w	r3, r1, r3
 8014338:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801433a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 801433e:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 8014342:	e9c2 3400 	strd	r3, r4, [r2]
 8014346:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 801434a:	011a      	lsls	r2, r3, #4
 801434c:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 8014350:	0f1b      	lsrs	r3, r3, #28
 8014352:	4313      	orrs	r3, r2
 8014354:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 8014358:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 801435c:	011a      	lsls	r2, r3, #4
 801435e:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 8014362:	0f1b      	lsrs	r3, r3, #28
 8014364:	4313      	orrs	r3, r2
 8014366:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 801436a:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 801436e:	089a      	lsrs	r2, r3, #2
 8014370:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 8014374:	079b      	lsls	r3, r3, #30
 8014376:	4313      	orrs	r3, r2
 8014378:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 801437c:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 8014380:	089a      	lsrs	r2, r3, #2
 8014382:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 8014386:	079b      	lsls	r3, r3, #30
 8014388:	4313      	orrs	r3, r2
 801438a:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 801438e:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	@ 0x2c0
 8014392:	4623      	mov	r3, r4
 8014394:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8014398:	4602      	mov	r2, r0
 801439a:	4053      	eors	r3, r2
 801439c:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 80143a0:	462b      	mov	r3, r5
 80143a2:	460a      	mov	r2, r1
 80143a4:	4053      	eors	r3, r2
 80143a6:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 80143aa:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 80143ae:	09da      	lsrs	r2, r3, #7
 80143b0:	e002      	b.n	80143b8 <mbedtls_internal_sha512_process+0x1848>
 80143b2:	bf00      	nop
 80143b4:	0801b3b8 	.word	0x0801b3b8
 80143b8:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 80143bc:	065b      	lsls	r3, r3, #25
 80143be:	4313      	orrs	r3, r2
 80143c0:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 80143c4:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 80143c8:	09da      	lsrs	r2, r3, #7
 80143ca:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 80143ce:	065b      	lsls	r3, r3, #25
 80143d0:	4313      	orrs	r3, r2
 80143d2:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 80143d6:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	@ 0x2b0
 80143da:	4623      	mov	r3, r4
 80143dc:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 80143e0:	4602      	mov	r2, r0
 80143e2:	4053      	eors	r3, r2
 80143e4:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 80143e8:	462b      	mov	r3, r5
 80143ea:	460a      	mov	r2, r1
 80143ec:	4053      	eors	r3, r2
 80143ee:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 80143f2:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 80143f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80143fa:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 80143fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014402:	ea00 0402 	and.w	r4, r0, r2
 8014406:	f8c7 4298 	str.w	r4, [r7, #664]	@ 0x298
 801440a:	400b      	ands	r3, r1
 801440c:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8014410:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 8014414:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014418:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 801441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014420:	ea40 0402 	orr.w	r4, r0, r2
 8014424:	f8c7 4290 	str.w	r4, [r7, #656]	@ 0x290
 8014428:	430b      	orrs	r3, r1
 801442a:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 801442e:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 8014432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014436:	e9d7 45a4 	ldrd	r4, r5, [r7, #656]	@ 0x290
 801443a:	4621      	mov	r1, r4
 801443c:	4011      	ands	r1, r2
 801443e:	f8c7 1288 	str.w	r1, [r7, #648]	@ 0x288
 8014442:	4629      	mov	r1, r5
 8014444:	400b      	ands	r3, r1
 8014446:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 801444a:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	@ 0x298
 801444e:	4623      	mov	r3, r4
 8014450:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	@ 0x288
 8014454:	4602      	mov	r2, r0
 8014456:	4313      	orrs	r3, r2
 8014458:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 801445c:	462b      	mov	r3, r5
 801445e:	460a      	mov	r2, r1
 8014460:	4313      	orrs	r3, r2
 8014462:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8014466:	e9d7 45a8 	ldrd	r4, r5, [r7, #672]	@ 0x2a0
 801446a:	4623      	mov	r3, r4
 801446c:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 8014470:	4602      	mov	r2, r0
 8014472:	189b      	adds	r3, r3, r2
 8014474:	653b      	str	r3, [r7, #80]	@ 0x50
 8014476:	462b      	mov	r3, r5
 8014478:	460a      	mov	r2, r1
 801447a:	4153      	adcs	r3, r2
 801447c:	657b      	str	r3, [r7, #84]	@ 0x54
 801447e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 8014482:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 8014486:	e9c2 3400 	strd	r3, r4, [r2]
 801448a:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 801448e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014492:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 8014496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801449a:	1884      	adds	r4, r0, r2
 801449c:	64bc      	str	r4, [r7, #72]	@ 0x48
 801449e:	eb41 0303 	adc.w	r3, r1, r3
 80144a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80144a4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 80144a8:	f507 621a 	add.w	r2, r7, #2464	@ 0x9a0
 80144ac:	e9c2 3400 	strd	r3, r4, [r2]
 80144b0:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 80144b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80144b8:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 80144bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144c0:	1884      	adds	r4, r0, r2
 80144c2:	643c      	str	r4, [r7, #64]	@ 0x40
 80144c4:	eb41 0303 	adc.w	r3, r1, r3
 80144c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80144ca:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80144ce:	f507 621c 	add.w	r2, r7, #2496	@ 0x9c0
 80144d2:	e9c2 3400 	strd	r3, r4, [r2]
 80144d6:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 80144da:	3301      	adds	r3, #1
 80144dc:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 80144e0:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 80144e4:	049a      	lsls	r2, r3, #18
 80144e6:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 80144ea:	0b9b      	lsrs	r3, r3, #14
 80144ec:	4313      	orrs	r3, r2
 80144ee:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
 80144f2:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 80144f6:	049a      	lsls	r2, r3, #18
 80144f8:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 80144fc:	0b9b      	lsrs	r3, r3, #14
 80144fe:	4313      	orrs	r3, r2
 8014500:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8014504:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 8014508:	039a      	lsls	r2, r3, #14
 801450a:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 801450e:	0c9b      	lsrs	r3, r3, #18
 8014510:	4313      	orrs	r3, r2
 8014512:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 8014516:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 801451a:	039a      	lsls	r2, r3, #14
 801451c:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 8014520:	0c9b      	lsrs	r3, r3, #18
 8014522:	4313      	orrs	r3, r2
 8014524:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 8014528:	e9d7 459e 	ldrd	r4, r5, [r7, #632]	@ 0x278
 801452c:	4623      	mov	r3, r4
 801452e:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	@ 0x270
 8014532:	4602      	mov	r2, r0
 8014534:	4053      	eors	r3, r2
 8014536:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 801453a:	462b      	mov	r3, r5
 801453c:	460a      	mov	r2, r1
 801453e:	4053      	eors	r3, r2
 8014540:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 8014544:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 8014548:	0a5a      	lsrs	r2, r3, #9
 801454a:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 801454e:	05db      	lsls	r3, r3, #23
 8014550:	4313      	orrs	r3, r2
 8014552:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 8014556:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 801455a:	0a5a      	lsrs	r2, r3, #9
 801455c:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 8014560:	05db      	lsls	r3, r3, #23
 8014562:	4313      	orrs	r3, r2
 8014564:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 8014568:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	@ 0x268
 801456c:	4623      	mov	r3, r4
 801456e:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
 8014572:	4602      	mov	r2, r0
 8014574:	4053      	eors	r3, r2
 8014576:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 801457a:	462b      	mov	r3, r5
 801457c:	460a      	mov	r2, r1
 801457e:	4053      	eors	r3, r2
 8014580:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8014584:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 8014588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801458c:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	@ 0x258
 8014590:	4621      	mov	r1, r4
 8014592:	1889      	adds	r1, r1, r2
 8014594:	f8c7 1250 	str.w	r1, [r7, #592]	@ 0x250
 8014598:	4629      	mov	r1, r5
 801459a:	eb41 0303 	adc.w	r3, r1, r3
 801459e:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 80145a2:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 80145a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80145aa:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 80145ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145b2:	ea80 0402 	eor.w	r4, r0, r2
 80145b6:	f8c7 4248 	str.w	r4, [r7, #584]	@ 0x248
 80145ba:	404b      	eors	r3, r1
 80145bc:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 80145c0:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 80145c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145c8:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	@ 0x248
 80145cc:	4621      	mov	r1, r4
 80145ce:	4011      	ands	r1, r2
 80145d0:	f8c7 1240 	str.w	r1, [r7, #576]	@ 0x240
 80145d4:	4629      	mov	r1, r5
 80145d6:	400b      	ands	r3, r1
 80145d8:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 80145dc:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 80145e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145e4:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	@ 0x240
 80145e8:	4621      	mov	r1, r4
 80145ea:	4051      	eors	r1, r2
 80145ec:	f8c7 1238 	str.w	r1, [r7, #568]	@ 0x238
 80145f0:	4629      	mov	r1, r5
 80145f2:	404b      	eors	r3, r1
 80145f4:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 80145f8:	e9d7 4594 	ldrd	r4, r5, [r7, #592]	@ 0x250
 80145fc:	4623      	mov	r3, r4
 80145fe:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	@ 0x238
 8014602:	4602      	mov	r2, r0
 8014604:	189b      	adds	r3, r3, r2
 8014606:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
 801460a:	462b      	mov	r3, r5
 801460c:	460a      	mov	r2, r1
 801460e:	4153      	adcs	r3, r2
 8014610:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 8014614:	4af7      	ldr	r2, [pc, #988]	@ (80149f4 <mbedtls_internal_sha512_process+0x1e84>)
 8014616:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 801461a:	00db      	lsls	r3, r3, #3
 801461c:	4413      	add	r3, r2
 801461e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014622:	e9d7 458c 	ldrd	r4, r5, [r7, #560]	@ 0x230
 8014626:	4621      	mov	r1, r4
 8014628:	1889      	adds	r1, r1, r2
 801462a:	f8c7 1228 	str.w	r1, [r7, #552]	@ 0x228
 801462e:	4629      	mov	r1, r5
 8014630:	eb41 0303 	adc.w	r3, r1, r3
 8014634:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
 8014638:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 801463c:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8014640:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8014644:	00db      	lsls	r3, r3, #3
 8014646:	4413      	add	r3, r2
 8014648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801464c:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	@ 0x228
 8014650:	4621      	mov	r1, r4
 8014652:	1889      	adds	r1, r1, r2
 8014654:	63b9      	str	r1, [r7, #56]	@ 0x38
 8014656:	4629      	mov	r1, r5
 8014658:	eb41 0303 	adc.w	r3, r1, r3
 801465c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801465e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8014662:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 8014666:	e9c2 3400 	strd	r3, r4, [r2]
 801466a:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 801466e:	011a      	lsls	r2, r3, #4
 8014670:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 8014674:	0f1b      	lsrs	r3, r3, #28
 8014676:	4313      	orrs	r3, r2
 8014678:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 801467c:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 8014680:	011a      	lsls	r2, r3, #4
 8014682:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 8014686:	0f1b      	lsrs	r3, r3, #28
 8014688:	4313      	orrs	r3, r2
 801468a:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 801468e:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 8014692:	089a      	lsrs	r2, r3, #2
 8014694:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 8014698:	079b      	lsls	r3, r3, #30
 801469a:	4313      	orrs	r3, r2
 801469c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80146a0:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 80146a4:	089a      	lsrs	r2, r3, #2
 80146a6:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 80146aa:	079b      	lsls	r3, r3, #30
 80146ac:	4313      	orrs	r3, r2
 80146ae:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 80146b2:	e9d7 4588 	ldrd	r4, r5, [r7, #544]	@ 0x220
 80146b6:	4623      	mov	r3, r4
 80146b8:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80146bc:	4602      	mov	r2, r0
 80146be:	4053      	eors	r3, r2
 80146c0:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 80146c4:	462b      	mov	r3, r5
 80146c6:	460a      	mov	r2, r1
 80146c8:	4053      	eors	r3, r2
 80146ca:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80146ce:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 80146d2:	09da      	lsrs	r2, r3, #7
 80146d4:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 80146d8:	065b      	lsls	r3, r3, #25
 80146da:	4313      	orrs	r3, r2
 80146dc:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 80146e0:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 80146e4:	09da      	lsrs	r2, r3, #7
 80146e6:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 80146ea:	065b      	lsls	r3, r3, #25
 80146ec:	4313      	orrs	r3, r2
 80146ee:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 80146f2:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	@ 0x210
 80146f6:	4623      	mov	r3, r4
 80146f8:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 80146fc:	4602      	mov	r2, r0
 80146fe:	4053      	eors	r3, r2
 8014700:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8014704:	462b      	mov	r3, r5
 8014706:	460a      	mov	r2, r1
 8014708:	4053      	eors	r3, r2
 801470a:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 801470e:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 8014712:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014716:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 801471a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801471e:	ea00 0402 	and.w	r4, r0, r2
 8014722:	f8c7 41f8 	str.w	r4, [r7, #504]	@ 0x1f8
 8014726:	400b      	ands	r3, r1
 8014728:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 801472c:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 8014730:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014734:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 8014738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801473c:	ea40 0402 	orr.w	r4, r0, r2
 8014740:	f8c7 41f0 	str.w	r4, [r7, #496]	@ 0x1f0
 8014744:	430b      	orrs	r3, r1
 8014746:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 801474a:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 801474e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014752:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 8014756:	4621      	mov	r1, r4
 8014758:	4011      	ands	r1, r2
 801475a:	f8c7 11e8 	str.w	r1, [r7, #488]	@ 0x1e8
 801475e:	4629      	mov	r1, r5
 8014760:	400b      	ands	r3, r1
 8014762:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8014766:	e9d7 457e 	ldrd	r4, r5, [r7, #504]	@ 0x1f8
 801476a:	4623      	mov	r3, r4
 801476c:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8014770:	4602      	mov	r2, r0
 8014772:	4313      	orrs	r3, r2
 8014774:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8014778:	462b      	mov	r3, r5
 801477a:	460a      	mov	r2, r1
 801477c:	4313      	orrs	r3, r2
 801477e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8014782:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	@ 0x200
 8014786:	4623      	mov	r3, r4
 8014788:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
 801478c:	4602      	mov	r2, r0
 801478e:	189b      	adds	r3, r3, r2
 8014790:	633b      	str	r3, [r7, #48]	@ 0x30
 8014792:	462b      	mov	r3, r5
 8014794:	460a      	mov	r2, r1
 8014796:	4153      	adcs	r3, r2
 8014798:	637b      	str	r3, [r7, #52]	@ 0x34
 801479a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 801479e:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 80147a2:	e9c2 3400 	strd	r3, r4, [r2]
 80147a6:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 80147aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80147ae:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 80147b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147b6:	1884      	adds	r4, r0, r2
 80147b8:	62bc      	str	r4, [r7, #40]	@ 0x28
 80147ba:	eb41 0303 	adc.w	r3, r1, r3
 80147be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80147c0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80147c4:	f607 12a8 	addw	r2, r7, #2472	@ 0x9a8
 80147c8:	e9c2 3400 	strd	r3, r4, [r2]
 80147cc:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 80147d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80147d4:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 80147d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147dc:	1884      	adds	r4, r0, r2
 80147de:	623c      	str	r4, [r7, #32]
 80147e0:	eb41 0303 	adc.w	r3, r1, r3
 80147e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80147e6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80147ea:	f607 12c8 	addw	r2, r7, #2504	@ 0x9c8
 80147ee:	e9c2 3400 	strd	r3, r4, [r2]
 80147f2:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 80147f6:	3301      	adds	r3, #1
 80147f8:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 80147fc:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 8014800:	049a      	lsls	r2, r3, #18
 8014802:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 8014806:	0b9b      	lsrs	r3, r3, #14
 8014808:	4313      	orrs	r3, r2
 801480a:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 801480e:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 8014812:	049a      	lsls	r2, r3, #18
 8014814:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 8014818:	0b9b      	lsrs	r3, r3, #14
 801481a:	4313      	orrs	r3, r2
 801481c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8014820:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 8014824:	039a      	lsls	r2, r3, #14
 8014826:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 801482a:	0c9b      	lsrs	r3, r3, #18
 801482c:	4313      	orrs	r3, r2
 801482e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8014832:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 8014836:	039a      	lsls	r2, r3, #14
 8014838:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 801483c:	0c9b      	lsrs	r3, r3, #18
 801483e:	4313      	orrs	r3, r2
 8014840:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8014844:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	@ 0x1d8
 8014848:	4623      	mov	r3, r4
 801484a:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 801484e:	4602      	mov	r2, r0
 8014850:	4053      	eors	r3, r2
 8014852:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8014856:	462b      	mov	r3, r5
 8014858:	460a      	mov	r2, r1
 801485a:	4053      	eors	r3, r2
 801485c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8014860:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 8014864:	0a5a      	lsrs	r2, r3, #9
 8014866:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 801486a:	05db      	lsls	r3, r3, #23
 801486c:	4313      	orrs	r3, r2
 801486e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8014872:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 8014876:	0a5a      	lsrs	r2, r3, #9
 8014878:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 801487c:	05db      	lsls	r3, r3, #23
 801487e:	4313      	orrs	r3, r2
 8014880:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8014884:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	@ 0x1c8
 8014888:	4623      	mov	r3, r4
 801488a:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
 801488e:	4602      	mov	r2, r0
 8014890:	4053      	eors	r3, r2
 8014892:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8014896:	462b      	mov	r3, r5
 8014898:	460a      	mov	r2, r1
 801489a:	4053      	eors	r3, r2
 801489c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80148a0:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 80148a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148a8:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	@ 0x1b8
 80148ac:	4621      	mov	r1, r4
 80148ae:	1889      	adds	r1, r1, r2
 80148b0:	f8c7 11b0 	str.w	r1, [r7, #432]	@ 0x1b0
 80148b4:	4629      	mov	r1, r5
 80148b6:	eb41 0303 	adc.w	r3, r1, r3
 80148ba:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 80148be:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 80148c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80148c6:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 80148ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148ce:	ea80 0402 	eor.w	r4, r0, r2
 80148d2:	f8c7 41a8 	str.w	r4, [r7, #424]	@ 0x1a8
 80148d6:	404b      	eors	r3, r1
 80148d8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80148dc:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 80148e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148e4:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 80148e8:	4621      	mov	r1, r4
 80148ea:	4011      	ands	r1, r2
 80148ec:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
 80148f0:	4629      	mov	r1, r5
 80148f2:	400b      	ands	r3, r1
 80148f4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80148f8:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 80148fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014900:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	@ 0x1a0
 8014904:	4621      	mov	r1, r4
 8014906:	4051      	eors	r1, r2
 8014908:	f8c7 1198 	str.w	r1, [r7, #408]	@ 0x198
 801490c:	4629      	mov	r1, r5
 801490e:	404b      	eors	r3, r1
 8014910:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8014914:	e9d7 456c 	ldrd	r4, r5, [r7, #432]	@ 0x1b0
 8014918:	4623      	mov	r3, r4
 801491a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 801491e:	4602      	mov	r2, r0
 8014920:	189b      	adds	r3, r3, r2
 8014922:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8014926:	462b      	mov	r3, r5
 8014928:	460a      	mov	r2, r1
 801492a:	4153      	adcs	r3, r2
 801492c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8014930:	4a30      	ldr	r2, [pc, #192]	@ (80149f4 <mbedtls_internal_sha512_process+0x1e84>)
 8014932:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8014936:	00db      	lsls	r3, r3, #3
 8014938:	4413      	add	r3, r2
 801493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801493e:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	@ 0x190
 8014942:	4621      	mov	r1, r4
 8014944:	1889      	adds	r1, r1, r2
 8014946:	f8c7 1188 	str.w	r1, [r7, #392]	@ 0x188
 801494a:	4629      	mov	r1, r5
 801494c:	eb41 0303 	adc.w	r3, r1, r3
 8014950:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8014954:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8014958:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 801495c:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8014960:	00db      	lsls	r3, r3, #3
 8014962:	4413      	add	r3, r2
 8014964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014968:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	@ 0x188
 801496c:	4621      	mov	r1, r4
 801496e:	1889      	adds	r1, r1, r2
 8014970:	61b9      	str	r1, [r7, #24]
 8014972:	4629      	mov	r1, r5
 8014974:	eb41 0303 	adc.w	r3, r1, r3
 8014978:	61fb      	str	r3, [r7, #28]
 801497a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801497e:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 8014982:	e9c2 3400 	strd	r3, r4, [r2]
 8014986:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 801498a:	011a      	lsls	r2, r3, #4
 801498c:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 8014990:	0f1b      	lsrs	r3, r3, #28
 8014992:	4313      	orrs	r3, r2
 8014994:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8014998:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 801499c:	011a      	lsls	r2, r3, #4
 801499e:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 80149a2:	0f1b      	lsrs	r3, r3, #28
 80149a4:	4313      	orrs	r3, r2
 80149a6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80149aa:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 80149ae:	089a      	lsrs	r2, r3, #2
 80149b0:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 80149b4:	079b      	lsls	r3, r3, #30
 80149b6:	4313      	orrs	r3, r2
 80149b8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80149bc:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 80149c0:	089a      	lsrs	r2, r3, #2
 80149c2:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 80149c6:	079b      	lsls	r3, r3, #30
 80149c8:	4313      	orrs	r3, r2
 80149ca:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80149ce:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	@ 0x180
 80149d2:	4623      	mov	r3, r4
 80149d4:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 80149d8:	4602      	mov	r2, r0
 80149da:	4053      	eors	r3, r2
 80149dc:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80149e0:	462b      	mov	r3, r5
 80149e2:	460a      	mov	r2, r1
 80149e4:	4053      	eors	r3, r2
 80149e6:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80149ea:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 80149ee:	09da      	lsrs	r2, r3, #7
 80149f0:	e002      	b.n	80149f8 <mbedtls_internal_sha512_process+0x1e88>
 80149f2:	bf00      	nop
 80149f4:	0801b3b8 	.word	0x0801b3b8
 80149f8:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 80149fc:	065b      	lsls	r3, r3, #25
 80149fe:	4313      	orrs	r3, r2
 8014a00:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8014a04:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 8014a08:	09da      	lsrs	r2, r3, #7
 8014a0a:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 8014a0e:	065b      	lsls	r3, r3, #25
 8014a10:	4313      	orrs	r3, r2
 8014a12:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8014a16:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	@ 0x170
 8014a1a:	4623      	mov	r3, r4
 8014a1c:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8014a20:	4602      	mov	r2, r0
 8014a22:	4053      	eors	r3, r2
 8014a24:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8014a28:	462b      	mov	r3, r5
 8014a2a:	460a      	mov	r2, r1
 8014a2c:	4053      	eors	r3, r2
 8014a2e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8014a32:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 8014a36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014a3a:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 8014a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a42:	ea00 0402 	and.w	r4, r0, r2
 8014a46:	f8c7 4158 	str.w	r4, [r7, #344]	@ 0x158
 8014a4a:	400b      	ands	r3, r1
 8014a4c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8014a50:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 8014a54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014a58:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 8014a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a60:	ea40 0402 	orr.w	r4, r0, r2
 8014a64:	f8c7 4150 	str.w	r4, [r7, #336]	@ 0x150
 8014a68:	430b      	orrs	r3, r1
 8014a6a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8014a6e:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 8014a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a76:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8014a7a:	4621      	mov	r1, r4
 8014a7c:	4011      	ands	r1, r2
 8014a7e:	f8c7 1148 	str.w	r1, [r7, #328]	@ 0x148
 8014a82:	4629      	mov	r1, r5
 8014a84:	400b      	ands	r3, r1
 8014a86:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8014a8a:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 8014a8e:	4623      	mov	r3, r4
 8014a90:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8014a94:	4602      	mov	r2, r0
 8014a96:	4313      	orrs	r3, r2
 8014a98:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8014a9c:	462b      	mov	r3, r5
 8014a9e:	460a      	mov	r2, r1
 8014aa0:	4313      	orrs	r3, r2
 8014aa2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8014aa6:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8014aaa:	4623      	mov	r3, r4
 8014aac:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8014ab0:	4602      	mov	r2, r0
 8014ab2:	189b      	adds	r3, r3, r2
 8014ab4:	613b      	str	r3, [r7, #16]
 8014ab6:	462b      	mov	r3, r5
 8014ab8:	460a      	mov	r2, r1
 8014aba:	4153      	adcs	r3, r2
 8014abc:	617b      	str	r3, [r7, #20]
 8014abe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8014ac2:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 8014ac6:	e9c2 3400 	strd	r3, r4, [r2]
 8014aca:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 8014ace:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014ad2:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 8014ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ada:	1884      	adds	r4, r0, r2
 8014adc:	60bc      	str	r4, [r7, #8]
 8014ade:	eb41 0303 	adc.w	r3, r1, r3
 8014ae2:	60fb      	str	r3, [r7, #12]
 8014ae4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8014ae8:	f507 621b 	add.w	r2, r7, #2480	@ 0x9b0
 8014aec:	e9c2 3400 	strd	r3, r4, [r2]
 8014af0:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 8014af4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014af8:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 8014afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b00:	1884      	adds	r4, r0, r2
 8014b02:	603c      	str	r4, [r7, #0]
 8014b04:	eb41 0303 	adc.w	r3, r1, r3
 8014b08:	607b      	str	r3, [r7, #4]
 8014b0a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8014b0e:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8014b12:	e9c2 3400 	strd	r3, r4, [r2]
 8014b16:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8014b1a:	3301      	adds	r3, #1
 8014b1c:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
    }
    while( i < 80 );
 8014b20:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8014b24:	2b4f      	cmp	r3, #79	@ 0x4f
 8014b26:	f77e aacb 	ble.w	80130c0 <mbedtls_internal_sha512_process+0x550>

    ctx->state[0] += A;
 8014b2a:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8014b2e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8014b38:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8014b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b40:	1884      	adds	r4, r0, r2
 8014b42:	f8c7 4138 	str.w	r4, [r7, #312]	@ 0x138
 8014b46:	eb41 0303 	adc.w	r3, r1, r3
 8014b4a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8014b4e:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8014b52:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8014b5c:	e9c3 1204 	strd	r1, r2, [r3, #16]
    ctx->state[1] += B;
 8014b60:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8014b64:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8014b6e:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 8014b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b76:	1884      	adds	r4, r0, r2
 8014b78:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 8014b7c:	eb41 0303 	adc.w	r3, r1, r3
 8014b80:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8014b84:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8014b88:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8014b92:	e9c3 1206 	strd	r1, r2, [r3, #24]
    ctx->state[2] += C;
 8014b96:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8014b9a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8014ba4:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 8014ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bac:	1884      	adds	r4, r0, r2
 8014bae:	f8c7 4128 	str.w	r4, [r7, #296]	@ 0x128
 8014bb2:	eb41 0303 	adc.w	r3, r1, r3
 8014bb6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8014bba:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8014bbe:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8014bc8:	e9c3 1208 	strd	r1, r2, [r3, #32]
    ctx->state[3] += D;
 8014bcc:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8014bd0:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8014bda:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 8014bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014be2:	1884      	adds	r4, r0, r2
 8014be4:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 8014be8:	eb41 0303 	adc.w	r3, r1, r3
 8014bec:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8014bf0:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8014bf4:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8014bfe:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
    ctx->state[4] += E;
 8014c02:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8014c06:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8014c10:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 8014c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c18:	1884      	adds	r4, r0, r2
 8014c1a:	f8c7 4118 	str.w	r4, [r7, #280]	@ 0x118
 8014c1e:	eb41 0303 	adc.w	r3, r1, r3
 8014c22:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8014c26:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8014c2a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8014c34:	e9c3 120c 	strd	r1, r2, [r3, #48]	@ 0x30
    ctx->state[5] += F;
 8014c38:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8014c3c:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8014c46:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 8014c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c4e:	1884      	adds	r4, r0, r2
 8014c50:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 8014c54:	eb41 0303 	adc.w	r3, r1, r3
 8014c58:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8014c5c:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8014c60:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8014c6a:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
    ctx->state[6] += G;
 8014c6e:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8014c72:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8014c7c:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 8014c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c84:	1884      	adds	r4, r0, r2
 8014c86:	f8c7 4108 	str.w	r4, [r7, #264]	@ 0x108
 8014c8a:	eb41 0303 	adc.w	r3, r1, r3
 8014c8e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8014c92:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8014c96:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8014ca0:	e9c3 1210 	strd	r1, r2, [r3, #64]	@ 0x40
    ctx->state[7] += H;
 8014ca4:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8014ca8:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8014cb2:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 8014cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cba:	1884      	adds	r4, r0, r2
 8014cbc:	f8c7 4100 	str.w	r4, [r7, #256]	@ 0x100
 8014cc0:	eb41 0303 	adc.w	r3, r1, r3
 8014cc4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8014cc8:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8014ccc:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8014cd6:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48

    return( 0 );
 8014cda:	2300      	movs	r3, #0
}
 8014cdc:	4618      	mov	r0, r3
 8014cde:	f507 671e 	add.w	r7, r7, #2528	@ 0x9e0
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014ce8:	4770      	bx	lr
 8014cea:	bf00      	nop

08014cec <mbedtls_sha512_update_ret>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8014cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014cf0:	b08a      	sub	sp, #40	@ 0x28
 8014cf2:	af00      	add	r7, sp, #0
 8014cf4:	6178      	str	r0, [r7, #20]
 8014cf6:	6139      	str	r1, [r7, #16]
 8014cf8:	60fa      	str	r2, [r7, #12]
    unsigned int left;

    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d101      	bne.n	8014d04 <mbedtls_sha512_update_ret+0x18>
        return( 0 );
 8014d00:	2300      	movs	r3, #0
 8014d02:	e079      	b.n	8014df8 <mbedtls_sha512_update_ret+0x10c>

    left = (unsigned int) (ctx->total[0] & 0x7F);
 8014d04:	697b      	ldr	r3, [r7, #20]
 8014d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d0a:	4613      	mov	r3, r2
 8014d0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014d10:	627b      	str	r3, [r7, #36]	@ 0x24
    fill = 128 - left;
 8014d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d14:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8014d18:	623b      	str	r3, [r7, #32]

    ctx->total[0] += (uint64_t) ilen;
 8014d1a:	697b      	ldr	r3, [r7, #20]
 8014d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d20:	68f9      	ldr	r1, [r7, #12]
 8014d22:	2000      	movs	r0, #0
 8014d24:	4688      	mov	r8, r1
 8014d26:	4681      	mov	r9, r0
 8014d28:	eb12 0108 	adds.w	r1, r2, r8
 8014d2c:	6039      	str	r1, [r7, #0]
 8014d2e:	eb43 0309 	adc.w	r3, r3, r9
 8014d32:	607b      	str	r3, [r7, #4]
 8014d34:	697b      	ldr	r3, [r7, #20]
 8014d36:	e9d7 1200 	ldrd	r1, r2, [r7]
 8014d3a:	e9c3 1200 	strd	r1, r2, [r3]

    if( ctx->total[0] < (uint64_t) ilen )
 8014d3e:	697b      	ldr	r3, [r7, #20]
 8014d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d44:	68f9      	ldr	r1, [r7, #12]
 8014d46:	2000      	movs	r0, #0
 8014d48:	460c      	mov	r4, r1
 8014d4a:	4605      	mov	r5, r0
 8014d4c:	42a2      	cmp	r2, r4
 8014d4e:	41ab      	sbcs	r3, r5
 8014d50:	d209      	bcs.n	8014d66 <mbedtls_sha512_update_ret+0x7a>
        ctx->total[1]++;
 8014d52:	697b      	ldr	r3, [r7, #20]
 8014d54:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8014d58:	f112 0a01 	adds.w	sl, r2, #1
 8014d5c:	f143 0b00 	adc.w	fp, r3, #0
 8014d60:	697b      	ldr	r3, [r7, #20]
 8014d62:	e9c3 ab02 	strd	sl, fp, [r3, #8]

    if( left && ilen >= fill )
 8014d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d034      	beq.n	8014dd6 <mbedtls_sha512_update_ret+0xea>
 8014d6c:	68fa      	ldr	r2, [r7, #12]
 8014d6e:	6a3b      	ldr	r3, [r7, #32]
 8014d70:	429a      	cmp	r2, r3
 8014d72:	d330      	bcc.n	8014dd6 <mbedtls_sha512_update_ret+0xea>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8014d74:	697b      	ldr	r3, [r7, #20]
 8014d76:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8014d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d7c:	4413      	add	r3, r2
 8014d7e:	6a3a      	ldr	r2, [r7, #32]
 8014d80:	6939      	ldr	r1, [r7, #16]
 8014d82:	4618      	mov	r0, r3
 8014d84:	f001 fff5 	bl	8016d72 <memcpy>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 8014d88:	697b      	ldr	r3, [r7, #20]
 8014d8a:	3350      	adds	r3, #80	@ 0x50
 8014d8c:	4619      	mov	r1, r3
 8014d8e:	6978      	ldr	r0, [r7, #20]
 8014d90:	f7fd feee 	bl	8012b70 <mbedtls_internal_sha512_process>
 8014d94:	61f8      	str	r0, [r7, #28]
 8014d96:	69fb      	ldr	r3, [r7, #28]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d001      	beq.n	8014da0 <mbedtls_sha512_update_ret+0xb4>
            return( ret );
 8014d9c:	69fb      	ldr	r3, [r7, #28]
 8014d9e:	e02b      	b.n	8014df8 <mbedtls_sha512_update_ret+0x10c>

        input += fill;
 8014da0:	693a      	ldr	r2, [r7, #16]
 8014da2:	6a3b      	ldr	r3, [r7, #32]
 8014da4:	4413      	add	r3, r2
 8014da6:	613b      	str	r3, [r7, #16]
        ilen  -= fill;
 8014da8:	68fa      	ldr	r2, [r7, #12]
 8014daa:	6a3b      	ldr	r3, [r7, #32]
 8014dac:	1ad3      	subs	r3, r2, r3
 8014dae:	60fb      	str	r3, [r7, #12]
        left = 0;
 8014db0:	2300      	movs	r3, #0
 8014db2:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    while( ilen >= 128 )
 8014db4:	e00f      	b.n	8014dd6 <mbedtls_sha512_update_ret+0xea>
    {
        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
 8014db6:	6939      	ldr	r1, [r7, #16]
 8014db8:	6978      	ldr	r0, [r7, #20]
 8014dba:	f7fd fed9 	bl	8012b70 <mbedtls_internal_sha512_process>
 8014dbe:	61f8      	str	r0, [r7, #28]
 8014dc0:	69fb      	ldr	r3, [r7, #28]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d001      	beq.n	8014dca <mbedtls_sha512_update_ret+0xde>
            return( ret );
 8014dc6:	69fb      	ldr	r3, [r7, #28]
 8014dc8:	e016      	b.n	8014df8 <mbedtls_sha512_update_ret+0x10c>

        input += 128;
 8014dca:	693b      	ldr	r3, [r7, #16]
 8014dcc:	3380      	adds	r3, #128	@ 0x80
 8014dce:	613b      	str	r3, [r7, #16]
        ilen  -= 128;
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	3b80      	subs	r3, #128	@ 0x80
 8014dd4:	60fb      	str	r3, [r7, #12]
    while( ilen >= 128 )
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	2b7f      	cmp	r3, #127	@ 0x7f
 8014dda:	d8ec      	bhi.n	8014db6 <mbedtls_sha512_update_ret+0xca>
    }

    if( ilen > 0 )
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d009      	beq.n	8014df6 <mbedtls_sha512_update_ret+0x10a>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8014de2:	697b      	ldr	r3, [r7, #20]
 8014de4:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8014de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dea:	4413      	add	r3, r2
 8014dec:	68fa      	ldr	r2, [r7, #12]
 8014dee:	6939      	ldr	r1, [r7, #16]
 8014df0:	4618      	mov	r0, r3
 8014df2:	f001 ffbe 	bl	8016d72 <memcpy>

    return( 0 );
 8014df6:	2300      	movs	r3, #0
}
 8014df8:	4618      	mov	r0, r3
 8014dfa:	3728      	adds	r7, #40	@ 0x28
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08014e02 <mbedtls_sha512_finish_ret>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 8014e02:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8014e06:	b088      	sub	sp, #32
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
 8014e0c:	6039      	str	r1, [r7, #0]
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e14:	4613      	mov	r3, r2
 8014e16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014e1a:	61fb      	str	r3, [r7, #28]

    ctx->buffer[used++] = 0x80;
 8014e1c:	69fb      	ldr	r3, [r7, #28]
 8014e1e:	1c5a      	adds	r2, r3, #1
 8014e20:	61fa      	str	r2, [r7, #28]
 8014e22:	687a      	ldr	r2, [r7, #4]
 8014e24:	4413      	add	r3, r2
 8014e26:	2280      	movs	r2, #128	@ 0x80
 8014e28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    if( used <= 112 )
 8014e2c:	69fb      	ldr	r3, [r7, #28]
 8014e2e:	2b70      	cmp	r3, #112	@ 0x70
 8014e30:	d80c      	bhi.n	8014e4c <mbedtls_sha512_finish_ret+0x4a>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 112 - used );
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8014e38:	69fb      	ldr	r3, [r7, #28]
 8014e3a:	18d0      	adds	r0, r2, r3
 8014e3c:	69fb      	ldr	r3, [r7, #28]
 8014e3e:	f1c3 0370 	rsb	r3, r3, #112	@ 0x70
 8014e42:	461a      	mov	r2, r3
 8014e44:	2100      	movs	r1, #0
 8014e46:	f001 feb7 	bl	8016bb8 <memset>
 8014e4a:	e01f      	b.n	8014e8c <mbedtls_sha512_finish_ret+0x8a>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 128 - used );
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8014e52:	69fb      	ldr	r3, [r7, #28]
 8014e54:	18d0      	adds	r0, r2, r3
 8014e56:	69fb      	ldr	r3, [r7, #28]
 8014e58:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8014e5c:	461a      	mov	r2, r3
 8014e5e:	2100      	movs	r1, #0
 8014e60:	f001 feaa 	bl	8016bb8 <memset>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	3350      	adds	r3, #80	@ 0x50
 8014e68:	4619      	mov	r1, r3
 8014e6a:	6878      	ldr	r0, [r7, #4]
 8014e6c:	f7fd fe80 	bl	8012b70 <mbedtls_internal_sha512_process>
 8014e70:	61b8      	str	r0, [r7, #24]
 8014e72:	69bb      	ldr	r3, [r7, #24]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d002      	beq.n	8014e7e <mbedtls_sha512_finish_ret+0x7c>
            return( ret );
 8014e78:	69bb      	ldr	r3, [r7, #24]
 8014e7a:	f000 bc3c 	b.w	80156f6 <mbedtls_sha512_finish_ret+0x8f4>

        memset( ctx->buffer, 0, 112 );
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	3350      	adds	r3, #80	@ 0x50
 8014e82:	2270      	movs	r2, #112	@ 0x70
 8014e84:	2100      	movs	r1, #0
 8014e86:	4618      	mov	r0, r3
 8014e88:	f001 fe96 	bl	8016bb8 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e92:	f04f 0000 	mov.w	r0, #0
 8014e96:	f04f 0100 	mov.w	r1, #0
 8014e9a:	0f58      	lsrs	r0, r3, #29
 8014e9c:	2100      	movs	r1, #0
         | ( ctx->total[1] <<  3 );
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8014ea4:	f04f 0200 	mov.w	r2, #0
 8014ea8:	f04f 0300 	mov.w	r3, #0
 8014eac:	00eb      	lsls	r3, r5, #3
 8014eae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8014eb2:	00e2      	lsls	r2, r4, #3
    high = ( ctx->total[0] >> 61 )
 8014eb4:	ea40 0802 	orr.w	r8, r0, r2
 8014eb8:	ea41 0903 	orr.w	r9, r1, r3
 8014ebc:	e9c7 8904 	strd	r8, r9, [r7, #16]
    low  = ( ctx->total[0] <<  3 );
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014ec6:	f04f 0200 	mov.w	r2, #0
 8014eca:	f04f 0300 	mov.w	r3, #0
 8014ece:	00cb      	lsls	r3, r1, #3
 8014ed0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8014ed4:	00c2      	lsls	r2, r0, #3
 8014ed6:	e9c7 2302 	strd	r2, r3, [r7, #8]

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 8014eda:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014ede:	f04f 0200 	mov.w	r2, #0
 8014ee2:	f04f 0300 	mov.w	r3, #0
 8014ee6:	0e0a      	lsrs	r2, r1, #24
 8014ee8:	2300      	movs	r3, #0
 8014eea:	b2d2      	uxtb	r2, r2
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
 8014ef2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014ef6:	f04f 0200 	mov.w	r2, #0
 8014efa:	f04f 0300 	mov.w	r3, #0
 8014efe:	0c0a      	lsrs	r2, r1, #16
 8014f00:	2300      	movs	r3, #0
 8014f02:	b2d2      	uxtb	r2, r2
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
 8014f0a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014f0e:	f04f 0200 	mov.w	r2, #0
 8014f12:	f04f 0300 	mov.w	r3, #0
 8014f16:	0a0a      	lsrs	r2, r1, #8
 8014f18:	2300      	movs	r3, #0
 8014f1a:	b2d2      	uxtb	r2, r2
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
 8014f22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014f26:	f04f 0200 	mov.w	r2, #0
 8014f2a:	f04f 0300 	mov.w	r3, #0
 8014f2e:	000a      	movs	r2, r1
 8014f30:	2300      	movs	r3, #0
 8014f32:	b2d2      	uxtb	r2, r2
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	f883 20c3 	strb.w	r2, [r3, #195]	@ 0xc3
 8014f3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014f3e:	f04f 0200 	mov.w	r2, #0
 8014f42:	f04f 0300 	mov.w	r3, #0
 8014f46:	0e02      	lsrs	r2, r0, #24
 8014f48:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8014f4c:	0e0b      	lsrs	r3, r1, #24
 8014f4e:	b2d2      	uxtb	r2, r2
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
 8014f56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014f5a:	f04f 0200 	mov.w	r2, #0
 8014f5e:	f04f 0300 	mov.w	r3, #0
 8014f62:	0c02      	lsrs	r2, r0, #16
 8014f64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8014f68:	0c0b      	lsrs	r3, r1, #16
 8014f6a:	b2d2      	uxtb	r2, r2
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
 8014f72:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014f76:	f04f 0200 	mov.w	r2, #0
 8014f7a:	f04f 0300 	mov.w	r3, #0
 8014f7e:	0a02      	lsrs	r2, r0, #8
 8014f80:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8014f84:	0a0b      	lsrs	r3, r1, #8
 8014f86:	b2d2      	uxtb	r2, r2
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	f883 20c6 	strb.w	r2, [r3, #198]	@ 0xc6
 8014f8e:	7c3a      	ldrb	r2, [r7, #16]
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	f883 20c7 	strb.w	r2, [r3, #199]	@ 0xc7
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 8014f96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014f9a:	f04f 0200 	mov.w	r2, #0
 8014f9e:	f04f 0300 	mov.w	r3, #0
 8014fa2:	0e0a      	lsrs	r2, r1, #24
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	b2d2      	uxtb	r2, r2
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 8014fae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014fb2:	f04f 0200 	mov.w	r2, #0
 8014fb6:	f04f 0300 	mov.w	r3, #0
 8014fba:	0c0a      	lsrs	r2, r1, #16
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	b2d2      	uxtb	r2, r2
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 8014fc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014fca:	f04f 0200 	mov.w	r2, #0
 8014fce:	f04f 0300 	mov.w	r3, #0
 8014fd2:	0a0a      	lsrs	r2, r1, #8
 8014fd4:	2300      	movs	r3, #0
 8014fd6:	b2d2      	uxtb	r2, r2
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 8014fde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014fe2:	f04f 0200 	mov.w	r2, #0
 8014fe6:	f04f 0300 	mov.w	r3, #0
 8014fea:	000a      	movs	r2, r1
 8014fec:	2300      	movs	r3, #0
 8014fee:	b2d2      	uxtb	r2, r2
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
 8014ff6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014ffa:	f04f 0200 	mov.w	r2, #0
 8014ffe:	f04f 0300 	mov.w	r3, #0
 8015002:	0e02      	lsrs	r2, r0, #24
 8015004:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8015008:	0e0b      	lsrs	r3, r1, #24
 801500a:	b2d2      	uxtb	r2, r2
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
 8015012:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015016:	f04f 0200 	mov.w	r2, #0
 801501a:	f04f 0300 	mov.w	r3, #0
 801501e:	0c02      	lsrs	r2, r0, #16
 8015020:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8015024:	0c0b      	lsrs	r3, r1, #16
 8015026:	b2d2      	uxtb	r2, r2
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd
 801502e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015032:	f04f 0200 	mov.w	r2, #0
 8015036:	f04f 0300 	mov.w	r3, #0
 801503a:	0a02      	lsrs	r2, r0, #8
 801503c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8015040:	0a0b      	lsrs	r3, r1, #8
 8015042:	b2d2      	uxtb	r2, r2
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	f883 20ce 	strb.w	r2, [r3, #206]	@ 0xce
 801504a:	7a3a      	ldrb	r2, [r7, #8]
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	f883 20cf 	strb.w	r2, [r3, #207]	@ 0xcf

    if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	3350      	adds	r3, #80	@ 0x50
 8015056:	4619      	mov	r1, r3
 8015058:	6878      	ldr	r0, [r7, #4]
 801505a:	f7fd fd89 	bl	8012b70 <mbedtls_internal_sha512_process>
 801505e:	61b8      	str	r0, [r7, #24]
 8015060:	69bb      	ldr	r3, [r7, #24]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d001      	beq.n	801506a <mbedtls_sha512_finish_ret+0x268>
        return( ret );
 8015066:	69bb      	ldr	r3, [r7, #24]
 8015068:	e345      	b.n	80156f6 <mbedtls_sha512_finish_ret+0x8f4>

    /*
     * Output final state
     */
    PUT_UINT64_BE( ctx->state[0], output,  0 );
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8015070:	f04f 0200 	mov.w	r2, #0
 8015074:	f04f 0300 	mov.w	r3, #0
 8015078:	0e0a      	lsrs	r2, r1, #24
 801507a:	2300      	movs	r3, #0
 801507c:	b2d2      	uxtb	r2, r2
 801507e:	683b      	ldr	r3, [r7, #0]
 8015080:	701a      	strb	r2, [r3, #0]
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8015088:	f04f 0200 	mov.w	r2, #0
 801508c:	f04f 0300 	mov.w	r3, #0
 8015090:	0c0a      	lsrs	r2, r1, #16
 8015092:	2300      	movs	r3, #0
 8015094:	6839      	ldr	r1, [r7, #0]
 8015096:	3101      	adds	r1, #1
 8015098:	b2d3      	uxtb	r3, r2
 801509a:	700b      	strb	r3, [r1, #0]
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80150a2:	f04f 0200 	mov.w	r2, #0
 80150a6:	f04f 0300 	mov.w	r3, #0
 80150aa:	0a0a      	lsrs	r2, r1, #8
 80150ac:	2300      	movs	r3, #0
 80150ae:	6839      	ldr	r1, [r7, #0]
 80150b0:	3102      	adds	r1, #2
 80150b2:	b2d3      	uxtb	r3, r2
 80150b4:	700b      	strb	r3, [r1, #0]
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80150bc:	f04f 0200 	mov.w	r2, #0
 80150c0:	f04f 0300 	mov.w	r3, #0
 80150c4:	000a      	movs	r2, r1
 80150c6:	2300      	movs	r3, #0
 80150c8:	6839      	ldr	r1, [r7, #0]
 80150ca:	3103      	adds	r1, #3
 80150cc:	b2d3      	uxtb	r3, r2
 80150ce:	700b      	strb	r3, [r1, #0]
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80150d6:	f04f 0200 	mov.w	r2, #0
 80150da:	f04f 0300 	mov.w	r3, #0
 80150de:	0e02      	lsrs	r2, r0, #24
 80150e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80150e4:	0e0b      	lsrs	r3, r1, #24
 80150e6:	6839      	ldr	r1, [r7, #0]
 80150e8:	3104      	adds	r1, #4
 80150ea:	b2d3      	uxtb	r3, r2
 80150ec:	700b      	strb	r3, [r1, #0]
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80150f4:	f04f 0200 	mov.w	r2, #0
 80150f8:	f04f 0300 	mov.w	r3, #0
 80150fc:	0c02      	lsrs	r2, r0, #16
 80150fe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8015102:	0c0b      	lsrs	r3, r1, #16
 8015104:	6839      	ldr	r1, [r7, #0]
 8015106:	3105      	adds	r1, #5
 8015108:	b2d3      	uxtb	r3, r2
 801510a:	700b      	strb	r3, [r1, #0]
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8015112:	f04f 0200 	mov.w	r2, #0
 8015116:	f04f 0300 	mov.w	r3, #0
 801511a:	0a02      	lsrs	r2, r0, #8
 801511c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8015120:	0a0b      	lsrs	r3, r1, #8
 8015122:	6839      	ldr	r1, [r7, #0]
 8015124:	3106      	adds	r1, #6
 8015126:	b2d3      	uxtb	r3, r2
 8015128:	700b      	strb	r3, [r1, #0]
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8015130:	6839      	ldr	r1, [r7, #0]
 8015132:	3107      	adds	r1, #7
 8015134:	b2d3      	uxtb	r3, r2
 8015136:	700b      	strb	r3, [r1, #0]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 801513e:	f04f 0200 	mov.w	r2, #0
 8015142:	f04f 0300 	mov.w	r3, #0
 8015146:	0e0a      	lsrs	r2, r1, #24
 8015148:	2300      	movs	r3, #0
 801514a:	6839      	ldr	r1, [r7, #0]
 801514c:	3108      	adds	r1, #8
 801514e:	b2d3      	uxtb	r3, r2
 8015150:	700b      	strb	r3, [r1, #0]
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8015158:	f04f 0200 	mov.w	r2, #0
 801515c:	f04f 0300 	mov.w	r3, #0
 8015160:	0c0a      	lsrs	r2, r1, #16
 8015162:	2300      	movs	r3, #0
 8015164:	6839      	ldr	r1, [r7, #0]
 8015166:	3109      	adds	r1, #9
 8015168:	b2d3      	uxtb	r3, r2
 801516a:	700b      	strb	r3, [r1, #0]
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8015172:	f04f 0200 	mov.w	r2, #0
 8015176:	f04f 0300 	mov.w	r3, #0
 801517a:	0a0a      	lsrs	r2, r1, #8
 801517c:	2300      	movs	r3, #0
 801517e:	6839      	ldr	r1, [r7, #0]
 8015180:	310a      	adds	r1, #10
 8015182:	b2d3      	uxtb	r3, r2
 8015184:	700b      	strb	r3, [r1, #0]
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 801518c:	f04f 0200 	mov.w	r2, #0
 8015190:	f04f 0300 	mov.w	r3, #0
 8015194:	000a      	movs	r2, r1
 8015196:	2300      	movs	r3, #0
 8015198:	6839      	ldr	r1, [r7, #0]
 801519a:	310b      	adds	r1, #11
 801519c:	b2d3      	uxtb	r3, r2
 801519e:	700b      	strb	r3, [r1, #0]
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80151a6:	f04f 0200 	mov.w	r2, #0
 80151aa:	f04f 0300 	mov.w	r3, #0
 80151ae:	0e02      	lsrs	r2, r0, #24
 80151b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80151b4:	0e0b      	lsrs	r3, r1, #24
 80151b6:	6839      	ldr	r1, [r7, #0]
 80151b8:	310c      	adds	r1, #12
 80151ba:	b2d3      	uxtb	r3, r2
 80151bc:	700b      	strb	r3, [r1, #0]
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80151c4:	f04f 0200 	mov.w	r2, #0
 80151c8:	f04f 0300 	mov.w	r3, #0
 80151cc:	0c02      	lsrs	r2, r0, #16
 80151ce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80151d2:	0c0b      	lsrs	r3, r1, #16
 80151d4:	6839      	ldr	r1, [r7, #0]
 80151d6:	310d      	adds	r1, #13
 80151d8:	b2d3      	uxtb	r3, r2
 80151da:	700b      	strb	r3, [r1, #0]
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80151e2:	f04f 0200 	mov.w	r2, #0
 80151e6:	f04f 0300 	mov.w	r3, #0
 80151ea:	0a02      	lsrs	r2, r0, #8
 80151ec:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80151f0:	0a0b      	lsrs	r3, r1, #8
 80151f2:	6839      	ldr	r1, [r7, #0]
 80151f4:	310e      	adds	r1, #14
 80151f6:	b2d3      	uxtb	r3, r2
 80151f8:	700b      	strb	r3, [r1, #0]
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8015200:	6839      	ldr	r1, [r7, #0]
 8015202:	310f      	adds	r1, #15
 8015204:	b2d3      	uxtb	r3, r2
 8015206:	700b      	strb	r3, [r1, #0]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 801520e:	f04f 0200 	mov.w	r2, #0
 8015212:	f04f 0300 	mov.w	r3, #0
 8015216:	0e0a      	lsrs	r2, r1, #24
 8015218:	2300      	movs	r3, #0
 801521a:	6839      	ldr	r1, [r7, #0]
 801521c:	3110      	adds	r1, #16
 801521e:	b2d3      	uxtb	r3, r2
 8015220:	700b      	strb	r3, [r1, #0]
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8015228:	f04f 0200 	mov.w	r2, #0
 801522c:	f04f 0300 	mov.w	r3, #0
 8015230:	0c0a      	lsrs	r2, r1, #16
 8015232:	2300      	movs	r3, #0
 8015234:	6839      	ldr	r1, [r7, #0]
 8015236:	3111      	adds	r1, #17
 8015238:	b2d3      	uxtb	r3, r2
 801523a:	700b      	strb	r3, [r1, #0]
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8015242:	f04f 0200 	mov.w	r2, #0
 8015246:	f04f 0300 	mov.w	r3, #0
 801524a:	0a0a      	lsrs	r2, r1, #8
 801524c:	2300      	movs	r3, #0
 801524e:	6839      	ldr	r1, [r7, #0]
 8015250:	3112      	adds	r1, #18
 8015252:	b2d3      	uxtb	r3, r2
 8015254:	700b      	strb	r3, [r1, #0]
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 801525c:	f04f 0200 	mov.w	r2, #0
 8015260:	f04f 0300 	mov.w	r3, #0
 8015264:	000a      	movs	r2, r1
 8015266:	2300      	movs	r3, #0
 8015268:	6839      	ldr	r1, [r7, #0]
 801526a:	3113      	adds	r1, #19
 801526c:	b2d3      	uxtb	r3, r2
 801526e:	700b      	strb	r3, [r1, #0]
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8015276:	f04f 0200 	mov.w	r2, #0
 801527a:	f04f 0300 	mov.w	r3, #0
 801527e:	0e02      	lsrs	r2, r0, #24
 8015280:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8015284:	0e0b      	lsrs	r3, r1, #24
 8015286:	6839      	ldr	r1, [r7, #0]
 8015288:	3114      	adds	r1, #20
 801528a:	b2d3      	uxtb	r3, r2
 801528c:	700b      	strb	r3, [r1, #0]
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8015294:	f04f 0200 	mov.w	r2, #0
 8015298:	f04f 0300 	mov.w	r3, #0
 801529c:	0c02      	lsrs	r2, r0, #16
 801529e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80152a2:	0c0b      	lsrs	r3, r1, #16
 80152a4:	6839      	ldr	r1, [r7, #0]
 80152a6:	3115      	adds	r1, #21
 80152a8:	b2d3      	uxtb	r3, r2
 80152aa:	700b      	strb	r3, [r1, #0]
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80152b2:	f04f 0200 	mov.w	r2, #0
 80152b6:	f04f 0300 	mov.w	r3, #0
 80152ba:	0a02      	lsrs	r2, r0, #8
 80152bc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80152c0:	0a0b      	lsrs	r3, r1, #8
 80152c2:	6839      	ldr	r1, [r7, #0]
 80152c4:	3116      	adds	r1, #22
 80152c6:	b2d3      	uxtb	r3, r2
 80152c8:	700b      	strb	r3, [r1, #0]
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80152d0:	6839      	ldr	r1, [r7, #0]
 80152d2:	3117      	adds	r1, #23
 80152d4:	b2d3      	uxtb	r3, r2
 80152d6:	700b      	strb	r3, [r1, #0]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80152de:	f04f 0200 	mov.w	r2, #0
 80152e2:	f04f 0300 	mov.w	r3, #0
 80152e6:	0e0a      	lsrs	r2, r1, #24
 80152e8:	2300      	movs	r3, #0
 80152ea:	6839      	ldr	r1, [r7, #0]
 80152ec:	3118      	adds	r1, #24
 80152ee:	b2d3      	uxtb	r3, r2
 80152f0:	700b      	strb	r3, [r1, #0]
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80152f8:	f04f 0200 	mov.w	r2, #0
 80152fc:	f04f 0300 	mov.w	r3, #0
 8015300:	0c0a      	lsrs	r2, r1, #16
 8015302:	2300      	movs	r3, #0
 8015304:	6839      	ldr	r1, [r7, #0]
 8015306:	3119      	adds	r1, #25
 8015308:	b2d3      	uxtb	r3, r2
 801530a:	700b      	strb	r3, [r1, #0]
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8015312:	f04f 0200 	mov.w	r2, #0
 8015316:	f04f 0300 	mov.w	r3, #0
 801531a:	0a0a      	lsrs	r2, r1, #8
 801531c:	2300      	movs	r3, #0
 801531e:	6839      	ldr	r1, [r7, #0]
 8015320:	311a      	adds	r1, #26
 8015322:	b2d3      	uxtb	r3, r2
 8015324:	700b      	strb	r3, [r1, #0]
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 801532c:	f04f 0200 	mov.w	r2, #0
 8015330:	f04f 0300 	mov.w	r3, #0
 8015334:	000a      	movs	r2, r1
 8015336:	2300      	movs	r3, #0
 8015338:	6839      	ldr	r1, [r7, #0]
 801533a:	311b      	adds	r1, #27
 801533c:	b2d3      	uxtb	r3, r2
 801533e:	700b      	strb	r3, [r1, #0]
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8015346:	f04f 0200 	mov.w	r2, #0
 801534a:	f04f 0300 	mov.w	r3, #0
 801534e:	0e02      	lsrs	r2, r0, #24
 8015350:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8015354:	0e0b      	lsrs	r3, r1, #24
 8015356:	6839      	ldr	r1, [r7, #0]
 8015358:	311c      	adds	r1, #28
 801535a:	b2d3      	uxtb	r3, r2
 801535c:	700b      	strb	r3, [r1, #0]
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8015364:	f04f 0200 	mov.w	r2, #0
 8015368:	f04f 0300 	mov.w	r3, #0
 801536c:	0c02      	lsrs	r2, r0, #16
 801536e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8015372:	0c0b      	lsrs	r3, r1, #16
 8015374:	6839      	ldr	r1, [r7, #0]
 8015376:	311d      	adds	r1, #29
 8015378:	b2d3      	uxtb	r3, r2
 801537a:	700b      	strb	r3, [r1, #0]
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8015382:	f04f 0200 	mov.w	r2, #0
 8015386:	f04f 0300 	mov.w	r3, #0
 801538a:	0a02      	lsrs	r2, r0, #8
 801538c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8015390:	0a0b      	lsrs	r3, r1, #8
 8015392:	6839      	ldr	r1, [r7, #0]
 8015394:	311e      	adds	r1, #30
 8015396:	b2d3      	uxtb	r3, r2
 8015398:	700b      	strb	r3, [r1, #0]
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80153a0:	6839      	ldr	r1, [r7, #0]
 80153a2:	311f      	adds	r1, #31
 80153a4:	b2d3      	uxtb	r3, r2
 80153a6:	700b      	strb	r3, [r1, #0]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80153ae:	f04f 0200 	mov.w	r2, #0
 80153b2:	f04f 0300 	mov.w	r3, #0
 80153b6:	0e0a      	lsrs	r2, r1, #24
 80153b8:	2300      	movs	r3, #0
 80153ba:	6839      	ldr	r1, [r7, #0]
 80153bc:	3120      	adds	r1, #32
 80153be:	b2d3      	uxtb	r3, r2
 80153c0:	700b      	strb	r3, [r1, #0]
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80153c8:	f04f 0200 	mov.w	r2, #0
 80153cc:	f04f 0300 	mov.w	r3, #0
 80153d0:	0c0a      	lsrs	r2, r1, #16
 80153d2:	2300      	movs	r3, #0
 80153d4:	6839      	ldr	r1, [r7, #0]
 80153d6:	3121      	adds	r1, #33	@ 0x21
 80153d8:	b2d3      	uxtb	r3, r2
 80153da:	700b      	strb	r3, [r1, #0]
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80153e2:	f04f 0200 	mov.w	r2, #0
 80153e6:	f04f 0300 	mov.w	r3, #0
 80153ea:	0a0a      	lsrs	r2, r1, #8
 80153ec:	2300      	movs	r3, #0
 80153ee:	6839      	ldr	r1, [r7, #0]
 80153f0:	3122      	adds	r1, #34	@ 0x22
 80153f2:	b2d3      	uxtb	r3, r2
 80153f4:	700b      	strb	r3, [r1, #0]
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80153fc:	f04f 0200 	mov.w	r2, #0
 8015400:	f04f 0300 	mov.w	r3, #0
 8015404:	000a      	movs	r2, r1
 8015406:	2300      	movs	r3, #0
 8015408:	6839      	ldr	r1, [r7, #0]
 801540a:	3123      	adds	r1, #35	@ 0x23
 801540c:	b2d3      	uxtb	r3, r2
 801540e:	700b      	strb	r3, [r1, #0]
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8015416:	f04f 0200 	mov.w	r2, #0
 801541a:	f04f 0300 	mov.w	r3, #0
 801541e:	0e02      	lsrs	r2, r0, #24
 8015420:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8015424:	0e0b      	lsrs	r3, r1, #24
 8015426:	6839      	ldr	r1, [r7, #0]
 8015428:	3124      	adds	r1, #36	@ 0x24
 801542a:	b2d3      	uxtb	r3, r2
 801542c:	700b      	strb	r3, [r1, #0]
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8015434:	f04f 0200 	mov.w	r2, #0
 8015438:	f04f 0300 	mov.w	r3, #0
 801543c:	0c02      	lsrs	r2, r0, #16
 801543e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8015442:	0c0b      	lsrs	r3, r1, #16
 8015444:	6839      	ldr	r1, [r7, #0]
 8015446:	3125      	adds	r1, #37	@ 0x25
 8015448:	b2d3      	uxtb	r3, r2
 801544a:	700b      	strb	r3, [r1, #0]
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8015452:	f04f 0200 	mov.w	r2, #0
 8015456:	f04f 0300 	mov.w	r3, #0
 801545a:	0a02      	lsrs	r2, r0, #8
 801545c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8015460:	0a0b      	lsrs	r3, r1, #8
 8015462:	6839      	ldr	r1, [r7, #0]
 8015464:	3126      	adds	r1, #38	@ 0x26
 8015466:	b2d3      	uxtb	r3, r2
 8015468:	700b      	strb	r3, [r1, #0]
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8015470:	6839      	ldr	r1, [r7, #0]
 8015472:	3127      	adds	r1, #39	@ 0x27
 8015474:	b2d3      	uxtb	r3, r2
 8015476:	700b      	strb	r3, [r1, #0]
    PUT_UINT64_BE( ctx->state[5], output, 40 );
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 801547e:	f04f 0200 	mov.w	r2, #0
 8015482:	f04f 0300 	mov.w	r3, #0
 8015486:	0e0a      	lsrs	r2, r1, #24
 8015488:	2300      	movs	r3, #0
 801548a:	6839      	ldr	r1, [r7, #0]
 801548c:	3128      	adds	r1, #40	@ 0x28
 801548e:	b2d3      	uxtb	r3, r2
 8015490:	700b      	strb	r3, [r1, #0]
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8015498:	f04f 0200 	mov.w	r2, #0
 801549c:	f04f 0300 	mov.w	r3, #0
 80154a0:	0c0a      	lsrs	r2, r1, #16
 80154a2:	2300      	movs	r3, #0
 80154a4:	6839      	ldr	r1, [r7, #0]
 80154a6:	3129      	adds	r1, #41	@ 0x29
 80154a8:	b2d3      	uxtb	r3, r2
 80154aa:	700b      	strb	r3, [r1, #0]
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80154b2:	f04f 0200 	mov.w	r2, #0
 80154b6:	f04f 0300 	mov.w	r3, #0
 80154ba:	0a0a      	lsrs	r2, r1, #8
 80154bc:	2300      	movs	r3, #0
 80154be:	6839      	ldr	r1, [r7, #0]
 80154c0:	312a      	adds	r1, #42	@ 0x2a
 80154c2:	b2d3      	uxtb	r3, r2
 80154c4:	700b      	strb	r3, [r1, #0]
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80154cc:	f04f 0200 	mov.w	r2, #0
 80154d0:	f04f 0300 	mov.w	r3, #0
 80154d4:	000a      	movs	r2, r1
 80154d6:	2300      	movs	r3, #0
 80154d8:	6839      	ldr	r1, [r7, #0]
 80154da:	312b      	adds	r1, #43	@ 0x2b
 80154dc:	b2d3      	uxtb	r3, r2
 80154de:	700b      	strb	r3, [r1, #0]
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80154e6:	f04f 0200 	mov.w	r2, #0
 80154ea:	f04f 0300 	mov.w	r3, #0
 80154ee:	0e02      	lsrs	r2, r0, #24
 80154f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80154f4:	0e0b      	lsrs	r3, r1, #24
 80154f6:	6839      	ldr	r1, [r7, #0]
 80154f8:	312c      	adds	r1, #44	@ 0x2c
 80154fa:	b2d3      	uxtb	r3, r2
 80154fc:	700b      	strb	r3, [r1, #0]
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8015504:	f04f 0200 	mov.w	r2, #0
 8015508:	f04f 0300 	mov.w	r3, #0
 801550c:	0c02      	lsrs	r2, r0, #16
 801550e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8015512:	0c0b      	lsrs	r3, r1, #16
 8015514:	6839      	ldr	r1, [r7, #0]
 8015516:	312d      	adds	r1, #45	@ 0x2d
 8015518:	b2d3      	uxtb	r3, r2
 801551a:	700b      	strb	r3, [r1, #0]
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8015522:	f04f 0200 	mov.w	r2, #0
 8015526:	f04f 0300 	mov.w	r3, #0
 801552a:	0a02      	lsrs	r2, r0, #8
 801552c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8015530:	0a0b      	lsrs	r3, r1, #8
 8015532:	6839      	ldr	r1, [r7, #0]
 8015534:	312e      	adds	r1, #46	@ 0x2e
 8015536:	b2d3      	uxtb	r3, r2
 8015538:	700b      	strb	r3, [r1, #0]
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8015540:	6839      	ldr	r1, [r7, #0]
 8015542:	312f      	adds	r1, #47	@ 0x2f
 8015544:	b2d3      	uxtb	r3, r2
 8015546:	700b      	strb	r3, [r1, #0]

    if( ctx->is384 == 0 )
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 801554e:	2b00      	cmp	r3, #0
 8015550:	f040 80d0 	bne.w	80156f4 <mbedtls_sha512_finish_ret+0x8f2>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 801555a:	f04f 0200 	mov.w	r2, #0
 801555e:	f04f 0300 	mov.w	r3, #0
 8015562:	0e0a      	lsrs	r2, r1, #24
 8015564:	2300      	movs	r3, #0
 8015566:	6839      	ldr	r1, [r7, #0]
 8015568:	3130      	adds	r1, #48	@ 0x30
 801556a:	b2d3      	uxtb	r3, r2
 801556c:	700b      	strb	r3, [r1, #0]
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8015574:	f04f 0200 	mov.w	r2, #0
 8015578:	f04f 0300 	mov.w	r3, #0
 801557c:	0c0a      	lsrs	r2, r1, #16
 801557e:	2300      	movs	r3, #0
 8015580:	6839      	ldr	r1, [r7, #0]
 8015582:	3131      	adds	r1, #49	@ 0x31
 8015584:	b2d3      	uxtb	r3, r2
 8015586:	700b      	strb	r3, [r1, #0]
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 801558e:	f04f 0200 	mov.w	r2, #0
 8015592:	f04f 0300 	mov.w	r3, #0
 8015596:	0a0a      	lsrs	r2, r1, #8
 8015598:	2300      	movs	r3, #0
 801559a:	6839      	ldr	r1, [r7, #0]
 801559c:	3132      	adds	r1, #50	@ 0x32
 801559e:	b2d3      	uxtb	r3, r2
 80155a0:	700b      	strb	r3, [r1, #0]
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80155a8:	f04f 0200 	mov.w	r2, #0
 80155ac:	f04f 0300 	mov.w	r3, #0
 80155b0:	000a      	movs	r2, r1
 80155b2:	2300      	movs	r3, #0
 80155b4:	6839      	ldr	r1, [r7, #0]
 80155b6:	3133      	adds	r1, #51	@ 0x33
 80155b8:	b2d3      	uxtb	r3, r2
 80155ba:	700b      	strb	r3, [r1, #0]
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80155c2:	f04f 0200 	mov.w	r2, #0
 80155c6:	f04f 0300 	mov.w	r3, #0
 80155ca:	0e02      	lsrs	r2, r0, #24
 80155cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80155d0:	0e0b      	lsrs	r3, r1, #24
 80155d2:	6839      	ldr	r1, [r7, #0]
 80155d4:	3134      	adds	r1, #52	@ 0x34
 80155d6:	b2d3      	uxtb	r3, r2
 80155d8:	700b      	strb	r3, [r1, #0]
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80155e0:	f04f 0200 	mov.w	r2, #0
 80155e4:	f04f 0300 	mov.w	r3, #0
 80155e8:	0c02      	lsrs	r2, r0, #16
 80155ea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80155ee:	0c0b      	lsrs	r3, r1, #16
 80155f0:	6839      	ldr	r1, [r7, #0]
 80155f2:	3135      	adds	r1, #53	@ 0x35
 80155f4:	b2d3      	uxtb	r3, r2
 80155f6:	700b      	strb	r3, [r1, #0]
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80155fe:	f04f 0200 	mov.w	r2, #0
 8015602:	f04f 0300 	mov.w	r3, #0
 8015606:	0a02      	lsrs	r2, r0, #8
 8015608:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801560c:	0a0b      	lsrs	r3, r1, #8
 801560e:	6839      	ldr	r1, [r7, #0]
 8015610:	3136      	adds	r1, #54	@ 0x36
 8015612:	b2d3      	uxtb	r3, r2
 8015614:	700b      	strb	r3, [r1, #0]
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 801561c:	6839      	ldr	r1, [r7, #0]
 801561e:	3137      	adds	r1, #55	@ 0x37
 8015620:	b2d3      	uxtb	r3, r2
 8015622:	700b      	strb	r3, [r1, #0]
        PUT_UINT64_BE( ctx->state[7], output, 56 );
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 801562a:	f04f 0200 	mov.w	r2, #0
 801562e:	f04f 0300 	mov.w	r3, #0
 8015632:	0e0a      	lsrs	r2, r1, #24
 8015634:	2300      	movs	r3, #0
 8015636:	6839      	ldr	r1, [r7, #0]
 8015638:	3138      	adds	r1, #56	@ 0x38
 801563a:	b2d3      	uxtb	r3, r2
 801563c:	700b      	strb	r3, [r1, #0]
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8015644:	f04f 0200 	mov.w	r2, #0
 8015648:	f04f 0300 	mov.w	r3, #0
 801564c:	0c0a      	lsrs	r2, r1, #16
 801564e:	2300      	movs	r3, #0
 8015650:	6839      	ldr	r1, [r7, #0]
 8015652:	3139      	adds	r1, #57	@ 0x39
 8015654:	b2d3      	uxtb	r3, r2
 8015656:	700b      	strb	r3, [r1, #0]
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 801565e:	f04f 0200 	mov.w	r2, #0
 8015662:	f04f 0300 	mov.w	r3, #0
 8015666:	0a0a      	lsrs	r2, r1, #8
 8015668:	2300      	movs	r3, #0
 801566a:	6839      	ldr	r1, [r7, #0]
 801566c:	313a      	adds	r1, #58	@ 0x3a
 801566e:	b2d3      	uxtb	r3, r2
 8015670:	700b      	strb	r3, [r1, #0]
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8015678:	f04f 0200 	mov.w	r2, #0
 801567c:	f04f 0300 	mov.w	r3, #0
 8015680:	000a      	movs	r2, r1
 8015682:	2300      	movs	r3, #0
 8015684:	6839      	ldr	r1, [r7, #0]
 8015686:	313b      	adds	r1, #59	@ 0x3b
 8015688:	b2d3      	uxtb	r3, r2
 801568a:	700b      	strb	r3, [r1, #0]
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8015692:	f04f 0200 	mov.w	r2, #0
 8015696:	f04f 0300 	mov.w	r3, #0
 801569a:	0e02      	lsrs	r2, r0, #24
 801569c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80156a0:	0e0b      	lsrs	r3, r1, #24
 80156a2:	6839      	ldr	r1, [r7, #0]
 80156a4:	313c      	adds	r1, #60	@ 0x3c
 80156a6:	b2d3      	uxtb	r3, r2
 80156a8:	700b      	strb	r3, [r1, #0]
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80156b0:	f04f 0200 	mov.w	r2, #0
 80156b4:	f04f 0300 	mov.w	r3, #0
 80156b8:	0c02      	lsrs	r2, r0, #16
 80156ba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80156be:	0c0b      	lsrs	r3, r1, #16
 80156c0:	6839      	ldr	r1, [r7, #0]
 80156c2:	313d      	adds	r1, #61	@ 0x3d
 80156c4:	b2d3      	uxtb	r3, r2
 80156c6:	700b      	strb	r3, [r1, #0]
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80156ce:	f04f 0200 	mov.w	r2, #0
 80156d2:	f04f 0300 	mov.w	r3, #0
 80156d6:	0a02      	lsrs	r2, r0, #8
 80156d8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80156dc:	0a0b      	lsrs	r3, r1, #8
 80156de:	6839      	ldr	r1, [r7, #0]
 80156e0:	313e      	adds	r1, #62	@ 0x3e
 80156e2:	b2d3      	uxtb	r3, r2
 80156e4:	700b      	strb	r3, [r1, #0]
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80156ec:	6839      	ldr	r1, [r7, #0]
 80156ee:	313f      	adds	r1, #63	@ 0x3f
 80156f0:	b2d3      	uxtb	r3, r2
 80156f2:	700b      	strb	r3, [r1, #0]
    }

    return( 0 );
 80156f4:	2300      	movs	r3, #0
}
 80156f6:	4618      	mov	r0, r3
 80156f8:	3720      	adds	r7, #32
 80156fa:	46bd      	mov	sp, r7
 80156fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08015700 <mbedtls_sha512_ret>:
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 8015700:	b580      	push	{r7, lr}
 8015702:	b0bc      	sub	sp, #240	@ 0xf0
 8015704:	af00      	add	r7, sp, #0
 8015706:	60f8      	str	r0, [r7, #12]
 8015708:	60b9      	str	r1, [r7, #8]
 801570a:	607a      	str	r2, [r7, #4]
 801570c:	603b      	str	r3, [r7, #0]

    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha512_init( &ctx );
 801570e:	f107 0310 	add.w	r3, r7, #16
 8015712:	4618      	mov	r0, r3
 8015714:	f7fd f93a 	bl	801298c <mbedtls_sha512_init>

    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
 8015718:	f107 0310 	add.w	r3, r7, #16
 801571c:	6839      	ldr	r1, [r7, #0]
 801571e:	4618      	mov	r0, r3
 8015720:	f7fd f962 	bl	80129e8 <mbedtls_sha512_starts_ret>
 8015724:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
 8015728:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801572c:	2b00      	cmp	r3, #0
 801572e:	d118      	bne.n	8015762 <mbedtls_sha512_ret+0x62>
        goto exit;

    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
 8015730:	f107 0310 	add.w	r3, r7, #16
 8015734:	68ba      	ldr	r2, [r7, #8]
 8015736:	68f9      	ldr	r1, [r7, #12]
 8015738:	4618      	mov	r0, r3
 801573a:	f7ff fad7 	bl	8014cec <mbedtls_sha512_update_ret>
 801573e:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
 8015742:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8015746:	2b00      	cmp	r3, #0
 8015748:	d10d      	bne.n	8015766 <mbedtls_sha512_ret+0x66>
        goto exit;

    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
 801574a:	f107 0310 	add.w	r3, r7, #16
 801574e:	6879      	ldr	r1, [r7, #4]
 8015750:	4618      	mov	r0, r3
 8015752:	f7ff fb56 	bl	8014e02 <mbedtls_sha512_finish_ret>
 8015756:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
 801575a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801575e:	2b00      	cmp	r3, #0
        goto exit;

exit:
 8015760:	e002      	b.n	8015768 <mbedtls_sha512_ret+0x68>
        goto exit;
 8015762:	bf00      	nop
 8015764:	e000      	b.n	8015768 <mbedtls_sha512_ret+0x68>
        goto exit;
 8015766:	bf00      	nop
    mbedtls_sha512_free( &ctx );
 8015768:	f107 0310 	add.w	r3, r7, #16
 801576c:	4618      	mov	r0, r3
 801576e:	f7fd f91a 	bl	80129a6 <mbedtls_sha512_free>

    return( ret );
 8015772:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
}
 8015776:	4618      	mov	r0, r3
 8015778:	37f0      	adds	r7, #240	@ 0xf0
 801577a:	46bd      	mov	sp, r7
 801577c:	bd80      	pop	{r7, pc}
	...

08015780 <x509_attr_descr_from_name>:
      MBEDTLS_OID_DOMAIN_COMPONENT,   MBEDTLS_ASN1_IA5_STRING },
    { NULL, 0, NULL, MBEDTLS_ASN1_NULL }
};

static const x509_attr_descriptor_t *x509_attr_descr_from_name( const char *name, size_t name_len )
{
 8015780:	b580      	push	{r7, lr}
 8015782:	b084      	sub	sp, #16
 8015784:	af00      	add	r7, sp, #0
 8015786:	6078      	str	r0, [r7, #4]
 8015788:	6039      	str	r1, [r7, #0]
    const x509_attr_descriptor_t *cur;

    for( cur = x509_attrs; cur->name != NULL; cur++ )
 801578a:	4b13      	ldr	r3, [pc, #76]	@ (80157d8 <x509_attr_descr_from_name+0x58>)
 801578c:	60fb      	str	r3, [r7, #12]
 801578e:	e011      	b.n	80157b4 <x509_attr_descr_from_name+0x34>
        if( cur->name_len == name_len &&
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	685b      	ldr	r3, [r3, #4]
 8015794:	683a      	ldr	r2, [r7, #0]
 8015796:	429a      	cmp	r2, r3
 8015798:	d109      	bne.n	80157ae <x509_attr_descr_from_name+0x2e>
            strncmp( cur->name, name, name_len ) == 0 )
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	683a      	ldr	r2, [r7, #0]
 80157a0:	6879      	ldr	r1, [r7, #4]
 80157a2:	4618      	mov	r0, r3
 80157a4:	f001 fa1f 	bl	8016be6 <strncmp>
 80157a8:	4603      	mov	r3, r0
        if( cur->name_len == name_len &&
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d007      	beq.n	80157be <x509_attr_descr_from_name+0x3e>
    for( cur = x509_attrs; cur->name != NULL; cur++ )
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	3310      	adds	r3, #16
 80157b2:	60fb      	str	r3, [r7, #12]
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d1e9      	bne.n	8015790 <x509_attr_descr_from_name+0x10>
 80157bc:	e000      	b.n	80157c0 <x509_attr_descr_from_name+0x40>
            break;
 80157be:	bf00      	nop

    if ( cur->name == NULL )
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d101      	bne.n	80157cc <x509_attr_descr_from_name+0x4c>
        return( NULL );
 80157c8:	2300      	movs	r3, #0
 80157ca:	e000      	b.n	80157ce <x509_attr_descr_from_name+0x4e>

    return( cur );
 80157cc:	68fb      	ldr	r3, [r7, #12]
}
 80157ce:	4618      	mov	r0, r3
 80157d0:	3710      	adds	r7, #16
 80157d2:	46bd      	mov	sp, r7
 80157d4:	bd80      	pop	{r7, pc}
 80157d6:	bf00      	nop
 80157d8:	0801b638 	.word	0x0801b638

080157dc <mbedtls_x509_string_to_names>:

int mbedtls_x509_string_to_names( mbedtls_asn1_named_data **head, const char *name )
{
 80157dc:	b590      	push	{r4, r7, lr}
 80157de:	b0cf      	sub	sp, #316	@ 0x13c
 80157e0:	af02      	add	r7, sp, #8
 80157e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80157e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80157ea:	6018      	str	r0, [r3, #0]
 80157ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80157f0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80157f4:	6019      	str	r1, [r3, #0]
    int ret = 0;
 80157f6:	2300      	movs	r3, #0
 80157f8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    const char *s = name, *c = s;
 80157fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015800:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 801580a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801580e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    const char *end = s + strlen( s );
 8015812:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8015816:	f7ea fcdb 	bl	80001d0 <strlen>
 801581a:	4602      	mov	r2, r0
 801581c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015820:	4413      	add	r3, r2
 8015822:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    const char *oid = NULL;
 8015826:	2300      	movs	r3, #0
 8015828:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    const x509_attr_descriptor_t* attr_descr = NULL;
 801582c:	2300      	movs	r3, #0
 801582e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    int in_tag = 1;
 8015832:	2301      	movs	r3, #1
 8015834:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    char data[MBEDTLS_X509_MAX_DN_NAME_SIZE];
    char *d = data;
 8015838:	f107 030c 	add.w	r3, r7, #12
 801583c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    /* Clear existing chain if present */
    mbedtls_asn1_free_named_data_list( head );
 8015840:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015844:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015848:	6818      	ldr	r0, [r3, #0]
 801584a:	f7ef fde2 	bl	8005412 <mbedtls_asn1_free_named_data_list>

    while( c <= end )
 801584e:	e0c6      	b.n	80159de <mbedtls_x509_string_to_names+0x202>
    {
        if( in_tag && *c == '=' )
 8015850:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8015854:	2b00      	cmp	r3, #0
 8015856:	d029      	beq.n	80158ac <mbedtls_x509_string_to_names+0xd0>
 8015858:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801585c:	781b      	ldrb	r3, [r3, #0]
 801585e:	2b3d      	cmp	r3, #61	@ 0x3d
 8015860:	d124      	bne.n	80158ac <mbedtls_x509_string_to_names+0xd0>
        {
            if( ( attr_descr = x509_attr_descr_from_name( s, c - s ) ) == NULL )
 8015862:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8015866:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801586a:	1ad3      	subs	r3, r2, r3
 801586c:	4619      	mov	r1, r3
 801586e:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8015872:	f7ff ff85 	bl	8015780 <x509_attr_descr_from_name>
 8015876:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
 801587a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801587e:	2b00      	cmp	r3, #0
 8015880:	d103      	bne.n	801588a <mbedtls_x509_string_to_names+0xae>
            {
                ret = MBEDTLS_ERR_X509_UNKNOWN_OID;
 8015882:	4b5e      	ldr	r3, [pc, #376]	@ (80159fc <mbedtls_x509_string_to_names+0x220>)
 8015884:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
                goto exit;
 8015888:	e0b1      	b.n	80159ee <mbedtls_x509_string_to_names+0x212>
            }

            oid = attr_descr->oid;
 801588a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801588e:	689b      	ldr	r3, [r3, #8]
 8015890:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
            s = c + 1;
 8015894:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8015898:	3301      	adds	r3, #1
 801589a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            in_tag = 0;
 801589e:	2300      	movs	r3, #0
 80158a0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
            d = data;
 80158a4:	f107 030c 	add.w	r3, r7, #12
 80158a8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        }

        if( !in_tag && *c == '\\' && c != end )
 80158ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d11e      	bne.n	80158f2 <mbedtls_x509_string_to_names+0x116>
 80158b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80158b8:	781b      	ldrb	r3, [r3, #0]
 80158ba:	2b5c      	cmp	r3, #92	@ 0x5c
 80158bc:	d119      	bne.n	80158f2 <mbedtls_x509_string_to_names+0x116>
 80158be:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80158c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80158c6:	429a      	cmp	r2, r3
 80158c8:	d013      	beq.n	80158f2 <mbedtls_x509_string_to_names+0x116>
        {
            c++;
 80158ca:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80158ce:	3301      	adds	r3, #1
 80158d0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

            /* Check for valid escaped characters */
            if( c == end || *c != ',' )
 80158d4:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80158d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80158dc:	429a      	cmp	r2, r3
 80158de:	d004      	beq.n	80158ea <mbedtls_x509_string_to_names+0x10e>
 80158e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80158e4:	781b      	ldrb	r3, [r3, #0]
 80158e6:	2b2c      	cmp	r3, #44	@ 0x2c
 80158e8:	d053      	beq.n	8015992 <mbedtls_x509_string_to_names+0x1b6>
            {
                ret = MBEDTLS_ERR_X509_INVALID_NAME;
 80158ea:	4b45      	ldr	r3, [pc, #276]	@ (8015a00 <mbedtls_x509_string_to_names+0x224>)
 80158ec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
                goto exit;
 80158f0:	e07d      	b.n	80159ee <mbedtls_x509_string_to_names+0x212>
            }
        }
        else if( !in_tag && ( *c == ',' || c == end ) )
 80158f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d14c      	bne.n	8015994 <mbedtls_x509_string_to_names+0x1b8>
 80158fa:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80158fe:	781b      	ldrb	r3, [r3, #0]
 8015900:	2b2c      	cmp	r3, #44	@ 0x2c
 8015902:	d005      	beq.n	8015910 <mbedtls_x509_string_to_names+0x134>
 8015904:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8015908:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801590c:	429a      	cmp	r2, r3
 801590e:	d141      	bne.n	8015994 <mbedtls_x509_string_to_names+0x1b8>
        {
            mbedtls_asn1_named_data* cur =
                mbedtls_asn1_store_named_data( head, oid, strlen( oid ),
 8015910:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8015914:	f7ea fc5c 	bl	80001d0 <strlen>
 8015918:	4601      	mov	r1, r0
                                               (unsigned char *) data,
                                               d - data );
 801591a:	f107 030c 	add.w	r3, r7, #12
 801591e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8015922:	1ad3      	subs	r3, r2, r3
                mbedtls_asn1_store_named_data( head, oid, strlen( oid ),
 8015924:	461c      	mov	r4, r3
 8015926:	f107 030c 	add.w	r3, r7, #12
 801592a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801592e:	f5a2 7096 	sub.w	r0, r2, #300	@ 0x12c
 8015932:	9400      	str	r4, [sp, #0]
 8015934:	460a      	mov	r2, r1
 8015936:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 801593a:	6800      	ldr	r0, [r0, #0]
 801593c:	f7f0 f8e9 	bl	8005b12 <mbedtls_asn1_store_named_data>
 8015940:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c

            if(cur == NULL )
 8015944:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015948:	2b00      	cmp	r3, #0
 801594a:	d101      	bne.n	8015950 <mbedtls_x509_string_to_names+0x174>
            {
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 801594c:	4b2d      	ldr	r3, [pc, #180]	@ (8015a04 <mbedtls_x509_string_to_names+0x228>)
 801594e:	e050      	b.n	80159f2 <mbedtls_x509_string_to_names+0x216>
            }

            // set tagType
            cur->val.tag = attr_descr->default_tag;
 8015950:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015954:	68da      	ldr	r2, [r3, #12]
 8015956:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801595a:	60da      	str	r2, [r3, #12]

            while( c < end && *(c + 1) == ' ' )
 801595c:	e004      	b.n	8015968 <mbedtls_x509_string_to_names+0x18c>
                c++;
 801595e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8015962:	3301      	adds	r3, #1
 8015964:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
            while( c < end && *(c + 1) == ' ' )
 8015968:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 801596c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8015970:	429a      	cmp	r2, r3
 8015972:	d205      	bcs.n	8015980 <mbedtls_x509_string_to_names+0x1a4>
 8015974:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8015978:	3301      	adds	r3, #1
 801597a:	781b      	ldrb	r3, [r3, #0]
 801597c:	2b20      	cmp	r3, #32
 801597e:	d0ee      	beq.n	801595e <mbedtls_x509_string_to_names+0x182>

            s = c + 1;
 8015980:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8015984:	3301      	adds	r3, #1
 8015986:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            in_tag = 1;
 801598a:	2301      	movs	r3, #1
 801598c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8015990:	e000      	b.n	8015994 <mbedtls_x509_string_to_names+0x1b8>
            if( c == end || *c != ',' )
 8015992:	bf00      	nop
        }

        if( !in_tag && s != c + 1 )
 8015994:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8015998:	2b00      	cmp	r3, #0
 801599a:	d11b      	bne.n	80159d4 <mbedtls_x509_string_to_names+0x1f8>
 801599c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80159a0:	3301      	adds	r3, #1
 80159a2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80159a6:	429a      	cmp	r2, r3
 80159a8:	d014      	beq.n	80159d4 <mbedtls_x509_string_to_names+0x1f8>
        {
            *(d++) = *c;
 80159aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80159ae:	1c5a      	adds	r2, r3, #1
 80159b0:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 80159b4:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80159b8:	7812      	ldrb	r2, [r2, #0]
 80159ba:	701a      	strb	r2, [r3, #0]

            if( d - data == MBEDTLS_X509_MAX_DN_NAME_SIZE )
 80159bc:	f107 030c 	add.w	r3, r7, #12
 80159c0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80159c4:	1ad3      	subs	r3, r2, r3
 80159c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80159ca:	d103      	bne.n	80159d4 <mbedtls_x509_string_to_names+0x1f8>
            {
                ret = MBEDTLS_ERR_X509_INVALID_NAME;
 80159cc:	4b0c      	ldr	r3, [pc, #48]	@ (8015a00 <mbedtls_x509_string_to_names+0x224>)
 80159ce:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
                goto exit;
 80159d2:	e00c      	b.n	80159ee <mbedtls_x509_string_to_names+0x212>
            }
        }

        c++;
 80159d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80159d8:	3301      	adds	r3, #1
 80159da:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    while( c <= end )
 80159de:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80159e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80159e6:	429a      	cmp	r2, r3
 80159e8:	f67f af32 	bls.w	8015850 <mbedtls_x509_string_to_names+0x74>
    }

exit:
 80159ec:	bf00      	nop

    return( ret );
 80159ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
}
 80159f2:	4618      	mov	r0, r3
 80159f4:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80159f8:	46bd      	mov	sp, r7
 80159fa:	bd90      	pop	{r4, r7, pc}
 80159fc:	ffffdf00 	.word	0xffffdf00
 8015a00:	ffffdc80 	.word	0xffffdc80
 8015a04:	ffffd780 	.word	0xffffd780

08015a08 <x509_write_name>:
 *  AttributeType ::= OBJECT IDENTIFIER
 *
 *  AttributeValue ::= ANY DEFINED BY AttributeType
 */
static int x509_write_name( unsigned char **p, unsigned char *start, mbedtls_asn1_named_data* cur_name)
{
 8015a08:	b580      	push	{r7, lr}
 8015a0a:	b08c      	sub	sp, #48	@ 0x30
 8015a0c:	af02      	add	r7, sp, #8
 8015a0e:	60f8      	str	r0, [r7, #12]
 8015a10:	60b9      	str	r1, [r7, #8]
 8015a12:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len = 0;
 8015a14:	2300      	movs	r3, #0
 8015a16:	627b      	str	r3, [r7, #36]	@ 0x24
    const char *oid             = (const char*)cur_name->oid.p;
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	689b      	ldr	r3, [r3, #8]
 8015a1c:	623b      	str	r3, [r7, #32]
    size_t oid_len              = cur_name->oid.len;
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	685b      	ldr	r3, [r3, #4]
 8015a22:	61fb      	str	r3, [r7, #28]
    const unsigned char *name   = cur_name->val.p;
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	695b      	ldr	r3, [r3, #20]
 8015a28:	61bb      	str	r3, [r7, #24]
    size_t name_len             = cur_name->val.len;
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	691b      	ldr	r3, [r3, #16]
 8015a2e:	617b      	str	r3, [r7, #20]

    // Write correct string tag and value
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tagged_string( p, start,
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	68da      	ldr	r2, [r3, #12]
 8015a34:	697b      	ldr	r3, [r7, #20]
 8015a36:	9300      	str	r3, [sp, #0]
 8015a38:	69bb      	ldr	r3, [r7, #24]
 8015a3a:	68b9      	ldr	r1, [r7, #8]
 8015a3c:	68f8      	ldr	r0, [r7, #12]
 8015a3e:	f7f0 f807 	bl	8005a50 <mbedtls_asn1_write_tagged_string>
 8015a42:	6138      	str	r0, [r7, #16]
 8015a44:	693b      	ldr	r3, [r7, #16]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	da01      	bge.n	8015a4e <x509_write_name+0x46>
 8015a4a:	693b      	ldr	r3, [r7, #16]
 8015a4c:	e050      	b.n	8015af0 <x509_write_name+0xe8>
 8015a4e:	693b      	ldr	r3, [r7, #16]
 8015a50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015a52:	4413      	add	r3, r2
 8015a54:	627b      	str	r3, [r7, #36]	@ 0x24
                                                       cur_name->val.tag,
                                                       (const char *) name,
                                                       name_len ) );
    // Write OID
    //
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_oid( p, start, oid,
 8015a56:	69fb      	ldr	r3, [r7, #28]
 8015a58:	6a3a      	ldr	r2, [r7, #32]
 8015a5a:	68b9      	ldr	r1, [r7, #8]
 8015a5c:	68f8      	ldr	r0, [r7, #12]
 8015a5e:	f7ef fec4 	bl	80057ea <mbedtls_asn1_write_oid>
 8015a62:	6138      	str	r0, [r7, #16]
 8015a64:	693b      	ldr	r3, [r7, #16]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	da01      	bge.n	8015a6e <x509_write_name+0x66>
 8015a6a:	693b      	ldr	r3, [r7, #16]
 8015a6c:	e040      	b.n	8015af0 <x509_write_name+0xe8>
 8015a6e:	693b      	ldr	r3, [r7, #16]
 8015a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015a72:	4413      	add	r3, r2
 8015a74:	627b      	str	r3, [r7, #36]	@ 0x24
                                                       oid_len ) );

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 8015a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015a78:	68b9      	ldr	r1, [r7, #8]
 8015a7a:	68f8      	ldr	r0, [r7, #12]
 8015a7c:	f7ef fce3 	bl	8005446 <mbedtls_asn1_write_len>
 8015a80:	6138      	str	r0, [r7, #16]
 8015a82:	693b      	ldr	r3, [r7, #16]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	da01      	bge.n	8015a8c <x509_write_name+0x84>
 8015a88:	693b      	ldr	r3, [r7, #16]
 8015a8a:	e031      	b.n	8015af0 <x509_write_name+0xe8>
 8015a8c:	693b      	ldr	r3, [r7, #16]
 8015a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015a90:	4413      	add	r3, r2
 8015a92:	627b      	str	r3, [r7, #36]	@ 0x24
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start,
 8015a94:	2230      	movs	r2, #48	@ 0x30
 8015a96:	68b9      	ldr	r1, [r7, #8]
 8015a98:	68f8      	ldr	r0, [r7, #12]
 8015a9a:	f7ef fdbc 	bl	8005616 <mbedtls_asn1_write_tag>
 8015a9e:	6138      	str	r0, [r7, #16]
 8015aa0:	693b      	ldr	r3, [r7, #16]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	da01      	bge.n	8015aaa <x509_write_name+0xa2>
 8015aa6:	693b      	ldr	r3, [r7, #16]
 8015aa8:	e022      	b.n	8015af0 <x509_write_name+0xe8>
 8015aaa:	693b      	ldr	r3, [r7, #16]
 8015aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015aae:	4413      	add	r3, r2
 8015ab0:	627b      	str	r3, [r7, #36]	@ 0x24
                                                    MBEDTLS_ASN1_CONSTRUCTED |
                                                    MBEDTLS_ASN1_SEQUENCE ) );

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 8015ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015ab4:	68b9      	ldr	r1, [r7, #8]
 8015ab6:	68f8      	ldr	r0, [r7, #12]
 8015ab8:	f7ef fcc5 	bl	8005446 <mbedtls_asn1_write_len>
 8015abc:	6138      	str	r0, [r7, #16]
 8015abe:	693b      	ldr	r3, [r7, #16]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	da01      	bge.n	8015ac8 <x509_write_name+0xc0>
 8015ac4:	693b      	ldr	r3, [r7, #16]
 8015ac6:	e013      	b.n	8015af0 <x509_write_name+0xe8>
 8015ac8:	693b      	ldr	r3, [r7, #16]
 8015aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015acc:	4413      	add	r3, r2
 8015ace:	627b      	str	r3, [r7, #36]	@ 0x24
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start,
 8015ad0:	2231      	movs	r2, #49	@ 0x31
 8015ad2:	68b9      	ldr	r1, [r7, #8]
 8015ad4:	68f8      	ldr	r0, [r7, #12]
 8015ad6:	f7ef fd9e 	bl	8005616 <mbedtls_asn1_write_tag>
 8015ada:	6138      	str	r0, [r7, #16]
 8015adc:	693b      	ldr	r3, [r7, #16]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	da01      	bge.n	8015ae6 <x509_write_name+0xde>
 8015ae2:	693b      	ldr	r3, [r7, #16]
 8015ae4:	e004      	b.n	8015af0 <x509_write_name+0xe8>
 8015ae6:	693b      	ldr	r3, [r7, #16]
 8015ae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015aea:	4413      	add	r3, r2
 8015aec:	627b      	str	r3, [r7, #36]	@ 0x24
                                                 MBEDTLS_ASN1_CONSTRUCTED |
                                                 MBEDTLS_ASN1_SET ) );

    return( (int) len );
 8015aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8015af0:	4618      	mov	r0, r3
 8015af2:	3728      	adds	r7, #40	@ 0x28
 8015af4:	46bd      	mov	sp, r7
 8015af6:	bd80      	pop	{r7, pc}

08015af8 <mbedtls_x509_write_names>:

int mbedtls_x509_write_names( unsigned char **p, unsigned char *start,
                              mbedtls_asn1_named_data *first )
{
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b088      	sub	sp, #32
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	60f8      	str	r0, [r7, #12]
 8015b00:	60b9      	str	r1, [r7, #8]
 8015b02:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len = 0;
 8015b04:	2300      	movs	r3, #0
 8015b06:	61fb      	str	r3, [r7, #28]
    mbedtls_asn1_named_data *cur = first;
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	61bb      	str	r3, [r7, #24]

    while( cur != NULL )
 8015b0c:	e011      	b.n	8015b32 <mbedtls_x509_write_names+0x3a>
    {
        MBEDTLS_ASN1_CHK_ADD( len, x509_write_name( p, start, cur ) );
 8015b0e:	69ba      	ldr	r2, [r7, #24]
 8015b10:	68b9      	ldr	r1, [r7, #8]
 8015b12:	68f8      	ldr	r0, [r7, #12]
 8015b14:	f7ff ff78 	bl	8015a08 <x509_write_name>
 8015b18:	6178      	str	r0, [r7, #20]
 8015b1a:	697b      	ldr	r3, [r7, #20]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	da01      	bge.n	8015b24 <mbedtls_x509_write_names+0x2c>
 8015b20:	697b      	ldr	r3, [r7, #20]
 8015b22:	e028      	b.n	8015b76 <mbedtls_x509_write_names+0x7e>
 8015b24:	697b      	ldr	r3, [r7, #20]
 8015b26:	69fa      	ldr	r2, [r7, #28]
 8015b28:	4413      	add	r3, r2
 8015b2a:	61fb      	str	r3, [r7, #28]
        cur = cur->next;
 8015b2c:	69bb      	ldr	r3, [r7, #24]
 8015b2e:	699b      	ldr	r3, [r3, #24]
 8015b30:	61bb      	str	r3, [r7, #24]
    while( cur != NULL )
 8015b32:	69bb      	ldr	r3, [r7, #24]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d1ea      	bne.n	8015b0e <mbedtls_x509_write_names+0x16>
    }

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 8015b38:	69fa      	ldr	r2, [r7, #28]
 8015b3a:	68b9      	ldr	r1, [r7, #8]
 8015b3c:	68f8      	ldr	r0, [r7, #12]
 8015b3e:	f7ef fc82 	bl	8005446 <mbedtls_asn1_write_len>
 8015b42:	6178      	str	r0, [r7, #20]
 8015b44:	697b      	ldr	r3, [r7, #20]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	da01      	bge.n	8015b4e <mbedtls_x509_write_names+0x56>
 8015b4a:	697b      	ldr	r3, [r7, #20]
 8015b4c:	e013      	b.n	8015b76 <mbedtls_x509_write_names+0x7e>
 8015b4e:	697b      	ldr	r3, [r7, #20]
 8015b50:	69fa      	ldr	r2, [r7, #28]
 8015b52:	4413      	add	r3, r2
 8015b54:	61fb      	str	r3, [r7, #28]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_CONSTRUCTED |
 8015b56:	2230      	movs	r2, #48	@ 0x30
 8015b58:	68b9      	ldr	r1, [r7, #8]
 8015b5a:	68f8      	ldr	r0, [r7, #12]
 8015b5c:	f7ef fd5b 	bl	8005616 <mbedtls_asn1_write_tag>
 8015b60:	6178      	str	r0, [r7, #20]
 8015b62:	697b      	ldr	r3, [r7, #20]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	da01      	bge.n	8015b6c <mbedtls_x509_write_names+0x74>
 8015b68:	697b      	ldr	r3, [r7, #20]
 8015b6a:	e004      	b.n	8015b76 <mbedtls_x509_write_names+0x7e>
 8015b6c:	697b      	ldr	r3, [r7, #20]
 8015b6e:	69fa      	ldr	r2, [r7, #28]
 8015b70:	4413      	add	r3, r2
 8015b72:	61fb      	str	r3, [r7, #28]
                                                 MBEDTLS_ASN1_SEQUENCE ) );

    return( (int) len );
 8015b74:	69fb      	ldr	r3, [r7, #28]
}
 8015b76:	4618      	mov	r0, r3
 8015b78:	3720      	adds	r7, #32
 8015b7a:	46bd      	mov	sp, r7
 8015b7c:	bd80      	pop	{r7, pc}

08015b7e <mbedtls_x509_write_sig>:

int mbedtls_x509_write_sig( unsigned char **p, unsigned char *start,
                    const char *oid, size_t oid_len,
                    unsigned char *sig, size_t size )
{
 8015b7e:	b580      	push	{r7, lr}
 8015b80:	b088      	sub	sp, #32
 8015b82:	af02      	add	r7, sp, #8
 8015b84:	60f8      	str	r0, [r7, #12]
 8015b86:	60b9      	str	r1, [r7, #8]
 8015b88:	607a      	str	r2, [r7, #4]
 8015b8a:	603b      	str	r3, [r7, #0]
    int ret;
    size_t len = 0;
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	617b      	str	r3, [r7, #20]

    if( *p < start || (size_t)( *p - start ) < size )
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	68ba      	ldr	r2, [r7, #8]
 8015b96:	429a      	cmp	r2, r3
 8015b98:	d807      	bhi.n	8015baa <mbedtls_x509_write_sig+0x2c>
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	681a      	ldr	r2, [r3, #0]
 8015b9e:	68bb      	ldr	r3, [r7, #8]
 8015ba0:	1ad3      	subs	r3, r2, r3
 8015ba2:	461a      	mov	r2, r3
 8015ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ba6:	4293      	cmp	r3, r2
 8015ba8:	d902      	bls.n	8015bb0 <mbedtls_x509_write_sig+0x32>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 8015baa:	f06f 036b 	mvn.w	r3, #107	@ 0x6b
 8015bae:	e055      	b.n	8015c5c <mbedtls_x509_write_sig+0xde>

    len = size;
 8015bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bb2:	617b      	str	r3, [r7, #20]
    (*p) -= len;
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	681a      	ldr	r2, [r3, #0]
 8015bb8:	697b      	ldr	r3, [r7, #20]
 8015bba:	425b      	negs	r3, r3
 8015bbc:	441a      	add	r2, r3
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	601a      	str	r2, [r3, #0]
    memcpy( *p, sig, len );
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	697a      	ldr	r2, [r7, #20]
 8015bc8:	6a39      	ldr	r1, [r7, #32]
 8015bca:	4618      	mov	r0, r3
 8015bcc:	f001 f8d1 	bl	8016d72 <memcpy>

    if( *p - start < 1 )
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	681a      	ldr	r2, [r3, #0]
 8015bd4:	68bb      	ldr	r3, [r7, #8]
 8015bd6:	1ad3      	subs	r3, r2, r3
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	dc02      	bgt.n	8015be2 <mbedtls_x509_write_sig+0x64>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 8015bdc:	f06f 036b 	mvn.w	r3, #107	@ 0x6b
 8015be0:	e03c      	b.n	8015c5c <mbedtls_x509_write_sig+0xde>

    *--(*p) = 0;
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	1e5a      	subs	r2, r3, #1
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	601a      	str	r2, [r3, #0]
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	2200      	movs	r2, #0
 8015bf2:	701a      	strb	r2, [r3, #0]
    len += 1;
 8015bf4:	697b      	ldr	r3, [r7, #20]
 8015bf6:	3301      	adds	r3, #1
 8015bf8:	617b      	str	r3, [r7, #20]

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 8015bfa:	697a      	ldr	r2, [r7, #20]
 8015bfc:	68b9      	ldr	r1, [r7, #8]
 8015bfe:	68f8      	ldr	r0, [r7, #12]
 8015c00:	f7ef fc21 	bl	8005446 <mbedtls_asn1_write_len>
 8015c04:	6138      	str	r0, [r7, #16]
 8015c06:	693b      	ldr	r3, [r7, #16]
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	da01      	bge.n	8015c10 <mbedtls_x509_write_sig+0x92>
 8015c0c:	693b      	ldr	r3, [r7, #16]
 8015c0e:	e025      	b.n	8015c5c <mbedtls_x509_write_sig+0xde>
 8015c10:	693b      	ldr	r3, [r7, #16]
 8015c12:	697a      	ldr	r2, [r7, #20]
 8015c14:	4413      	add	r3, r2
 8015c16:	617b      	str	r3, [r7, #20]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_BIT_STRING ) );
 8015c18:	2203      	movs	r2, #3
 8015c1a:	68b9      	ldr	r1, [r7, #8]
 8015c1c:	68f8      	ldr	r0, [r7, #12]
 8015c1e:	f7ef fcfa 	bl	8005616 <mbedtls_asn1_write_tag>
 8015c22:	6138      	str	r0, [r7, #16]
 8015c24:	693b      	ldr	r3, [r7, #16]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	da01      	bge.n	8015c2e <mbedtls_x509_write_sig+0xb0>
 8015c2a:	693b      	ldr	r3, [r7, #16]
 8015c2c:	e016      	b.n	8015c5c <mbedtls_x509_write_sig+0xde>
 8015c2e:	693b      	ldr	r3, [r7, #16]
 8015c30:	697a      	ldr	r2, [r7, #20]
 8015c32:	4413      	add	r3, r2
 8015c34:	617b      	str	r3, [r7, #20]

    // Write OID
    //
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_algorithm_identifier( p, start, oid,
 8015c36:	2300      	movs	r3, #0
 8015c38:	9300      	str	r3, [sp, #0]
 8015c3a:	683b      	ldr	r3, [r7, #0]
 8015c3c:	687a      	ldr	r2, [r7, #4]
 8015c3e:	68b9      	ldr	r1, [r7, #8]
 8015c40:	68f8      	ldr	r0, [r7, #12]
 8015c42:	f7ef fe0e 	bl	8005862 <mbedtls_asn1_write_algorithm_identifier>
 8015c46:	6138      	str	r0, [r7, #16]
 8015c48:	693b      	ldr	r3, [r7, #16]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	da01      	bge.n	8015c52 <mbedtls_x509_write_sig+0xd4>
 8015c4e:	693b      	ldr	r3, [r7, #16]
 8015c50:	e004      	b.n	8015c5c <mbedtls_x509_write_sig+0xde>
 8015c52:	693b      	ldr	r3, [r7, #16]
 8015c54:	697a      	ldr	r2, [r7, #20]
 8015c56:	4413      	add	r3, r2
 8015c58:	617b      	str	r3, [r7, #20]
                                                        oid_len, 0 ) );

    return( (int) len );
 8015c5a:	697b      	ldr	r3, [r7, #20]
}
 8015c5c:	4618      	mov	r0, r3
 8015c5e:	3718      	adds	r7, #24
 8015c60:	46bd      	mov	sp, r7
 8015c62:	bd80      	pop	{r7, pc}

08015c64 <x509_write_extension>:

static int x509_write_extension( unsigned char **p, unsigned char *start,
                                 mbedtls_asn1_named_data *ext )
{
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b086      	sub	sp, #24
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	60f8      	str	r0, [r7, #12]
 8015c6c:	60b9      	str	r1, [r7, #8]
 8015c6e:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len = 0;
 8015c70:	2300      	movs	r3, #0
 8015c72:	617b      	str	r3, [r7, #20]

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start, ext->val.p + 1,
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	695b      	ldr	r3, [r3, #20]
 8015c78:	1c5a      	adds	r2, r3, #1
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	691b      	ldr	r3, [r3, #16]
 8015c7e:	3b01      	subs	r3, #1
 8015c80:	68b9      	ldr	r1, [r7, #8]
 8015c82:	68f8      	ldr	r0, [r7, #12]
 8015c84:	f7ef fce7 	bl	8005656 <mbedtls_asn1_write_raw_buffer>
 8015c88:	6138      	str	r0, [r7, #16]
 8015c8a:	693b      	ldr	r3, [r7, #16]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	da01      	bge.n	8015c94 <x509_write_extension+0x30>
 8015c90:	693b      	ldr	r3, [r7, #16]
 8015c92:	e089      	b.n	8015da8 <x509_write_extension+0x144>
 8015c94:	693b      	ldr	r3, [r7, #16]
 8015c96:	697a      	ldr	r2, [r7, #20]
 8015c98:	4413      	add	r3, r2
 8015c9a:	617b      	str	r3, [r7, #20]
                                              ext->val.len - 1 ) );
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, ext->val.len - 1 ) );
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	691b      	ldr	r3, [r3, #16]
 8015ca0:	3b01      	subs	r3, #1
 8015ca2:	461a      	mov	r2, r3
 8015ca4:	68b9      	ldr	r1, [r7, #8]
 8015ca6:	68f8      	ldr	r0, [r7, #12]
 8015ca8:	f7ef fbcd 	bl	8005446 <mbedtls_asn1_write_len>
 8015cac:	6138      	str	r0, [r7, #16]
 8015cae:	693b      	ldr	r3, [r7, #16]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	da01      	bge.n	8015cb8 <x509_write_extension+0x54>
 8015cb4:	693b      	ldr	r3, [r7, #16]
 8015cb6:	e077      	b.n	8015da8 <x509_write_extension+0x144>
 8015cb8:	693b      	ldr	r3, [r7, #16]
 8015cba:	697a      	ldr	r2, [r7, #20]
 8015cbc:	4413      	add	r3, r2
 8015cbe:	617b      	str	r3, [r7, #20]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_OCTET_STRING ) );
 8015cc0:	2204      	movs	r2, #4
 8015cc2:	68b9      	ldr	r1, [r7, #8]
 8015cc4:	68f8      	ldr	r0, [r7, #12]
 8015cc6:	f7ef fca6 	bl	8005616 <mbedtls_asn1_write_tag>
 8015cca:	6138      	str	r0, [r7, #16]
 8015ccc:	693b      	ldr	r3, [r7, #16]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	da01      	bge.n	8015cd6 <x509_write_extension+0x72>
 8015cd2:	693b      	ldr	r3, [r7, #16]
 8015cd4:	e068      	b.n	8015da8 <x509_write_extension+0x144>
 8015cd6:	693b      	ldr	r3, [r7, #16]
 8015cd8:	697a      	ldr	r2, [r7, #20]
 8015cda:	4413      	add	r3, r2
 8015cdc:	617b      	str	r3, [r7, #20]

    if( ext->val.p[0] != 0 )
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	695b      	ldr	r3, [r3, #20]
 8015ce2:	781b      	ldrb	r3, [r3, #0]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d00e      	beq.n	8015d06 <x509_write_extension+0xa2>
    {
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_bool( p, start, 1 ) );
 8015ce8:	2201      	movs	r2, #1
 8015cea:	68b9      	ldr	r1, [r7, #8]
 8015cec:	68f8      	ldr	r0, [r7, #12]
 8015cee:	f7ef fe0a 	bl	8005906 <mbedtls_asn1_write_bool>
 8015cf2:	6138      	str	r0, [r7, #16]
 8015cf4:	693b      	ldr	r3, [r7, #16]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	da01      	bge.n	8015cfe <x509_write_extension+0x9a>
 8015cfa:	693b      	ldr	r3, [r7, #16]
 8015cfc:	e054      	b.n	8015da8 <x509_write_extension+0x144>
 8015cfe:	693b      	ldr	r3, [r7, #16]
 8015d00:	697a      	ldr	r2, [r7, #20]
 8015d02:	4413      	add	r3, r2
 8015d04:	617b      	str	r3, [r7, #20]
    }

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start, ext->oid.p,
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	689a      	ldr	r2, [r3, #8]
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	685b      	ldr	r3, [r3, #4]
 8015d0e:	68b9      	ldr	r1, [r7, #8]
 8015d10:	68f8      	ldr	r0, [r7, #12]
 8015d12:	f7ef fca0 	bl	8005656 <mbedtls_asn1_write_raw_buffer>
 8015d16:	6138      	str	r0, [r7, #16]
 8015d18:	693b      	ldr	r3, [r7, #16]
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	da01      	bge.n	8015d22 <x509_write_extension+0xbe>
 8015d1e:	693b      	ldr	r3, [r7, #16]
 8015d20:	e042      	b.n	8015da8 <x509_write_extension+0x144>
 8015d22:	693b      	ldr	r3, [r7, #16]
 8015d24:	697a      	ldr	r2, [r7, #20]
 8015d26:	4413      	add	r3, r2
 8015d28:	617b      	str	r3, [r7, #20]
                                              ext->oid.len ) );
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, ext->oid.len ) );
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	685b      	ldr	r3, [r3, #4]
 8015d2e:	461a      	mov	r2, r3
 8015d30:	68b9      	ldr	r1, [r7, #8]
 8015d32:	68f8      	ldr	r0, [r7, #12]
 8015d34:	f7ef fb87 	bl	8005446 <mbedtls_asn1_write_len>
 8015d38:	6138      	str	r0, [r7, #16]
 8015d3a:	693b      	ldr	r3, [r7, #16]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	da01      	bge.n	8015d44 <x509_write_extension+0xe0>
 8015d40:	693b      	ldr	r3, [r7, #16]
 8015d42:	e031      	b.n	8015da8 <x509_write_extension+0x144>
 8015d44:	693b      	ldr	r3, [r7, #16]
 8015d46:	697a      	ldr	r2, [r7, #20]
 8015d48:	4413      	add	r3, r2
 8015d4a:	617b      	str	r3, [r7, #20]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_OID ) );
 8015d4c:	2206      	movs	r2, #6
 8015d4e:	68b9      	ldr	r1, [r7, #8]
 8015d50:	68f8      	ldr	r0, [r7, #12]
 8015d52:	f7ef fc60 	bl	8005616 <mbedtls_asn1_write_tag>
 8015d56:	6138      	str	r0, [r7, #16]
 8015d58:	693b      	ldr	r3, [r7, #16]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	da01      	bge.n	8015d62 <x509_write_extension+0xfe>
 8015d5e:	693b      	ldr	r3, [r7, #16]
 8015d60:	e022      	b.n	8015da8 <x509_write_extension+0x144>
 8015d62:	693b      	ldr	r3, [r7, #16]
 8015d64:	697a      	ldr	r2, [r7, #20]
 8015d66:	4413      	add	r3, r2
 8015d68:	617b      	str	r3, [r7, #20]

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 8015d6a:	697a      	ldr	r2, [r7, #20]
 8015d6c:	68b9      	ldr	r1, [r7, #8]
 8015d6e:	68f8      	ldr	r0, [r7, #12]
 8015d70:	f7ef fb69 	bl	8005446 <mbedtls_asn1_write_len>
 8015d74:	6138      	str	r0, [r7, #16]
 8015d76:	693b      	ldr	r3, [r7, #16]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	da01      	bge.n	8015d80 <x509_write_extension+0x11c>
 8015d7c:	693b      	ldr	r3, [r7, #16]
 8015d7e:	e013      	b.n	8015da8 <x509_write_extension+0x144>
 8015d80:	693b      	ldr	r3, [r7, #16]
 8015d82:	697a      	ldr	r2, [r7, #20]
 8015d84:	4413      	add	r3, r2
 8015d86:	617b      	str	r3, [r7, #20]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_CONSTRUCTED |
 8015d88:	2230      	movs	r2, #48	@ 0x30
 8015d8a:	68b9      	ldr	r1, [r7, #8]
 8015d8c:	68f8      	ldr	r0, [r7, #12]
 8015d8e:	f7ef fc42 	bl	8005616 <mbedtls_asn1_write_tag>
 8015d92:	6138      	str	r0, [r7, #16]
 8015d94:	693b      	ldr	r3, [r7, #16]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	da01      	bge.n	8015d9e <x509_write_extension+0x13a>
 8015d9a:	693b      	ldr	r3, [r7, #16]
 8015d9c:	e004      	b.n	8015da8 <x509_write_extension+0x144>
 8015d9e:	693b      	ldr	r3, [r7, #16]
 8015da0:	697a      	ldr	r2, [r7, #20]
 8015da2:	4413      	add	r3, r2
 8015da4:	617b      	str	r3, [r7, #20]
                                                 MBEDTLS_ASN1_SEQUENCE ) );

    return( (int) len );
 8015da6:	697b      	ldr	r3, [r7, #20]
}
 8015da8:	4618      	mov	r0, r3
 8015daa:	3718      	adds	r7, #24
 8015dac:	46bd      	mov	sp, r7
 8015dae:	bd80      	pop	{r7, pc}

08015db0 <mbedtls_x509_write_extensions>:
 *                 -- by extnID
 *     }
 */
int mbedtls_x509_write_extensions( unsigned char **p, unsigned char *start,
                           mbedtls_asn1_named_data *first )
{
 8015db0:	b580      	push	{r7, lr}
 8015db2:	b088      	sub	sp, #32
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	60f8      	str	r0, [r7, #12]
 8015db8:	60b9      	str	r1, [r7, #8]
 8015dba:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len = 0;
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	61fb      	str	r3, [r7, #28]
    mbedtls_asn1_named_data *cur_ext = first;
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	61bb      	str	r3, [r7, #24]

    while( cur_ext != NULL )
 8015dc4:	e011      	b.n	8015dea <mbedtls_x509_write_extensions+0x3a>
    {
        MBEDTLS_ASN1_CHK_ADD( len, x509_write_extension( p, start, cur_ext ) );
 8015dc6:	69ba      	ldr	r2, [r7, #24]
 8015dc8:	68b9      	ldr	r1, [r7, #8]
 8015dca:	68f8      	ldr	r0, [r7, #12]
 8015dcc:	f7ff ff4a 	bl	8015c64 <x509_write_extension>
 8015dd0:	6178      	str	r0, [r7, #20]
 8015dd2:	697b      	ldr	r3, [r7, #20]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	da01      	bge.n	8015ddc <mbedtls_x509_write_extensions+0x2c>
 8015dd8:	697b      	ldr	r3, [r7, #20]
 8015dda:	e00a      	b.n	8015df2 <mbedtls_x509_write_extensions+0x42>
 8015ddc:	697b      	ldr	r3, [r7, #20]
 8015dde:	69fa      	ldr	r2, [r7, #28]
 8015de0:	4413      	add	r3, r2
 8015de2:	61fb      	str	r3, [r7, #28]
        cur_ext = cur_ext->next;
 8015de4:	69bb      	ldr	r3, [r7, #24]
 8015de6:	699b      	ldr	r3, [r3, #24]
 8015de8:	61bb      	str	r3, [r7, #24]
    while( cur_ext != NULL )
 8015dea:	69bb      	ldr	r3, [r7, #24]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d1ea      	bne.n	8015dc6 <mbedtls_x509_write_extensions+0x16>
    }

    return( (int) len );
 8015df0:	69fb      	ldr	r3, [r7, #28]
}
 8015df2:	4618      	mov	r0, r3
 8015df4:	3720      	adds	r7, #32
 8015df6:	46bd      	mov	sp, r7
 8015df8:	bd80      	pop	{r7, pc}

08015dfa <mbedtls_x509write_csr_init>:
#if defined(MBEDTLS_PEM_WRITE_C)
#include "mbedtls/pem.h"
#endif

void mbedtls_x509write_csr_init( mbedtls_x509write_csr *ctx )
{
 8015dfa:	b580      	push	{r7, lr}
 8015dfc:	b082      	sub	sp, #8
 8015dfe:	af00      	add	r7, sp, #0
 8015e00:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_x509write_csr ) );
 8015e02:	2210      	movs	r2, #16
 8015e04:	2100      	movs	r1, #0
 8015e06:	6878      	ldr	r0, [r7, #4]
 8015e08:	f000 fed6 	bl	8016bb8 <memset>
}
 8015e0c:	bf00      	nop
 8015e0e:	3708      	adds	r7, #8
 8015e10:	46bd      	mov	sp, r7
 8015e12:	bd80      	pop	{r7, pc}

08015e14 <mbedtls_x509write_csr_free>:

void mbedtls_x509write_csr_free( mbedtls_x509write_csr *ctx )
{
 8015e14:	b580      	push	{r7, lr}
 8015e16:	b082      	sub	sp, #8
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	6078      	str	r0, [r7, #4]
    mbedtls_asn1_free_named_data_list( &ctx->subject );
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	3304      	adds	r3, #4
 8015e20:	4618      	mov	r0, r3
 8015e22:	f7ef faf6 	bl	8005412 <mbedtls_asn1_free_named_data_list>
    mbedtls_asn1_free_named_data_list( &ctx->extensions );
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	330c      	adds	r3, #12
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	f7ef faf1 	bl	8005412 <mbedtls_asn1_free_named_data_list>

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_x509write_csr ) );
 8015e30:	2110      	movs	r1, #16
 8015e32:	6878      	ldr	r0, [r7, #4]
 8015e34:	f7fa fda2 	bl	801097c <mbedtls_platform_zeroize>
}
 8015e38:	bf00      	nop
 8015e3a:	3708      	adds	r7, #8
 8015e3c:	46bd      	mov	sp, r7
 8015e3e:	bd80      	pop	{r7, pc}

08015e40 <mbedtls_x509write_csr_set_md_alg>:

void mbedtls_x509write_csr_set_md_alg( mbedtls_x509write_csr *ctx, mbedtls_md_type_t md_alg )
{
 8015e40:	b480      	push	{r7}
 8015e42:	b083      	sub	sp, #12
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	6078      	str	r0, [r7, #4]
 8015e48:	460b      	mov	r3, r1
 8015e4a:	70fb      	strb	r3, [r7, #3]
    ctx->md_alg = md_alg;
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	78fa      	ldrb	r2, [r7, #3]
 8015e50:	721a      	strb	r2, [r3, #8]
}
 8015e52:	bf00      	nop
 8015e54:	370c      	adds	r7, #12
 8015e56:	46bd      	mov	sp, r7
 8015e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e5c:	4770      	bx	lr

08015e5e <mbedtls_x509write_csr_set_key>:

void mbedtls_x509write_csr_set_key( mbedtls_x509write_csr *ctx, mbedtls_pk_context *key )
{
 8015e5e:	b480      	push	{r7}
 8015e60:	b083      	sub	sp, #12
 8015e62:	af00      	add	r7, sp, #0
 8015e64:	6078      	str	r0, [r7, #4]
 8015e66:	6039      	str	r1, [r7, #0]
    ctx->key = key;
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	683a      	ldr	r2, [r7, #0]
 8015e6c:	601a      	str	r2, [r3, #0]
}
 8015e6e:	bf00      	nop
 8015e70:	370c      	adds	r7, #12
 8015e72:	46bd      	mov	sp, r7
 8015e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e78:	4770      	bx	lr

08015e7a <mbedtls_x509write_csr_set_subject_name>:

int mbedtls_x509write_csr_set_subject_name( mbedtls_x509write_csr *ctx,
                                    const char *subject_name )
{
 8015e7a:	b580      	push	{r7, lr}
 8015e7c:	b082      	sub	sp, #8
 8015e7e:	af00      	add	r7, sp, #0
 8015e80:	6078      	str	r0, [r7, #4]
 8015e82:	6039      	str	r1, [r7, #0]
    return mbedtls_x509_string_to_names( &ctx->subject, subject_name );
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	3304      	adds	r3, #4
 8015e88:	6839      	ldr	r1, [r7, #0]
 8015e8a:	4618      	mov	r0, r3
 8015e8c:	f7ff fca6 	bl	80157dc <mbedtls_x509_string_to_names>
 8015e90:	4603      	mov	r3, r0
}
 8015e92:	4618      	mov	r0, r3
 8015e94:	3708      	adds	r7, #8
 8015e96:	46bd      	mov	sp, r7
 8015e98:	bd80      	pop	{r7, pc}
	...

08015e9c <mbedtls_x509write_csr_der>:
}

int mbedtls_x509write_csr_der( mbedtls_x509write_csr *ctx, unsigned char *buf, size_t size,
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng )
{
 8015e9c:	b590      	push	{r4, r7, lr}
 8015e9e:	f6ad 0dbc 	subw	sp, sp, #2236	@ 0x8bc
 8015ea2:	af04      	add	r7, sp, #16
 8015ea4:	f607 04a8 	addw	r4, r7, #2216	@ 0x8a8
 8015ea8:	f6a4 049c 	subw	r4, r4, #2204	@ 0x89c
 8015eac:	6020      	str	r0, [r4, #0]
 8015eae:	f607 00a8 	addw	r0, r7, #2216	@ 0x8a8
 8015eb2:	f5a0 600a 	sub.w	r0, r0, #2208	@ 0x8a0
 8015eb6:	6001      	str	r1, [r0, #0]
 8015eb8:	f607 01a8 	addw	r1, r7, #2216	@ 0x8a8
 8015ebc:	f6a1 01a4 	subw	r1, r1, #2212	@ 0x8a4
 8015ec0:	600a      	str	r2, [r1, #0]
 8015ec2:	f607 02a8 	addw	r2, r7, #2216	@ 0x8a8
 8015ec6:	f6a2 02a8 	subw	r2, r2, #2216	@ 0x8a8
 8015eca:	6013      	str	r3, [r2, #0]
    int ret;
    const char *sig_oid;
    size_t sig_oid_len = 0;
 8015ecc:	2300      	movs	r3, #0
 8015ece:	f8c7 388c 	str.w	r3, [r7, #2188]	@ 0x88c
    unsigned char *c, *c2;
    unsigned char hash[64];
    unsigned char sig[MBEDTLS_MPI_MAX_SIZE];
    unsigned char tmp_buf[2048];
    size_t pub_len = 0, sig_and_oid_len = 0, sig_len;
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	f8c7 389c 	str.w	r3, [r7, #2204]	@ 0x89c
 8015ed8:	2300      	movs	r3, #0
 8015eda:	f8c7 3898 	str.w	r3, [r7, #2200]	@ 0x898
    size_t len = 0;
 8015ede:	2300      	movs	r3, #0
 8015ee0:	f8c7 38a4 	str.w	r3, [r7, #2212]	@ 0x8a4
    mbedtls_pk_type_t pk_alg;

    /*
     * Prepare data to be signed in tmp_buf
     */
    c = tmp_buf + sizeof( tmp_buf );
 8015ee4:	f107 0314 	add.w	r3, r7, #20
 8015ee8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015eec:	f8c7 3888 	str.w	r3, [r7, #2184]	@ 0x888

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_x509_write_extensions( &c, tmp_buf, ctx->extensions ) );
 8015ef0:	f607 03a8 	addw	r3, r7, #2216	@ 0x8a8
 8015ef4:	f6a3 039c 	subw	r3, r3, #2204	@ 0x89c
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	68da      	ldr	r2, [r3, #12]
 8015efc:	f107 0114 	add.w	r1, r7, #20
 8015f00:	f607 0388 	addw	r3, r7, #2184	@ 0x888
 8015f04:	4618      	mov	r0, r3
 8015f06:	f7ff ff53 	bl	8015db0 <mbedtls_x509_write_extensions>
 8015f0a:	f8c7 0894 	str.w	r0, [r7, #2196]	@ 0x894
 8015f0e:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	da02      	bge.n	8015f1c <mbedtls_x509write_csr_der+0x80>
 8015f16:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8015f1a:	e289      	b.n	8016430 <mbedtls_x509write_csr_der+0x594>
 8015f1c:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8015f20:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 8015f24:	4413      	add	r3, r2
 8015f26:	f8c7 38a4 	str.w	r3, [r7, #2212]	@ 0x8a4

    if( len )
 8015f2a:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	@ 0x8a4
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	f000 80ab 	beq.w	801608a <mbedtls_x509write_csr_der+0x1ee>
    {
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, tmp_buf, len ) );
 8015f34:	f107 0114 	add.w	r1, r7, #20
 8015f38:	f607 0388 	addw	r3, r7, #2184	@ 0x888
 8015f3c:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 8015f40:	4618      	mov	r0, r3
 8015f42:	f7ef fa80 	bl	8005446 <mbedtls_asn1_write_len>
 8015f46:	f8c7 0894 	str.w	r0, [r7, #2196]	@ 0x894
 8015f4a:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	da02      	bge.n	8015f58 <mbedtls_x509write_csr_der+0xbc>
 8015f52:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8015f56:	e26b      	b.n	8016430 <mbedtls_x509write_csr_der+0x594>
 8015f58:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8015f5c:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 8015f60:	4413      	add	r3, r2
 8015f62:	f8c7 38a4 	str.w	r3, [r7, #2212]	@ 0x8a4
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, tmp_buf, MBEDTLS_ASN1_CONSTRUCTED |
 8015f66:	f107 0114 	add.w	r1, r7, #20
 8015f6a:	f607 0388 	addw	r3, r7, #2184	@ 0x888
 8015f6e:	2230      	movs	r2, #48	@ 0x30
 8015f70:	4618      	mov	r0, r3
 8015f72:	f7ef fb50 	bl	8005616 <mbedtls_asn1_write_tag>
 8015f76:	f8c7 0894 	str.w	r0, [r7, #2196]	@ 0x894
 8015f7a:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	da02      	bge.n	8015f88 <mbedtls_x509write_csr_der+0xec>
 8015f82:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8015f86:	e253      	b.n	8016430 <mbedtls_x509write_csr_der+0x594>
 8015f88:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8015f8c:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 8015f90:	4413      	add	r3, r2
 8015f92:	f8c7 38a4 	str.w	r3, [r7, #2212]	@ 0x8a4
                                                        MBEDTLS_ASN1_SEQUENCE ) );

        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, tmp_buf, len ) );
 8015f96:	f107 0114 	add.w	r1, r7, #20
 8015f9a:	f607 0388 	addw	r3, r7, #2184	@ 0x888
 8015f9e:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	f7ef fa4f 	bl	8005446 <mbedtls_asn1_write_len>
 8015fa8:	f8c7 0894 	str.w	r0, [r7, #2196]	@ 0x894
 8015fac:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	da02      	bge.n	8015fba <mbedtls_x509write_csr_der+0x11e>
 8015fb4:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8015fb8:	e23a      	b.n	8016430 <mbedtls_x509write_csr_der+0x594>
 8015fba:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8015fbe:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 8015fc2:	4413      	add	r3, r2
 8015fc4:	f8c7 38a4 	str.w	r3, [r7, #2212]	@ 0x8a4
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, tmp_buf, MBEDTLS_ASN1_CONSTRUCTED |
 8015fc8:	f107 0114 	add.w	r1, r7, #20
 8015fcc:	f607 0388 	addw	r3, r7, #2184	@ 0x888
 8015fd0:	2231      	movs	r2, #49	@ 0x31
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	f7ef fb1f 	bl	8005616 <mbedtls_asn1_write_tag>
 8015fd8:	f8c7 0894 	str.w	r0, [r7, #2196]	@ 0x894
 8015fdc:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	da02      	bge.n	8015fea <mbedtls_x509write_csr_der+0x14e>
 8015fe4:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8015fe8:	e222      	b.n	8016430 <mbedtls_x509write_csr_der+0x594>
 8015fea:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8015fee:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 8015ff2:	4413      	add	r3, r2
 8015ff4:	f8c7 38a4 	str.w	r3, [r7, #2212]	@ 0x8a4
                                                        MBEDTLS_ASN1_SET ) );

        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_oid( &c, tmp_buf, MBEDTLS_OID_PKCS9_CSR_EXT_REQ,
 8015ff8:	f107 0114 	add.w	r1, r7, #20
 8015ffc:	f607 0088 	addw	r0, r7, #2184	@ 0x888
 8016000:	2309      	movs	r3, #9
 8016002:	4ad6      	ldr	r2, [pc, #856]	@ (801635c <mbedtls_x509write_csr_der+0x4c0>)
 8016004:	f7ef fbf1 	bl	80057ea <mbedtls_asn1_write_oid>
 8016008:	f8c7 0894 	str.w	r0, [r7, #2196]	@ 0x894
 801600c:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8016010:	2b00      	cmp	r3, #0
 8016012:	da02      	bge.n	801601a <mbedtls_x509write_csr_der+0x17e>
 8016014:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8016018:	e20a      	b.n	8016430 <mbedtls_x509write_csr_der+0x594>
 801601a:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 801601e:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 8016022:	4413      	add	r3, r2
 8016024:	f8c7 38a4 	str.w	r3, [r7, #2212]	@ 0x8a4
                                          MBEDTLS_OID_SIZE( MBEDTLS_OID_PKCS9_CSR_EXT_REQ ) ) );

        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, tmp_buf, len ) );
 8016028:	f107 0114 	add.w	r1, r7, #20
 801602c:	f607 0388 	addw	r3, r7, #2184	@ 0x888
 8016030:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 8016034:	4618      	mov	r0, r3
 8016036:	f7ef fa06 	bl	8005446 <mbedtls_asn1_write_len>
 801603a:	f8c7 0894 	str.w	r0, [r7, #2196]	@ 0x894
 801603e:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8016042:	2b00      	cmp	r3, #0
 8016044:	da02      	bge.n	801604c <mbedtls_x509write_csr_der+0x1b0>
 8016046:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 801604a:	e1f1      	b.n	8016430 <mbedtls_x509write_csr_der+0x594>
 801604c:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8016050:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 8016054:	4413      	add	r3, r2
 8016056:	f8c7 38a4 	str.w	r3, [r7, #2212]	@ 0x8a4
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, tmp_buf, MBEDTLS_ASN1_CONSTRUCTED |
 801605a:	f107 0114 	add.w	r1, r7, #20
 801605e:	f607 0388 	addw	r3, r7, #2184	@ 0x888
 8016062:	2230      	movs	r2, #48	@ 0x30
 8016064:	4618      	mov	r0, r3
 8016066:	f7ef fad6 	bl	8005616 <mbedtls_asn1_write_tag>
 801606a:	f8c7 0894 	str.w	r0, [r7, #2196]	@ 0x894
 801606e:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8016072:	2b00      	cmp	r3, #0
 8016074:	da02      	bge.n	801607c <mbedtls_x509write_csr_der+0x1e0>
 8016076:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 801607a:	e1d9      	b.n	8016430 <mbedtls_x509write_csr_der+0x594>
 801607c:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8016080:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 8016084:	4413      	add	r3, r2
 8016086:	f8c7 38a4 	str.w	r3, [r7, #2212]	@ 0x8a4
                                                        MBEDTLS_ASN1_SEQUENCE ) );
    }

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, tmp_buf, len ) );
 801608a:	f107 0114 	add.w	r1, r7, #20
 801608e:	f607 0388 	addw	r3, r7, #2184	@ 0x888
 8016092:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 8016096:	4618      	mov	r0, r3
 8016098:	f7ef f9d5 	bl	8005446 <mbedtls_asn1_write_len>
 801609c:	f8c7 0894 	str.w	r0, [r7, #2196]	@ 0x894
 80160a0:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	da02      	bge.n	80160ae <mbedtls_x509write_csr_der+0x212>
 80160a8:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 80160ac:	e1c0      	b.n	8016430 <mbedtls_x509write_csr_der+0x594>
 80160ae:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 80160b2:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 80160b6:	4413      	add	r3, r2
 80160b8:	f8c7 38a4 	str.w	r3, [r7, #2212]	@ 0x8a4
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, tmp_buf, MBEDTLS_ASN1_CONSTRUCTED |
 80160bc:	f107 0114 	add.w	r1, r7, #20
 80160c0:	f607 0388 	addw	r3, r7, #2184	@ 0x888
 80160c4:	22a0      	movs	r2, #160	@ 0xa0
 80160c6:	4618      	mov	r0, r3
 80160c8:	f7ef faa5 	bl	8005616 <mbedtls_asn1_write_tag>
 80160cc:	f8c7 0894 	str.w	r0, [r7, #2196]	@ 0x894
 80160d0:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	da02      	bge.n	80160de <mbedtls_x509write_csr_der+0x242>
 80160d8:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 80160dc:	e1a8      	b.n	8016430 <mbedtls_x509write_csr_der+0x594>
 80160de:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 80160e2:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 80160e6:	4413      	add	r3, r2
 80160e8:	f8c7 38a4 	str.w	r3, [r7, #2212]	@ 0x8a4
                                                    MBEDTLS_ASN1_CONTEXT_SPECIFIC ) );

    MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_pk_write_pubkey_der( ctx->key,
 80160ec:	f607 03a8 	addw	r3, r7, #2216	@ 0x8a8
 80160f0:	f6a3 039c 	subw	r3, r3, #2204	@ 0x89c
 80160f4:	681b      	ldr	r3, [r3, #0]
 80160f6:	6818      	ldr	r0, [r3, #0]
 80160f8:	f8d7 2888 	ldr.w	r2, [r7, #2184]	@ 0x888
 80160fc:	f107 0314 	add.w	r3, r7, #20
 8016100:	1ad3      	subs	r3, r2, r3
 8016102:	461a      	mov	r2, r3
 8016104:	f107 0314 	add.w	r3, r7, #20
 8016108:	4619      	mov	r1, r3
 801610a:	f7fa f9cd 	bl	80104a8 <mbedtls_pk_write_pubkey_der>
 801610e:	f8c7 0894 	str.w	r0, [r7, #2196]	@ 0x894
 8016112:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8016116:	2b00      	cmp	r3, #0
 8016118:	da02      	bge.n	8016120 <mbedtls_x509write_csr_der+0x284>
 801611a:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 801611e:	e187      	b.n	8016430 <mbedtls_x509write_csr_der+0x594>
 8016120:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8016124:	f8d7 289c 	ldr.w	r2, [r7, #2204]	@ 0x89c
 8016128:	4413      	add	r3, r2
 801612a:	f8c7 389c 	str.w	r3, [r7, #2204]	@ 0x89c
                                                tmp_buf, c - tmp_buf ) );
    c -= pub_len;
 801612e:	f8d7 2888 	ldr.w	r2, [r7, #2184]	@ 0x888
 8016132:	f8d7 389c 	ldr.w	r3, [r7, #2204]	@ 0x89c
 8016136:	425b      	negs	r3, r3
 8016138:	4413      	add	r3, r2
 801613a:	f8c7 3888 	str.w	r3, [r7, #2184]	@ 0x888
    len += pub_len;
 801613e:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 8016142:	f8d7 389c 	ldr.w	r3, [r7, #2204]	@ 0x89c
 8016146:	4413      	add	r3, r2
 8016148:	f8c7 38a4 	str.w	r3, [r7, #2212]	@ 0x8a4

    /*
     *  Subject  ::=  Name
     */
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_x509_write_names( &c, tmp_buf, ctx->subject ) );
 801614c:	f607 03a8 	addw	r3, r7, #2216	@ 0x8a8
 8016150:	f6a3 039c 	subw	r3, r3, #2204	@ 0x89c
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	685a      	ldr	r2, [r3, #4]
 8016158:	f107 0114 	add.w	r1, r7, #20
 801615c:	f607 0388 	addw	r3, r7, #2184	@ 0x888
 8016160:	4618      	mov	r0, r3
 8016162:	f7ff fcc9 	bl	8015af8 <mbedtls_x509_write_names>
 8016166:	f8c7 0894 	str.w	r0, [r7, #2196]	@ 0x894
 801616a:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 801616e:	2b00      	cmp	r3, #0
 8016170:	da02      	bge.n	8016178 <mbedtls_x509write_csr_der+0x2dc>
 8016172:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8016176:	e15b      	b.n	8016430 <mbedtls_x509write_csr_der+0x594>
 8016178:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 801617c:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 8016180:	4413      	add	r3, r2
 8016182:	f8c7 38a4 	str.w	r3, [r7, #2212]	@ 0x8a4

    /*
     *  Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
     */
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_int( &c, tmp_buf, 0 ) );
 8016186:	f107 0114 	add.w	r1, r7, #20
 801618a:	f607 0388 	addw	r3, r7, #2184	@ 0x888
 801618e:	2200      	movs	r2, #0
 8016190:	4618      	mov	r0, r3
 8016192:	f7ef fbfe 	bl	8005992 <mbedtls_asn1_write_int>
 8016196:	f8c7 0894 	str.w	r0, [r7, #2196]	@ 0x894
 801619a:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 801619e:	2b00      	cmp	r3, #0
 80161a0:	da02      	bge.n	80161a8 <mbedtls_x509write_csr_der+0x30c>
 80161a2:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 80161a6:	e143      	b.n	8016430 <mbedtls_x509write_csr_der+0x594>
 80161a8:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 80161ac:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 80161b0:	4413      	add	r3, r2
 80161b2:	f8c7 38a4 	str.w	r3, [r7, #2212]	@ 0x8a4

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, tmp_buf, len ) );
 80161b6:	f107 0114 	add.w	r1, r7, #20
 80161ba:	f607 0388 	addw	r3, r7, #2184	@ 0x888
 80161be:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 80161c2:	4618      	mov	r0, r3
 80161c4:	f7ef f93f 	bl	8005446 <mbedtls_asn1_write_len>
 80161c8:	f8c7 0894 	str.w	r0, [r7, #2196]	@ 0x894
 80161cc:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	da02      	bge.n	80161da <mbedtls_x509write_csr_der+0x33e>
 80161d4:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 80161d8:	e12a      	b.n	8016430 <mbedtls_x509write_csr_der+0x594>
 80161da:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 80161de:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 80161e2:	4413      	add	r3, r2
 80161e4:	f8c7 38a4 	str.w	r3, [r7, #2212]	@ 0x8a4
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, tmp_buf, MBEDTLS_ASN1_CONSTRUCTED |
 80161e8:	f107 0114 	add.w	r1, r7, #20
 80161ec:	f607 0388 	addw	r3, r7, #2184	@ 0x888
 80161f0:	2230      	movs	r2, #48	@ 0x30
 80161f2:	4618      	mov	r0, r3
 80161f4:	f7ef fa0f 	bl	8005616 <mbedtls_asn1_write_tag>
 80161f8:	f8c7 0894 	str.w	r0, [r7, #2196]	@ 0x894
 80161fc:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8016200:	2b00      	cmp	r3, #0
 8016202:	da02      	bge.n	801620a <mbedtls_x509write_csr_der+0x36e>
 8016204:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8016208:	e112      	b.n	8016430 <mbedtls_x509write_csr_der+0x594>
 801620a:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 801620e:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 8016212:	4413      	add	r3, r2
 8016214:	f8c7 38a4 	str.w	r3, [r7, #2212]	@ 0x8a4
                                                    MBEDTLS_ASN1_SEQUENCE ) );

    /*
     * Prepare signature
     */
    mbedtls_md( mbedtls_md_info_from_type( ctx->md_alg ), c, len, hash );
 8016218:	f607 03a8 	addw	r3, r7, #2216	@ 0x8a8
 801621c:	f6a3 039c 	subw	r3, r3, #2204	@ 0x89c
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	7a1b      	ldrb	r3, [r3, #8]
 8016224:	4618      	mov	r0, r3
 8016226:	f7f9 fb69 	bl	800f8fc <mbedtls_md_info_from_type>
 801622a:	f8d7 1888 	ldr.w	r1, [r7, #2184]	@ 0x888
 801622e:	f607 0344 	addw	r3, r7, #2116	@ 0x844
 8016232:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 8016236:	f7f9 fb8d 	bl	800f954 <mbedtls_md>

    if( ( ret = mbedtls_pk_sign( ctx->key, ctx->md_alg, hash, 0, sig, &sig_len,
 801623a:	f607 03a8 	addw	r3, r7, #2216	@ 0x8a8
 801623e:	f6a3 039c 	subw	r3, r3, #2204	@ 0x89c
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	6818      	ldr	r0, [r3, #0]
 8016246:	f607 03a8 	addw	r3, r7, #2216	@ 0x8a8
 801624a:	f6a3 039c 	subw	r3, r3, #2204	@ 0x89c
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	7a19      	ldrb	r1, [r3, #8]
 8016252:	f607 0244 	addw	r2, r7, #2116	@ 0x844
 8016256:	f8d7 38b8 	ldr.w	r3, [r7, #2232]	@ 0x8b8
 801625a:	9303      	str	r3, [sp, #12]
 801625c:	f607 03a8 	addw	r3, r7, #2216	@ 0x8a8
 8016260:	f6a3 03a8 	subw	r3, r3, #2216	@ 0x8a8
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	9302      	str	r3, [sp, #8]
 8016268:	f107 0310 	add.w	r3, r7, #16
 801626c:	9301      	str	r3, [sp, #4]
 801626e:	f607 0314 	addw	r3, r7, #2068	@ 0x814
 8016272:	9300      	str	r3, [sp, #0]
 8016274:	2300      	movs	r3, #0
 8016276:	f7f9 fee5 	bl	8010044 <mbedtls_pk_sign>
 801627a:	f8c7 0894 	str.w	r0, [r7, #2196]	@ 0x894
 801627e:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8016282:	2b00      	cmp	r3, #0
 8016284:	d002      	beq.n	801628c <mbedtls_x509write_csr_der+0x3f0>
                                 f_rng, p_rng ) ) != 0 )
    {
        return( ret );
 8016286:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 801628a:	e0d1      	b.n	8016430 <mbedtls_x509write_csr_der+0x594>
    }

    if( mbedtls_pk_can_do( ctx->key, MBEDTLS_PK_RSA ) )
 801628c:	f607 03a8 	addw	r3, r7, #2216	@ 0x8a8
 8016290:	f6a3 039c 	subw	r3, r3, #2204	@ 0x89c
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	2101      	movs	r1, #1
 801629a:	4618      	mov	r0, r3
 801629c:	f7f9 fe5a 	bl	800ff54 <mbedtls_pk_can_do>
 80162a0:	4603      	mov	r3, r0
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d003      	beq.n	80162ae <mbedtls_x509write_csr_der+0x412>
        pk_alg = MBEDTLS_PK_RSA;
 80162a6:	2301      	movs	r3, #1
 80162a8:	f887 38a3 	strb.w	r3, [r7, #2211]	@ 0x8a3
 80162ac:	e012      	b.n	80162d4 <mbedtls_x509write_csr_der+0x438>
    else if( mbedtls_pk_can_do( ctx->key, MBEDTLS_PK_ECDSA ) )
 80162ae:	f607 03a8 	addw	r3, r7, #2216	@ 0x8a8
 80162b2:	f6a3 039c 	subw	r3, r3, #2204	@ 0x89c
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	2104      	movs	r1, #4
 80162bc:	4618      	mov	r0, r3
 80162be:	f7f9 fe49 	bl	800ff54 <mbedtls_pk_can_do>
 80162c2:	4603      	mov	r3, r0
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d003      	beq.n	80162d0 <mbedtls_x509write_csr_der+0x434>
        pk_alg = MBEDTLS_PK_ECDSA;
 80162c8:	2304      	movs	r3, #4
 80162ca:	f887 38a3 	strb.w	r3, [r7, #2211]	@ 0x8a3
 80162ce:	e001      	b.n	80162d4 <mbedtls_x509write_csr_der+0x438>
    else
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 80162d0:	4b23      	ldr	r3, [pc, #140]	@ (8016360 <mbedtls_x509write_csr_der+0x4c4>)
 80162d2:	e0ad      	b.n	8016430 <mbedtls_x509write_csr_der+0x594>

    if( ( ret = mbedtls_oid_get_oid_by_sig_alg( pk_alg, ctx->md_alg,
 80162d4:	f607 03a8 	addw	r3, r7, #2216	@ 0x8a8
 80162d8:	f6a3 039c 	subw	r3, r3, #2204	@ 0x89c
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	7a19      	ldrb	r1, [r3, #8]
 80162e0:	f607 038c 	addw	r3, r7, #2188	@ 0x88c
 80162e4:	f507 6209 	add.w	r2, r7, #2192	@ 0x890
 80162e8:	f897 08a3 	ldrb.w	r0, [r7, #2211]	@ 0x8a3
 80162ec:	f7f9 fc8c 	bl	800fc08 <mbedtls_oid_get_oid_by_sig_alg>
 80162f0:	f8c7 0894 	str.w	r0, [r7, #2196]	@ 0x894
 80162f4:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d002      	beq.n	8016302 <mbedtls_x509write_csr_der+0x466>
                                                &sig_oid, &sig_oid_len ) ) != 0 )
    {
        return( ret );
 80162fc:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8016300:	e096      	b.n	8016430 <mbedtls_x509write_csr_der+0x594>
    }

    /*
     * Write data to output buffer
     */
    c2 = buf + size;
 8016302:	f607 03a8 	addw	r3, r7, #2216	@ 0x8a8
 8016306:	f5a3 620a 	sub.w	r2, r3, #2208	@ 0x8a0
 801630a:	f607 03a8 	addw	r3, r7, #2216	@ 0x8a8
 801630e:	f6a3 03a4 	subw	r3, r3, #2212	@ 0x8a4
 8016312:	6812      	ldr	r2, [r2, #0]
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	4413      	add	r3, r2
 8016318:	f8c7 3884 	str.w	r3, [r7, #2180]	@ 0x884
    MBEDTLS_ASN1_CHK_ADD( sig_and_oid_len, mbedtls_x509_write_sig( &c2, buf,
 801631c:	f8d7 2890 	ldr.w	r2, [r7, #2192]	@ 0x890
 8016320:	f8d7 488c 	ldr.w	r4, [r7, #2188]	@ 0x88c
 8016324:	f607 03a8 	addw	r3, r7, #2216	@ 0x8a8
 8016328:	f6a3 0398 	subw	r3, r3, #2200	@ 0x898
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	f607 01a8 	addw	r1, r7, #2216	@ 0x8a8
 8016332:	f5a1 610a 	sub.w	r1, r1, #2208	@ 0x8a0
 8016336:	f607 0084 	addw	r0, r7, #2180	@ 0x884
 801633a:	9301      	str	r3, [sp, #4]
 801633c:	f607 0314 	addw	r3, r7, #2068	@ 0x814
 8016340:	9300      	str	r3, [sp, #0]
 8016342:	4623      	mov	r3, r4
 8016344:	6809      	ldr	r1, [r1, #0]
 8016346:	f7ff fc1a 	bl	8015b7e <mbedtls_x509_write_sig>
 801634a:	f8c7 0894 	str.w	r0, [r7, #2196]	@ 0x894
 801634e:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8016352:	2b00      	cmp	r3, #0
 8016354:	da06      	bge.n	8016364 <mbedtls_x509write_csr_der+0x4c8>
 8016356:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 801635a:	e069      	b.n	8016430 <mbedtls_x509write_csr_der+0x594>
 801635c:	08018c0c 	.word	0x08018c0c
 8016360:	ffffdd00 	.word	0xffffdd00
 8016364:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8016368:	f8d7 2898 	ldr.w	r2, [r7, #2200]	@ 0x898
 801636c:	4413      	add	r3, r2
 801636e:	f8c7 3898 	str.w	r3, [r7, #2200]	@ 0x898
                                        sig_oid, sig_oid_len, sig, sig_len ) );

    if( len > (size_t)( c2 - buf ) )
 8016372:	f8d7 2884 	ldr.w	r2, [r7, #2180]	@ 0x884
 8016376:	f607 03a8 	addw	r3, r7, #2216	@ 0x8a8
 801637a:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	1ad3      	subs	r3, r2, r3
 8016382:	461a      	mov	r2, r3
 8016384:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	@ 0x8a4
 8016388:	4293      	cmp	r3, r2
 801638a:	d902      	bls.n	8016392 <mbedtls_x509write_csr_der+0x4f6>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 801638c:	f06f 036b 	mvn.w	r3, #107	@ 0x6b
 8016390:	e04e      	b.n	8016430 <mbedtls_x509write_csr_der+0x594>

    c2 -= len;
 8016392:	f8d7 2884 	ldr.w	r2, [r7, #2180]	@ 0x884
 8016396:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	@ 0x8a4
 801639a:	425b      	negs	r3, r3
 801639c:	4413      	add	r3, r2
 801639e:	f8c7 3884 	str.w	r3, [r7, #2180]	@ 0x884
    memcpy( c2, c, len );
 80163a2:	f8d7 3884 	ldr.w	r3, [r7, #2180]	@ 0x884
 80163a6:	f8d7 1888 	ldr.w	r1, [r7, #2184]	@ 0x888
 80163aa:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 80163ae:	4618      	mov	r0, r3
 80163b0:	f000 fcdf 	bl	8016d72 <memcpy>

    len += sig_and_oid_len;
 80163b4:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 80163b8:	f8d7 3898 	ldr.w	r3, [r7, #2200]	@ 0x898
 80163bc:	4413      	add	r3, r2
 80163be:	f8c7 38a4 	str.w	r3, [r7, #2212]	@ 0x8a4
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c2, buf, len ) );
 80163c2:	f607 03a8 	addw	r3, r7, #2216	@ 0x8a8
 80163c6:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 80163ca:	f607 0084 	addw	r0, r7, #2180	@ 0x884
 80163ce:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 80163d2:	6819      	ldr	r1, [r3, #0]
 80163d4:	f7ef f837 	bl	8005446 <mbedtls_asn1_write_len>
 80163d8:	f8c7 0894 	str.w	r0, [r7, #2196]	@ 0x894
 80163dc:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	da02      	bge.n	80163ea <mbedtls_x509write_csr_der+0x54e>
 80163e4:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 80163e8:	e022      	b.n	8016430 <mbedtls_x509write_csr_der+0x594>
 80163ea:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 80163ee:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 80163f2:	4413      	add	r3, r2
 80163f4:	f8c7 38a4 	str.w	r3, [r7, #2212]	@ 0x8a4
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c2, buf, MBEDTLS_ASN1_CONSTRUCTED |
 80163f8:	f607 03a8 	addw	r3, r7, #2216	@ 0x8a8
 80163fc:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8016400:	f607 0084 	addw	r0, r7, #2180	@ 0x884
 8016404:	2230      	movs	r2, #48	@ 0x30
 8016406:	6819      	ldr	r1, [r3, #0]
 8016408:	f7ef f905 	bl	8005616 <mbedtls_asn1_write_tag>
 801640c:	f8c7 0894 	str.w	r0, [r7, #2196]	@ 0x894
 8016410:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8016414:	2b00      	cmp	r3, #0
 8016416:	da02      	bge.n	801641e <mbedtls_x509write_csr_der+0x582>
 8016418:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 801641c:	e008      	b.n	8016430 <mbedtls_x509write_csr_der+0x594>
 801641e:	f8d7 3894 	ldr.w	r3, [r7, #2196]	@ 0x894
 8016422:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	@ 0x8a4
 8016426:	4413      	add	r3, r2
 8016428:	f8c7 38a4 	str.w	r3, [r7, #2212]	@ 0x8a4
                                                 MBEDTLS_ASN1_SEQUENCE ) );

    return( (int) len );
 801642c:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	@ 0x8a4
}
 8016430:	4618      	mov	r0, r3
 8016432:	f607 07ac 	addw	r7, r7, #2220	@ 0x8ac
 8016436:	46bd      	mov	sp, r7
 8016438:	bd90      	pop	{r4, r7, pc}
 801643a:	bf00      	nop

0801643c <mbedtls_x509write_csr_pem>:

#if defined(MBEDTLS_PEM_WRITE_C)
int mbedtls_x509write_csr_pem( mbedtls_x509write_csr *ctx, unsigned char *buf, size_t size,
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng )
{
 801643c:	b590      	push	{r4, r7, lr}
 801643e:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8016442:	b083      	sub	sp, #12
 8016444:	af04      	add	r7, sp, #16
 8016446:	f107 0418 	add.w	r4, r7, #24
 801644a:	f844 0c0c 	str.w	r0, [r4, #-12]
 801644e:	f107 0018 	add.w	r0, r7, #24
 8016452:	f840 1c10 	str.w	r1, [r0, #-16]
 8016456:	f107 0118 	add.w	r1, r7, #24
 801645a:	f841 2c14 	str.w	r2, [r1, #-20]
 801645e:	f107 0218 	add.w	r2, r7, #24
 8016462:	f842 3c18 	str.w	r3, [r2, #-24]
    int ret;
    unsigned char output_buf[4096];
    size_t olen = 0;
 8016466:	f107 0318 	add.w	r3, r7, #24
 801646a:	461a      	mov	r2, r3
 801646c:	2300      	movs	r3, #0
 801646e:	f842 3c08 	str.w	r3, [r2, #-8]

    if( ( ret = mbedtls_x509write_csr_der( ctx, output_buf, sizeof(output_buf),
 8016472:	f107 0318 	add.w	r3, r7, #24
 8016476:	461a      	mov	r2, r3
 8016478:	f107 0118 	add.w	r1, r7, #24
 801647c:	3904      	subs	r1, #4
 801647e:	f107 0318 	add.w	r3, r7, #24
 8016482:	4618      	mov	r0, r3
 8016484:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8016488:	f103 0308 	add.w	r3, r3, #8
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	9300      	str	r3, [sp, #0]
 8016490:	f852 3c18 	ldr.w	r3, [r2, #-24]
 8016494:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8016498:	f850 0c0c 	ldr.w	r0, [r0, #-12]
 801649c:	f7ff fcfe 	bl	8015e9c <mbedtls_x509write_csr_der>
 80164a0:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80164a4:	f103 0314 	add.w	r3, r3, #20
 80164a8:	6018      	str	r0, [r3, #0]
 80164aa:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80164ae:	f103 0314 	add.w	r3, r3, #20
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	da05      	bge.n	80164c4 <mbedtls_x509write_csr_pem+0x88>
                                   f_rng, p_rng ) ) < 0 )
    {
        return( ret );
 80164b8:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80164bc:	f103 0314 	add.w	r3, r3, #20
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	e035      	b.n	8016530 <mbedtls_x509write_csr_pem+0xf4>
    }

    if( ( ret = mbedtls_pem_write_buffer( PEM_BEGIN_CSR, PEM_END_CSR,
                                  output_buf + sizeof(output_buf) - ret,
 80164c4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80164c8:	f103 0314 	add.w	r3, r3, #20
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	f5c3 5280 	rsb	r2, r3, #4096	@ 0x1000
    if( ( ret = mbedtls_pem_write_buffer( PEM_BEGIN_CSR, PEM_END_CSR,
 80164d2:	f107 0318 	add.w	r3, r7, #24
 80164d6:	3b04      	subs	r3, #4
 80164d8:	441a      	add	r2, r3
 80164da:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80164de:	f103 0314 	add.w	r3, r3, #20
 80164e2:	6819      	ldr	r1, [r3, #0]
 80164e4:	f107 0318 	add.w	r3, r7, #24
 80164e8:	3b08      	subs	r3, #8
 80164ea:	9302      	str	r3, [sp, #8]
 80164ec:	f107 0318 	add.w	r3, r7, #24
 80164f0:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80164f4:	9301      	str	r3, [sp, #4]
 80164f6:	f107 0318 	add.w	r3, r7, #24
 80164fa:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80164fe:	9300      	str	r3, [sp, #0]
 8016500:	460b      	mov	r3, r1
 8016502:	490e      	ldr	r1, [pc, #56]	@ (801653c <mbedtls_x509write_csr_pem+0x100>)
 8016504:	480e      	ldr	r0, [pc, #56]	@ (8016540 <mbedtls_x509write_csr_pem+0x104>)
 8016506:	f7f9 fc05 	bl	800fd14 <mbedtls_pem_write_buffer>
 801650a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 801650e:	f103 0314 	add.w	r3, r3, #20
 8016512:	6018      	str	r0, [r3, #0]
 8016514:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8016518:	f103 0314 	add.w	r3, r3, #20
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d005      	beq.n	801652e <mbedtls_x509write_csr_pem+0xf2>
                                  ret, buf, size, &olen ) ) != 0 )
    {
        return( ret );
 8016522:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8016526:	f103 0314 	add.w	r3, r3, #20
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	e000      	b.n	8016530 <mbedtls_x509write_csr_pem+0xf4>
    }

    return( 0 );
 801652e:	2300      	movs	r3, #0
}
 8016530:	4618      	mov	r0, r3
 8016532:	f507 5780 	add.w	r7, r7, #4096	@ 0x1000
 8016536:	371c      	adds	r7, #28
 8016538:	46bd      	mov	sp, r7
 801653a:	bd90      	pop	{r4, r7, pc}
 801653c:	08018c18 	.word	0x08018c18
 8016540:	08018c3c 	.word	0x08018c3c

08016544 <calloc>:
 8016544:	4b02      	ldr	r3, [pc, #8]	@ (8016550 <calloc+0xc>)
 8016546:	460a      	mov	r2, r1
 8016548:	4601      	mov	r1, r0
 801654a:	6818      	ldr	r0, [r3, #0]
 801654c:	f000 b802 	b.w	8016554 <_calloc_r>
 8016550:	20000074 	.word	0x20000074

08016554 <_calloc_r>:
 8016554:	b570      	push	{r4, r5, r6, lr}
 8016556:	fba1 5402 	umull	r5, r4, r1, r2
 801655a:	b93c      	cbnz	r4, 801656c <_calloc_r+0x18>
 801655c:	4629      	mov	r1, r5
 801655e:	f000 f837 	bl	80165d0 <_malloc_r>
 8016562:	4606      	mov	r6, r0
 8016564:	b928      	cbnz	r0, 8016572 <_calloc_r+0x1e>
 8016566:	2600      	movs	r6, #0
 8016568:	4630      	mov	r0, r6
 801656a:	bd70      	pop	{r4, r5, r6, pc}
 801656c:	220c      	movs	r2, #12
 801656e:	6002      	str	r2, [r0, #0]
 8016570:	e7f9      	b.n	8016566 <_calloc_r+0x12>
 8016572:	462a      	mov	r2, r5
 8016574:	4621      	mov	r1, r4
 8016576:	f000 fb1f 	bl	8016bb8 <memset>
 801657a:	e7f5      	b.n	8016568 <_calloc_r+0x14>

0801657c <free>:
 801657c:	4b02      	ldr	r3, [pc, #8]	@ (8016588 <free+0xc>)
 801657e:	4601      	mov	r1, r0
 8016580:	6818      	ldr	r0, [r3, #0]
 8016582:	f000 bc05 	b.w	8016d90 <_free_r>
 8016586:	bf00      	nop
 8016588:	20000074 	.word	0x20000074

0801658c <sbrk_aligned>:
 801658c:	b570      	push	{r4, r5, r6, lr}
 801658e:	4e0f      	ldr	r6, [pc, #60]	@ (80165cc <sbrk_aligned+0x40>)
 8016590:	460c      	mov	r4, r1
 8016592:	6831      	ldr	r1, [r6, #0]
 8016594:	4605      	mov	r5, r0
 8016596:	b911      	cbnz	r1, 801659e <sbrk_aligned+0x12>
 8016598:	f000 fb94 	bl	8016cc4 <_sbrk_r>
 801659c:	6030      	str	r0, [r6, #0]
 801659e:	4621      	mov	r1, r4
 80165a0:	4628      	mov	r0, r5
 80165a2:	f000 fb8f 	bl	8016cc4 <_sbrk_r>
 80165a6:	1c43      	adds	r3, r0, #1
 80165a8:	d103      	bne.n	80165b2 <sbrk_aligned+0x26>
 80165aa:	f04f 34ff 	mov.w	r4, #4294967295
 80165ae:	4620      	mov	r0, r4
 80165b0:	bd70      	pop	{r4, r5, r6, pc}
 80165b2:	1cc4      	adds	r4, r0, #3
 80165b4:	f024 0403 	bic.w	r4, r4, #3
 80165b8:	42a0      	cmp	r0, r4
 80165ba:	d0f8      	beq.n	80165ae <sbrk_aligned+0x22>
 80165bc:	1a21      	subs	r1, r4, r0
 80165be:	4628      	mov	r0, r5
 80165c0:	f000 fb80 	bl	8016cc4 <_sbrk_r>
 80165c4:	3001      	adds	r0, #1
 80165c6:	d1f2      	bne.n	80165ae <sbrk_aligned+0x22>
 80165c8:	e7ef      	b.n	80165aa <sbrk_aligned+0x1e>
 80165ca:	bf00      	nop
 80165cc:	200011cc 	.word	0x200011cc

080165d0 <_malloc_r>:
 80165d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80165d4:	1ccd      	adds	r5, r1, #3
 80165d6:	f025 0503 	bic.w	r5, r5, #3
 80165da:	3508      	adds	r5, #8
 80165dc:	2d0c      	cmp	r5, #12
 80165de:	bf38      	it	cc
 80165e0:	250c      	movcc	r5, #12
 80165e2:	2d00      	cmp	r5, #0
 80165e4:	4606      	mov	r6, r0
 80165e6:	db01      	blt.n	80165ec <_malloc_r+0x1c>
 80165e8:	42a9      	cmp	r1, r5
 80165ea:	d904      	bls.n	80165f6 <_malloc_r+0x26>
 80165ec:	230c      	movs	r3, #12
 80165ee:	6033      	str	r3, [r6, #0]
 80165f0:	2000      	movs	r0, #0
 80165f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80166cc <_malloc_r+0xfc>
 80165fa:	f000 f869 	bl	80166d0 <__malloc_lock>
 80165fe:	f8d8 3000 	ldr.w	r3, [r8]
 8016602:	461c      	mov	r4, r3
 8016604:	bb44      	cbnz	r4, 8016658 <_malloc_r+0x88>
 8016606:	4629      	mov	r1, r5
 8016608:	4630      	mov	r0, r6
 801660a:	f7ff ffbf 	bl	801658c <sbrk_aligned>
 801660e:	1c43      	adds	r3, r0, #1
 8016610:	4604      	mov	r4, r0
 8016612:	d158      	bne.n	80166c6 <_malloc_r+0xf6>
 8016614:	f8d8 4000 	ldr.w	r4, [r8]
 8016618:	4627      	mov	r7, r4
 801661a:	2f00      	cmp	r7, #0
 801661c:	d143      	bne.n	80166a6 <_malloc_r+0xd6>
 801661e:	2c00      	cmp	r4, #0
 8016620:	d04b      	beq.n	80166ba <_malloc_r+0xea>
 8016622:	6823      	ldr	r3, [r4, #0]
 8016624:	4639      	mov	r1, r7
 8016626:	4630      	mov	r0, r6
 8016628:	eb04 0903 	add.w	r9, r4, r3
 801662c:	f000 fb4a 	bl	8016cc4 <_sbrk_r>
 8016630:	4581      	cmp	r9, r0
 8016632:	d142      	bne.n	80166ba <_malloc_r+0xea>
 8016634:	6821      	ldr	r1, [r4, #0]
 8016636:	1a6d      	subs	r5, r5, r1
 8016638:	4629      	mov	r1, r5
 801663a:	4630      	mov	r0, r6
 801663c:	f7ff ffa6 	bl	801658c <sbrk_aligned>
 8016640:	3001      	adds	r0, #1
 8016642:	d03a      	beq.n	80166ba <_malloc_r+0xea>
 8016644:	6823      	ldr	r3, [r4, #0]
 8016646:	442b      	add	r3, r5
 8016648:	6023      	str	r3, [r4, #0]
 801664a:	f8d8 3000 	ldr.w	r3, [r8]
 801664e:	685a      	ldr	r2, [r3, #4]
 8016650:	bb62      	cbnz	r2, 80166ac <_malloc_r+0xdc>
 8016652:	f8c8 7000 	str.w	r7, [r8]
 8016656:	e00f      	b.n	8016678 <_malloc_r+0xa8>
 8016658:	6822      	ldr	r2, [r4, #0]
 801665a:	1b52      	subs	r2, r2, r5
 801665c:	d420      	bmi.n	80166a0 <_malloc_r+0xd0>
 801665e:	2a0b      	cmp	r2, #11
 8016660:	d917      	bls.n	8016692 <_malloc_r+0xc2>
 8016662:	1961      	adds	r1, r4, r5
 8016664:	42a3      	cmp	r3, r4
 8016666:	6025      	str	r5, [r4, #0]
 8016668:	bf18      	it	ne
 801666a:	6059      	strne	r1, [r3, #4]
 801666c:	6863      	ldr	r3, [r4, #4]
 801666e:	bf08      	it	eq
 8016670:	f8c8 1000 	streq.w	r1, [r8]
 8016674:	5162      	str	r2, [r4, r5]
 8016676:	604b      	str	r3, [r1, #4]
 8016678:	4630      	mov	r0, r6
 801667a:	f000 f82f 	bl	80166dc <__malloc_unlock>
 801667e:	f104 000b 	add.w	r0, r4, #11
 8016682:	1d23      	adds	r3, r4, #4
 8016684:	f020 0007 	bic.w	r0, r0, #7
 8016688:	1ac2      	subs	r2, r0, r3
 801668a:	bf1c      	itt	ne
 801668c:	1a1b      	subne	r3, r3, r0
 801668e:	50a3      	strne	r3, [r4, r2]
 8016690:	e7af      	b.n	80165f2 <_malloc_r+0x22>
 8016692:	6862      	ldr	r2, [r4, #4]
 8016694:	42a3      	cmp	r3, r4
 8016696:	bf0c      	ite	eq
 8016698:	f8c8 2000 	streq.w	r2, [r8]
 801669c:	605a      	strne	r2, [r3, #4]
 801669e:	e7eb      	b.n	8016678 <_malloc_r+0xa8>
 80166a0:	4623      	mov	r3, r4
 80166a2:	6864      	ldr	r4, [r4, #4]
 80166a4:	e7ae      	b.n	8016604 <_malloc_r+0x34>
 80166a6:	463c      	mov	r4, r7
 80166a8:	687f      	ldr	r7, [r7, #4]
 80166aa:	e7b6      	b.n	801661a <_malloc_r+0x4a>
 80166ac:	461a      	mov	r2, r3
 80166ae:	685b      	ldr	r3, [r3, #4]
 80166b0:	42a3      	cmp	r3, r4
 80166b2:	d1fb      	bne.n	80166ac <_malloc_r+0xdc>
 80166b4:	2300      	movs	r3, #0
 80166b6:	6053      	str	r3, [r2, #4]
 80166b8:	e7de      	b.n	8016678 <_malloc_r+0xa8>
 80166ba:	230c      	movs	r3, #12
 80166bc:	6033      	str	r3, [r6, #0]
 80166be:	4630      	mov	r0, r6
 80166c0:	f000 f80c 	bl	80166dc <__malloc_unlock>
 80166c4:	e794      	b.n	80165f0 <_malloc_r+0x20>
 80166c6:	6005      	str	r5, [r0, #0]
 80166c8:	e7d6      	b.n	8016678 <_malloc_r+0xa8>
 80166ca:	bf00      	nop
 80166cc:	200011d0 	.word	0x200011d0

080166d0 <__malloc_lock>:
 80166d0:	4801      	ldr	r0, [pc, #4]	@ (80166d8 <__malloc_lock+0x8>)
 80166d2:	f000 bb44 	b.w	8016d5e <__retarget_lock_acquire_recursive>
 80166d6:	bf00      	nop
 80166d8:	20001314 	.word	0x20001314

080166dc <__malloc_unlock>:
 80166dc:	4801      	ldr	r0, [pc, #4]	@ (80166e4 <__malloc_unlock+0x8>)
 80166de:	f000 bb3f 	b.w	8016d60 <__retarget_lock_release_recursive>
 80166e2:	bf00      	nop
 80166e4:	20001314 	.word	0x20001314

080166e8 <std>:
 80166e8:	2300      	movs	r3, #0
 80166ea:	b510      	push	{r4, lr}
 80166ec:	4604      	mov	r4, r0
 80166ee:	e9c0 3300 	strd	r3, r3, [r0]
 80166f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80166f6:	6083      	str	r3, [r0, #8]
 80166f8:	8181      	strh	r1, [r0, #12]
 80166fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80166fc:	81c2      	strh	r2, [r0, #14]
 80166fe:	6183      	str	r3, [r0, #24]
 8016700:	4619      	mov	r1, r3
 8016702:	2208      	movs	r2, #8
 8016704:	305c      	adds	r0, #92	@ 0x5c
 8016706:	f000 fa57 	bl	8016bb8 <memset>
 801670a:	4b0d      	ldr	r3, [pc, #52]	@ (8016740 <std+0x58>)
 801670c:	6263      	str	r3, [r4, #36]	@ 0x24
 801670e:	4b0d      	ldr	r3, [pc, #52]	@ (8016744 <std+0x5c>)
 8016710:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016712:	4b0d      	ldr	r3, [pc, #52]	@ (8016748 <std+0x60>)
 8016714:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016716:	4b0d      	ldr	r3, [pc, #52]	@ (801674c <std+0x64>)
 8016718:	6323      	str	r3, [r4, #48]	@ 0x30
 801671a:	4b0d      	ldr	r3, [pc, #52]	@ (8016750 <std+0x68>)
 801671c:	6224      	str	r4, [r4, #32]
 801671e:	429c      	cmp	r4, r3
 8016720:	d006      	beq.n	8016730 <std+0x48>
 8016722:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016726:	4294      	cmp	r4, r2
 8016728:	d002      	beq.n	8016730 <std+0x48>
 801672a:	33d0      	adds	r3, #208	@ 0xd0
 801672c:	429c      	cmp	r4, r3
 801672e:	d105      	bne.n	801673c <std+0x54>
 8016730:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016738:	f000 bb10 	b.w	8016d5c <__retarget_lock_init_recursive>
 801673c:	bd10      	pop	{r4, pc}
 801673e:	bf00      	nop
 8016740:	080169b5 	.word	0x080169b5
 8016744:	080169d7 	.word	0x080169d7
 8016748:	08016a0f 	.word	0x08016a0f
 801674c:	08016a33 	.word	0x08016a33
 8016750:	200011d4 	.word	0x200011d4

08016754 <stdio_exit_handler>:
 8016754:	4a02      	ldr	r2, [pc, #8]	@ (8016760 <stdio_exit_handler+0xc>)
 8016756:	4903      	ldr	r1, [pc, #12]	@ (8016764 <stdio_exit_handler+0x10>)
 8016758:	4803      	ldr	r0, [pc, #12]	@ (8016768 <stdio_exit_handler+0x14>)
 801675a:	f000 b869 	b.w	8016830 <_fwalk_sglue>
 801675e:	bf00      	nop
 8016760:	20000068 	.word	0x20000068
 8016764:	0801777d 	.word	0x0801777d
 8016768:	20000078 	.word	0x20000078

0801676c <cleanup_stdio>:
 801676c:	6841      	ldr	r1, [r0, #4]
 801676e:	4b0c      	ldr	r3, [pc, #48]	@ (80167a0 <cleanup_stdio+0x34>)
 8016770:	4299      	cmp	r1, r3
 8016772:	b510      	push	{r4, lr}
 8016774:	4604      	mov	r4, r0
 8016776:	d001      	beq.n	801677c <cleanup_stdio+0x10>
 8016778:	f001 f800 	bl	801777c <_fflush_r>
 801677c:	68a1      	ldr	r1, [r4, #8]
 801677e:	4b09      	ldr	r3, [pc, #36]	@ (80167a4 <cleanup_stdio+0x38>)
 8016780:	4299      	cmp	r1, r3
 8016782:	d002      	beq.n	801678a <cleanup_stdio+0x1e>
 8016784:	4620      	mov	r0, r4
 8016786:	f000 fff9 	bl	801777c <_fflush_r>
 801678a:	68e1      	ldr	r1, [r4, #12]
 801678c:	4b06      	ldr	r3, [pc, #24]	@ (80167a8 <cleanup_stdio+0x3c>)
 801678e:	4299      	cmp	r1, r3
 8016790:	d004      	beq.n	801679c <cleanup_stdio+0x30>
 8016792:	4620      	mov	r0, r4
 8016794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016798:	f000 bff0 	b.w	801777c <_fflush_r>
 801679c:	bd10      	pop	{r4, pc}
 801679e:	bf00      	nop
 80167a0:	200011d4 	.word	0x200011d4
 80167a4:	2000123c 	.word	0x2000123c
 80167a8:	200012a4 	.word	0x200012a4

080167ac <global_stdio_init.part.0>:
 80167ac:	b510      	push	{r4, lr}
 80167ae:	4b0b      	ldr	r3, [pc, #44]	@ (80167dc <global_stdio_init.part.0+0x30>)
 80167b0:	4c0b      	ldr	r4, [pc, #44]	@ (80167e0 <global_stdio_init.part.0+0x34>)
 80167b2:	4a0c      	ldr	r2, [pc, #48]	@ (80167e4 <global_stdio_init.part.0+0x38>)
 80167b4:	601a      	str	r2, [r3, #0]
 80167b6:	4620      	mov	r0, r4
 80167b8:	2200      	movs	r2, #0
 80167ba:	2104      	movs	r1, #4
 80167bc:	f7ff ff94 	bl	80166e8 <std>
 80167c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80167c4:	2201      	movs	r2, #1
 80167c6:	2109      	movs	r1, #9
 80167c8:	f7ff ff8e 	bl	80166e8 <std>
 80167cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80167d0:	2202      	movs	r2, #2
 80167d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167d6:	2112      	movs	r1, #18
 80167d8:	f7ff bf86 	b.w	80166e8 <std>
 80167dc:	2000130c 	.word	0x2000130c
 80167e0:	200011d4 	.word	0x200011d4
 80167e4:	08016755 	.word	0x08016755

080167e8 <__sfp_lock_acquire>:
 80167e8:	4801      	ldr	r0, [pc, #4]	@ (80167f0 <__sfp_lock_acquire+0x8>)
 80167ea:	f000 bab8 	b.w	8016d5e <__retarget_lock_acquire_recursive>
 80167ee:	bf00      	nop
 80167f0:	20001315 	.word	0x20001315

080167f4 <__sfp_lock_release>:
 80167f4:	4801      	ldr	r0, [pc, #4]	@ (80167fc <__sfp_lock_release+0x8>)
 80167f6:	f000 bab3 	b.w	8016d60 <__retarget_lock_release_recursive>
 80167fa:	bf00      	nop
 80167fc:	20001315 	.word	0x20001315

08016800 <__sinit>:
 8016800:	b510      	push	{r4, lr}
 8016802:	4604      	mov	r4, r0
 8016804:	f7ff fff0 	bl	80167e8 <__sfp_lock_acquire>
 8016808:	6a23      	ldr	r3, [r4, #32]
 801680a:	b11b      	cbz	r3, 8016814 <__sinit+0x14>
 801680c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016810:	f7ff bff0 	b.w	80167f4 <__sfp_lock_release>
 8016814:	4b04      	ldr	r3, [pc, #16]	@ (8016828 <__sinit+0x28>)
 8016816:	6223      	str	r3, [r4, #32]
 8016818:	4b04      	ldr	r3, [pc, #16]	@ (801682c <__sinit+0x2c>)
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	2b00      	cmp	r3, #0
 801681e:	d1f5      	bne.n	801680c <__sinit+0xc>
 8016820:	f7ff ffc4 	bl	80167ac <global_stdio_init.part.0>
 8016824:	e7f2      	b.n	801680c <__sinit+0xc>
 8016826:	bf00      	nop
 8016828:	0801676d 	.word	0x0801676d
 801682c:	2000130c 	.word	0x2000130c

08016830 <_fwalk_sglue>:
 8016830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016834:	4607      	mov	r7, r0
 8016836:	4688      	mov	r8, r1
 8016838:	4614      	mov	r4, r2
 801683a:	2600      	movs	r6, #0
 801683c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016840:	f1b9 0901 	subs.w	r9, r9, #1
 8016844:	d505      	bpl.n	8016852 <_fwalk_sglue+0x22>
 8016846:	6824      	ldr	r4, [r4, #0]
 8016848:	2c00      	cmp	r4, #0
 801684a:	d1f7      	bne.n	801683c <_fwalk_sglue+0xc>
 801684c:	4630      	mov	r0, r6
 801684e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016852:	89ab      	ldrh	r3, [r5, #12]
 8016854:	2b01      	cmp	r3, #1
 8016856:	d907      	bls.n	8016868 <_fwalk_sglue+0x38>
 8016858:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801685c:	3301      	adds	r3, #1
 801685e:	d003      	beq.n	8016868 <_fwalk_sglue+0x38>
 8016860:	4629      	mov	r1, r5
 8016862:	4638      	mov	r0, r7
 8016864:	47c0      	blx	r8
 8016866:	4306      	orrs	r6, r0
 8016868:	3568      	adds	r5, #104	@ 0x68
 801686a:	e7e9      	b.n	8016840 <_fwalk_sglue+0x10>

0801686c <iprintf>:
 801686c:	b40f      	push	{r0, r1, r2, r3}
 801686e:	b507      	push	{r0, r1, r2, lr}
 8016870:	4906      	ldr	r1, [pc, #24]	@ (801688c <iprintf+0x20>)
 8016872:	ab04      	add	r3, sp, #16
 8016874:	6808      	ldr	r0, [r1, #0]
 8016876:	f853 2b04 	ldr.w	r2, [r3], #4
 801687a:	6881      	ldr	r1, [r0, #8]
 801687c:	9301      	str	r3, [sp, #4]
 801687e:	f000 fc53 	bl	8017128 <_vfiprintf_r>
 8016882:	b003      	add	sp, #12
 8016884:	f85d eb04 	ldr.w	lr, [sp], #4
 8016888:	b004      	add	sp, #16
 801688a:	4770      	bx	lr
 801688c:	20000074 	.word	0x20000074

08016890 <_puts_r>:
 8016890:	6a03      	ldr	r3, [r0, #32]
 8016892:	b570      	push	{r4, r5, r6, lr}
 8016894:	6884      	ldr	r4, [r0, #8]
 8016896:	4605      	mov	r5, r0
 8016898:	460e      	mov	r6, r1
 801689a:	b90b      	cbnz	r3, 80168a0 <_puts_r+0x10>
 801689c:	f7ff ffb0 	bl	8016800 <__sinit>
 80168a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80168a2:	07db      	lsls	r3, r3, #31
 80168a4:	d405      	bmi.n	80168b2 <_puts_r+0x22>
 80168a6:	89a3      	ldrh	r3, [r4, #12]
 80168a8:	0598      	lsls	r0, r3, #22
 80168aa:	d402      	bmi.n	80168b2 <_puts_r+0x22>
 80168ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80168ae:	f000 fa56 	bl	8016d5e <__retarget_lock_acquire_recursive>
 80168b2:	89a3      	ldrh	r3, [r4, #12]
 80168b4:	0719      	lsls	r1, r3, #28
 80168b6:	d502      	bpl.n	80168be <_puts_r+0x2e>
 80168b8:	6923      	ldr	r3, [r4, #16]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d135      	bne.n	801692a <_puts_r+0x9a>
 80168be:	4621      	mov	r1, r4
 80168c0:	4628      	mov	r0, r5
 80168c2:	f000 f8f9 	bl	8016ab8 <__swsetup_r>
 80168c6:	b380      	cbz	r0, 801692a <_puts_r+0x9a>
 80168c8:	f04f 35ff 	mov.w	r5, #4294967295
 80168cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80168ce:	07da      	lsls	r2, r3, #31
 80168d0:	d405      	bmi.n	80168de <_puts_r+0x4e>
 80168d2:	89a3      	ldrh	r3, [r4, #12]
 80168d4:	059b      	lsls	r3, r3, #22
 80168d6:	d402      	bmi.n	80168de <_puts_r+0x4e>
 80168d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80168da:	f000 fa41 	bl	8016d60 <__retarget_lock_release_recursive>
 80168de:	4628      	mov	r0, r5
 80168e0:	bd70      	pop	{r4, r5, r6, pc}
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	da04      	bge.n	80168f0 <_puts_r+0x60>
 80168e6:	69a2      	ldr	r2, [r4, #24]
 80168e8:	429a      	cmp	r2, r3
 80168ea:	dc17      	bgt.n	801691c <_puts_r+0x8c>
 80168ec:	290a      	cmp	r1, #10
 80168ee:	d015      	beq.n	801691c <_puts_r+0x8c>
 80168f0:	6823      	ldr	r3, [r4, #0]
 80168f2:	1c5a      	adds	r2, r3, #1
 80168f4:	6022      	str	r2, [r4, #0]
 80168f6:	7019      	strb	r1, [r3, #0]
 80168f8:	68a3      	ldr	r3, [r4, #8]
 80168fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80168fe:	3b01      	subs	r3, #1
 8016900:	60a3      	str	r3, [r4, #8]
 8016902:	2900      	cmp	r1, #0
 8016904:	d1ed      	bne.n	80168e2 <_puts_r+0x52>
 8016906:	2b00      	cmp	r3, #0
 8016908:	da11      	bge.n	801692e <_puts_r+0x9e>
 801690a:	4622      	mov	r2, r4
 801690c:	210a      	movs	r1, #10
 801690e:	4628      	mov	r0, r5
 8016910:	f000 f893 	bl	8016a3a <__swbuf_r>
 8016914:	3001      	adds	r0, #1
 8016916:	d0d7      	beq.n	80168c8 <_puts_r+0x38>
 8016918:	250a      	movs	r5, #10
 801691a:	e7d7      	b.n	80168cc <_puts_r+0x3c>
 801691c:	4622      	mov	r2, r4
 801691e:	4628      	mov	r0, r5
 8016920:	f000 f88b 	bl	8016a3a <__swbuf_r>
 8016924:	3001      	adds	r0, #1
 8016926:	d1e7      	bne.n	80168f8 <_puts_r+0x68>
 8016928:	e7ce      	b.n	80168c8 <_puts_r+0x38>
 801692a:	3e01      	subs	r6, #1
 801692c:	e7e4      	b.n	80168f8 <_puts_r+0x68>
 801692e:	6823      	ldr	r3, [r4, #0]
 8016930:	1c5a      	adds	r2, r3, #1
 8016932:	6022      	str	r2, [r4, #0]
 8016934:	220a      	movs	r2, #10
 8016936:	701a      	strb	r2, [r3, #0]
 8016938:	e7ee      	b.n	8016918 <_puts_r+0x88>
	...

0801693c <puts>:
 801693c:	4b02      	ldr	r3, [pc, #8]	@ (8016948 <puts+0xc>)
 801693e:	4601      	mov	r1, r0
 8016940:	6818      	ldr	r0, [r3, #0]
 8016942:	f7ff bfa5 	b.w	8016890 <_puts_r>
 8016946:	bf00      	nop
 8016948:	20000074 	.word	0x20000074

0801694c <sniprintf>:
 801694c:	b40c      	push	{r2, r3}
 801694e:	b530      	push	{r4, r5, lr}
 8016950:	4b17      	ldr	r3, [pc, #92]	@ (80169b0 <sniprintf+0x64>)
 8016952:	1e0c      	subs	r4, r1, #0
 8016954:	681d      	ldr	r5, [r3, #0]
 8016956:	b09d      	sub	sp, #116	@ 0x74
 8016958:	da08      	bge.n	801696c <sniprintf+0x20>
 801695a:	238b      	movs	r3, #139	@ 0x8b
 801695c:	602b      	str	r3, [r5, #0]
 801695e:	f04f 30ff 	mov.w	r0, #4294967295
 8016962:	b01d      	add	sp, #116	@ 0x74
 8016964:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016968:	b002      	add	sp, #8
 801696a:	4770      	bx	lr
 801696c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016970:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016974:	bf14      	ite	ne
 8016976:	f104 33ff 	addne.w	r3, r4, #4294967295
 801697a:	4623      	moveq	r3, r4
 801697c:	9304      	str	r3, [sp, #16]
 801697e:	9307      	str	r3, [sp, #28]
 8016980:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016984:	9002      	str	r0, [sp, #8]
 8016986:	9006      	str	r0, [sp, #24]
 8016988:	f8ad 3016 	strh.w	r3, [sp, #22]
 801698c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801698e:	ab21      	add	r3, sp, #132	@ 0x84
 8016990:	a902      	add	r1, sp, #8
 8016992:	4628      	mov	r0, r5
 8016994:	9301      	str	r3, [sp, #4]
 8016996:	f000 faa1 	bl	8016edc <_svfiprintf_r>
 801699a:	1c43      	adds	r3, r0, #1
 801699c:	bfbc      	itt	lt
 801699e:	238b      	movlt	r3, #139	@ 0x8b
 80169a0:	602b      	strlt	r3, [r5, #0]
 80169a2:	2c00      	cmp	r4, #0
 80169a4:	d0dd      	beq.n	8016962 <sniprintf+0x16>
 80169a6:	9b02      	ldr	r3, [sp, #8]
 80169a8:	2200      	movs	r2, #0
 80169aa:	701a      	strb	r2, [r3, #0]
 80169ac:	e7d9      	b.n	8016962 <sniprintf+0x16>
 80169ae:	bf00      	nop
 80169b0:	20000074 	.word	0x20000074

080169b4 <__sread>:
 80169b4:	b510      	push	{r4, lr}
 80169b6:	460c      	mov	r4, r1
 80169b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169bc:	f000 f970 	bl	8016ca0 <_read_r>
 80169c0:	2800      	cmp	r0, #0
 80169c2:	bfab      	itete	ge
 80169c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80169c6:	89a3      	ldrhlt	r3, [r4, #12]
 80169c8:	181b      	addge	r3, r3, r0
 80169ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80169ce:	bfac      	ite	ge
 80169d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80169d2:	81a3      	strhlt	r3, [r4, #12]
 80169d4:	bd10      	pop	{r4, pc}

080169d6 <__swrite>:
 80169d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169da:	461f      	mov	r7, r3
 80169dc:	898b      	ldrh	r3, [r1, #12]
 80169de:	05db      	lsls	r3, r3, #23
 80169e0:	4605      	mov	r5, r0
 80169e2:	460c      	mov	r4, r1
 80169e4:	4616      	mov	r6, r2
 80169e6:	d505      	bpl.n	80169f4 <__swrite+0x1e>
 80169e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169ec:	2302      	movs	r3, #2
 80169ee:	2200      	movs	r2, #0
 80169f0:	f000 f944 	bl	8016c7c <_lseek_r>
 80169f4:	89a3      	ldrh	r3, [r4, #12]
 80169f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80169fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80169fe:	81a3      	strh	r3, [r4, #12]
 8016a00:	4632      	mov	r2, r6
 8016a02:	463b      	mov	r3, r7
 8016a04:	4628      	mov	r0, r5
 8016a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a0a:	f000 b96b 	b.w	8016ce4 <_write_r>

08016a0e <__sseek>:
 8016a0e:	b510      	push	{r4, lr}
 8016a10:	460c      	mov	r4, r1
 8016a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a16:	f000 f931 	bl	8016c7c <_lseek_r>
 8016a1a:	1c43      	adds	r3, r0, #1
 8016a1c:	89a3      	ldrh	r3, [r4, #12]
 8016a1e:	bf15      	itete	ne
 8016a20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016a22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016a26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016a2a:	81a3      	strheq	r3, [r4, #12]
 8016a2c:	bf18      	it	ne
 8016a2e:	81a3      	strhne	r3, [r4, #12]
 8016a30:	bd10      	pop	{r4, pc}

08016a32 <__sclose>:
 8016a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a36:	f000 b911 	b.w	8016c5c <_close_r>

08016a3a <__swbuf_r>:
 8016a3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a3c:	460e      	mov	r6, r1
 8016a3e:	4614      	mov	r4, r2
 8016a40:	4605      	mov	r5, r0
 8016a42:	b118      	cbz	r0, 8016a4c <__swbuf_r+0x12>
 8016a44:	6a03      	ldr	r3, [r0, #32]
 8016a46:	b90b      	cbnz	r3, 8016a4c <__swbuf_r+0x12>
 8016a48:	f7ff feda 	bl	8016800 <__sinit>
 8016a4c:	69a3      	ldr	r3, [r4, #24]
 8016a4e:	60a3      	str	r3, [r4, #8]
 8016a50:	89a3      	ldrh	r3, [r4, #12]
 8016a52:	071a      	lsls	r2, r3, #28
 8016a54:	d501      	bpl.n	8016a5a <__swbuf_r+0x20>
 8016a56:	6923      	ldr	r3, [r4, #16]
 8016a58:	b943      	cbnz	r3, 8016a6c <__swbuf_r+0x32>
 8016a5a:	4621      	mov	r1, r4
 8016a5c:	4628      	mov	r0, r5
 8016a5e:	f000 f82b 	bl	8016ab8 <__swsetup_r>
 8016a62:	b118      	cbz	r0, 8016a6c <__swbuf_r+0x32>
 8016a64:	f04f 37ff 	mov.w	r7, #4294967295
 8016a68:	4638      	mov	r0, r7
 8016a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a6c:	6823      	ldr	r3, [r4, #0]
 8016a6e:	6922      	ldr	r2, [r4, #16]
 8016a70:	1a98      	subs	r0, r3, r2
 8016a72:	6963      	ldr	r3, [r4, #20]
 8016a74:	b2f6      	uxtb	r6, r6
 8016a76:	4283      	cmp	r3, r0
 8016a78:	4637      	mov	r7, r6
 8016a7a:	dc05      	bgt.n	8016a88 <__swbuf_r+0x4e>
 8016a7c:	4621      	mov	r1, r4
 8016a7e:	4628      	mov	r0, r5
 8016a80:	f000 fe7c 	bl	801777c <_fflush_r>
 8016a84:	2800      	cmp	r0, #0
 8016a86:	d1ed      	bne.n	8016a64 <__swbuf_r+0x2a>
 8016a88:	68a3      	ldr	r3, [r4, #8]
 8016a8a:	3b01      	subs	r3, #1
 8016a8c:	60a3      	str	r3, [r4, #8]
 8016a8e:	6823      	ldr	r3, [r4, #0]
 8016a90:	1c5a      	adds	r2, r3, #1
 8016a92:	6022      	str	r2, [r4, #0]
 8016a94:	701e      	strb	r6, [r3, #0]
 8016a96:	6962      	ldr	r2, [r4, #20]
 8016a98:	1c43      	adds	r3, r0, #1
 8016a9a:	429a      	cmp	r2, r3
 8016a9c:	d004      	beq.n	8016aa8 <__swbuf_r+0x6e>
 8016a9e:	89a3      	ldrh	r3, [r4, #12]
 8016aa0:	07db      	lsls	r3, r3, #31
 8016aa2:	d5e1      	bpl.n	8016a68 <__swbuf_r+0x2e>
 8016aa4:	2e0a      	cmp	r6, #10
 8016aa6:	d1df      	bne.n	8016a68 <__swbuf_r+0x2e>
 8016aa8:	4621      	mov	r1, r4
 8016aaa:	4628      	mov	r0, r5
 8016aac:	f000 fe66 	bl	801777c <_fflush_r>
 8016ab0:	2800      	cmp	r0, #0
 8016ab2:	d0d9      	beq.n	8016a68 <__swbuf_r+0x2e>
 8016ab4:	e7d6      	b.n	8016a64 <__swbuf_r+0x2a>
	...

08016ab8 <__swsetup_r>:
 8016ab8:	b538      	push	{r3, r4, r5, lr}
 8016aba:	4b29      	ldr	r3, [pc, #164]	@ (8016b60 <__swsetup_r+0xa8>)
 8016abc:	4605      	mov	r5, r0
 8016abe:	6818      	ldr	r0, [r3, #0]
 8016ac0:	460c      	mov	r4, r1
 8016ac2:	b118      	cbz	r0, 8016acc <__swsetup_r+0x14>
 8016ac4:	6a03      	ldr	r3, [r0, #32]
 8016ac6:	b90b      	cbnz	r3, 8016acc <__swsetup_r+0x14>
 8016ac8:	f7ff fe9a 	bl	8016800 <__sinit>
 8016acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ad0:	0719      	lsls	r1, r3, #28
 8016ad2:	d422      	bmi.n	8016b1a <__swsetup_r+0x62>
 8016ad4:	06da      	lsls	r2, r3, #27
 8016ad6:	d407      	bmi.n	8016ae8 <__swsetup_r+0x30>
 8016ad8:	2209      	movs	r2, #9
 8016ada:	602a      	str	r2, [r5, #0]
 8016adc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016ae0:	81a3      	strh	r3, [r4, #12]
 8016ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8016ae6:	e033      	b.n	8016b50 <__swsetup_r+0x98>
 8016ae8:	0758      	lsls	r0, r3, #29
 8016aea:	d512      	bpl.n	8016b12 <__swsetup_r+0x5a>
 8016aec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016aee:	b141      	cbz	r1, 8016b02 <__swsetup_r+0x4a>
 8016af0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016af4:	4299      	cmp	r1, r3
 8016af6:	d002      	beq.n	8016afe <__swsetup_r+0x46>
 8016af8:	4628      	mov	r0, r5
 8016afa:	f000 f949 	bl	8016d90 <_free_r>
 8016afe:	2300      	movs	r3, #0
 8016b00:	6363      	str	r3, [r4, #52]	@ 0x34
 8016b02:	89a3      	ldrh	r3, [r4, #12]
 8016b04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016b08:	81a3      	strh	r3, [r4, #12]
 8016b0a:	2300      	movs	r3, #0
 8016b0c:	6063      	str	r3, [r4, #4]
 8016b0e:	6923      	ldr	r3, [r4, #16]
 8016b10:	6023      	str	r3, [r4, #0]
 8016b12:	89a3      	ldrh	r3, [r4, #12]
 8016b14:	f043 0308 	orr.w	r3, r3, #8
 8016b18:	81a3      	strh	r3, [r4, #12]
 8016b1a:	6923      	ldr	r3, [r4, #16]
 8016b1c:	b94b      	cbnz	r3, 8016b32 <__swsetup_r+0x7a>
 8016b1e:	89a3      	ldrh	r3, [r4, #12]
 8016b20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016b24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016b28:	d003      	beq.n	8016b32 <__swsetup_r+0x7a>
 8016b2a:	4621      	mov	r1, r4
 8016b2c:	4628      	mov	r0, r5
 8016b2e:	f000 fe73 	bl	8017818 <__smakebuf_r>
 8016b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b36:	f013 0201 	ands.w	r2, r3, #1
 8016b3a:	d00a      	beq.n	8016b52 <__swsetup_r+0x9a>
 8016b3c:	2200      	movs	r2, #0
 8016b3e:	60a2      	str	r2, [r4, #8]
 8016b40:	6962      	ldr	r2, [r4, #20]
 8016b42:	4252      	negs	r2, r2
 8016b44:	61a2      	str	r2, [r4, #24]
 8016b46:	6922      	ldr	r2, [r4, #16]
 8016b48:	b942      	cbnz	r2, 8016b5c <__swsetup_r+0xa4>
 8016b4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016b4e:	d1c5      	bne.n	8016adc <__swsetup_r+0x24>
 8016b50:	bd38      	pop	{r3, r4, r5, pc}
 8016b52:	0799      	lsls	r1, r3, #30
 8016b54:	bf58      	it	pl
 8016b56:	6962      	ldrpl	r2, [r4, #20]
 8016b58:	60a2      	str	r2, [r4, #8]
 8016b5a:	e7f4      	b.n	8016b46 <__swsetup_r+0x8e>
 8016b5c:	2000      	movs	r0, #0
 8016b5e:	e7f7      	b.n	8016b50 <__swsetup_r+0x98>
 8016b60:	20000074 	.word	0x20000074

08016b64 <memcmp>:
 8016b64:	b510      	push	{r4, lr}
 8016b66:	3901      	subs	r1, #1
 8016b68:	4402      	add	r2, r0
 8016b6a:	4290      	cmp	r0, r2
 8016b6c:	d101      	bne.n	8016b72 <memcmp+0xe>
 8016b6e:	2000      	movs	r0, #0
 8016b70:	e005      	b.n	8016b7e <memcmp+0x1a>
 8016b72:	7803      	ldrb	r3, [r0, #0]
 8016b74:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016b78:	42a3      	cmp	r3, r4
 8016b7a:	d001      	beq.n	8016b80 <memcmp+0x1c>
 8016b7c:	1b18      	subs	r0, r3, r4
 8016b7e:	bd10      	pop	{r4, pc}
 8016b80:	3001      	adds	r0, #1
 8016b82:	e7f2      	b.n	8016b6a <memcmp+0x6>

08016b84 <memmove>:
 8016b84:	4288      	cmp	r0, r1
 8016b86:	b510      	push	{r4, lr}
 8016b88:	eb01 0402 	add.w	r4, r1, r2
 8016b8c:	d902      	bls.n	8016b94 <memmove+0x10>
 8016b8e:	4284      	cmp	r4, r0
 8016b90:	4623      	mov	r3, r4
 8016b92:	d807      	bhi.n	8016ba4 <memmove+0x20>
 8016b94:	1e43      	subs	r3, r0, #1
 8016b96:	42a1      	cmp	r1, r4
 8016b98:	d008      	beq.n	8016bac <memmove+0x28>
 8016b9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016b9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016ba2:	e7f8      	b.n	8016b96 <memmove+0x12>
 8016ba4:	4402      	add	r2, r0
 8016ba6:	4601      	mov	r1, r0
 8016ba8:	428a      	cmp	r2, r1
 8016baa:	d100      	bne.n	8016bae <memmove+0x2a>
 8016bac:	bd10      	pop	{r4, pc}
 8016bae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016bb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016bb6:	e7f7      	b.n	8016ba8 <memmove+0x24>

08016bb8 <memset>:
 8016bb8:	4402      	add	r2, r0
 8016bba:	4603      	mov	r3, r0
 8016bbc:	4293      	cmp	r3, r2
 8016bbe:	d100      	bne.n	8016bc2 <memset+0xa>
 8016bc0:	4770      	bx	lr
 8016bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8016bc6:	e7f9      	b.n	8016bbc <memset+0x4>

08016bc8 <strcat>:
 8016bc8:	b510      	push	{r4, lr}
 8016bca:	4602      	mov	r2, r0
 8016bcc:	7814      	ldrb	r4, [r2, #0]
 8016bce:	4613      	mov	r3, r2
 8016bd0:	3201      	adds	r2, #1
 8016bd2:	2c00      	cmp	r4, #0
 8016bd4:	d1fa      	bne.n	8016bcc <strcat+0x4>
 8016bd6:	3b01      	subs	r3, #1
 8016bd8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016bdc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016be0:	2a00      	cmp	r2, #0
 8016be2:	d1f9      	bne.n	8016bd8 <strcat+0x10>
 8016be4:	bd10      	pop	{r4, pc}

08016be6 <strncmp>:
 8016be6:	b510      	push	{r4, lr}
 8016be8:	b16a      	cbz	r2, 8016c06 <strncmp+0x20>
 8016bea:	3901      	subs	r1, #1
 8016bec:	1884      	adds	r4, r0, r2
 8016bee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016bf2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016bf6:	429a      	cmp	r2, r3
 8016bf8:	d103      	bne.n	8016c02 <strncmp+0x1c>
 8016bfa:	42a0      	cmp	r0, r4
 8016bfc:	d001      	beq.n	8016c02 <strncmp+0x1c>
 8016bfe:	2a00      	cmp	r2, #0
 8016c00:	d1f5      	bne.n	8016bee <strncmp+0x8>
 8016c02:	1ad0      	subs	r0, r2, r3
 8016c04:	bd10      	pop	{r4, pc}
 8016c06:	4610      	mov	r0, r2
 8016c08:	e7fc      	b.n	8016c04 <strncmp+0x1e>

08016c0a <strncpy>:
 8016c0a:	b510      	push	{r4, lr}
 8016c0c:	3901      	subs	r1, #1
 8016c0e:	4603      	mov	r3, r0
 8016c10:	b132      	cbz	r2, 8016c20 <strncpy+0x16>
 8016c12:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016c16:	f803 4b01 	strb.w	r4, [r3], #1
 8016c1a:	3a01      	subs	r2, #1
 8016c1c:	2c00      	cmp	r4, #0
 8016c1e:	d1f7      	bne.n	8016c10 <strncpy+0x6>
 8016c20:	441a      	add	r2, r3
 8016c22:	2100      	movs	r1, #0
 8016c24:	4293      	cmp	r3, r2
 8016c26:	d100      	bne.n	8016c2a <strncpy+0x20>
 8016c28:	bd10      	pop	{r4, pc}
 8016c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8016c2e:	e7f9      	b.n	8016c24 <strncpy+0x1a>

08016c30 <strstr>:
 8016c30:	780a      	ldrb	r2, [r1, #0]
 8016c32:	b570      	push	{r4, r5, r6, lr}
 8016c34:	b96a      	cbnz	r2, 8016c52 <strstr+0x22>
 8016c36:	bd70      	pop	{r4, r5, r6, pc}
 8016c38:	429a      	cmp	r2, r3
 8016c3a:	d109      	bne.n	8016c50 <strstr+0x20>
 8016c3c:	460c      	mov	r4, r1
 8016c3e:	4605      	mov	r5, r0
 8016c40:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d0f6      	beq.n	8016c36 <strstr+0x6>
 8016c48:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8016c4c:	429e      	cmp	r6, r3
 8016c4e:	d0f7      	beq.n	8016c40 <strstr+0x10>
 8016c50:	3001      	adds	r0, #1
 8016c52:	7803      	ldrb	r3, [r0, #0]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d1ef      	bne.n	8016c38 <strstr+0x8>
 8016c58:	4618      	mov	r0, r3
 8016c5a:	e7ec      	b.n	8016c36 <strstr+0x6>

08016c5c <_close_r>:
 8016c5c:	b538      	push	{r3, r4, r5, lr}
 8016c5e:	4d06      	ldr	r5, [pc, #24]	@ (8016c78 <_close_r+0x1c>)
 8016c60:	2300      	movs	r3, #0
 8016c62:	4604      	mov	r4, r0
 8016c64:	4608      	mov	r0, r1
 8016c66:	602b      	str	r3, [r5, #0]
 8016c68:	f7ea fd51 	bl	800170e <_close>
 8016c6c:	1c43      	adds	r3, r0, #1
 8016c6e:	d102      	bne.n	8016c76 <_close_r+0x1a>
 8016c70:	682b      	ldr	r3, [r5, #0]
 8016c72:	b103      	cbz	r3, 8016c76 <_close_r+0x1a>
 8016c74:	6023      	str	r3, [r4, #0]
 8016c76:	bd38      	pop	{r3, r4, r5, pc}
 8016c78:	20001310 	.word	0x20001310

08016c7c <_lseek_r>:
 8016c7c:	b538      	push	{r3, r4, r5, lr}
 8016c7e:	4d07      	ldr	r5, [pc, #28]	@ (8016c9c <_lseek_r+0x20>)
 8016c80:	4604      	mov	r4, r0
 8016c82:	4608      	mov	r0, r1
 8016c84:	4611      	mov	r1, r2
 8016c86:	2200      	movs	r2, #0
 8016c88:	602a      	str	r2, [r5, #0]
 8016c8a:	461a      	mov	r2, r3
 8016c8c:	f7ea fd66 	bl	800175c <_lseek>
 8016c90:	1c43      	adds	r3, r0, #1
 8016c92:	d102      	bne.n	8016c9a <_lseek_r+0x1e>
 8016c94:	682b      	ldr	r3, [r5, #0]
 8016c96:	b103      	cbz	r3, 8016c9a <_lseek_r+0x1e>
 8016c98:	6023      	str	r3, [r4, #0]
 8016c9a:	bd38      	pop	{r3, r4, r5, pc}
 8016c9c:	20001310 	.word	0x20001310

08016ca0 <_read_r>:
 8016ca0:	b538      	push	{r3, r4, r5, lr}
 8016ca2:	4d07      	ldr	r5, [pc, #28]	@ (8016cc0 <_read_r+0x20>)
 8016ca4:	4604      	mov	r4, r0
 8016ca6:	4608      	mov	r0, r1
 8016ca8:	4611      	mov	r1, r2
 8016caa:	2200      	movs	r2, #0
 8016cac:	602a      	str	r2, [r5, #0]
 8016cae:	461a      	mov	r2, r3
 8016cb0:	f7ea fcf4 	bl	800169c <_read>
 8016cb4:	1c43      	adds	r3, r0, #1
 8016cb6:	d102      	bne.n	8016cbe <_read_r+0x1e>
 8016cb8:	682b      	ldr	r3, [r5, #0]
 8016cba:	b103      	cbz	r3, 8016cbe <_read_r+0x1e>
 8016cbc:	6023      	str	r3, [r4, #0]
 8016cbe:	bd38      	pop	{r3, r4, r5, pc}
 8016cc0:	20001310 	.word	0x20001310

08016cc4 <_sbrk_r>:
 8016cc4:	b538      	push	{r3, r4, r5, lr}
 8016cc6:	4d06      	ldr	r5, [pc, #24]	@ (8016ce0 <_sbrk_r+0x1c>)
 8016cc8:	2300      	movs	r3, #0
 8016cca:	4604      	mov	r4, r0
 8016ccc:	4608      	mov	r0, r1
 8016cce:	602b      	str	r3, [r5, #0]
 8016cd0:	f7ea fd52 	bl	8001778 <_sbrk>
 8016cd4:	1c43      	adds	r3, r0, #1
 8016cd6:	d102      	bne.n	8016cde <_sbrk_r+0x1a>
 8016cd8:	682b      	ldr	r3, [r5, #0]
 8016cda:	b103      	cbz	r3, 8016cde <_sbrk_r+0x1a>
 8016cdc:	6023      	str	r3, [r4, #0]
 8016cde:	bd38      	pop	{r3, r4, r5, pc}
 8016ce0:	20001310 	.word	0x20001310

08016ce4 <_write_r>:
 8016ce4:	b538      	push	{r3, r4, r5, lr}
 8016ce6:	4d07      	ldr	r5, [pc, #28]	@ (8016d04 <_write_r+0x20>)
 8016ce8:	4604      	mov	r4, r0
 8016cea:	4608      	mov	r0, r1
 8016cec:	4611      	mov	r1, r2
 8016cee:	2200      	movs	r2, #0
 8016cf0:	602a      	str	r2, [r5, #0]
 8016cf2:	461a      	mov	r2, r3
 8016cf4:	f7ea fcef 	bl	80016d6 <_write>
 8016cf8:	1c43      	adds	r3, r0, #1
 8016cfa:	d102      	bne.n	8016d02 <_write_r+0x1e>
 8016cfc:	682b      	ldr	r3, [r5, #0]
 8016cfe:	b103      	cbz	r3, 8016d02 <_write_r+0x1e>
 8016d00:	6023      	str	r3, [r4, #0]
 8016d02:	bd38      	pop	{r3, r4, r5, pc}
 8016d04:	20001310 	.word	0x20001310

08016d08 <__errno>:
 8016d08:	4b01      	ldr	r3, [pc, #4]	@ (8016d10 <__errno+0x8>)
 8016d0a:	6818      	ldr	r0, [r3, #0]
 8016d0c:	4770      	bx	lr
 8016d0e:	bf00      	nop
 8016d10:	20000074 	.word	0x20000074

08016d14 <__libc_init_array>:
 8016d14:	b570      	push	{r4, r5, r6, lr}
 8016d16:	4d0d      	ldr	r5, [pc, #52]	@ (8016d4c <__libc_init_array+0x38>)
 8016d18:	4c0d      	ldr	r4, [pc, #52]	@ (8016d50 <__libc_init_array+0x3c>)
 8016d1a:	1b64      	subs	r4, r4, r5
 8016d1c:	10a4      	asrs	r4, r4, #2
 8016d1e:	2600      	movs	r6, #0
 8016d20:	42a6      	cmp	r6, r4
 8016d22:	d109      	bne.n	8016d38 <__libc_init_array+0x24>
 8016d24:	4d0b      	ldr	r5, [pc, #44]	@ (8016d54 <__libc_init_array+0x40>)
 8016d26:	4c0c      	ldr	r4, [pc, #48]	@ (8016d58 <__libc_init_array+0x44>)
 8016d28:	f000 fe0a 	bl	8017940 <_init>
 8016d2c:	1b64      	subs	r4, r4, r5
 8016d2e:	10a4      	asrs	r4, r4, #2
 8016d30:	2600      	movs	r6, #0
 8016d32:	42a6      	cmp	r6, r4
 8016d34:	d105      	bne.n	8016d42 <__libc_init_array+0x2e>
 8016d36:	bd70      	pop	{r4, r5, r6, pc}
 8016d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d3c:	4798      	blx	r3
 8016d3e:	3601      	adds	r6, #1
 8016d40:	e7ee      	b.n	8016d20 <__libc_init_array+0xc>
 8016d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d46:	4798      	blx	r3
 8016d48:	3601      	adds	r6, #1
 8016d4a:	e7f2      	b.n	8016d32 <__libc_init_array+0x1e>
 8016d4c:	0801b844 	.word	0x0801b844
 8016d50:	0801b844 	.word	0x0801b844
 8016d54:	0801b844 	.word	0x0801b844
 8016d58:	0801b848 	.word	0x0801b848

08016d5c <__retarget_lock_init_recursive>:
 8016d5c:	4770      	bx	lr

08016d5e <__retarget_lock_acquire_recursive>:
 8016d5e:	4770      	bx	lr

08016d60 <__retarget_lock_release_recursive>:
 8016d60:	4770      	bx	lr

08016d62 <strcpy>:
 8016d62:	4603      	mov	r3, r0
 8016d64:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016d68:	f803 2b01 	strb.w	r2, [r3], #1
 8016d6c:	2a00      	cmp	r2, #0
 8016d6e:	d1f9      	bne.n	8016d64 <strcpy+0x2>
 8016d70:	4770      	bx	lr

08016d72 <memcpy>:
 8016d72:	440a      	add	r2, r1
 8016d74:	4291      	cmp	r1, r2
 8016d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8016d7a:	d100      	bne.n	8016d7e <memcpy+0xc>
 8016d7c:	4770      	bx	lr
 8016d7e:	b510      	push	{r4, lr}
 8016d80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016d84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016d88:	4291      	cmp	r1, r2
 8016d8a:	d1f9      	bne.n	8016d80 <memcpy+0xe>
 8016d8c:	bd10      	pop	{r4, pc}
	...

08016d90 <_free_r>:
 8016d90:	b538      	push	{r3, r4, r5, lr}
 8016d92:	4605      	mov	r5, r0
 8016d94:	2900      	cmp	r1, #0
 8016d96:	d041      	beq.n	8016e1c <_free_r+0x8c>
 8016d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016d9c:	1f0c      	subs	r4, r1, #4
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	bfb8      	it	lt
 8016da2:	18e4      	addlt	r4, r4, r3
 8016da4:	f7ff fc94 	bl	80166d0 <__malloc_lock>
 8016da8:	4a1d      	ldr	r2, [pc, #116]	@ (8016e20 <_free_r+0x90>)
 8016daa:	6813      	ldr	r3, [r2, #0]
 8016dac:	b933      	cbnz	r3, 8016dbc <_free_r+0x2c>
 8016dae:	6063      	str	r3, [r4, #4]
 8016db0:	6014      	str	r4, [r2, #0]
 8016db2:	4628      	mov	r0, r5
 8016db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016db8:	f7ff bc90 	b.w	80166dc <__malloc_unlock>
 8016dbc:	42a3      	cmp	r3, r4
 8016dbe:	d908      	bls.n	8016dd2 <_free_r+0x42>
 8016dc0:	6820      	ldr	r0, [r4, #0]
 8016dc2:	1821      	adds	r1, r4, r0
 8016dc4:	428b      	cmp	r3, r1
 8016dc6:	bf01      	itttt	eq
 8016dc8:	6819      	ldreq	r1, [r3, #0]
 8016dca:	685b      	ldreq	r3, [r3, #4]
 8016dcc:	1809      	addeq	r1, r1, r0
 8016dce:	6021      	streq	r1, [r4, #0]
 8016dd0:	e7ed      	b.n	8016dae <_free_r+0x1e>
 8016dd2:	461a      	mov	r2, r3
 8016dd4:	685b      	ldr	r3, [r3, #4]
 8016dd6:	b10b      	cbz	r3, 8016ddc <_free_r+0x4c>
 8016dd8:	42a3      	cmp	r3, r4
 8016dda:	d9fa      	bls.n	8016dd2 <_free_r+0x42>
 8016ddc:	6811      	ldr	r1, [r2, #0]
 8016dde:	1850      	adds	r0, r2, r1
 8016de0:	42a0      	cmp	r0, r4
 8016de2:	d10b      	bne.n	8016dfc <_free_r+0x6c>
 8016de4:	6820      	ldr	r0, [r4, #0]
 8016de6:	4401      	add	r1, r0
 8016de8:	1850      	adds	r0, r2, r1
 8016dea:	4283      	cmp	r3, r0
 8016dec:	6011      	str	r1, [r2, #0]
 8016dee:	d1e0      	bne.n	8016db2 <_free_r+0x22>
 8016df0:	6818      	ldr	r0, [r3, #0]
 8016df2:	685b      	ldr	r3, [r3, #4]
 8016df4:	6053      	str	r3, [r2, #4]
 8016df6:	4408      	add	r0, r1
 8016df8:	6010      	str	r0, [r2, #0]
 8016dfa:	e7da      	b.n	8016db2 <_free_r+0x22>
 8016dfc:	d902      	bls.n	8016e04 <_free_r+0x74>
 8016dfe:	230c      	movs	r3, #12
 8016e00:	602b      	str	r3, [r5, #0]
 8016e02:	e7d6      	b.n	8016db2 <_free_r+0x22>
 8016e04:	6820      	ldr	r0, [r4, #0]
 8016e06:	1821      	adds	r1, r4, r0
 8016e08:	428b      	cmp	r3, r1
 8016e0a:	bf04      	itt	eq
 8016e0c:	6819      	ldreq	r1, [r3, #0]
 8016e0e:	685b      	ldreq	r3, [r3, #4]
 8016e10:	6063      	str	r3, [r4, #4]
 8016e12:	bf04      	itt	eq
 8016e14:	1809      	addeq	r1, r1, r0
 8016e16:	6021      	streq	r1, [r4, #0]
 8016e18:	6054      	str	r4, [r2, #4]
 8016e1a:	e7ca      	b.n	8016db2 <_free_r+0x22>
 8016e1c:	bd38      	pop	{r3, r4, r5, pc}
 8016e1e:	bf00      	nop
 8016e20:	200011d0 	.word	0x200011d0

08016e24 <__ssputs_r>:
 8016e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e28:	688e      	ldr	r6, [r1, #8]
 8016e2a:	461f      	mov	r7, r3
 8016e2c:	42be      	cmp	r6, r7
 8016e2e:	680b      	ldr	r3, [r1, #0]
 8016e30:	4682      	mov	sl, r0
 8016e32:	460c      	mov	r4, r1
 8016e34:	4690      	mov	r8, r2
 8016e36:	d82d      	bhi.n	8016e94 <__ssputs_r+0x70>
 8016e38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016e3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016e40:	d026      	beq.n	8016e90 <__ssputs_r+0x6c>
 8016e42:	6965      	ldr	r5, [r4, #20]
 8016e44:	6909      	ldr	r1, [r1, #16]
 8016e46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016e4a:	eba3 0901 	sub.w	r9, r3, r1
 8016e4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016e52:	1c7b      	adds	r3, r7, #1
 8016e54:	444b      	add	r3, r9
 8016e56:	106d      	asrs	r5, r5, #1
 8016e58:	429d      	cmp	r5, r3
 8016e5a:	bf38      	it	cc
 8016e5c:	461d      	movcc	r5, r3
 8016e5e:	0553      	lsls	r3, r2, #21
 8016e60:	d527      	bpl.n	8016eb2 <__ssputs_r+0x8e>
 8016e62:	4629      	mov	r1, r5
 8016e64:	f7ff fbb4 	bl	80165d0 <_malloc_r>
 8016e68:	4606      	mov	r6, r0
 8016e6a:	b360      	cbz	r0, 8016ec6 <__ssputs_r+0xa2>
 8016e6c:	6921      	ldr	r1, [r4, #16]
 8016e6e:	464a      	mov	r2, r9
 8016e70:	f7ff ff7f 	bl	8016d72 <memcpy>
 8016e74:	89a3      	ldrh	r3, [r4, #12]
 8016e76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016e7e:	81a3      	strh	r3, [r4, #12]
 8016e80:	6126      	str	r6, [r4, #16]
 8016e82:	6165      	str	r5, [r4, #20]
 8016e84:	444e      	add	r6, r9
 8016e86:	eba5 0509 	sub.w	r5, r5, r9
 8016e8a:	6026      	str	r6, [r4, #0]
 8016e8c:	60a5      	str	r5, [r4, #8]
 8016e8e:	463e      	mov	r6, r7
 8016e90:	42be      	cmp	r6, r7
 8016e92:	d900      	bls.n	8016e96 <__ssputs_r+0x72>
 8016e94:	463e      	mov	r6, r7
 8016e96:	6820      	ldr	r0, [r4, #0]
 8016e98:	4632      	mov	r2, r6
 8016e9a:	4641      	mov	r1, r8
 8016e9c:	f7ff fe72 	bl	8016b84 <memmove>
 8016ea0:	68a3      	ldr	r3, [r4, #8]
 8016ea2:	1b9b      	subs	r3, r3, r6
 8016ea4:	60a3      	str	r3, [r4, #8]
 8016ea6:	6823      	ldr	r3, [r4, #0]
 8016ea8:	4433      	add	r3, r6
 8016eaa:	6023      	str	r3, [r4, #0]
 8016eac:	2000      	movs	r0, #0
 8016eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016eb2:	462a      	mov	r2, r5
 8016eb4:	f000 fd0e 	bl	80178d4 <_realloc_r>
 8016eb8:	4606      	mov	r6, r0
 8016eba:	2800      	cmp	r0, #0
 8016ebc:	d1e0      	bne.n	8016e80 <__ssputs_r+0x5c>
 8016ebe:	6921      	ldr	r1, [r4, #16]
 8016ec0:	4650      	mov	r0, sl
 8016ec2:	f7ff ff65 	bl	8016d90 <_free_r>
 8016ec6:	230c      	movs	r3, #12
 8016ec8:	f8ca 3000 	str.w	r3, [sl]
 8016ecc:	89a3      	ldrh	r3, [r4, #12]
 8016ece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016ed2:	81a3      	strh	r3, [r4, #12]
 8016ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8016ed8:	e7e9      	b.n	8016eae <__ssputs_r+0x8a>
	...

08016edc <_svfiprintf_r>:
 8016edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ee0:	4698      	mov	r8, r3
 8016ee2:	898b      	ldrh	r3, [r1, #12]
 8016ee4:	061b      	lsls	r3, r3, #24
 8016ee6:	b09d      	sub	sp, #116	@ 0x74
 8016ee8:	4607      	mov	r7, r0
 8016eea:	460d      	mov	r5, r1
 8016eec:	4614      	mov	r4, r2
 8016eee:	d510      	bpl.n	8016f12 <_svfiprintf_r+0x36>
 8016ef0:	690b      	ldr	r3, [r1, #16]
 8016ef2:	b973      	cbnz	r3, 8016f12 <_svfiprintf_r+0x36>
 8016ef4:	2140      	movs	r1, #64	@ 0x40
 8016ef6:	f7ff fb6b 	bl	80165d0 <_malloc_r>
 8016efa:	6028      	str	r0, [r5, #0]
 8016efc:	6128      	str	r0, [r5, #16]
 8016efe:	b930      	cbnz	r0, 8016f0e <_svfiprintf_r+0x32>
 8016f00:	230c      	movs	r3, #12
 8016f02:	603b      	str	r3, [r7, #0]
 8016f04:	f04f 30ff 	mov.w	r0, #4294967295
 8016f08:	b01d      	add	sp, #116	@ 0x74
 8016f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f0e:	2340      	movs	r3, #64	@ 0x40
 8016f10:	616b      	str	r3, [r5, #20]
 8016f12:	2300      	movs	r3, #0
 8016f14:	9309      	str	r3, [sp, #36]	@ 0x24
 8016f16:	2320      	movs	r3, #32
 8016f18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016f1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8016f20:	2330      	movs	r3, #48	@ 0x30
 8016f22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80170c0 <_svfiprintf_r+0x1e4>
 8016f26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016f2a:	f04f 0901 	mov.w	r9, #1
 8016f2e:	4623      	mov	r3, r4
 8016f30:	469a      	mov	sl, r3
 8016f32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016f36:	b10a      	cbz	r2, 8016f3c <_svfiprintf_r+0x60>
 8016f38:	2a25      	cmp	r2, #37	@ 0x25
 8016f3a:	d1f9      	bne.n	8016f30 <_svfiprintf_r+0x54>
 8016f3c:	ebba 0b04 	subs.w	fp, sl, r4
 8016f40:	d00b      	beq.n	8016f5a <_svfiprintf_r+0x7e>
 8016f42:	465b      	mov	r3, fp
 8016f44:	4622      	mov	r2, r4
 8016f46:	4629      	mov	r1, r5
 8016f48:	4638      	mov	r0, r7
 8016f4a:	f7ff ff6b 	bl	8016e24 <__ssputs_r>
 8016f4e:	3001      	adds	r0, #1
 8016f50:	f000 80a7 	beq.w	80170a2 <_svfiprintf_r+0x1c6>
 8016f54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016f56:	445a      	add	r2, fp
 8016f58:	9209      	str	r2, [sp, #36]	@ 0x24
 8016f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	f000 809f 	beq.w	80170a2 <_svfiprintf_r+0x1c6>
 8016f64:	2300      	movs	r3, #0
 8016f66:	f04f 32ff 	mov.w	r2, #4294967295
 8016f6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016f6e:	f10a 0a01 	add.w	sl, sl, #1
 8016f72:	9304      	str	r3, [sp, #16]
 8016f74:	9307      	str	r3, [sp, #28]
 8016f76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016f7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8016f7c:	4654      	mov	r4, sl
 8016f7e:	2205      	movs	r2, #5
 8016f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f84:	484e      	ldr	r0, [pc, #312]	@ (80170c0 <_svfiprintf_r+0x1e4>)
 8016f86:	f7e9 f92b 	bl	80001e0 <memchr>
 8016f8a:	9a04      	ldr	r2, [sp, #16]
 8016f8c:	b9d8      	cbnz	r0, 8016fc6 <_svfiprintf_r+0xea>
 8016f8e:	06d0      	lsls	r0, r2, #27
 8016f90:	bf44      	itt	mi
 8016f92:	2320      	movmi	r3, #32
 8016f94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016f98:	0711      	lsls	r1, r2, #28
 8016f9a:	bf44      	itt	mi
 8016f9c:	232b      	movmi	r3, #43	@ 0x2b
 8016f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016fa2:	f89a 3000 	ldrb.w	r3, [sl]
 8016fa6:	2b2a      	cmp	r3, #42	@ 0x2a
 8016fa8:	d015      	beq.n	8016fd6 <_svfiprintf_r+0xfa>
 8016faa:	9a07      	ldr	r2, [sp, #28]
 8016fac:	4654      	mov	r4, sl
 8016fae:	2000      	movs	r0, #0
 8016fb0:	f04f 0c0a 	mov.w	ip, #10
 8016fb4:	4621      	mov	r1, r4
 8016fb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016fba:	3b30      	subs	r3, #48	@ 0x30
 8016fbc:	2b09      	cmp	r3, #9
 8016fbe:	d94b      	bls.n	8017058 <_svfiprintf_r+0x17c>
 8016fc0:	b1b0      	cbz	r0, 8016ff0 <_svfiprintf_r+0x114>
 8016fc2:	9207      	str	r2, [sp, #28]
 8016fc4:	e014      	b.n	8016ff0 <_svfiprintf_r+0x114>
 8016fc6:	eba0 0308 	sub.w	r3, r0, r8
 8016fca:	fa09 f303 	lsl.w	r3, r9, r3
 8016fce:	4313      	orrs	r3, r2
 8016fd0:	9304      	str	r3, [sp, #16]
 8016fd2:	46a2      	mov	sl, r4
 8016fd4:	e7d2      	b.n	8016f7c <_svfiprintf_r+0xa0>
 8016fd6:	9b03      	ldr	r3, [sp, #12]
 8016fd8:	1d19      	adds	r1, r3, #4
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	9103      	str	r1, [sp, #12]
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	bfbb      	ittet	lt
 8016fe2:	425b      	neglt	r3, r3
 8016fe4:	f042 0202 	orrlt.w	r2, r2, #2
 8016fe8:	9307      	strge	r3, [sp, #28]
 8016fea:	9307      	strlt	r3, [sp, #28]
 8016fec:	bfb8      	it	lt
 8016fee:	9204      	strlt	r2, [sp, #16]
 8016ff0:	7823      	ldrb	r3, [r4, #0]
 8016ff2:	2b2e      	cmp	r3, #46	@ 0x2e
 8016ff4:	d10a      	bne.n	801700c <_svfiprintf_r+0x130>
 8016ff6:	7863      	ldrb	r3, [r4, #1]
 8016ff8:	2b2a      	cmp	r3, #42	@ 0x2a
 8016ffa:	d132      	bne.n	8017062 <_svfiprintf_r+0x186>
 8016ffc:	9b03      	ldr	r3, [sp, #12]
 8016ffe:	1d1a      	adds	r2, r3, #4
 8017000:	681b      	ldr	r3, [r3, #0]
 8017002:	9203      	str	r2, [sp, #12]
 8017004:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017008:	3402      	adds	r4, #2
 801700a:	9305      	str	r3, [sp, #20]
 801700c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80170d0 <_svfiprintf_r+0x1f4>
 8017010:	7821      	ldrb	r1, [r4, #0]
 8017012:	2203      	movs	r2, #3
 8017014:	4650      	mov	r0, sl
 8017016:	f7e9 f8e3 	bl	80001e0 <memchr>
 801701a:	b138      	cbz	r0, 801702c <_svfiprintf_r+0x150>
 801701c:	9b04      	ldr	r3, [sp, #16]
 801701e:	eba0 000a 	sub.w	r0, r0, sl
 8017022:	2240      	movs	r2, #64	@ 0x40
 8017024:	4082      	lsls	r2, r0
 8017026:	4313      	orrs	r3, r2
 8017028:	3401      	adds	r4, #1
 801702a:	9304      	str	r3, [sp, #16]
 801702c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017030:	4824      	ldr	r0, [pc, #144]	@ (80170c4 <_svfiprintf_r+0x1e8>)
 8017032:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017036:	2206      	movs	r2, #6
 8017038:	f7e9 f8d2 	bl	80001e0 <memchr>
 801703c:	2800      	cmp	r0, #0
 801703e:	d036      	beq.n	80170ae <_svfiprintf_r+0x1d2>
 8017040:	4b21      	ldr	r3, [pc, #132]	@ (80170c8 <_svfiprintf_r+0x1ec>)
 8017042:	bb1b      	cbnz	r3, 801708c <_svfiprintf_r+0x1b0>
 8017044:	9b03      	ldr	r3, [sp, #12]
 8017046:	3307      	adds	r3, #7
 8017048:	f023 0307 	bic.w	r3, r3, #7
 801704c:	3308      	adds	r3, #8
 801704e:	9303      	str	r3, [sp, #12]
 8017050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017052:	4433      	add	r3, r6
 8017054:	9309      	str	r3, [sp, #36]	@ 0x24
 8017056:	e76a      	b.n	8016f2e <_svfiprintf_r+0x52>
 8017058:	fb0c 3202 	mla	r2, ip, r2, r3
 801705c:	460c      	mov	r4, r1
 801705e:	2001      	movs	r0, #1
 8017060:	e7a8      	b.n	8016fb4 <_svfiprintf_r+0xd8>
 8017062:	2300      	movs	r3, #0
 8017064:	3401      	adds	r4, #1
 8017066:	9305      	str	r3, [sp, #20]
 8017068:	4619      	mov	r1, r3
 801706a:	f04f 0c0a 	mov.w	ip, #10
 801706e:	4620      	mov	r0, r4
 8017070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017074:	3a30      	subs	r2, #48	@ 0x30
 8017076:	2a09      	cmp	r2, #9
 8017078:	d903      	bls.n	8017082 <_svfiprintf_r+0x1a6>
 801707a:	2b00      	cmp	r3, #0
 801707c:	d0c6      	beq.n	801700c <_svfiprintf_r+0x130>
 801707e:	9105      	str	r1, [sp, #20]
 8017080:	e7c4      	b.n	801700c <_svfiprintf_r+0x130>
 8017082:	fb0c 2101 	mla	r1, ip, r1, r2
 8017086:	4604      	mov	r4, r0
 8017088:	2301      	movs	r3, #1
 801708a:	e7f0      	b.n	801706e <_svfiprintf_r+0x192>
 801708c:	ab03      	add	r3, sp, #12
 801708e:	9300      	str	r3, [sp, #0]
 8017090:	462a      	mov	r2, r5
 8017092:	4b0e      	ldr	r3, [pc, #56]	@ (80170cc <_svfiprintf_r+0x1f0>)
 8017094:	a904      	add	r1, sp, #16
 8017096:	4638      	mov	r0, r7
 8017098:	f3af 8000 	nop.w
 801709c:	1c42      	adds	r2, r0, #1
 801709e:	4606      	mov	r6, r0
 80170a0:	d1d6      	bne.n	8017050 <_svfiprintf_r+0x174>
 80170a2:	89ab      	ldrh	r3, [r5, #12]
 80170a4:	065b      	lsls	r3, r3, #25
 80170a6:	f53f af2d 	bmi.w	8016f04 <_svfiprintf_r+0x28>
 80170aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80170ac:	e72c      	b.n	8016f08 <_svfiprintf_r+0x2c>
 80170ae:	ab03      	add	r3, sp, #12
 80170b0:	9300      	str	r3, [sp, #0]
 80170b2:	462a      	mov	r2, r5
 80170b4:	4b05      	ldr	r3, [pc, #20]	@ (80170cc <_svfiprintf_r+0x1f0>)
 80170b6:	a904      	add	r1, sp, #16
 80170b8:	4638      	mov	r0, r7
 80170ba:	f000 f9bb 	bl	8017434 <_printf_i>
 80170be:	e7ed      	b.n	801709c <_svfiprintf_r+0x1c0>
 80170c0:	0801b808 	.word	0x0801b808
 80170c4:	0801b812 	.word	0x0801b812
 80170c8:	00000000 	.word	0x00000000
 80170cc:	08016e25 	.word	0x08016e25
 80170d0:	0801b80e 	.word	0x0801b80e

080170d4 <__sfputc_r>:
 80170d4:	6893      	ldr	r3, [r2, #8]
 80170d6:	3b01      	subs	r3, #1
 80170d8:	2b00      	cmp	r3, #0
 80170da:	b410      	push	{r4}
 80170dc:	6093      	str	r3, [r2, #8]
 80170de:	da08      	bge.n	80170f2 <__sfputc_r+0x1e>
 80170e0:	6994      	ldr	r4, [r2, #24]
 80170e2:	42a3      	cmp	r3, r4
 80170e4:	db01      	blt.n	80170ea <__sfputc_r+0x16>
 80170e6:	290a      	cmp	r1, #10
 80170e8:	d103      	bne.n	80170f2 <__sfputc_r+0x1e>
 80170ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80170ee:	f7ff bca4 	b.w	8016a3a <__swbuf_r>
 80170f2:	6813      	ldr	r3, [r2, #0]
 80170f4:	1c58      	adds	r0, r3, #1
 80170f6:	6010      	str	r0, [r2, #0]
 80170f8:	7019      	strb	r1, [r3, #0]
 80170fa:	4608      	mov	r0, r1
 80170fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017100:	4770      	bx	lr

08017102 <__sfputs_r>:
 8017102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017104:	4606      	mov	r6, r0
 8017106:	460f      	mov	r7, r1
 8017108:	4614      	mov	r4, r2
 801710a:	18d5      	adds	r5, r2, r3
 801710c:	42ac      	cmp	r4, r5
 801710e:	d101      	bne.n	8017114 <__sfputs_r+0x12>
 8017110:	2000      	movs	r0, #0
 8017112:	e007      	b.n	8017124 <__sfputs_r+0x22>
 8017114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017118:	463a      	mov	r2, r7
 801711a:	4630      	mov	r0, r6
 801711c:	f7ff ffda 	bl	80170d4 <__sfputc_r>
 8017120:	1c43      	adds	r3, r0, #1
 8017122:	d1f3      	bne.n	801710c <__sfputs_r+0xa>
 8017124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017128 <_vfiprintf_r>:
 8017128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801712c:	460d      	mov	r5, r1
 801712e:	b09d      	sub	sp, #116	@ 0x74
 8017130:	4614      	mov	r4, r2
 8017132:	4698      	mov	r8, r3
 8017134:	4606      	mov	r6, r0
 8017136:	b118      	cbz	r0, 8017140 <_vfiprintf_r+0x18>
 8017138:	6a03      	ldr	r3, [r0, #32]
 801713a:	b90b      	cbnz	r3, 8017140 <_vfiprintf_r+0x18>
 801713c:	f7ff fb60 	bl	8016800 <__sinit>
 8017140:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017142:	07d9      	lsls	r1, r3, #31
 8017144:	d405      	bmi.n	8017152 <_vfiprintf_r+0x2a>
 8017146:	89ab      	ldrh	r3, [r5, #12]
 8017148:	059a      	lsls	r2, r3, #22
 801714a:	d402      	bmi.n	8017152 <_vfiprintf_r+0x2a>
 801714c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801714e:	f7ff fe06 	bl	8016d5e <__retarget_lock_acquire_recursive>
 8017152:	89ab      	ldrh	r3, [r5, #12]
 8017154:	071b      	lsls	r3, r3, #28
 8017156:	d501      	bpl.n	801715c <_vfiprintf_r+0x34>
 8017158:	692b      	ldr	r3, [r5, #16]
 801715a:	b99b      	cbnz	r3, 8017184 <_vfiprintf_r+0x5c>
 801715c:	4629      	mov	r1, r5
 801715e:	4630      	mov	r0, r6
 8017160:	f7ff fcaa 	bl	8016ab8 <__swsetup_r>
 8017164:	b170      	cbz	r0, 8017184 <_vfiprintf_r+0x5c>
 8017166:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017168:	07dc      	lsls	r4, r3, #31
 801716a:	d504      	bpl.n	8017176 <_vfiprintf_r+0x4e>
 801716c:	f04f 30ff 	mov.w	r0, #4294967295
 8017170:	b01d      	add	sp, #116	@ 0x74
 8017172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017176:	89ab      	ldrh	r3, [r5, #12]
 8017178:	0598      	lsls	r0, r3, #22
 801717a:	d4f7      	bmi.n	801716c <_vfiprintf_r+0x44>
 801717c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801717e:	f7ff fdef 	bl	8016d60 <__retarget_lock_release_recursive>
 8017182:	e7f3      	b.n	801716c <_vfiprintf_r+0x44>
 8017184:	2300      	movs	r3, #0
 8017186:	9309      	str	r3, [sp, #36]	@ 0x24
 8017188:	2320      	movs	r3, #32
 801718a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801718e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017192:	2330      	movs	r3, #48	@ 0x30
 8017194:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017344 <_vfiprintf_r+0x21c>
 8017198:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801719c:	f04f 0901 	mov.w	r9, #1
 80171a0:	4623      	mov	r3, r4
 80171a2:	469a      	mov	sl, r3
 80171a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80171a8:	b10a      	cbz	r2, 80171ae <_vfiprintf_r+0x86>
 80171aa:	2a25      	cmp	r2, #37	@ 0x25
 80171ac:	d1f9      	bne.n	80171a2 <_vfiprintf_r+0x7a>
 80171ae:	ebba 0b04 	subs.w	fp, sl, r4
 80171b2:	d00b      	beq.n	80171cc <_vfiprintf_r+0xa4>
 80171b4:	465b      	mov	r3, fp
 80171b6:	4622      	mov	r2, r4
 80171b8:	4629      	mov	r1, r5
 80171ba:	4630      	mov	r0, r6
 80171bc:	f7ff ffa1 	bl	8017102 <__sfputs_r>
 80171c0:	3001      	adds	r0, #1
 80171c2:	f000 80a7 	beq.w	8017314 <_vfiprintf_r+0x1ec>
 80171c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80171c8:	445a      	add	r2, fp
 80171ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80171cc:	f89a 3000 	ldrb.w	r3, [sl]
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	f000 809f 	beq.w	8017314 <_vfiprintf_r+0x1ec>
 80171d6:	2300      	movs	r3, #0
 80171d8:	f04f 32ff 	mov.w	r2, #4294967295
 80171dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80171e0:	f10a 0a01 	add.w	sl, sl, #1
 80171e4:	9304      	str	r3, [sp, #16]
 80171e6:	9307      	str	r3, [sp, #28]
 80171e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80171ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80171ee:	4654      	mov	r4, sl
 80171f0:	2205      	movs	r2, #5
 80171f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171f6:	4853      	ldr	r0, [pc, #332]	@ (8017344 <_vfiprintf_r+0x21c>)
 80171f8:	f7e8 fff2 	bl	80001e0 <memchr>
 80171fc:	9a04      	ldr	r2, [sp, #16]
 80171fe:	b9d8      	cbnz	r0, 8017238 <_vfiprintf_r+0x110>
 8017200:	06d1      	lsls	r1, r2, #27
 8017202:	bf44      	itt	mi
 8017204:	2320      	movmi	r3, #32
 8017206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801720a:	0713      	lsls	r3, r2, #28
 801720c:	bf44      	itt	mi
 801720e:	232b      	movmi	r3, #43	@ 0x2b
 8017210:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017214:	f89a 3000 	ldrb.w	r3, [sl]
 8017218:	2b2a      	cmp	r3, #42	@ 0x2a
 801721a:	d015      	beq.n	8017248 <_vfiprintf_r+0x120>
 801721c:	9a07      	ldr	r2, [sp, #28]
 801721e:	4654      	mov	r4, sl
 8017220:	2000      	movs	r0, #0
 8017222:	f04f 0c0a 	mov.w	ip, #10
 8017226:	4621      	mov	r1, r4
 8017228:	f811 3b01 	ldrb.w	r3, [r1], #1
 801722c:	3b30      	subs	r3, #48	@ 0x30
 801722e:	2b09      	cmp	r3, #9
 8017230:	d94b      	bls.n	80172ca <_vfiprintf_r+0x1a2>
 8017232:	b1b0      	cbz	r0, 8017262 <_vfiprintf_r+0x13a>
 8017234:	9207      	str	r2, [sp, #28]
 8017236:	e014      	b.n	8017262 <_vfiprintf_r+0x13a>
 8017238:	eba0 0308 	sub.w	r3, r0, r8
 801723c:	fa09 f303 	lsl.w	r3, r9, r3
 8017240:	4313      	orrs	r3, r2
 8017242:	9304      	str	r3, [sp, #16]
 8017244:	46a2      	mov	sl, r4
 8017246:	e7d2      	b.n	80171ee <_vfiprintf_r+0xc6>
 8017248:	9b03      	ldr	r3, [sp, #12]
 801724a:	1d19      	adds	r1, r3, #4
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	9103      	str	r1, [sp, #12]
 8017250:	2b00      	cmp	r3, #0
 8017252:	bfbb      	ittet	lt
 8017254:	425b      	neglt	r3, r3
 8017256:	f042 0202 	orrlt.w	r2, r2, #2
 801725a:	9307      	strge	r3, [sp, #28]
 801725c:	9307      	strlt	r3, [sp, #28]
 801725e:	bfb8      	it	lt
 8017260:	9204      	strlt	r2, [sp, #16]
 8017262:	7823      	ldrb	r3, [r4, #0]
 8017264:	2b2e      	cmp	r3, #46	@ 0x2e
 8017266:	d10a      	bne.n	801727e <_vfiprintf_r+0x156>
 8017268:	7863      	ldrb	r3, [r4, #1]
 801726a:	2b2a      	cmp	r3, #42	@ 0x2a
 801726c:	d132      	bne.n	80172d4 <_vfiprintf_r+0x1ac>
 801726e:	9b03      	ldr	r3, [sp, #12]
 8017270:	1d1a      	adds	r2, r3, #4
 8017272:	681b      	ldr	r3, [r3, #0]
 8017274:	9203      	str	r2, [sp, #12]
 8017276:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801727a:	3402      	adds	r4, #2
 801727c:	9305      	str	r3, [sp, #20]
 801727e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017354 <_vfiprintf_r+0x22c>
 8017282:	7821      	ldrb	r1, [r4, #0]
 8017284:	2203      	movs	r2, #3
 8017286:	4650      	mov	r0, sl
 8017288:	f7e8 ffaa 	bl	80001e0 <memchr>
 801728c:	b138      	cbz	r0, 801729e <_vfiprintf_r+0x176>
 801728e:	9b04      	ldr	r3, [sp, #16]
 8017290:	eba0 000a 	sub.w	r0, r0, sl
 8017294:	2240      	movs	r2, #64	@ 0x40
 8017296:	4082      	lsls	r2, r0
 8017298:	4313      	orrs	r3, r2
 801729a:	3401      	adds	r4, #1
 801729c:	9304      	str	r3, [sp, #16]
 801729e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172a2:	4829      	ldr	r0, [pc, #164]	@ (8017348 <_vfiprintf_r+0x220>)
 80172a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80172a8:	2206      	movs	r2, #6
 80172aa:	f7e8 ff99 	bl	80001e0 <memchr>
 80172ae:	2800      	cmp	r0, #0
 80172b0:	d03f      	beq.n	8017332 <_vfiprintf_r+0x20a>
 80172b2:	4b26      	ldr	r3, [pc, #152]	@ (801734c <_vfiprintf_r+0x224>)
 80172b4:	bb1b      	cbnz	r3, 80172fe <_vfiprintf_r+0x1d6>
 80172b6:	9b03      	ldr	r3, [sp, #12]
 80172b8:	3307      	adds	r3, #7
 80172ba:	f023 0307 	bic.w	r3, r3, #7
 80172be:	3308      	adds	r3, #8
 80172c0:	9303      	str	r3, [sp, #12]
 80172c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80172c4:	443b      	add	r3, r7
 80172c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80172c8:	e76a      	b.n	80171a0 <_vfiprintf_r+0x78>
 80172ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80172ce:	460c      	mov	r4, r1
 80172d0:	2001      	movs	r0, #1
 80172d2:	e7a8      	b.n	8017226 <_vfiprintf_r+0xfe>
 80172d4:	2300      	movs	r3, #0
 80172d6:	3401      	adds	r4, #1
 80172d8:	9305      	str	r3, [sp, #20]
 80172da:	4619      	mov	r1, r3
 80172dc:	f04f 0c0a 	mov.w	ip, #10
 80172e0:	4620      	mov	r0, r4
 80172e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80172e6:	3a30      	subs	r2, #48	@ 0x30
 80172e8:	2a09      	cmp	r2, #9
 80172ea:	d903      	bls.n	80172f4 <_vfiprintf_r+0x1cc>
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d0c6      	beq.n	801727e <_vfiprintf_r+0x156>
 80172f0:	9105      	str	r1, [sp, #20]
 80172f2:	e7c4      	b.n	801727e <_vfiprintf_r+0x156>
 80172f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80172f8:	4604      	mov	r4, r0
 80172fa:	2301      	movs	r3, #1
 80172fc:	e7f0      	b.n	80172e0 <_vfiprintf_r+0x1b8>
 80172fe:	ab03      	add	r3, sp, #12
 8017300:	9300      	str	r3, [sp, #0]
 8017302:	462a      	mov	r2, r5
 8017304:	4b12      	ldr	r3, [pc, #72]	@ (8017350 <_vfiprintf_r+0x228>)
 8017306:	a904      	add	r1, sp, #16
 8017308:	4630      	mov	r0, r6
 801730a:	f3af 8000 	nop.w
 801730e:	4607      	mov	r7, r0
 8017310:	1c78      	adds	r0, r7, #1
 8017312:	d1d6      	bne.n	80172c2 <_vfiprintf_r+0x19a>
 8017314:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017316:	07d9      	lsls	r1, r3, #31
 8017318:	d405      	bmi.n	8017326 <_vfiprintf_r+0x1fe>
 801731a:	89ab      	ldrh	r3, [r5, #12]
 801731c:	059a      	lsls	r2, r3, #22
 801731e:	d402      	bmi.n	8017326 <_vfiprintf_r+0x1fe>
 8017320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017322:	f7ff fd1d 	bl	8016d60 <__retarget_lock_release_recursive>
 8017326:	89ab      	ldrh	r3, [r5, #12]
 8017328:	065b      	lsls	r3, r3, #25
 801732a:	f53f af1f 	bmi.w	801716c <_vfiprintf_r+0x44>
 801732e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017330:	e71e      	b.n	8017170 <_vfiprintf_r+0x48>
 8017332:	ab03      	add	r3, sp, #12
 8017334:	9300      	str	r3, [sp, #0]
 8017336:	462a      	mov	r2, r5
 8017338:	4b05      	ldr	r3, [pc, #20]	@ (8017350 <_vfiprintf_r+0x228>)
 801733a:	a904      	add	r1, sp, #16
 801733c:	4630      	mov	r0, r6
 801733e:	f000 f879 	bl	8017434 <_printf_i>
 8017342:	e7e4      	b.n	801730e <_vfiprintf_r+0x1e6>
 8017344:	0801b808 	.word	0x0801b808
 8017348:	0801b812 	.word	0x0801b812
 801734c:	00000000 	.word	0x00000000
 8017350:	08017103 	.word	0x08017103
 8017354:	0801b80e 	.word	0x0801b80e

08017358 <_printf_common>:
 8017358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801735c:	4616      	mov	r6, r2
 801735e:	4698      	mov	r8, r3
 8017360:	688a      	ldr	r2, [r1, #8]
 8017362:	690b      	ldr	r3, [r1, #16]
 8017364:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017368:	4293      	cmp	r3, r2
 801736a:	bfb8      	it	lt
 801736c:	4613      	movlt	r3, r2
 801736e:	6033      	str	r3, [r6, #0]
 8017370:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017374:	4607      	mov	r7, r0
 8017376:	460c      	mov	r4, r1
 8017378:	b10a      	cbz	r2, 801737e <_printf_common+0x26>
 801737a:	3301      	adds	r3, #1
 801737c:	6033      	str	r3, [r6, #0]
 801737e:	6823      	ldr	r3, [r4, #0]
 8017380:	0699      	lsls	r1, r3, #26
 8017382:	bf42      	ittt	mi
 8017384:	6833      	ldrmi	r3, [r6, #0]
 8017386:	3302      	addmi	r3, #2
 8017388:	6033      	strmi	r3, [r6, #0]
 801738a:	6825      	ldr	r5, [r4, #0]
 801738c:	f015 0506 	ands.w	r5, r5, #6
 8017390:	d106      	bne.n	80173a0 <_printf_common+0x48>
 8017392:	f104 0a19 	add.w	sl, r4, #25
 8017396:	68e3      	ldr	r3, [r4, #12]
 8017398:	6832      	ldr	r2, [r6, #0]
 801739a:	1a9b      	subs	r3, r3, r2
 801739c:	42ab      	cmp	r3, r5
 801739e:	dc26      	bgt.n	80173ee <_printf_common+0x96>
 80173a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80173a4:	6822      	ldr	r2, [r4, #0]
 80173a6:	3b00      	subs	r3, #0
 80173a8:	bf18      	it	ne
 80173aa:	2301      	movne	r3, #1
 80173ac:	0692      	lsls	r2, r2, #26
 80173ae:	d42b      	bmi.n	8017408 <_printf_common+0xb0>
 80173b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80173b4:	4641      	mov	r1, r8
 80173b6:	4638      	mov	r0, r7
 80173b8:	47c8      	blx	r9
 80173ba:	3001      	adds	r0, #1
 80173bc:	d01e      	beq.n	80173fc <_printf_common+0xa4>
 80173be:	6823      	ldr	r3, [r4, #0]
 80173c0:	6922      	ldr	r2, [r4, #16]
 80173c2:	f003 0306 	and.w	r3, r3, #6
 80173c6:	2b04      	cmp	r3, #4
 80173c8:	bf02      	ittt	eq
 80173ca:	68e5      	ldreq	r5, [r4, #12]
 80173cc:	6833      	ldreq	r3, [r6, #0]
 80173ce:	1aed      	subeq	r5, r5, r3
 80173d0:	68a3      	ldr	r3, [r4, #8]
 80173d2:	bf0c      	ite	eq
 80173d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80173d8:	2500      	movne	r5, #0
 80173da:	4293      	cmp	r3, r2
 80173dc:	bfc4      	itt	gt
 80173de:	1a9b      	subgt	r3, r3, r2
 80173e0:	18ed      	addgt	r5, r5, r3
 80173e2:	2600      	movs	r6, #0
 80173e4:	341a      	adds	r4, #26
 80173e6:	42b5      	cmp	r5, r6
 80173e8:	d11a      	bne.n	8017420 <_printf_common+0xc8>
 80173ea:	2000      	movs	r0, #0
 80173ec:	e008      	b.n	8017400 <_printf_common+0xa8>
 80173ee:	2301      	movs	r3, #1
 80173f0:	4652      	mov	r2, sl
 80173f2:	4641      	mov	r1, r8
 80173f4:	4638      	mov	r0, r7
 80173f6:	47c8      	blx	r9
 80173f8:	3001      	adds	r0, #1
 80173fa:	d103      	bne.n	8017404 <_printf_common+0xac>
 80173fc:	f04f 30ff 	mov.w	r0, #4294967295
 8017400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017404:	3501      	adds	r5, #1
 8017406:	e7c6      	b.n	8017396 <_printf_common+0x3e>
 8017408:	18e1      	adds	r1, r4, r3
 801740a:	1c5a      	adds	r2, r3, #1
 801740c:	2030      	movs	r0, #48	@ 0x30
 801740e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017412:	4422      	add	r2, r4
 8017414:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017418:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801741c:	3302      	adds	r3, #2
 801741e:	e7c7      	b.n	80173b0 <_printf_common+0x58>
 8017420:	2301      	movs	r3, #1
 8017422:	4622      	mov	r2, r4
 8017424:	4641      	mov	r1, r8
 8017426:	4638      	mov	r0, r7
 8017428:	47c8      	blx	r9
 801742a:	3001      	adds	r0, #1
 801742c:	d0e6      	beq.n	80173fc <_printf_common+0xa4>
 801742e:	3601      	adds	r6, #1
 8017430:	e7d9      	b.n	80173e6 <_printf_common+0x8e>
	...

08017434 <_printf_i>:
 8017434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017438:	7e0f      	ldrb	r7, [r1, #24]
 801743a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801743c:	2f78      	cmp	r7, #120	@ 0x78
 801743e:	4691      	mov	r9, r2
 8017440:	4680      	mov	r8, r0
 8017442:	460c      	mov	r4, r1
 8017444:	469a      	mov	sl, r3
 8017446:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801744a:	d807      	bhi.n	801745c <_printf_i+0x28>
 801744c:	2f62      	cmp	r7, #98	@ 0x62
 801744e:	d80a      	bhi.n	8017466 <_printf_i+0x32>
 8017450:	2f00      	cmp	r7, #0
 8017452:	f000 80d2 	beq.w	80175fa <_printf_i+0x1c6>
 8017456:	2f58      	cmp	r7, #88	@ 0x58
 8017458:	f000 80b9 	beq.w	80175ce <_printf_i+0x19a>
 801745c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017460:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017464:	e03a      	b.n	80174dc <_printf_i+0xa8>
 8017466:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801746a:	2b15      	cmp	r3, #21
 801746c:	d8f6      	bhi.n	801745c <_printf_i+0x28>
 801746e:	a101      	add	r1, pc, #4	@ (adr r1, 8017474 <_printf_i+0x40>)
 8017470:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017474:	080174cd 	.word	0x080174cd
 8017478:	080174e1 	.word	0x080174e1
 801747c:	0801745d 	.word	0x0801745d
 8017480:	0801745d 	.word	0x0801745d
 8017484:	0801745d 	.word	0x0801745d
 8017488:	0801745d 	.word	0x0801745d
 801748c:	080174e1 	.word	0x080174e1
 8017490:	0801745d 	.word	0x0801745d
 8017494:	0801745d 	.word	0x0801745d
 8017498:	0801745d 	.word	0x0801745d
 801749c:	0801745d 	.word	0x0801745d
 80174a0:	080175e1 	.word	0x080175e1
 80174a4:	0801750b 	.word	0x0801750b
 80174a8:	0801759b 	.word	0x0801759b
 80174ac:	0801745d 	.word	0x0801745d
 80174b0:	0801745d 	.word	0x0801745d
 80174b4:	08017603 	.word	0x08017603
 80174b8:	0801745d 	.word	0x0801745d
 80174bc:	0801750b 	.word	0x0801750b
 80174c0:	0801745d 	.word	0x0801745d
 80174c4:	0801745d 	.word	0x0801745d
 80174c8:	080175a3 	.word	0x080175a3
 80174cc:	6833      	ldr	r3, [r6, #0]
 80174ce:	1d1a      	adds	r2, r3, #4
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	6032      	str	r2, [r6, #0]
 80174d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80174d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80174dc:	2301      	movs	r3, #1
 80174de:	e09d      	b.n	801761c <_printf_i+0x1e8>
 80174e0:	6833      	ldr	r3, [r6, #0]
 80174e2:	6820      	ldr	r0, [r4, #0]
 80174e4:	1d19      	adds	r1, r3, #4
 80174e6:	6031      	str	r1, [r6, #0]
 80174e8:	0606      	lsls	r6, r0, #24
 80174ea:	d501      	bpl.n	80174f0 <_printf_i+0xbc>
 80174ec:	681d      	ldr	r5, [r3, #0]
 80174ee:	e003      	b.n	80174f8 <_printf_i+0xc4>
 80174f0:	0645      	lsls	r5, r0, #25
 80174f2:	d5fb      	bpl.n	80174ec <_printf_i+0xb8>
 80174f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80174f8:	2d00      	cmp	r5, #0
 80174fa:	da03      	bge.n	8017504 <_printf_i+0xd0>
 80174fc:	232d      	movs	r3, #45	@ 0x2d
 80174fe:	426d      	negs	r5, r5
 8017500:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017504:	4859      	ldr	r0, [pc, #356]	@ (801766c <_printf_i+0x238>)
 8017506:	230a      	movs	r3, #10
 8017508:	e011      	b.n	801752e <_printf_i+0xfa>
 801750a:	6821      	ldr	r1, [r4, #0]
 801750c:	6833      	ldr	r3, [r6, #0]
 801750e:	0608      	lsls	r0, r1, #24
 8017510:	f853 5b04 	ldr.w	r5, [r3], #4
 8017514:	d402      	bmi.n	801751c <_printf_i+0xe8>
 8017516:	0649      	lsls	r1, r1, #25
 8017518:	bf48      	it	mi
 801751a:	b2ad      	uxthmi	r5, r5
 801751c:	2f6f      	cmp	r7, #111	@ 0x6f
 801751e:	4853      	ldr	r0, [pc, #332]	@ (801766c <_printf_i+0x238>)
 8017520:	6033      	str	r3, [r6, #0]
 8017522:	bf14      	ite	ne
 8017524:	230a      	movne	r3, #10
 8017526:	2308      	moveq	r3, #8
 8017528:	2100      	movs	r1, #0
 801752a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801752e:	6866      	ldr	r6, [r4, #4]
 8017530:	60a6      	str	r6, [r4, #8]
 8017532:	2e00      	cmp	r6, #0
 8017534:	bfa2      	ittt	ge
 8017536:	6821      	ldrge	r1, [r4, #0]
 8017538:	f021 0104 	bicge.w	r1, r1, #4
 801753c:	6021      	strge	r1, [r4, #0]
 801753e:	b90d      	cbnz	r5, 8017544 <_printf_i+0x110>
 8017540:	2e00      	cmp	r6, #0
 8017542:	d04b      	beq.n	80175dc <_printf_i+0x1a8>
 8017544:	4616      	mov	r6, r2
 8017546:	fbb5 f1f3 	udiv	r1, r5, r3
 801754a:	fb03 5711 	mls	r7, r3, r1, r5
 801754e:	5dc7      	ldrb	r7, [r0, r7]
 8017550:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017554:	462f      	mov	r7, r5
 8017556:	42bb      	cmp	r3, r7
 8017558:	460d      	mov	r5, r1
 801755a:	d9f4      	bls.n	8017546 <_printf_i+0x112>
 801755c:	2b08      	cmp	r3, #8
 801755e:	d10b      	bne.n	8017578 <_printf_i+0x144>
 8017560:	6823      	ldr	r3, [r4, #0]
 8017562:	07df      	lsls	r7, r3, #31
 8017564:	d508      	bpl.n	8017578 <_printf_i+0x144>
 8017566:	6923      	ldr	r3, [r4, #16]
 8017568:	6861      	ldr	r1, [r4, #4]
 801756a:	4299      	cmp	r1, r3
 801756c:	bfde      	ittt	le
 801756e:	2330      	movle	r3, #48	@ 0x30
 8017570:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017574:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017578:	1b92      	subs	r2, r2, r6
 801757a:	6122      	str	r2, [r4, #16]
 801757c:	f8cd a000 	str.w	sl, [sp]
 8017580:	464b      	mov	r3, r9
 8017582:	aa03      	add	r2, sp, #12
 8017584:	4621      	mov	r1, r4
 8017586:	4640      	mov	r0, r8
 8017588:	f7ff fee6 	bl	8017358 <_printf_common>
 801758c:	3001      	adds	r0, #1
 801758e:	d14a      	bne.n	8017626 <_printf_i+0x1f2>
 8017590:	f04f 30ff 	mov.w	r0, #4294967295
 8017594:	b004      	add	sp, #16
 8017596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801759a:	6823      	ldr	r3, [r4, #0]
 801759c:	f043 0320 	orr.w	r3, r3, #32
 80175a0:	6023      	str	r3, [r4, #0]
 80175a2:	4833      	ldr	r0, [pc, #204]	@ (8017670 <_printf_i+0x23c>)
 80175a4:	2778      	movs	r7, #120	@ 0x78
 80175a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80175aa:	6823      	ldr	r3, [r4, #0]
 80175ac:	6831      	ldr	r1, [r6, #0]
 80175ae:	061f      	lsls	r7, r3, #24
 80175b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80175b4:	d402      	bmi.n	80175bc <_printf_i+0x188>
 80175b6:	065f      	lsls	r7, r3, #25
 80175b8:	bf48      	it	mi
 80175ba:	b2ad      	uxthmi	r5, r5
 80175bc:	6031      	str	r1, [r6, #0]
 80175be:	07d9      	lsls	r1, r3, #31
 80175c0:	bf44      	itt	mi
 80175c2:	f043 0320 	orrmi.w	r3, r3, #32
 80175c6:	6023      	strmi	r3, [r4, #0]
 80175c8:	b11d      	cbz	r5, 80175d2 <_printf_i+0x19e>
 80175ca:	2310      	movs	r3, #16
 80175cc:	e7ac      	b.n	8017528 <_printf_i+0xf4>
 80175ce:	4827      	ldr	r0, [pc, #156]	@ (801766c <_printf_i+0x238>)
 80175d0:	e7e9      	b.n	80175a6 <_printf_i+0x172>
 80175d2:	6823      	ldr	r3, [r4, #0]
 80175d4:	f023 0320 	bic.w	r3, r3, #32
 80175d8:	6023      	str	r3, [r4, #0]
 80175da:	e7f6      	b.n	80175ca <_printf_i+0x196>
 80175dc:	4616      	mov	r6, r2
 80175de:	e7bd      	b.n	801755c <_printf_i+0x128>
 80175e0:	6833      	ldr	r3, [r6, #0]
 80175e2:	6825      	ldr	r5, [r4, #0]
 80175e4:	6961      	ldr	r1, [r4, #20]
 80175e6:	1d18      	adds	r0, r3, #4
 80175e8:	6030      	str	r0, [r6, #0]
 80175ea:	062e      	lsls	r6, r5, #24
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	d501      	bpl.n	80175f4 <_printf_i+0x1c0>
 80175f0:	6019      	str	r1, [r3, #0]
 80175f2:	e002      	b.n	80175fa <_printf_i+0x1c6>
 80175f4:	0668      	lsls	r0, r5, #25
 80175f6:	d5fb      	bpl.n	80175f0 <_printf_i+0x1bc>
 80175f8:	8019      	strh	r1, [r3, #0]
 80175fa:	2300      	movs	r3, #0
 80175fc:	6123      	str	r3, [r4, #16]
 80175fe:	4616      	mov	r6, r2
 8017600:	e7bc      	b.n	801757c <_printf_i+0x148>
 8017602:	6833      	ldr	r3, [r6, #0]
 8017604:	1d1a      	adds	r2, r3, #4
 8017606:	6032      	str	r2, [r6, #0]
 8017608:	681e      	ldr	r6, [r3, #0]
 801760a:	6862      	ldr	r2, [r4, #4]
 801760c:	2100      	movs	r1, #0
 801760e:	4630      	mov	r0, r6
 8017610:	f7e8 fde6 	bl	80001e0 <memchr>
 8017614:	b108      	cbz	r0, 801761a <_printf_i+0x1e6>
 8017616:	1b80      	subs	r0, r0, r6
 8017618:	6060      	str	r0, [r4, #4]
 801761a:	6863      	ldr	r3, [r4, #4]
 801761c:	6123      	str	r3, [r4, #16]
 801761e:	2300      	movs	r3, #0
 8017620:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017624:	e7aa      	b.n	801757c <_printf_i+0x148>
 8017626:	6923      	ldr	r3, [r4, #16]
 8017628:	4632      	mov	r2, r6
 801762a:	4649      	mov	r1, r9
 801762c:	4640      	mov	r0, r8
 801762e:	47d0      	blx	sl
 8017630:	3001      	adds	r0, #1
 8017632:	d0ad      	beq.n	8017590 <_printf_i+0x15c>
 8017634:	6823      	ldr	r3, [r4, #0]
 8017636:	079b      	lsls	r3, r3, #30
 8017638:	d413      	bmi.n	8017662 <_printf_i+0x22e>
 801763a:	68e0      	ldr	r0, [r4, #12]
 801763c:	9b03      	ldr	r3, [sp, #12]
 801763e:	4298      	cmp	r0, r3
 8017640:	bfb8      	it	lt
 8017642:	4618      	movlt	r0, r3
 8017644:	e7a6      	b.n	8017594 <_printf_i+0x160>
 8017646:	2301      	movs	r3, #1
 8017648:	4632      	mov	r2, r6
 801764a:	4649      	mov	r1, r9
 801764c:	4640      	mov	r0, r8
 801764e:	47d0      	blx	sl
 8017650:	3001      	adds	r0, #1
 8017652:	d09d      	beq.n	8017590 <_printf_i+0x15c>
 8017654:	3501      	adds	r5, #1
 8017656:	68e3      	ldr	r3, [r4, #12]
 8017658:	9903      	ldr	r1, [sp, #12]
 801765a:	1a5b      	subs	r3, r3, r1
 801765c:	42ab      	cmp	r3, r5
 801765e:	dcf2      	bgt.n	8017646 <_printf_i+0x212>
 8017660:	e7eb      	b.n	801763a <_printf_i+0x206>
 8017662:	2500      	movs	r5, #0
 8017664:	f104 0619 	add.w	r6, r4, #25
 8017668:	e7f5      	b.n	8017656 <_printf_i+0x222>
 801766a:	bf00      	nop
 801766c:	0801b819 	.word	0x0801b819
 8017670:	0801b82a 	.word	0x0801b82a

08017674 <__sflush_r>:
 8017674:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801767c:	0716      	lsls	r6, r2, #28
 801767e:	4605      	mov	r5, r0
 8017680:	460c      	mov	r4, r1
 8017682:	d454      	bmi.n	801772e <__sflush_r+0xba>
 8017684:	684b      	ldr	r3, [r1, #4]
 8017686:	2b00      	cmp	r3, #0
 8017688:	dc02      	bgt.n	8017690 <__sflush_r+0x1c>
 801768a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801768c:	2b00      	cmp	r3, #0
 801768e:	dd48      	ble.n	8017722 <__sflush_r+0xae>
 8017690:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017692:	2e00      	cmp	r6, #0
 8017694:	d045      	beq.n	8017722 <__sflush_r+0xae>
 8017696:	2300      	movs	r3, #0
 8017698:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801769c:	682f      	ldr	r7, [r5, #0]
 801769e:	6a21      	ldr	r1, [r4, #32]
 80176a0:	602b      	str	r3, [r5, #0]
 80176a2:	d030      	beq.n	8017706 <__sflush_r+0x92>
 80176a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80176a6:	89a3      	ldrh	r3, [r4, #12]
 80176a8:	0759      	lsls	r1, r3, #29
 80176aa:	d505      	bpl.n	80176b8 <__sflush_r+0x44>
 80176ac:	6863      	ldr	r3, [r4, #4]
 80176ae:	1ad2      	subs	r2, r2, r3
 80176b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80176b2:	b10b      	cbz	r3, 80176b8 <__sflush_r+0x44>
 80176b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80176b6:	1ad2      	subs	r2, r2, r3
 80176b8:	2300      	movs	r3, #0
 80176ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80176bc:	6a21      	ldr	r1, [r4, #32]
 80176be:	4628      	mov	r0, r5
 80176c0:	47b0      	blx	r6
 80176c2:	1c43      	adds	r3, r0, #1
 80176c4:	89a3      	ldrh	r3, [r4, #12]
 80176c6:	d106      	bne.n	80176d6 <__sflush_r+0x62>
 80176c8:	6829      	ldr	r1, [r5, #0]
 80176ca:	291d      	cmp	r1, #29
 80176cc:	d82b      	bhi.n	8017726 <__sflush_r+0xb2>
 80176ce:	4a2a      	ldr	r2, [pc, #168]	@ (8017778 <__sflush_r+0x104>)
 80176d0:	410a      	asrs	r2, r1
 80176d2:	07d6      	lsls	r6, r2, #31
 80176d4:	d427      	bmi.n	8017726 <__sflush_r+0xb2>
 80176d6:	2200      	movs	r2, #0
 80176d8:	6062      	str	r2, [r4, #4]
 80176da:	04d9      	lsls	r1, r3, #19
 80176dc:	6922      	ldr	r2, [r4, #16]
 80176de:	6022      	str	r2, [r4, #0]
 80176e0:	d504      	bpl.n	80176ec <__sflush_r+0x78>
 80176e2:	1c42      	adds	r2, r0, #1
 80176e4:	d101      	bne.n	80176ea <__sflush_r+0x76>
 80176e6:	682b      	ldr	r3, [r5, #0]
 80176e8:	b903      	cbnz	r3, 80176ec <__sflush_r+0x78>
 80176ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80176ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80176ee:	602f      	str	r7, [r5, #0]
 80176f0:	b1b9      	cbz	r1, 8017722 <__sflush_r+0xae>
 80176f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80176f6:	4299      	cmp	r1, r3
 80176f8:	d002      	beq.n	8017700 <__sflush_r+0x8c>
 80176fa:	4628      	mov	r0, r5
 80176fc:	f7ff fb48 	bl	8016d90 <_free_r>
 8017700:	2300      	movs	r3, #0
 8017702:	6363      	str	r3, [r4, #52]	@ 0x34
 8017704:	e00d      	b.n	8017722 <__sflush_r+0xae>
 8017706:	2301      	movs	r3, #1
 8017708:	4628      	mov	r0, r5
 801770a:	47b0      	blx	r6
 801770c:	4602      	mov	r2, r0
 801770e:	1c50      	adds	r0, r2, #1
 8017710:	d1c9      	bne.n	80176a6 <__sflush_r+0x32>
 8017712:	682b      	ldr	r3, [r5, #0]
 8017714:	2b00      	cmp	r3, #0
 8017716:	d0c6      	beq.n	80176a6 <__sflush_r+0x32>
 8017718:	2b1d      	cmp	r3, #29
 801771a:	d001      	beq.n	8017720 <__sflush_r+0xac>
 801771c:	2b16      	cmp	r3, #22
 801771e:	d11e      	bne.n	801775e <__sflush_r+0xea>
 8017720:	602f      	str	r7, [r5, #0]
 8017722:	2000      	movs	r0, #0
 8017724:	e022      	b.n	801776c <__sflush_r+0xf8>
 8017726:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801772a:	b21b      	sxth	r3, r3
 801772c:	e01b      	b.n	8017766 <__sflush_r+0xf2>
 801772e:	690f      	ldr	r7, [r1, #16]
 8017730:	2f00      	cmp	r7, #0
 8017732:	d0f6      	beq.n	8017722 <__sflush_r+0xae>
 8017734:	0793      	lsls	r3, r2, #30
 8017736:	680e      	ldr	r6, [r1, #0]
 8017738:	bf08      	it	eq
 801773a:	694b      	ldreq	r3, [r1, #20]
 801773c:	600f      	str	r7, [r1, #0]
 801773e:	bf18      	it	ne
 8017740:	2300      	movne	r3, #0
 8017742:	eba6 0807 	sub.w	r8, r6, r7
 8017746:	608b      	str	r3, [r1, #8]
 8017748:	f1b8 0f00 	cmp.w	r8, #0
 801774c:	dde9      	ble.n	8017722 <__sflush_r+0xae>
 801774e:	6a21      	ldr	r1, [r4, #32]
 8017750:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017752:	4643      	mov	r3, r8
 8017754:	463a      	mov	r2, r7
 8017756:	4628      	mov	r0, r5
 8017758:	47b0      	blx	r6
 801775a:	2800      	cmp	r0, #0
 801775c:	dc08      	bgt.n	8017770 <__sflush_r+0xfc>
 801775e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017766:	81a3      	strh	r3, [r4, #12]
 8017768:	f04f 30ff 	mov.w	r0, #4294967295
 801776c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017770:	4407      	add	r7, r0
 8017772:	eba8 0800 	sub.w	r8, r8, r0
 8017776:	e7e7      	b.n	8017748 <__sflush_r+0xd4>
 8017778:	dfbffffe 	.word	0xdfbffffe

0801777c <_fflush_r>:
 801777c:	b538      	push	{r3, r4, r5, lr}
 801777e:	690b      	ldr	r3, [r1, #16]
 8017780:	4605      	mov	r5, r0
 8017782:	460c      	mov	r4, r1
 8017784:	b913      	cbnz	r3, 801778c <_fflush_r+0x10>
 8017786:	2500      	movs	r5, #0
 8017788:	4628      	mov	r0, r5
 801778a:	bd38      	pop	{r3, r4, r5, pc}
 801778c:	b118      	cbz	r0, 8017796 <_fflush_r+0x1a>
 801778e:	6a03      	ldr	r3, [r0, #32]
 8017790:	b90b      	cbnz	r3, 8017796 <_fflush_r+0x1a>
 8017792:	f7ff f835 	bl	8016800 <__sinit>
 8017796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801779a:	2b00      	cmp	r3, #0
 801779c:	d0f3      	beq.n	8017786 <_fflush_r+0xa>
 801779e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80177a0:	07d0      	lsls	r0, r2, #31
 80177a2:	d404      	bmi.n	80177ae <_fflush_r+0x32>
 80177a4:	0599      	lsls	r1, r3, #22
 80177a6:	d402      	bmi.n	80177ae <_fflush_r+0x32>
 80177a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80177aa:	f7ff fad8 	bl	8016d5e <__retarget_lock_acquire_recursive>
 80177ae:	4628      	mov	r0, r5
 80177b0:	4621      	mov	r1, r4
 80177b2:	f7ff ff5f 	bl	8017674 <__sflush_r>
 80177b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80177b8:	07da      	lsls	r2, r3, #31
 80177ba:	4605      	mov	r5, r0
 80177bc:	d4e4      	bmi.n	8017788 <_fflush_r+0xc>
 80177be:	89a3      	ldrh	r3, [r4, #12]
 80177c0:	059b      	lsls	r3, r3, #22
 80177c2:	d4e1      	bmi.n	8017788 <_fflush_r+0xc>
 80177c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80177c6:	f7ff facb 	bl	8016d60 <__retarget_lock_release_recursive>
 80177ca:	e7dd      	b.n	8017788 <_fflush_r+0xc>

080177cc <__swhatbuf_r>:
 80177cc:	b570      	push	{r4, r5, r6, lr}
 80177ce:	460c      	mov	r4, r1
 80177d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80177d4:	2900      	cmp	r1, #0
 80177d6:	b096      	sub	sp, #88	@ 0x58
 80177d8:	4615      	mov	r5, r2
 80177da:	461e      	mov	r6, r3
 80177dc:	da0d      	bge.n	80177fa <__swhatbuf_r+0x2e>
 80177de:	89a3      	ldrh	r3, [r4, #12]
 80177e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80177e4:	f04f 0100 	mov.w	r1, #0
 80177e8:	bf14      	ite	ne
 80177ea:	2340      	movne	r3, #64	@ 0x40
 80177ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80177f0:	2000      	movs	r0, #0
 80177f2:	6031      	str	r1, [r6, #0]
 80177f4:	602b      	str	r3, [r5, #0]
 80177f6:	b016      	add	sp, #88	@ 0x58
 80177f8:	bd70      	pop	{r4, r5, r6, pc}
 80177fa:	466a      	mov	r2, sp
 80177fc:	f000 f848 	bl	8017890 <_fstat_r>
 8017800:	2800      	cmp	r0, #0
 8017802:	dbec      	blt.n	80177de <__swhatbuf_r+0x12>
 8017804:	9901      	ldr	r1, [sp, #4]
 8017806:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801780a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801780e:	4259      	negs	r1, r3
 8017810:	4159      	adcs	r1, r3
 8017812:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017816:	e7eb      	b.n	80177f0 <__swhatbuf_r+0x24>

08017818 <__smakebuf_r>:
 8017818:	898b      	ldrh	r3, [r1, #12]
 801781a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801781c:	079d      	lsls	r5, r3, #30
 801781e:	4606      	mov	r6, r0
 8017820:	460c      	mov	r4, r1
 8017822:	d507      	bpl.n	8017834 <__smakebuf_r+0x1c>
 8017824:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017828:	6023      	str	r3, [r4, #0]
 801782a:	6123      	str	r3, [r4, #16]
 801782c:	2301      	movs	r3, #1
 801782e:	6163      	str	r3, [r4, #20]
 8017830:	b003      	add	sp, #12
 8017832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017834:	ab01      	add	r3, sp, #4
 8017836:	466a      	mov	r2, sp
 8017838:	f7ff ffc8 	bl	80177cc <__swhatbuf_r>
 801783c:	9f00      	ldr	r7, [sp, #0]
 801783e:	4605      	mov	r5, r0
 8017840:	4639      	mov	r1, r7
 8017842:	4630      	mov	r0, r6
 8017844:	f7fe fec4 	bl	80165d0 <_malloc_r>
 8017848:	b948      	cbnz	r0, 801785e <__smakebuf_r+0x46>
 801784a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801784e:	059a      	lsls	r2, r3, #22
 8017850:	d4ee      	bmi.n	8017830 <__smakebuf_r+0x18>
 8017852:	f023 0303 	bic.w	r3, r3, #3
 8017856:	f043 0302 	orr.w	r3, r3, #2
 801785a:	81a3      	strh	r3, [r4, #12]
 801785c:	e7e2      	b.n	8017824 <__smakebuf_r+0xc>
 801785e:	89a3      	ldrh	r3, [r4, #12]
 8017860:	6020      	str	r0, [r4, #0]
 8017862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017866:	81a3      	strh	r3, [r4, #12]
 8017868:	9b01      	ldr	r3, [sp, #4]
 801786a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801786e:	b15b      	cbz	r3, 8017888 <__smakebuf_r+0x70>
 8017870:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017874:	4630      	mov	r0, r6
 8017876:	f000 f81d 	bl	80178b4 <_isatty_r>
 801787a:	b128      	cbz	r0, 8017888 <__smakebuf_r+0x70>
 801787c:	89a3      	ldrh	r3, [r4, #12]
 801787e:	f023 0303 	bic.w	r3, r3, #3
 8017882:	f043 0301 	orr.w	r3, r3, #1
 8017886:	81a3      	strh	r3, [r4, #12]
 8017888:	89a3      	ldrh	r3, [r4, #12]
 801788a:	431d      	orrs	r5, r3
 801788c:	81a5      	strh	r5, [r4, #12]
 801788e:	e7cf      	b.n	8017830 <__smakebuf_r+0x18>

08017890 <_fstat_r>:
 8017890:	b538      	push	{r3, r4, r5, lr}
 8017892:	4d07      	ldr	r5, [pc, #28]	@ (80178b0 <_fstat_r+0x20>)
 8017894:	2300      	movs	r3, #0
 8017896:	4604      	mov	r4, r0
 8017898:	4608      	mov	r0, r1
 801789a:	4611      	mov	r1, r2
 801789c:	602b      	str	r3, [r5, #0]
 801789e:	f7e9 ff42 	bl	8001726 <_fstat>
 80178a2:	1c43      	adds	r3, r0, #1
 80178a4:	d102      	bne.n	80178ac <_fstat_r+0x1c>
 80178a6:	682b      	ldr	r3, [r5, #0]
 80178a8:	b103      	cbz	r3, 80178ac <_fstat_r+0x1c>
 80178aa:	6023      	str	r3, [r4, #0]
 80178ac:	bd38      	pop	{r3, r4, r5, pc}
 80178ae:	bf00      	nop
 80178b0:	20001310 	.word	0x20001310

080178b4 <_isatty_r>:
 80178b4:	b538      	push	{r3, r4, r5, lr}
 80178b6:	4d06      	ldr	r5, [pc, #24]	@ (80178d0 <_isatty_r+0x1c>)
 80178b8:	2300      	movs	r3, #0
 80178ba:	4604      	mov	r4, r0
 80178bc:	4608      	mov	r0, r1
 80178be:	602b      	str	r3, [r5, #0]
 80178c0:	f7e9 ff41 	bl	8001746 <_isatty>
 80178c4:	1c43      	adds	r3, r0, #1
 80178c6:	d102      	bne.n	80178ce <_isatty_r+0x1a>
 80178c8:	682b      	ldr	r3, [r5, #0]
 80178ca:	b103      	cbz	r3, 80178ce <_isatty_r+0x1a>
 80178cc:	6023      	str	r3, [r4, #0]
 80178ce:	bd38      	pop	{r3, r4, r5, pc}
 80178d0:	20001310 	.word	0x20001310

080178d4 <_realloc_r>:
 80178d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178d8:	4680      	mov	r8, r0
 80178da:	4615      	mov	r5, r2
 80178dc:	460c      	mov	r4, r1
 80178de:	b921      	cbnz	r1, 80178ea <_realloc_r+0x16>
 80178e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80178e4:	4611      	mov	r1, r2
 80178e6:	f7fe be73 	b.w	80165d0 <_malloc_r>
 80178ea:	b92a      	cbnz	r2, 80178f8 <_realloc_r+0x24>
 80178ec:	f7ff fa50 	bl	8016d90 <_free_r>
 80178f0:	2400      	movs	r4, #0
 80178f2:	4620      	mov	r0, r4
 80178f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178f8:	f000 f81a 	bl	8017930 <_malloc_usable_size_r>
 80178fc:	4285      	cmp	r5, r0
 80178fe:	4606      	mov	r6, r0
 8017900:	d802      	bhi.n	8017908 <_realloc_r+0x34>
 8017902:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017906:	d8f4      	bhi.n	80178f2 <_realloc_r+0x1e>
 8017908:	4629      	mov	r1, r5
 801790a:	4640      	mov	r0, r8
 801790c:	f7fe fe60 	bl	80165d0 <_malloc_r>
 8017910:	4607      	mov	r7, r0
 8017912:	2800      	cmp	r0, #0
 8017914:	d0ec      	beq.n	80178f0 <_realloc_r+0x1c>
 8017916:	42b5      	cmp	r5, r6
 8017918:	462a      	mov	r2, r5
 801791a:	4621      	mov	r1, r4
 801791c:	bf28      	it	cs
 801791e:	4632      	movcs	r2, r6
 8017920:	f7ff fa27 	bl	8016d72 <memcpy>
 8017924:	4621      	mov	r1, r4
 8017926:	4640      	mov	r0, r8
 8017928:	f7ff fa32 	bl	8016d90 <_free_r>
 801792c:	463c      	mov	r4, r7
 801792e:	e7e0      	b.n	80178f2 <_realloc_r+0x1e>

08017930 <_malloc_usable_size_r>:
 8017930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017934:	1f18      	subs	r0, r3, #4
 8017936:	2b00      	cmp	r3, #0
 8017938:	bfbc      	itt	lt
 801793a:	580b      	ldrlt	r3, [r1, r0]
 801793c:	18c0      	addlt	r0, r0, r3
 801793e:	4770      	bx	lr

08017940 <_init>:
 8017940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017942:	bf00      	nop
 8017944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017946:	bc08      	pop	{r3}
 8017948:	469e      	mov	lr, r3
 801794a:	4770      	bx	lr

0801794c <_fini>:
 801794c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801794e:	bf00      	nop
 8017950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017952:	bc08      	pop	{r3}
 8017954:	469e      	mov	lr, r3
 8017956:	4770      	bx	lr
